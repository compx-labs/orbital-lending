{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/Oracle/oracle.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AA+CG;;AAAA;AAAA;AAAA;;AAAA;AA/CH;;;AA+CG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAxCH;;;AAwCG;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAzBH;;;AAAA;;;AAyBG;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAZH;;;AAAA;;;AAYG;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAPH;;;AAAA;AAAA;;AAOG;;;AAAA;;AAAD;;;AAFA;AAIE;;AAAA;;AAGF;;;AAEgB;;AAThB;AAAA;AAAA;AAAA;AASS;AAAP;AAKkC;;AAAnB;AAHO;;AAAA;;AAAA;AAAA;AAAA;AAdkC;AAAA;;AAAA;AAoBxD;AAAA;;AAGF;;;AAEgB;;AAtBhB;AAAA;AAAA;AAAA;AAsBS;AAAP;AAzBwD;AAAA;;AAAA;AA4B1B;AAAA;AAAA;;AAA9B;AAKkC;;AAAnB;AAHO;;AAAA;;AAAA;AAAA;AAAA;AAKtB;;AAGF;;;AAtC0D;AAAA;;AAAA;AAyC1B;AAAA;AAAA;;AAA9B;AAC8B;AAAA;AAA9B;AAGF;;;AAEgB;;AA5ChB;AAAA;AAAA;AAAA;AA4CS;AAAP;AA/CwD;AAAA;;AAAA;AAkD1B;AAAA;AAAA;;AAA9B;AAEuB;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"admin_account\" \"prices\""
    },
    "28": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "30": {
      "op": "bz main_after_if_else@11",
      "stack_out": []
    },
    "33": {
      "op": "pushbytess 0xda53fefe 0x3baf88d1 0x82829c5d 0xac13e004 0x23ab9b6a // method \"createApplication(account)void\", method \"addTokenListing(uint64,uint64)void\", method \"updateTokenPrice(uint64,uint64)void\", method \"getTokenPrice(uint64)(uint64,uint64,uint64)\", method \"removeTokenListing(uint64)void\"",
      "defined_out": [
        "Method(addTokenListing(uint64,uint64)void)",
        "Method(createApplication(account)void)",
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))",
        "Method(removeTokenListing(uint64)void)",
        "Method(updateTokenPrice(uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account)void)",
        "Method(addTokenListing(uint64,uint64)void)",
        "Method(updateTokenPrice(uint64,uint64)void)",
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))",
        "Method(removeTokenListing(uint64)void)"
      ]
    },
    "60": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addTokenListing(uint64,uint64)void)",
        "Method(createApplication(account)void)",
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))",
        "Method(removeTokenListing(uint64)void)",
        "Method(updateTokenPrice(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account)void)",
        "Method(addTokenListing(uint64,uint64)void)",
        "Method(updateTokenPrice(uint64,uint64)void)",
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))",
        "Method(removeTokenListing(uint64)void)",
        "tmp%2#0"
      ]
    },
    "63": {
      "op": "match main_createApplication_route@3 main_addTokenListing_route@4 main_updateTokenPrice_route@5 main_getTokenPrice_route@6 main_removeTokenListing_route@7",
      "stack_out": []
    },
    "75": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "76": {
      "op": "return",
      "stack_out": []
    },
    "77": {
      "block": "main_removeTokenListing_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "79": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "80": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "81": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "83": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "84": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "87": {
      "callsub": "smart_contracts/Oracle/oracle.algo.ts::Oracle.removeTokenListing",
      "op": "callsub removeTokenListing",
      "stack_out": []
    },
    "90": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "91": {
      "op": "return",
      "stack_out": []
    },
    "92": {
      "block": "main_getTokenPrice_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "94": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "95": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "96": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "98": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "99": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "102": {
      "callsub": "smart_contracts/Oracle/oracle.algo.ts::Oracle.getTokenPrice",
      "op": "callsub getTokenPrice",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "105": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "111": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "112": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "113": {
      "op": "log",
      "stack_out": []
    },
    "114": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "115": {
      "op": "return",
      "stack_out": []
    },
    "116": {
      "block": "main_updateTokenPrice_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "118": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "119": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "120": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "122": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "123": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "126": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "129": {
      "callsub": "smart_contracts/Oracle/oracle.algo.ts::Oracle.updateTokenPrice",
      "op": "callsub updateTokenPrice",
      "stack_out": []
    },
    "132": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "133": {
      "op": "return",
      "stack_out": []
    },
    "134": {
      "block": "main_addTokenListing_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "136": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "137": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "138": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "140": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "141": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "144": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "147": {
      "callsub": "smart_contracts/Oracle/oracle.algo.ts::Oracle.addTokenListing",
      "op": "callsub addTokenListing",
      "stack_out": []
    },
    "150": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "151": {
      "op": "return",
      "stack_out": []
    },
    "152": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "154": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "155": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "156": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "158": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "159": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "160": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "163": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "164": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "166": {
      "callsub": "smart_contracts/Oracle/oracle.algo.ts::Oracle.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "169": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "170": {
      "op": "return",
      "stack_out": []
    },
    "171": {
      "subroutine": "smart_contracts/Oracle/oracle.algo.ts::Oracle.createApplication",
      "params": {
        "admin#0": "bytes"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "174": {
      "op": "bytec_0 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\""
      ],
      "stack_out": [
        "\"admin_account\""
      ]
    },
    "175": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ]
    },
    "177": {
      "op": "app_global_put",
      "stack_out": []
    },
    "178": {
      "retsub": true,
      "op": "retsub"
    },
    "179": {
      "subroutine": "smart_contracts/Oracle/oracle.algo.ts::Oracle.addTokenListing",
      "params": {
        "assetId#0": "bytes",
        "initialPrice#0": "bytes"
      },
      "block": "addTokenListing",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "182": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "184": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "185": {
      "op": "bytec_0 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "186": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "187": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "188": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "189": {
      "op": "assert",
      "stack_out": []
    },
    "190": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "192": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "193": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetId#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "assetId#0 (copy)"
      ]
    },
    "195": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)",
        "initialPrice#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "assetId#0 (copy)",
        "initialPrice#0 (copy)"
      ]
    },
    "197": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "198": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "199": {
      "op": "concat",
      "defined_out": [
        "newTokenPrice#0"
      ],
      "stack_out": [
        "newTokenPrice#0"
      ]
    },
    "200": {
      "op": "bytec_1 // \"prices\"",
      "defined_out": [
        "\"prices\"",
        "newTokenPrice#0"
      ],
      "stack_out": [
        "newTokenPrice#0",
        "\"prices\""
      ]
    },
    "201": {
      "op": "frame_dig -2",
      "stack_out": [
        "newTokenPrice#0",
        "\"prices\"",
        "assetId#0 (copy)"
      ]
    },
    "203": {
      "op": "concat",
      "defined_out": [
        "newTokenPrice#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "newTokenPrice#0",
        "tmp%2#0"
      ]
    },
    "204": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "newTokenPrice#0"
      ]
    },
    "205": {
      "op": "box_put",
      "stack_out": []
    },
    "206": {
      "retsub": true,
      "op": "retsub"
    },
    "207": {
      "subroutine": "smart_contracts/Oracle/oracle.algo.ts::Oracle.updateTokenPrice",
      "params": {
        "assetId#0": "bytes",
        "newPrice#0": "bytes"
      },
      "block": "updateTokenPrice",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "210": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "212": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "213": {
      "op": "bytec_0 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "214": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "215": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "216": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "217": {
      "op": "assert",
      "stack_out": []
    },
    "218": {
      "op": "bytec_1 // \"prices\"",
      "defined_out": [
        "\"prices\""
      ],
      "stack_out": [
        "\"prices\""
      ]
    },
    "219": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"prices\"",
        "assetId#0 (copy)"
      ],
      "stack_out": [
        "\"prices\"",
        "assetId#0 (copy)"
      ]
    },
    "221": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "222": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "223": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "224": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%1#0"
      ]
    },
    "226": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "227": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%2#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "to_encode%0#0"
      ]
    },
    "229": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "230": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "val_as_bytes%0#0",
        "assetId#0 (copy)"
      ]
    },
    "232": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)",
        "newPrice#0 (copy)",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "val_as_bytes%0#0",
        "assetId#0 (copy)",
        "newPrice#0 (copy)"
      ]
    },
    "234": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "235": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "236": {
      "op": "concat",
      "defined_out": [
        "newTokenPrice#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "newTokenPrice#0"
      ]
    },
    "237": {
      "op": "box_put",
      "stack_out": []
    },
    "238": {
      "retsub": true,
      "op": "retsub"
    },
    "239": {
      "subroutine": "smart_contracts/Oracle/oracle.algo.ts::Oracle.getTokenPrice",
      "params": {
        "assetId#0": "bytes"
      },
      "block": "getTokenPrice",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "242": {
      "op": "bytec_1 // \"prices\"",
      "defined_out": [
        "\"prices\""
      ],
      "stack_out": [
        "\"prices\""
      ]
    },
    "243": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"prices\"",
        "assetId#0 (copy)"
      ],
      "stack_out": [
        "\"prices\"",
        "assetId#0 (copy)"
      ]
    },
    "245": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "246": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "247": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "248": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "250": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "251": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "252": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "253": {
      "retsub": true,
      "op": "retsub"
    },
    "254": {
      "subroutine": "smart_contracts/Oracle/oracle.algo.ts::Oracle.removeTokenListing",
      "params": {
        "assetId#0": "bytes"
      },
      "block": "removeTokenListing",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "257": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "259": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "260": {
      "op": "bytec_0 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "261": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "262": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "263": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "264": {
      "op": "assert",
      "stack_out": []
    },
    "265": {
      "op": "bytec_1 // \"prices\"",
      "defined_out": [
        "\"prices\""
      ],
      "stack_out": [
        "\"prices\""
      ]
    },
    "266": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"prices\"",
        "assetId#0 (copy)"
      ],
      "stack_out": [
        "\"prices\"",
        "assetId#0 (copy)"
      ]
    },
    "268": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "269": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "270": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "271": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%1#0"
      ]
    },
    "273": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "274": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "275": {
      "op": "pop",
      "stack_out": []
    },
    "276": {
      "retsub": true,
      "op": "retsub"
    }
  }
}