{
    "hints": {
        "createApplication(account,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setContractState(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setMigrationAdmin(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "generateLSTToken(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "optInToLST(uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "configureLSTToken(axfer,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getOraclePrice(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addNewCollateralType(uint64,uint64,pay,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "depositAlgo(pay,uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdrawDeposit(axfer,uint64,uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "borrow(axfer,uint64,uint64,uint64,uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addLoanRecordExternal(uint64,uint64,account,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "accrueLoanInterest(account,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "current_apr_bps()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "LoanRecord",
                    "elements": [
                        [
                            "borrowerAddress",
                            "address"
                        ],
                        [
                            "collateralTokenId",
                            "uint64"
                        ],
                        [
                            "collateralAmount",
                            "uint64"
                        ],
                        [
                            "lastDebtChange",
                            "(uint64,uint8,uint64)"
                        ],
                        [
                            "borrowedTokenId",
                            "uint64"
                        ],
                        [
                            "principal",
                            "uint64"
                        ],
                        [
                            "userIndexWad",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "repayLoanAlgo(pay,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdrawPlatformFees(account,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buyoutSplitAlgo(account,account,axfer,pay,uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "maxWithdrawableCollateralLST(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdrawCollateral(uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getCirculatingLST()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTotalDeposits()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getAcceptedCollateralsCount()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "liquidatePartialAlgo(account,pay,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "getLoanStatusResult",
                    "elements": [
                        [
                            "outstandingDebt",
                            "uint64"
                        ],
                        [
                            "collateralValueUSD",
                            "uint64"
                        ],
                        [
                            "collateralAmount",
                            "uint64"
                        ],
                        [
                            "collateralRatioBps",
                            "uint64"
                        ],
                        [
                            "liquidationThresholdBps",
                            "uint64"
                        ],
                        [
                            "eligibleForLiquidation",
                            "bool"
                        ],
                        [
                            "eligibleForBuyout",
                            "bool"
                        ]
                    ]
                }
            }
        },
        "gas()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "calculateCollateralValueUSD(uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pickupAlgoRewards()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "migrateCollateralTokenId(uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "MigrationSnapshot",
                    "elements": [
                        [
                            "total_deposits",
                            "uint64"
                        ],
                        [
                            "total_borrows",
                            "uint64"
                        ],
                        [
                            "circulating_lst",
                            "uint64"
                        ],
                        [
                            "cash_on_hand",
                            "uint64"
                        ],
                        [
                            "borrowIndexWad",
                            "uint64"
                        ],
                        [
                            "base_token_id",
                            "uint64"
                        ],
                        [
                            "commission_percentage",
                            "uint64"
                        ],
                        [
                            "lst_token_id",
                            "uint64"
                        ],
                        [
                            "fee_pool",
                            "uint64"
                        ],
                        [
                            "accepted_collaterals_count",
                            "uint64"
                        ],
                        [
                            "buyout_token_id",
                            "uint64"
                        ],
                        [
                            "liq_bonus_bps",
                            "uint64"
                        ],
                        [
                            "current_accumulated_commission",
                            "uint64"
                        ],
                        [
                            "total_commission_earned",
                            "uint64"
                        ],
                        [
                            "total_additional_rewards",
                            "uint64"
                        ],
                        [
                            "active_loan_records",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "snapshot": {
                    "name": "MigrationSnapshot",
                    "elements": [
                        [
                            "total_deposits",
                            "uint64"
                        ],
                        [
                            "total_borrows",
                            "uint64"
                        ],
                        [
                            "circulating_lst",
                            "uint64"
                        ],
                        [
                            "cash_on_hand",
                            "uint64"
                        ],
                        [
                            "borrowIndexWad",
                            "uint64"
                        ],
                        [
                            "base_token_id",
                            "uint64"
                        ],
                        [
                            "commission_percentage",
                            "uint64"
                        ],
                        [
                            "lst_token_id",
                            "uint64"
                        ],
                        [
                            "fee_pool",
                            "uint64"
                        ],
                        [
                            "accepted_collaterals_count",
                            "uint64"
                        ],
                        [
                            "buyout_token_id",
                            "uint64"
                        ],
                        [
                            "liq_bonus_bps",
                            "uint64"
                        ],
                        [
                            "current_accumulated_commission",
                            "uint64"
                        ],
                        [
                            "total_commission_earned",
                            "uint64"
                        ],
                        [
                            "total_additional_rewards",
                            "uint64"
                        ],
                        [
                            "active_loan_records",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "goOffline()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 7,
            "num_uints": 34
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "accepted_collaterals_count": {
                    "type": "uint64",
                    "key": "accepted_collaterals_count",
                    "descr": "Count of different collateral types accepted by the protocol"
                },
                "active_loan_records": {
                    "type": "uint64",
                    "key": "active_loan_records",
                    "descr": "Total number of active loans in the system"
                },
                "admin_account": {
                    "type": "bytes",
                    "key": "admin_account",
                    "descr": "Administrative account with privileged access to protocol functions"
                },
                "base_bps": {
                    "type": "uint64",
                    "key": "base_bps",
                    "descr": "Minimum APR at 0% utilization (basis points per year)."
                },
                "base_token_id": {
                    "type": "bytes",
                    "key": "base_token_id",
                    "descr": "The main lending token used for deposits and borrowing (0 for ALGO)"
                },
                "borrow_index_wad": {
                    "type": "uint64",
                    "key": "borrow_index_wad",
                    "descr": "Multiplicative borrow index (scaled by INDEX_SCALE). Starts at INDEX_SCALE"
                },
                "buyout_token_id": {
                    "type": "bytes",
                    "key": "buyout_token_id",
                    "descr": "Total number of active loans in the system"
                },
                "cash_on_hand": {
                    "type": "uint64",
                    "key": "cash_on_hand"
                },
                "circulating_lst": {
                    "type": "uint64",
                    "key": "circulating_lst",
                    "descr": "Total LST tokens currently in circulation (represents depositor claims)"
                },
                "commission_percentage": {
                    "type": "uint64",
                    "key": "commission_percentage"
                },
                "contract_state": {
                    "type": "bytes",
                    "key": "contract_state"
                },
                "contract_version": {
                    "type": "bytes",
                    "key": "contract_version"
                },
                "current_accumulated_commission": {
                    "type": "uint64",
                    "key": "current_accumulated_commission"
                },
                "ema_alpha_bps": {
                    "type": "uint64",
                    "key": "ema_alpha_bps",
                    "descr": "(Optional) Utilization EMA weight in bps (0..10_000; 0 disables smoothing)."
                },
                "fee_pool": {
                    "type": "uint64",
                    "key": "fee_pool",
                    "descr": "Protocol fee accumulation pool (admin withdrawable)"
                },
                "flux_oracle_app": {
                    "type": "uint64",
                    "key": "flux_oracle_app",
                    "descr": "External oracle application for user flux tier feeds"
                },
                "kink_norm_bps": {
                    "type": "uint64",
                    "key": "kink_norm_bps",
                    "descr": "Kink point on normalized utilization (0..10_000 across [0..util_cap])."
                },
                "last_accrual_ts": {
                    "type": "uint64",
                    "key": "last_accrual_ts",
                    "descr": "Timestamp (ledger seconds) at which borrow_index_wad was last advanced"
                },
                "last_apr_bps": {
                    "type": "uint64",
                    "key": "last_apr_bps",
                    "descr": "APR (in bps) that applied during [last_accrual_ts, now) before recompute"
                },
                "liq_bonus_bps": {
                    "type": "uint64",
                    "key": "liq_bonus_bps",
                    "descr": "Liquidation bonus in bps (e.g., 500 = 5% bonus to liquidators)"
                },
                "liq_threshold_bps": {
                    "type": "uint64",
                    "key": "liq_threshold_bps",
                    "descr": "Liquidation threshold (e.g., 8500 = 85% - liquidate when CR falls below)"
                },
                "lst_token_id": {
                    "type": "bytes",
                    "key": "lst_token_id",
                    "descr": "LST (Liquidity Staking Token) representing depositor shares in the pool"
                },
                "ltv_bps": {
                    "type": "uint64",
                    "key": "ltv_bps",
                    "descr": "Loan-to-Value ratio (e.g., 7500 = 75% max borrowing against collateral)"
                },
                "max_apr_bps": {
                    "type": "uint64",
                    "key": "max_apr_bps",
                    "descr": "(Optional) Absolute APR ceiling in bps (0 = no cap)."
                },
                "max_apr_step_bps": {
                    "type": "uint64",
                    "key": "max_apr_step_bps",
                    "descr": "(Optional) Max APR change per accrual step in bps (0 = no limit)."
                },
                "migration_admin": {
                    "type": "bytes",
                    "key": "migration_admin",
                    "descr": "Dedicated account that temporarily receives balances during migration"
                },
                "oracle_app": {
                    "type": "uint64",
                    "key": "oracle_app",
                    "descr": "External oracle application for asset price feeds"
                },
                "origination_fee_bps": {
                    "type": "uint64",
                    "key": "origination_fee_bps",
                    "descr": "One-time fee charged on loan origination (e.g., 100 = 1%)"
                },
                "power_gamma_q16": {
                    "type": "uint64",
                    "key": "power_gamma_q16",
                    "descr": "(Optional) Power-curve exponent \u03b3 in Q16.16 fixed-point."
                },
                "prev_apr_bps": {
                    "type": "uint64",
                    "key": "prev_apr_bps",
                    "descr": "(Optional, mutable) Last applied APR in bps (for step limiting)."
                },
                "protocol_share_bps": {
                    "type": "uint64",
                    "key": "protocol_share_bps",
                    "descr": "Protocol's share of interest income (e.g., 2000 = 20%)"
                },
                "rate_model_type": {
                    "type": "uint64",
                    "key": "rate_model_type",
                    "descr": "(Optional) Rate model selector (e.g., 0=kinked, 1=linear, 2=power, 3=asymptote)."
                },
                "scarcity_K_bps": {
                    "type": "uint64",
                    "key": "scarcity_K_bps",
                    "descr": "(Optional) Strength parameter for asymptotic/scarcity escalator (bps-scaled)."
                },
                "slope1_bps": {
                    "type": "uint64",
                    "key": "slope1_bps",
                    "descr": "APR increase from 0 \u2192 kink (added to base) over the normalized range."
                },
                "slope2_bps": {
                    "type": "uint64",
                    "key": "slope2_bps",
                    "descr": "APR increase from kink \u2192 cap (added after kink) over the normalized range."
                },
                "total_additional_rewards": {
                    "type": "uint64",
                    "key": "total_additional_rewards"
                },
                "total_borrows": {
                    "type": "uint64",
                    "key": "total_borrows",
                    "descr": "Total outstanding borrower principal + accrued interest (debt)"
                },
                "total_commission_earned": {
                    "type": "uint64",
                    "key": "total_commission_earned"
                },
                "total_deposits": {
                    "type": "uint64",
                    "key": "total_deposits",
                    "descr": "Total underlying assets deposited in the protocol"
                },
                "util_cap_bps": {
                    "type": "uint64",
                    "key": "util_cap_bps",
                    "descr": "Hard utilization cap in bps (e.g., 8000 = 80% of deposits may be borrowed)."
                },
                "util_ema_bps": {
                    "type": "uint64",
                    "key": "util_ema_bps",
                    "descr": "(Optional, mutable) Stored EMA of normalized utilization in bps."
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "orbital-lending",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "account",
                        "name": "admin",
                        "desc": "- The administrative account that will have privileged access"
                    },
                    {
                        "type": "uint64",
                        "name": "baseTokenId",
                        "desc": "- The asset ID of the base lending token (0 for ALGO)"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Creates the lending application contract with initial configuration"
            },
            {
                "name": "initApplication",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbrTxn"
                    },
                    {
                        "type": "uint64",
                        "name": "ltv_bps"
                    },
                    {
                        "type": "uint64",
                        "name": "liq_threshold_bps"
                    },
                    {
                        "type": "uint64",
                        "name": "liq_bonus_bps"
                    },
                    {
                        "type": "uint64",
                        "name": "origination_fee_bps"
                    },
                    {
                        "type": "uint64",
                        "name": "protocol_share_bps"
                    },
                    {
                        "type": "application",
                        "name": "oracle_app_id"
                    },
                    {
                        "type": "uint64",
                        "name": "buyout_token_id"
                    },
                    {
                        "type": "uint64",
                        "name": "additional_rewards_commission_percentage"
                    },
                    {
                        "type": "application",
                        "name": "flux_oracle_app_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setRateParams",
                "args": [
                    {
                        "type": "uint64",
                        "name": "base_bps",
                        "desc": "- Base APR in basis points (e.g., 500 = 5%)"
                    },
                    {
                        "type": "uint64",
                        "name": "util_cap_bps",
                        "desc": "- Utilization cap in basis points (e.g., 8000 = 80%)"
                    },
                    {
                        "type": "uint64",
                        "name": "kink_norm_bps",
                        "desc": "- Kink normalization point in basis points (e.g., 5000 = 50%)"
                    },
                    {
                        "type": "uint64",
                        "name": "slope1_bps",
                        "desc": "- Slope to kink in basis points (e.g., 1000 = 10%)"
                    },
                    {
                        "type": "uint64",
                        "name": "slope2_bps",
                        "desc": "- Slope after kink in basis points (e.g., 2000 = 20%)"
                    },
                    {
                        "type": "uint64",
                        "name": "max_apr_bps",
                        "desc": "- Maximum APR cap in basis points (0 = no cap)"
                    },
                    {
                        "type": "uint64",
                        "name": "max_apr_step_bps",
                        "desc": "- Maximum APR step in basis points (0 = no limit)"
                    },
                    {
                        "type": "uint64",
                        "name": "ema_alpha_bps",
                        "desc": "- EMA smoothing factor in basis points (0 = no smoothing)"
                    },
                    {
                        "type": "uint64",
                        "name": "power_gamma_q16",
                        "desc": "- Power curve exponent in Q16.16 fixed-point (0 = no power curve)"
                    },
                    {
                        "type": "uint64",
                        "name": "scarcity_K_bps",
                        "desc": "- Scarcity parameter in basis points (0 = no scarcity)"
                    },
                    {
                        "type": "uint64",
                        "name": "rate_model_type",
                        "desc": "- Rate model type (0 = kinked, 1 = linear, 2 = power, 3 = asymptote)"
                    },
                    {
                        "type": "uint64",
                        "name": "liq_bonus_bps"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the core lending parameters for the protocol"
            },
            {
                "name": "setContractState",
                "args": [
                    {
                        "type": "uint64",
                        "name": "state"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setMigrationAdmin",
                "args": [
                    {
                        "type": "account",
                        "name": "migrationAdmin",
                        "desc": "Account that will temporarily custody balances while migrating."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets or updates the migration administrator account used during contract upgrades."
            },
            {
                "name": "generateLSTToken",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbrTxn",
                        "desc": "Payment transaction covering asset-creation minimum balance."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Generates a new LST (Liquidity Staking Token) for the base lending token."
            },
            {
                "name": "optInToLST",
                "args": [
                    {
                        "type": "uint64",
                        "name": "lstAssetId",
                        "desc": "Asset ID of the pre-existing LST contract."
                    },
                    {
                        "type": "pay",
                        "name": "mbrTxn",
                        "desc": "Payment covering the opt-in minimum balance requirement."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Opts into an externally created LST token instead of minting a new one."
            },
            {
                "name": "configureLSTToken",
                "args": [
                    {
                        "type": "axfer",
                        "name": "axferTxn",
                        "desc": "Asset transfer from the admin delivering LST units to the app."
                    },
                    {
                        "type": "uint64",
                        "name": "circulating_lst",
                        "desc": "Initial circulating amount to record on-chain."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Configures the LST token by seeding the initial circulating supply."
            },
            {
                "name": "getOraclePrice",
                "args": [
                    {
                        "type": "uint64",
                        "name": "tokenId",
                        "desc": "- Asset ID of the token to get price for"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Current price of the token from oracle (in USD micro-units)"
                },
                "desc": "Retrieves current price for a token from the configured oracle"
            },
            {
                "name": "addNewCollateralType",
                "args": [
                    {
                        "type": "uint64",
                        "name": "collateralTokenId",
                        "desc": "- Asset ID of the new collateral type to accept"
                    },
                    {
                        "type": "uint64",
                        "name": "collateralBaseTokenId"
                    },
                    {
                        "type": "pay",
                        "name": "mbrTxn",
                        "desc": "- Payment transaction covering storage minimum balance requirements"
                    },
                    {
                        "type": "uint64",
                        "name": "originatingAppId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Adds a new asset type as accepted collateral for borrowing"
            },
            {
                "name": "depositAlgo",
                "args": [
                    {
                        "type": "pay",
                        "name": "depositTxn",
                        "desc": "- Payment transaction depositing ALGO to the contract"
                    },
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "- Amount of ALGO being deposited (in microALGOs)"
                    },
                    {
                        "type": "pay",
                        "name": "mbrTxn",
                        "desc": "- Payment transaction covering transaction fees"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Deposits ALGO into the lending pool and receives LST tokens in return"
            },
            {
                "name": "withdrawDeposit",
                "args": [
                    {
                        "type": "axfer",
                        "name": "assetTransferTxn",
                        "desc": "- Asset transfer transaction sending LST tokens to the contract"
                    },
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "- Amount of LST tokens to burn for withdrawal"
                    },
                    {
                        "type": "uint64",
                        "name": "lstAppId",
                        "desc": "- Application ID to determine exchange rate (use current app ID for local rate)"
                    },
                    {
                        "type": "pay",
                        "name": "mbrTxn",
                        "desc": "- Payment transaction covering transaction fees"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraws deposited assets by burning LST tokens"
            },
            {
                "name": "borrow",
                "args": [
                    {
                        "type": "axfer",
                        "name": "assetTransferTxn",
                        "desc": "- Asset transfer transaction depositing collateral to the contract"
                    },
                    {
                        "type": "uint64",
                        "name": "requestedLoanAmount",
                        "desc": "- Amount of base tokens requested for borrowing"
                    },
                    {
                        "type": "uint64",
                        "name": "collateralAmount",
                        "desc": "- Amount of collateral being deposited"
                    },
                    {
                        "type": "uint64",
                        "name": "lstApp",
                        "desc": "- Application ID for LST exchange rate calculation"
                    },
                    {
                        "type": "uint64",
                        "name": "collateralTokenId",
                        "desc": "- Asset ID of the collateral being deposited"
                    },
                    {
                        "type": "pay",
                        "name": "mbrTxn",
                        "desc": "- Payment transaction covering transaction fees"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Borrows base assets against collateral with interest and fees"
            },
            {
                "name": "addLoanRecordExternal",
                "args": [
                    {
                        "type": "uint64",
                        "name": "disbursement"
                    },
                    {
                        "type": "uint64",
                        "name": "collateralTokenId"
                    },
                    {
                        "type": "account",
                        "name": "borrowerAddress"
                    },
                    {
                        "type": "uint64",
                        "name": "collateralAmount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "accrueLoanInterest",
                "args": [
                    {
                        "type": "account",
                        "name": "debtor"
                    },
                    {
                        "type": "account",
                        "name": "templateReserveAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "current_apr_bps",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "APR value used for subsequent accrual slices."
                },
                "desc": "Computes the current borrow APR in basis points, applying smoothing and clamps."
            },
            {
                "name": "getLoanRecord",
                "args": [
                    {
                        "type": "account",
                        "name": "borrowerAddress",
                        "desc": "Borrower whose record should be returned."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)",
                    "desc": "Loan record snapshot stored in the box map."
                },
                "desc": "Fetches the stored loan record for a borrower (without accrual)."
            },
            {
                "name": "repayLoanAlgo",
                "args": [
                    {
                        "type": "pay",
                        "name": "paymentTxn",
                        "desc": "- Payment transaction sending ALGO repayment to contract"
                    },
                    {
                        "type": "uint64",
                        "name": "repaymentAmount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Repays a loan using ALGO and optionally releases collateral"
            },
            {
                "name": "withdrawPlatformFees",
                "args": [
                    {
                        "type": "account",
                        "name": "paymentReceiver",
                        "desc": "Address receiving the payout."
                    },
                    {
                        "type": "pay",
                        "name": "feeTxn",
                        "desc": "Separate payment covering inner-transaction fees."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraws accumulated protocol fees and commission to the admin-controlled account."
            },
            {
                "name": "buyoutSplitAlgo",
                "args": [
                    {
                        "type": "account",
                        "name": "buyer",
                        "desc": "- Account that will receive the collateral"
                    },
                    {
                        "type": "account",
                        "name": "debtor",
                        "desc": "- Account whose loan is being bought out"
                    },
                    {
                        "type": "axfer",
                        "name": "premiumAxferTxn",
                        "desc": "- Asset transfer transaction with buyout token payment (xUSD)"
                    },
                    {
                        "type": "pay",
                        "name": "repayPayTxn",
                        "desc": "- ALGO payment transaction with base token repayment"
                    },
                    {
                        "type": "uint64",
                        "name": "lstAppId",
                        "desc": "- The LST app backing the collateral"
                    },
                    {
                        "type": "pay",
                        "name": "mbrTxn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Purchases a borrower's collateral at a premium using ALGO payment"
            },
            {
                "name": "maxWithdrawableCollateralLST",
                "args": [
                    {
                        "type": "uint64",
                        "name": "lstAppId",
                        "desc": "External LST app backing the collateral."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Maximum withdrawable LST balance for the borrower."
                },
                "desc": "Computes how much LST collateral the caller can withdraw using live market data."
            },
            {
                "name": "withdrawCollateral",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amountLST",
                        "desc": "Amount of LST being withdrawn."
                    },
                    {
                        "type": "uint64",
                        "name": "collateralTokenId",
                        "desc": "Asset ID of the collateral LST."
                    },
                    {
                        "type": "uint64",
                        "name": "lstAppId",
                        "desc": "LST application ID used for exchange-rate validation."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Allows borrowers to withdraw a portion of their collateral within safety limits."
            },
            {
                "name": "getCirculatingLST",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Total LST tokens representing all depositor claims"
                },
                "desc": "Returns the current amount of LST tokens in circulation"
            },
            {
                "name": "getTotalDeposits",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Total underlying assets available for lending"
                },
                "desc": "Returns the total amount of base assets deposited in the protocol"
            },
            {
                "name": "getAcceptedCollateralsCount",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Count of registered collateral asset types"
                },
                "desc": "Returns the number of different collateral types accepted by the protocol"
            },
            {
                "name": "liquidatePartialAlgo",
                "args": [
                    {
                        "type": "account",
                        "name": "debtor",
                        "desc": "- Account whose loan is being liquidated"
                    },
                    {
                        "type": "pay",
                        "name": "repayPay"
                    },
                    {
                        "type": "uint64",
                        "name": "repayBaseAmount"
                    },
                    {
                        "type": "uint64",
                        "name": "lstAppId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Liquidates an undercollateralized loan using ALGO payment"
            },
            {
                "name": "getLoanStatus",
                "args": [
                    {
                        "type": "account",
                        "name": "borrower",
                        "desc": "- Account address to get loan status for"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64,bool,bool)",
                    "desc": "Object containing debt amount, collateral value, ratios, and liquidation eligibility"
                },
                "desc": "Retrieves comprehensive status information for a borrower's loan"
            },
            {
                "name": "gas",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "No-op method kept for compatibility with interfaces that expect a gas entry point."
            },
            {
                "name": "calculateCollateralValueUSD",
                "args": [
                    {
                        "type": "uint64",
                        "name": "collateralTokenId",
                        "desc": "LST asset representing the collateral."
                    },
                    {
                        "type": "uint64",
                        "name": "collateralAmount",
                        "desc": "Amount of LST units held."
                    },
                    {
                        "type": "uint64",
                        "name": "lstApp",
                        "desc": "LST application ID supplying exchange-rate data."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Collateral value denominated in USD micro-units."
                },
                "desc": "Calculates the USD value of a collateral position using the LST exchange rate and oracle price."
            },
            {
                "name": "pickupAlgoRewards",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Harvests newly accrued consensus rewards for ALGO-based markets."
            },
            {
                "name": "migrateCollateralTokenId",
                "args": [
                    {
                        "type": "uint64",
                        "name": "collateralTokenId"
                    },
                    {
                        "type": "pay",
                        "name": "mbrTxn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "migrateContract",
                "args": [
                    {
                        "type": "pay",
                        "name": "feeTxn",
                        "desc": "Payment covering all inner-transaction fees required for the sweep."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
                },
                "desc": "Initiates migration by sweeping balances from this contract to the migration administrator."
            },
            {
                "name": "acceptMigrationAlgoContract",
                "args": [
                    {
                        "type": "axfer",
                        "name": "lstTransferTxn",
                        "desc": "LST asset transfer from the migration admin to this contract."
                    },
                    {
                        "type": "pay",
                        "name": "algoTxn"
                    },
                    {
                        "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
                        "name": "snapshot",
                        "desc": "Snapshot of accounting fields that should be set on the new deployment."
                    },
                    {
                        "type": "account",
                        "name": "migrationAdmin",
                        "desc": "Account expected to have initiated the migration."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Finalises migration by importing balances and restoring accounting on the new contract."
            },
            {
                "name": "goOnline",
                "args": [
                    {
                        "type": "pay",
                        "name": "feePayment",
                        "desc": "Payment covering the go-online fee that accompanies the keyreg."
                    },
                    {
                        "type": "byte[]",
                        "name": "votePK",
                        "desc": "Voting public key for participation."
                    },
                    {
                        "type": "byte[]",
                        "name": "selectionPK",
                        "desc": "VRF selection key."
                    },
                    {
                        "type": "byte[]",
                        "name": "stateProofPK",
                        "desc": "State proof key for light-client support."
                    },
                    {
                        "type": "uint64",
                        "name": "voteFirst",
                        "desc": "First round for which the key is valid."
                    },
                    {
                        "type": "uint64",
                        "name": "voteLast",
                        "desc": "Last round for which the key is valid."
                    },
                    {
                        "type": "uint64",
                        "name": "voteKeyDilution",
                        "desc": "Dilution factor for the participation key."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Registers the application account as an Algorand consensus participant."
            },
            {
                "name": "goOffline",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Unregisters the application account from consensus participation."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}