#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 10000 4 1000 1000000
    bytecblock "base_token_id" "total_deposits" "active_loan_records" "admin_account" 0x151f7c75 "loan_record" "circulating_lst" "total_borrows" "liq_threshold_bps" "fee_pool" "lst_token_id" "accepted_collaterals" "max_apr_bps" "prev_apr_bps" "base_bps" 0x00 "accepted_collaterals_count" 0x09ef525f 0xae859f3b "util_cap_bps" "rate_model_type" "kink_norm_bps" "slope1_bps" "slope2_bps" "ema_alpha_bps" "max_apr_step_bps" "util_ema_bps" "params_update_nonce" "ltv_bps" "origination_fee_bps" "protocol_share_bps" "oracle_app" "borrow_gate_enabled" "power_gamma_q16" "scarcity_K_bps" "last_scaled_down_disbursement" "last_max_borrow" "last_requested_loan" "debug_diff" "params_updated_at"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn NumAppArgs
    bz main_after_if_else@33
    pushbytess 0x3b01665e 0x9de42732 0x6ca100cd 0x17c33662 0x5efce39a 0x5cac25a9 // method "createApplication(account,uint64)void", method "initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void", method "setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void", method "generateLSTToken(pay)void", method "optInToLST(uint64,pay)void", method "configureLSTToken(axfer,uint64)void"
    bytec 17 // method "getCirculatingLST()uint64"
    bytec 18 // method "getTotalDeposits()uint64"
    pushbytess 0x6c6337c0 0xe596ac73 0x53b5111f 0x72c5c57b 0xbae4c238 0x3e41a49b 0x15a5b25e 0x8553cffa 0xb4a74766 0xae99f45b 0xbe1256e6 0xb95560e0 0x96da416e 0x1dffadde 0xf0eda6a8 0x836dbb73 0xf16507ce 0xdaa7f7f2 0x3172ca9d // method "getAcceptedCollateralsCount()uint64", method "getOraclePrice(uint64)uint64", method "addNewCollateralType(uint64,pay)void", method "depositASA(axfer,uint64,pay)void", method "depositAlgo(pay,uint64,pay)void", method "withdrawDeposit(axfer,uint64,uint64,pay)void", method "borrow(axfer,uint64,uint64,uint64,uint64,pay)void", method "accrueLoanInterest(account,account)void", method "current_apr_bps()uint64", method "getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)", method "repayLoanASA(axfer,uint64,account)void", method "repayLoanAlgo(pay,uint64,account)void", method "withdrawFees()void", method "buyoutASA(account,account,axfer)void", method "buyoutAlgo(account,account,pay)void", method "liquidateASA(account,axfer)void", method "liquidateAlgo(account,pay)void", method "getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)", method "gas()void"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_initApplication_route@4 main_setRateParams_route@5 main_generateLSTToken_route@6 main_optInToLST_route@7 main_configureLSTToken_route@8 main_getCirculatingLST_route@9 main_getTotalDeposits_route@10 main_getAcceptedCollateralsCount_route@11 main_getOraclePrice_route@12 main_addNewCollateralType_route@13 main_depositASA_route@14 main_depositAlgo_route@15 main_withdrawDeposit_route@16 main_borrow_route@17 main_accrueLoanInterest_route@18 main_current_apr_bps_route@19 main_getLoanRecord_route@20 main_repayLoanASA_route@21 main_repayLoanAlgo_route@22 main_withdrawFees_route@23 main_buyoutASA_route@24 main_buyoutAlgo_route@25 main_liquidateASA_route@26 main_liquidateAlgo_route@27 main_getLoanStatus_route@28 main_gas_route@29

main_after_if_else@33:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    intc_0 // 0
    return

main_gas_route@29:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1324
    // gas(): void {}
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_getLoanStatus_route@28:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1287
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1287
    // @abimethod({ allowActions: 'NoOp' })
    callsub getLoanStatus
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    bytec 15 // 0x00
    intc_0 // 0
    uncover 8
    setbit
    bytec 15 // 0x00
    intc_0 // 0
    uncover 8
    setbit
    uncover 6
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    intc_0 // 0
    getbit
    pushint 321 // 321
    swap
    setbit
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_liquidateAlgo_route@27:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1239
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1239
    // @abimethod({ allowActions: 'NoOp' })
    callsub liquidateAlgo
    intc_1 // 1
    return

main_liquidateASA_route@26:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1187
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1187
    // @abimethod({ allowActions: 'NoOp' })
    callsub liquidateASA
    intc_1 // 1
    return

main_buyoutAlgo_route@25:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1132
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1132
    // @abimethod({ allowActions: 'NoOp' })
    callsub buyoutAlgo
    intc_1 // 1
    return

main_buyoutASA_route@24:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1075
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1075
    // @abimethod({ allowActions: 'NoOp' })
    callsub buyoutASA
    intc_1 // 1
    return

main_withdrawFees_route@23:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1053
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub withdrawFees
    intc_1 // 1
    return

main_repayLoanAlgo_route@22:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1005
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1005
    // @abimethod({ allowActions: 'NoOp' })
    callsub repayLoanAlgo
    intc_1 // 1
    return

main_repayLoanASA_route@21:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:947
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:947
    // @abimethod({ allowActions: 'NoOp' })
    callsub repayLoanASA
    intc_1 // 1
    return

main_getLoanRecord_route@20:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:934
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:934
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    callsub getLoanRecord
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_current_apr_bps_route@19:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:836
    // public current_apr_bps(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub current_apr_bps
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_accrueLoanInterest_route@18:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:777
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:777
    // @abimethod({ allowActions: 'NoOp' })
    callsub accrueLoanInterest
    intc_1 // 1
    return

main_borrow_route@17:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:682
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:682
    // @abimethod({ allowActions: 'NoOp' })
    callsub borrow
    intc_1 // 1
    return

main_withdrawDeposit_route@16:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:630
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:630
    // @abimethod({ allowActions: 'NoOp' })
    callsub withdrawDeposit
    intc_1 // 1
    return

main_depositAlgo_route@15:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:591
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:591
    // @abimethod({ allowActions: 'NoOp' })
    callsub depositAlgo
    intc_1 // 1
    return

main_depositASA_route@14:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:548
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:548
    // @abimethod({ allowActions: 'NoOp' })
    callsub depositASA
    intc_1 // 1
    return

main_addNewCollateralType_route@13:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:472
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:472
    // @abimethod({ allowActions: 'NoOp' })
    callsub addNewCollateralType
    intc_1 // 1
    return

main_getOraclePrice_route@12:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:427
    // getOraclePrice(tokenId: UintN64): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:427
    // getOraclePrice(tokenId: UintN64): uint64 {
    callsub getOraclePrice
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getAcceptedCollateralsCount_route@11:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:417
    // getAcceptedCollateralsCount(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getAcceptedCollateralsCount
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getTotalDeposits_route@10:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:409
    // getTotalDeposits(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getTotalDeposits
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getCirculatingLST_route@9:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:401
    // getCirculatingLST(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getCirculatingLST
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_configureLSTToken_route@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:386
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:386
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    callsub configureLSTToken
    intc_1 // 1
    return

main_optInToLST_route@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:361
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:361
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    callsub optInToLST
    intc_1 // 1
    return

main_generateLSTToken_route@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:329
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:329
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    callsub generateLSTToken
    intc_1 // 1
    return

main_setRateParams_route@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:272-285
    // public setRateParams(
    //   base_bps: uint64,
    //   util_cap_bps: uint64,
    //   kink_norm_bps: uint64,
    //   slope1_bps: uint64,
    //   slope2_bps: uint64,
    //   max_apr_bps: uint64,
    //   borrow_gate_enabled: uint64, // or uint8
    //   ema_alpha_bps: uint64,
    //   max_apr_step_bps: uint64,
    //   rate_model_type: uint64, // or uint8
    //   power_gamma_q16: uint64,
    //   scarcity_K_bps: uint64,
    // ) {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txna ApplicationArgs 7
    btoi
    txna ApplicationArgs 8
    btoi
    txna ApplicationArgs 9
    btoi
    txna ApplicationArgs 10
    btoi
    txna ApplicationArgs 11
    btoi
    txna ApplicationArgs 12
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:272-285
    // public setRateParams(
    //   base_bps: uint64,
    //   util_cap_bps: uint64,
    //   kink_norm_bps: uint64,
    //   slope1_bps: uint64,
    //   slope2_bps: uint64,
    //   max_apr_bps: uint64,
    //   borrow_gate_enabled: uint64, // or uint8
    //   ema_alpha_bps: uint64,
    //   max_apr_step_bps: uint64,
    //   rate_model_type: uint64, // or uint8
    //   power_gamma_q16: uint64,
    //   scarcity_K_bps: uint64,
    // ) {
    callsub setRateParams
    intc_1 // 1
    return

main_initApplication_route@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:194
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txnas Applications
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:194
    // @abimethod({ allowActions: 'NoOp' })
    callsub initApplication
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:177
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:40-41
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:177
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication(admin: bytes, baseTokenId: uint64) -> void:
createApplication:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:177-178
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    // public createApplication(admin: Account, baseTokenId: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // admin_account = GlobalState<Account>()
    bytec_3 // "admin_account"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:179
    // this.admin_account.value = admin
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:180
    // this.base_token_id.value = new UintN64(baseTokenId)
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    bytec_0 // "base_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:180
    // this.base_token_id.value = new UintN64(baseTokenId)
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication(mbrTxn: uint64, ltv_bps: uint64, liq_threshold_bps: uint64, origination_fee_bps: uint64, protocol_share_bps: uint64, borrow_gate_enabled: uint64, oracle_app_id: uint64) -> void:
initApplication:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:194-203
    // @abimethod({ allowActions: 'NoOp' })
    // public initApplication(
    //   mbrTxn: gtxn.PaymentTxn,
    //   ltv_bps: uint64,
    //   liq_threshold_bps: uint64,
    //   origination_fee_bps: uint64,
    //   protocol_share_bps: uint64,
    //   borrow_gate_enabled: uint64,
    //   oracle_app_id: Application,
    // ): void {
    proto 7 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:204
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:204
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:206-209
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    frame_dig -7
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:206-209
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    ==
    bz initApplication_bool_false@3
    frame_dig -7
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:3
    // export const MBR_CREATE_APP: uint64 = 400_000
    pushint 400000 // 400000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:206-209
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    ==
    bz initApplication_bool_false@3
    intc_1 // 1

initApplication_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:206-209
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // ltv_bps = GlobalState<uint64>()
    bytec 28 // "ltv_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:211
    // this.ltv_bps.value = ltv_bps
    frame_dig -6
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:83
    // liq_threshold_bps = GlobalState<uint64>()
    bytec 8 // "liq_threshold_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:212
    // this.liq_threshold_bps.value = liq_threshold_bps
    frame_dig -5
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:86
    // origination_fee_bps = GlobalState<uint64>()
    bytec 29 // "origination_fee_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:213
    // this.origination_fee_bps.value = origination_fee_bps
    frame_dig -4
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:150
    // accepted_collaterals_count = GlobalState<uint64>()
    bytec 16 // "accepted_collaterals_count"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:214
    // this.accepted_collaterals_count.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:63
    // fee_pool = GlobalState<uint64>()
    bytec 9 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:215
    // this.fee_pool.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:216
    // this.circulating_lst.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    bytec_1 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:217
    // this.total_deposits.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    bytec_2 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:218
    // this.active_loan_records.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:89
    // protocol_share_bps = GlobalState<uint64>()
    bytec 30 // "protocol_share_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:219
    // this.protocol_share_bps.value = protocol_share_bps
    frame_dig -3
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // oracle_app = GlobalState<Application>()
    bytec 31 // "oracle_app"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:220
    // this.oracle_app.value = oracle_app_id
    frame_dig -1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:110
    // borrow_gate_enabled = GlobalState<uint64>()
    bytec 32 // "borrow_gate_enabled"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:221
    // this.borrow_gate_enabled.value = borrow_gate_enabled
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:222
    // this.lst_token_id.value = new UintN64(99)
    pushbytes 0x0000000000000063
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:92
    // base_bps = GlobalState<uint64>()
    bytec 14 // "base_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:223
    // this.base_bps.value = 50
    pushint 50 // 50
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:95
    // util_cap_bps = GlobalState<uint64>()
    bytec 19 // "util_cap_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:224
    // this.util_cap_bps.value = 8000 // 80% utilization cap
    pushint 8000 // 8000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // total_borrows = GlobalState<uint64>()
    bytec 7 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:225
    // this.total_borrows.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:125
    // rate_model_type = GlobalState<uint64>()
    bytec 20 // "rate_model_type"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:226
    // this.rate_model_type.value = 0 // Default to kinked model
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:98
    // kink_norm_bps = GlobalState<uint64>()
    bytec 21 // "kink_norm_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:227
    // this.kink_norm_bps.value = 5000 // 50% kink point
    pushint 5000 // 5000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:101
    // slope1_bps = GlobalState<uint64>()
    bytec 22 // "slope1_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:228
    // this.slope1_bps.value = 1000 // 10% slope to kink
    intc 4 // 1000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // slope2_bps = GlobalState<uint64>()
    bytec 23 // "slope2_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:229
    // this.slope2_bps.value = 2000 // 20% slope after kink
    pushint 2000 // 2000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // max_apr_bps = GlobalState<uint64>()
    bytec 12 // "max_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:230
    // this.max_apr_bps.value = 6000 // 60% APR Cap by Default
    pushint 6000 // 6000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:113
    // ema_alpha_bps = GlobalState<uint64>()
    bytec 24 // "ema_alpha_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:231
    // this.ema_alpha_bps.value = 0 // No EMA smoothing by default
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:116
    // max_apr_step_bps = GlobalState<uint64>()
    bytec 25 // "max_apr_step_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:232
    // this.max_apr_step_bps.value = 0 // No max APR step by default
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:119
    // prev_apr_bps = GlobalState<uint64>()
    bytec 13 // "prev_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:233
    // this.prev_apr_bps.value = 50 // Same as base_bps by default
    pushint 50 // 50
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:122
    // util_ema_bps = GlobalState<uint64>()
    bytec 26 // "util_ema_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:234
    // this.util_ema_bps.value = 0 // No utilization EMA by default
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:128
    // power_gamma_q16 = GlobalState<uint64>()
    bytec 33 // "power_gamma_q16"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:235
    // this.power_gamma_q16.value = 0 // No power curve by default
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:131
    // scarcity_K_bps = GlobalState<uint64>()
    bytec 34 // "scarcity_K_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:236
    // this.scarcity_K_bps.value = 0 // No scarcity parameter by default
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:157
    // last_scaled_down_disbursement = GlobalState<uint64>()
    bytec 35 // "last_scaled_down_disbursement"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:237
    // this.last_scaled_down_disbursement.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:160
    // last_max_borrow = GlobalState<uint64>()
    bytec 36 // "last_max_borrow"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:238
    // this.last_max_borrow.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:163
    // last_requested_loan = GlobalState<uint64>()
    bytec 37 // "last_requested_loan"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:239
    // this.last_requested_loan.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:166
    // debug_diff = GlobalState<uint64>()
    bytec 38 // "debug_diff"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:240
    // this.debug_diff.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:168
    // params_updated_at = GlobalState<uint64>() // last params change timestamp (ledger seconds)
    bytec 39 // "params_updated_at"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:241
    // this.params_updated_at.value = Global.latestTimestamp
    global LatestTimestamp
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:169
    // params_update_nonce = GlobalState<uint64>() // monotonic counter
    bytec 27 // "params_update_nonce"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:242
    // this.params_update_nonce.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:244
    // if (this.base_token_id.value.native !== 0) {
    btoi
    bz initApplication_after_if_else@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:245-252
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:247
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:248
    // xferAsset: this.base_token_id.value.native,
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:249
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:245-251
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:245-252
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit

initApplication_after_if_else@7:
    retsub

initApplication_bool_false@3:
    intc_0 // 0
    b initApplication_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setRateParams(base_bps: uint64, util_cap_bps: uint64, kink_norm_bps: uint64, slope1_bps: uint64, slope2_bps: uint64, max_apr_bps: uint64, borrow_gate_enabled: uint64, ema_alpha_bps: uint64, max_apr_step_bps: uint64, rate_model_type: uint64, power_gamma_q16: uint64, scarcity_K_bps: uint64) -> void:
setRateParams:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:272-285
    // public setRateParams(
    //   base_bps: uint64,
    //   util_cap_bps: uint64,
    //   kink_norm_bps: uint64,
    //   slope1_bps: uint64,
    //   slope2_bps: uint64,
    //   max_apr_bps: uint64,
    //   borrow_gate_enabled: uint64, // or uint8
    //   ema_alpha_bps: uint64,
    //   max_apr_step_bps: uint64,
    //   rate_model_type: uint64, // or uint8
    //   power_gamma_q16: uint64,
    //   scarcity_K_bps: uint64,
    // ) {
    proto 12 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:286
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:286
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    ==
    assert // UNAUTHORIZED
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:289
    // assert(util_cap_bps >= 1 && util_cap_bps <= 10_000, 'BAD_UTIL_CAP')
    frame_dig -11
    bz setRateParams_bool_false@3
    frame_dig -11
    intc_2 // 10000
    <=
    bz setRateParams_bool_false@3
    intc_1 // 1

setRateParams_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:289
    // assert(util_cap_bps >= 1 && util_cap_bps <= 10_000, 'BAD_UTIL_CAP')
    assert // BAD_UTIL_CAP
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:290
    // assert(kink_norm_bps >= 1 && kink_norm_bps < 10_000, 'BAD_KINK')
    frame_dig -10
    bz setRateParams_bool_false@7
    frame_dig -10
    intc_2 // 10000
    <
    bz setRateParams_bool_false@7
    intc_1 // 1

setRateParams_bool_merge@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:290
    // assert(kink_norm_bps >= 1 && kink_norm_bps < 10_000, 'BAD_KINK')
    assert // BAD_KINK
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:292
    // if (max_apr_bps > 0) {
    frame_dig -7
    bz setRateParams_after_if_else@14
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:293
    // assert(max_apr_bps >= base_bps, 'BAD_MAX_APR')
    frame_dig -7
    frame_dig -12
    >=
    assert // BAD_MAX_APR

setRateParams_after_if_else@14:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:295
    // assert(ema_alpha_bps <= 10_000, 'BAD_EMA_ALPHA')
    frame_dig -5
    intc_2 // 10000
    <=
    assert // BAD_EMA_ALPHA
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:297
    // assert(rate_model_type === 0 /* kinked */ || rate_model_type === 255 /* fixed */, 'UNSUPPORTED_MODEL')
    frame_dig -3
    bz setRateParams_bool_true@16
    frame_dig -3
    pushint 255 // 255
    ==
    bz setRateParams_bool_false@17

setRateParams_bool_true@16:
    intc_1 // 1

setRateParams_bool_merge@18:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:297
    // assert(rate_model_type === 0 /* kinked */ || rate_model_type === 255 /* fixed */, 'UNSUPPORTED_MODEL')
    assert // UNSUPPORTED_MODEL
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:92
    // base_bps = GlobalState<uint64>()
    bytec 14 // "base_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:300
    // this.base_bps.value = base_bps
    frame_dig -12
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:95
    // util_cap_bps = GlobalState<uint64>()
    bytec 19 // "util_cap_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:301
    // this.util_cap_bps.value = util_cap_bps
    frame_dig -11
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:98
    // kink_norm_bps = GlobalState<uint64>()
    bytec 21 // "kink_norm_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:302
    // this.kink_norm_bps.value = kink_norm_bps
    frame_dig -10
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:101
    // slope1_bps = GlobalState<uint64>()
    bytec 22 // "slope1_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:303
    // this.slope1_bps.value = slope1_bps
    frame_dig -9
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // slope2_bps = GlobalState<uint64>()
    bytec 23 // "slope2_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:304
    // this.slope2_bps.value = slope2_bps
    frame_dig -8
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // max_apr_bps = GlobalState<uint64>()
    bytec 12 // "max_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:305
    // this.max_apr_bps.value = max_apr_bps
    frame_dig -7
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:110
    // borrow_gate_enabled = GlobalState<uint64>()
    bytec 32 // "borrow_gate_enabled"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:306
    // this.borrow_gate_enabled.value = borrow_gate_enabled
    frame_dig -6
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:113
    // ema_alpha_bps = GlobalState<uint64>()
    bytec 24 // "ema_alpha_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:307
    // this.ema_alpha_bps.value = ema_alpha_bps
    frame_dig -5
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:116
    // max_apr_step_bps = GlobalState<uint64>()
    bytec 25 // "max_apr_step_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:308
    // this.max_apr_step_bps.value = max_apr_step_bps
    frame_dig -4
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:125
    // rate_model_type = GlobalState<uint64>()
    bytec 20 // "rate_model_type"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:309
    // this.rate_model_type.value = rate_model_type
    frame_dig -3
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:128
    // power_gamma_q16 = GlobalState<uint64>()
    bytec 33 // "power_gamma_q16"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:310
    // this.power_gamma_q16.value = power_gamma_q16
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:131
    // scarcity_K_bps = GlobalState<uint64>()
    bytec 34 // "scarcity_K_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:311
    // this.scarcity_K_bps.value = scarcity_K_bps
    frame_dig -1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:169
    // params_update_nonce = GlobalState<uint64>() // monotonic counter
    intc_0 // 0
    bytec 27 // "params_update_nonce"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:313
    // this.params_update_nonce.value += 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:169
    // params_update_nonce = GlobalState<uint64>() // monotonic counter
    bytec 27 // "params_update_nonce"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:313
    // this.params_update_nonce.value += 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:168
    // params_updated_at = GlobalState<uint64>() // last params change timestamp (ledger seconds)
    bytec 39 // "params_updated_at"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:314
    // this.params_updated_at.value = Global.latestTimestamp
    global LatestTimestamp
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // max_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 12 // "max_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:317
    // if (this.max_apr_bps.value > 0 && this.prev_apr_bps.value > this.max_apr_bps.value) {
    bz setRateParams_after_if_else@21
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:119
    // prev_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 13 // "prev_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // max_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 12 // "max_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:317
    // if (this.max_apr_bps.value > 0 && this.prev_apr_bps.value > this.max_apr_bps.value) {
    >
    bz setRateParams_after_if_else@21
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // max_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 12 // "max_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:119
    // prev_apr_bps = GlobalState<uint64>()
    bytec 13 // "prev_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:318
    // this.prev_apr_bps.value = this.max_apr_bps.value
    swap
    app_global_put

setRateParams_after_if_else@21:
    retsub

setRateParams_bool_false@17:
    intc_0 // 0
    b setRateParams_bool_merge@18

setRateParams_bool_false@7:
    intc_0 // 0
    b setRateParams_bool_merge@8

setRateParams_bool_false@3:
    intc_0 // 0
    b setRateParams_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken(mbrTxn: uint64) -> void:
generateLSTToken:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:329
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    proto 1 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:330
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:330
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:331-334
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:331-334
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    ==
    bz generateLSTToken_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:4
    // export const MBR_INIT_APP: uint64 = 102_000
    pushint 102000 // 102000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:331-334
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    ==
    bz generateLSTToken_bool_false@3
    intc_1 // 1

generateLSTToken_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:331-334
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:338
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:339-350
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(this.base_token_id.value.bytes),
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:341
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:342
    // total: baseToken.total,
    dig 1
    asset_params_get AssetTotal
    assert // asset exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:343
    // decimals: baseToken.decimals,
    dig 2
    asset_params_get AssetDecimals
    assert // asset exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:345
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:346
    // unitName: 'c' + String(baseToken.unitName),
    uncover 4
    asset_params_get AssetUnitName
    assert // asset exists
    pushbytes "c"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:347
    // assetName: 'c' + String(this.base_token_id.value.bytes),
    pushbytes "c"
    swap
    concat
    itxn_field ConfigAssetName
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetManager
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:344
    // defaultFrozen: false,
    intc_0 // 0
    itxn_field ConfigAssetDefaultFrozen
    itxn_field ConfigAssetDecimals
    itxn_field ConfigAssetTotal
    itxn_field Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:339-349
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(this.base_token_id.value.bytes),
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:339-350
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(this.base_token_id.value.bytes),
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:351
    // this.lst_token_id.value = new UintN64(result.createdAsset.id)
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:351
    // this.lst_token_id.value = new UintN64(result.createdAsset.id)
    swap
    app_global_put
    retsub

generateLSTToken_bool_false@3:
    intc_0 // 0
    b generateLSTToken_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST(lstAssetId: uint64, mbrTxn: uint64) -> void:
optInToLST:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:361
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:362
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:362
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:363-366
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:363-366
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    ==
    bz optInToLST_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:5
    // export const MBR_OPT_IN_LST: uint64 = 2_000
    pushint 2000 // 2000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:363-366
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    ==
    bz optInToLST_bool_false@3
    intc_1 // 1

optInToLST_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:363-366
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:367
    // this.lst_token_id.value = new UintN64(lstAssetId)
    frame_dig -2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:367
    // this.lst_token_id.value = new UintN64(lstAssetId)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:370-377
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:372
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:374
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:370-376
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:370-377
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    retsub

optInToLST_bool_false@3:
    intc_0 // 0
    b optInToLST_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken(axferTxn: uint64, circulating_lst: uint64) -> void:
configureLSTToken:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:386
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:387
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:387
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:388
    // assert(this.lst_token_id.value.native === axferTxn.xferAsset.id, 'LST token not set')
    btoi
    frame_dig -2
    gtxns XferAsset
    ==
    assert // LST token not set
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:390-393
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    frame_dig -2
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:390-393
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    ==
    bz configureLSTToken_bool_false@3
    frame_dig -2
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:392
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:390-393
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    ==
    bz configureLSTToken_bool_false@3
    intc_1 // 1

configureLSTToken_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:390-393
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:394
    // this.circulating_lst.value = circulating_lst
    frame_dig -1
    app_global_put
    retsub

configureLSTToken_bool_false@3:
    intc_0 // 0
    b configureLSTToken_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST() -> uint64:
getCirculatingLST:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:402
    // return this.circulating_lst.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits() -> uint64:
getTotalDeposits:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:410
    // return this.total_deposits.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount() -> uint64:
getAcceptedCollateralsCount:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:150
    // accepted_collaterals_count = GlobalState<uint64>()
    intc_0 // 0
    bytec 16 // "accepted_collaterals_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:418
    // return this.accepted_collaterals_count.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice(tokenId: bytes) -> uint64:
getOraclePrice:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:427
    // getOraclePrice(tokenId: UintN64): uint64 {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // oracle_app = GlobalState<Application>()
    intc_0 // 0
    bytec 31 // "oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:429
    // const address = oracle.address
    dup
    app_params_get AppAddress
    bury 1
    assert // application exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:432-436
    // const result = abiCall(PriceOracleStub.prototype.getTokenPrice, {
    //   appId: contractAppId,
    //   args: [tokenId],
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    pushbytes 0xac13e004 // method "getTokenPrice(uint64)(uint64,uint64,uint64)"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:432-436
    // const result = abiCall(PriceOracleStub.prototype.getTokenPrice, {
    //   appId: contractAppId,
    //   args: [tokenId],
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    pushint 12 // 12
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:438
    // return result.price.native
    extract_uint64
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal(collateralTokenId: bytes, amount: uint64) -> void:
updateCollateralTotal:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:451
    // private updateCollateralTotal(collateralTokenId: UintN64, amount: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:141
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 11 // "accepted_collaterals"
    frame_dig -2
    concat
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:453
    // const collateral = this.accepted_collaterals(key).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:455
    // if (collateral.assetId.native === collateralTokenId.native) {
    dup
    extract 0 8 // on error: Index access is out of bounds
    swap
    intc_0 // 0
    extract_uint64
    frame_dig -2
    btoi
    ==
    bz updateCollateralTotal_after_if_else@2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:456
    // const newTotal: uint64 = collateral.totalCollateral.native + amount
    frame_dig 1
    dup
    pushint 16 // 16
    extract_uint64
    frame_dig -1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:459
    // baseAssetId: collateral.baseAssetId,
    swap
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:460
    // totalCollateral: new UintN64(newTotal),
    swap
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:457-461
    // this.accepted_collaterals(key).value = new AcceptedCollateral({
    //   assetId: collateral.assetId,
    //   baseAssetId: collateral.baseAssetId,
    //   totalCollateral: new UintN64(newTotal),
    // }).copy()
    frame_dig 2
    uncover 2
    concat
    swap
    concat
    frame_dig 0
    swap
    box_put

updateCollateralTotal_after_if_else@2:
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType(collateralTokenId: bytes, mbrTxn: uint64) -> void:
addNewCollateralType:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:472-473
    // @abimethod({ allowActions: 'NoOp' })
    // addNewCollateralType(collateralTokenId: UintN64, mbrTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:474
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:475
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:475
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:476
    // assert(collateralTokenId.native !== baseToken.id)
    frame_dig -2
    btoi
    dup
    uncover 2
    !=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:141
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 11 // "accepted_collaterals"
    frame_dig -2
    concat
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:443
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:477
    // assert(!this.collateralExists(collateralTokenId))
    !
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:478-481
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_COLLATERAL,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:478-481
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_COLLATERAL,
    // })
    ==
    bz addNewCollateralType_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:6
    // export const MBR_COLLATERAL: uint64 = 101_000
    pushint 101000 // 101000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:478-481
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_COLLATERAL,
    // })
    ==
    bz addNewCollateralType_bool_false@3
    intc_1 // 1

addNewCollateralType_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:478-481
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_COLLATERAL,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:483-487
    // const newAcceptedCollateral: AcceptedCollateral = new AcceptedCollateral({
    //   assetId: collateralTokenId,
    //   baseAssetId: this.base_token_id.value,
    //   totalCollateral: new UintN64(0),
    // })
    frame_dig -2
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:486
    // totalCollateral: new UintN64(0),
    pushbytes 0x0000000000000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:483-487
    // const newAcceptedCollateral: AcceptedCollateral = new AcceptedCollateral({
    //   assetId: collateralTokenId,
    //   baseAssetId: this.base_token_id.value,
    //   totalCollateral: new UintN64(0),
    // })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:489
    // this.accepted_collaterals(key).value = newAcceptedCollateral.copy()
    frame_dig 1
    dup
    uncover 2
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:150
    // accepted_collaterals_count = GlobalState<uint64>()
    intc_0 // 0
    bytec 16 // "accepted_collaterals_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:490
    // this.accepted_collaterals_count.value = this.accepted_collaterals_count.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:150
    // accepted_collaterals_count = GlobalState<uint64>()
    bytec 16 // "accepted_collaterals_count"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:490
    // this.accepted_collaterals_count.value = this.accepted_collaterals_count.value + 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491-499
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:493
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:494
    // assetReceiver: Global.currentApplicationAddress,
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:496
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig 0
    itxn_field XferAsset
    itxn_field AssetReceiver
    itxn_field Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491-498
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491-499
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:443
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:501
    // assert(this.collateralExists(collateralTokenId), 'unsupported collateral')
    assert // unsupported collateral
    retsub

addNewCollateralType_bool_false@3:
    intc_0 // 0
    b addNewCollateralType_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue(amount: uint64) -> uint64:
calculateLSTDue:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:504
    // private calculateLSTDue(amount: uint64): uint64 {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const BASIS_POINTS: uint64 = 10_000
    intc_2 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:505
    // const [highBits1, lowBits1] = mulw(this.circulating_lst.value, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:507
    // const lstRatio = divw(highBits1, lowBits1, this.total_deposits.value)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:509
    // const [highBits2, lowBits2] = mulw(lstRatio, amount)
    frame_dig -1
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const BASIS_POINTS: uint64 = 10_000
    intc_2 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:510
    // return divw(highBits2, lowBits2, BASIS_POINTS)
    divw
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositASA(assetTransferTxn: uint64, amount: uint64, mbrTxn: uint64) -> void:
depositASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:548-549
    // @abimethod({ allowActions: 'NoOp' })
    // depositASA(assetTransferTxn: gtxn.AssetTransferTxn, amount: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 3 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:550
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:551-555
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    frame_dig -3
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:552
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:551-555
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    ==
    bz depositASA_bool_false@4
    frame_dig -3
    gtxns XferAsset
    frame_dig 0
    ==
    bz depositASA_bool_false@4
    frame_dig -3
    gtxns AssetAmount
    frame_dig -2
    ==
    bz depositASA_bool_false@4
    intc_1 // 1

depositASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:551-555
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:556-558
    // assertMatch(mbrTxn, {
    //   amount: STANDARD_TXN_FEE,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:556-558
    // assertMatch(mbrTxn, {
    //   amount: STANDARD_TXN_FEE,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    bury 1
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:565
    // if (this.total_deposits.value === 0) {
    bnz depositASA_else_body@7
    frame_dig -2

depositASA_after_if_else@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:570-577
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:572
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:573
    // xferAsset: this.lst_token_id.value.native,
    btoi
    dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:570-576
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:570-577
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:579
    // this.circulating_lst.value += lstDue
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:579
    // this.circulating_lst.value += lstDue
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:580
    // this.total_deposits.value += amount
    frame_dig -2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    bytec_1 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:580
    // this.total_deposits.value += amount
    swap
    app_global_put
    retsub

depositASA_else_body@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:568
    // lstDue = this.calculateLSTDue(amount)
    frame_dig -2
    callsub calculateLSTDue
    b depositASA_after_if_else@8

depositASA_bool_false@4:
    intc_0 // 0
    b depositASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo(depositTxn: uint64, amount: uint64, mbrTxn: uint64) -> void:
depositAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:591-592
    // @abimethod({ allowActions: 'NoOp' })
    // depositAlgo(depositTxn: gtxn.PaymentTxn, amount: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 3 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    bury 1
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:594-597
    // assertMatch(depositTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: amount,
    // })
    frame_dig -3
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:595
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:594-597
    // assertMatch(depositTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: amount,
    // })
    ==
    bz depositAlgo_bool_false@3
    frame_dig -3
    gtxns Amount
    frame_dig -2
    ==
    bz depositAlgo_bool_false@3
    intc_1 // 1

depositAlgo_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:594-597
    // assertMatch(depositTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:598-600
    // assertMatch(mbrTxn, {
    //   amount: STANDARD_TXN_FEE,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:598-600
    // assertMatch(mbrTxn, {
    //   amount: STANDARD_TXN_FEE,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:603
    // if (this.total_deposits.value === 0) {
    bnz depositAlgo_else_body@6
    frame_dig -2

depositAlgo_after_if_else@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:608-615
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:610
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:611
    // xferAsset: this.lst_token_id.value.native,
    btoi
    dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:608-614
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:608-615
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:617
    // this.circulating_lst.value += lstDue
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:617
    // this.circulating_lst.value += lstDue
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:618
    // this.total_deposits.value += amount
    frame_dig -2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    bytec_1 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:618
    // this.total_deposits.value += amount
    swap
    app_global_put
    retsub

depositAlgo_else_body@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:606
    // lstDue = this.calculateLSTDue(amount)
    frame_dig -2
    callsub calculateLSTDue
    b depositAlgo_after_if_else@7

depositAlgo_bool_false@3:
    intc_0 // 0
    b depositAlgo_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit(assetTransferTxn: uint64, amount: uint64, lstAppId: uint64, mbrTxn: uint64) -> void:
withdrawDeposit:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:630-636
    // @abimethod({ allowActions: 'NoOp' })
    // withdrawDeposit(
    //   assetTransferTxn: gtxn.AssetTransferTxn,
    //   amount: uint64,
    //   lstAppId: uint64,
    //   mbrTxn: gtxn.PaymentTxn,
    // ): void {
    proto 4 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:637
    // const lstAsset = Asset(this.lst_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:638-642
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    frame_dig -4
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:639
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:638-642
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    ==
    bz withdrawDeposit_bool_false@4
    frame_dig -4
    gtxns XferAsset
    frame_dig 0
    ==
    bz withdrawDeposit_bool_false@4
    frame_dig -4
    gtxns AssetAmount
    frame_dig -3
    ==
    bz withdrawDeposit_bool_false@4
    intc_1 // 1

withdrawDeposit_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:638-642
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:644-646
    // assertMatch(mbrTxn, {
    //   amount: 3000,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:645
    // amount: 3000,
    pushint 3000 // 3000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:644-646
    // assertMatch(mbrTxn, {
    //   amount: 3000,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:650
    // if (lstAppId === Global.currentApplicationId.id) {
    frame_dig -2
    global CurrentApplicationID
    ==
    bz withdrawDeposit_else_body@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:536
    // const [hi, lo] = mulw(totalDepositsExternal, amount)
    frame_dig -3
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:537
    // return divw(hi, lo, circulatingExternalLST)
    uncover 2
    divw

withdrawDeposit_after_if_else@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:656
    // assert(op.AssetHolding.assetBalance(Global.currentApplicationAddress, this.base_token_id.value.native)[0] >= asaDue)
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:656
    // assert(op.AssetHolding.assetBalance(Global.currentApplicationAddress, this.base_token_id.value.native)[0] >= asaDue)
    btoi
    asset_holding_get AssetBalance
    pop
    dig 1
    >=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:657-664
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:659
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:660
    // xferAsset: this.base_token_id.value.native,
    btoi
    dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:657-663
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:657-664
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:666
    // this.circulating_lst.value -= amount // LST burned
    frame_dig -3
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:666
    // this.circulating_lst.value -= amount // LST burned
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:667
    // this.total_deposits.value -= asaDue // ASA returned
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    bytec_1 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:667
    // this.total_deposits.value -= asaDue // ASA returned
    swap
    app_global_put
    retsub

withdrawDeposit_else_body@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:516-519
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 17 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:516-519
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:520-523
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 18 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:520-523
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:526
    // const [hi, lo] = mulw(totalDepositsExternal, amount)
    frame_dig -3
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:527
    // return divw(hi, lo, circulatingExternalLST)
    uncover 2
    divw
    b withdrawDeposit_after_if_else@8

withdrawDeposit_bool_false@4:
    intc_0 // 0
    b withdrawDeposit_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow(assetTransferTxn: uint64, requestedLoanAmount: uint64, collateralAmount: uint64, lstApp: uint64, collateralTokenId: bytes, mbrTxn: uint64) -> void:
borrow:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:682-690
    // @abimethod({ allowActions: 'NoOp' })
    // borrow(
    //   assetTransferTxn: gtxn.AssetTransferTxn,
    //   requestedLoanAmount: uint64,
    //   collateralAmount: uint64,
    //   lstApp: uint64,
    //   collateralTokenId: UintN64,
    //   mbrTxn: gtxn.PaymentTxn,
    // ): void {
    proto 6 0
    pushbytes ""
    dupn 4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 5 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:692
    // const hasLoan = this.loan_record(op.Txn.sender).exists
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:692
    // const hasLoan = this.loan_record(op.Txn.sender).exists
    box_len
    dup
    uncover 2
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:694
    // if (hasLoan) {
    bz borrow_else_body@2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:695
    // const existingCollateral = this.getLoanRecord(op.Txn.sender).collateralAmount
    txn Sender
    callsub getLoanRecord
    pushint 40 // 40
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:696
    // collateralToUse = existingCollateral.native
    extract_uint64
    frame_bury 1

borrow_after_if_else@3:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1332
    // assertMatch(mbrTxn, { amount: VALIDATE_BORROW_FEE })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:8
    // export const VALIDATE_BORROW_FEE: uint64 = 4_000
    pushint 4000 // 4000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1332
    // assertMatch(mbrTxn, { amount: VALIDATE_BORROW_FEE })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1334-1337
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: collateralAmount,
    // })
    frame_dig -6
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1335
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1334-1337
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: collateralAmount,
    // })
    ==
    bz borrow_bool_false@21
    frame_dig -6
    gtxns AssetAmount
    frame_dig -4
    ==
    bz borrow_bool_false@21
    intc_1 // 1

borrow_bool_merge@22:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1334-1337
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: collateralAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:141
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 11 // "accepted_collaterals"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:443
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1339
    // assert(this.collateralExists(collateralTokenId), 'unsupported collateral')
    assert // unsupported collateral
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1344-1347
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 17 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -3
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1344-1347
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1349-1352
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 18 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -3
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1349-1352
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1355
    // const [hC, lC] = mulw(totalDepositsExternal, collateralAmount)
    frame_dig 1
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1356
    // const underlyingCollateral = divw(hC, lC, circulatingExternalLST)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1359
    // const collateralOraclePrice = this.getOraclePrice(collateralTokenId)
    frame_dig -2
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1360
    // const [hU, lU] = mulw(underlyingCollateral, collateralOraclePrice)
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:11
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1361
    // const collateralUSD = divw(hU, lU, USD_MICRO_UNITS)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // ltv_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 28 // "ltv_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:702
    // const maxBorrowUSD: uint64 = (collateralUSD * this.ltv_bps.value) / BASIS_POINTS
    *
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const BASIS_POINTS: uint64 = 10_000
    intc_2 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:702
    // const maxBorrowUSD: uint64 = (collateralUSD * this.ltv_bps.value) / BASIS_POINTS
    /
    dup
    frame_bury 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:160
    // last_max_borrow = GlobalState<uint64>()
    bytec 36 // "last_max_borrow"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:703
    // this.last_max_borrow.value = maxBorrowUSD
    dig 1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:704
    // const baseTokenOraclePrice: uint64 = this.getOraclePrice(this.base_token_id.value)
    callsub getOraclePrice
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1368
    // const [rH, rL] = mulw(requestedLoanAmount, baseTokenOraclePrice)
    frame_dig -5
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:11
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1369
    // const requestedLoanUSD = divw(rH, rL, USD_MICRO_UNITS)
    divw
    dup
    frame_bury 4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:163
    // last_requested_loan = GlobalState<uint64>()
    bytec 37 // "last_requested_loan"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1372
    // this.last_requested_loan.value = requestedLoanUSD
    dig 1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1373
    // this.debug_diff.value = maxBorrowUSD - requestedLoanUSD
    dup2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:166
    // debug_diff = GlobalState<uint64>()
    bytec 38 // "debug_diff"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1373
    // this.debug_diff.value = maxBorrowUSD - requestedLoanUSD
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1375
    // assert(requestedLoanUSD <= maxBorrowUSD, 'exceeds LTV limit')
    >=
    assert // exceeds LTV limit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:86
    // origination_fee_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 29 // "origination_fee_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1381
    // const fee: uint64 = (requestedAmount * this.origination_fee_bps.value) / BASIS_POINTS
    frame_dig -5
    *
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const BASIS_POINTS: uint64 = 10_000
    intc_2 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1381
    // const fee: uint64 = (requestedAmount * this.origination_fee_bps.value) / BASIS_POINTS
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1382
    // const disbursement: uint64 = requestedAmount - fee
    frame_dig -5
    dig 1
    -
    dup
    cover 2
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:63
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1384
    // this.fee_pool.value += fee
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:63
    // fee_pool = GlobalState<uint64>()
    bytec 9 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1384
    // this.fee_pool.value += fee
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:157
    // last_scaled_down_disbursement = GlobalState<uint64>()
    bytec 35 // "last_scaled_down_disbursement"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1385
    // this.last_scaled_down_disbursement.value = disbursement
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:708
    // if (hasLoan) {
    frame_dig 5
    bz borrow_else_body@5
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:710
    // op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1399
    // const existingLoan = this.getLoanRecord(borrower)
    dup
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1400
    // const iar = this.accrueInterest(existingLoan).copy()
    callsub accrueInterest
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1403
    // const [h1, l1] = mulw(iar.totalDebt.native, baseTokenOraclePrice)
    swap
    pushint 17 // 17
    extract_uint64
    frame_dig 0
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:11
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1404
    // const oldLoanUSD = divw(h1, l1, USD_MICRO_UNITS)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1409
    // const totalRequestedUSD: uint64 = oldLoanUSD + newLoanUSD
    frame_dig 4
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1410
    // assert(totalRequestedUSD <= maxBorrowUSD, 'exceeds LTV limit with existing debt')
    frame_dig 3
    <=
    assert // exceeds LTV limit with existing debt
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1413
    // const totalCollateral: uint64 = existingLoan.collateralAmount.native + collateralAmount
    dup
    pushint 40 // 40
    extract_uint64
    frame_dig -4
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1415
    // const newTotalDisb: uint64 = existingLoan.totalDebt.native + disbursement
    dig 1
    pushint 65 // 65
    extract_uint64
    frame_dig 2
    dup
    cover 2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1416
    // this.total_borrows.value = this.total_borrows.value + disbursement
    dig 2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // total_borrows = GlobalState<uint64>()
    bytec 7 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1416
    // this.total_borrows.value = this.total_borrows.value + disbursement
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1420
    // amount: new UintN64(disbursement),
    swap
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1421
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1419-1423
    // new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // 0 for borrow
    // }),
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1422
    // changeType: new UintN8(0), // 0 for borrow
    bytec 15 // 0x00
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1419-1423
    // new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // 0 for borrow
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1425
    // existingLoan.collateralTokenId,
    uncover 3
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1418-1428
    // this.updateLoanRecord(
    //   new DebtChange({
    //     amount: new UintN64(disbursement),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(0), // 0 for borrow
    //   }),
    //   newTotalDisb,
    //   existingLoan.collateralTokenId,
    //   borrower,
    //   totalCollateral,
    // )
    swap
    cover 2
    uncover 4
    uncover 4
    callsub updateLoanRecord
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1429
    // this.updateCollateralTotal(collateralTokenId, collateralAmount)
    frame_dig -2
    frame_dig -4
    callsub updateCollateralTotal

borrow_after_if_else@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:722
    // this.disburseFunds(op.Txn.sender, disbursement)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1432
    // if (this.base_token_id.value.native === 0) {
    btoi
    bnz borrow_else_body@10
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1433-1439
    // itxn
    //   .payment({
    //     receiver: borrower,
    //     amount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    frame_dig 2
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1433-1438
    // itxn
    //   .payment({
    //     receiver: borrower,
    //     amount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1433-1439
    // itxn
    //   .payment({
    //     receiver: borrower,
    //     amount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit

borrow_after_if_else@12:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:723
    // this.total_borrows.value = this.total_borrows.value + disbursement
    frame_dig 2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // total_borrows = GlobalState<uint64>()
    bytec 7 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:723
    // this.total_borrows.value = this.total_borrows.value + disbursement
    swap
    app_global_put
    retsub

borrow_else_body@10:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1441-1448
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1444
    // xferAsset: this.base_token_id.value.native,
    btoi
    frame_dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1441-1447
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1441-1448
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    b borrow_after_if_else@12

borrow_else_body@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:719
    // this.mintLoanRecord(disbursement, collateralTokenId, op.Txn.sender, collateralAmount)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:737
    // collateralAmount: new UintN64(collateralAmount),
    frame_dig -4
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:739
    // amount: new UintN64(disbursement),
    frame_dig 2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:740
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:738-742
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // 0 for borrow
    // }),
    dig 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:741
    // changeType: new UintN8(0), // 0 for borrow
    bytec 15 // 0x00
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:738-742
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // 0 for borrow
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:745
    // lastAccrualTimestamp: new UintN64(Global.latestTimestamp - DEBUG_TIMESTAMP_OFFSET),
    global LatestTimestamp
    // smart_contracts/orbital_lending/config.algo.ts:13
    // export const DEBUG_TIMESTAMP_OFFSET: uint64 = 1_728_000
    pushint 1728000 // 1728000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:745
    // lastAccrualTimestamp: new UintN64(Global.latestTimestamp - DEBUG_TIMESTAMP_OFFSET),
    -
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:734-746
    // const loanRecord: LoanRecord = new LoanRecord({
    //   borrowerAddress: new Address(borrowerAddress.bytes),
    //   collateralTokenId: collateralTokenId,
    //   collateralAmount: new UintN64(collateralAmount),
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(disbursement),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(0), // 0 for borrow
    //   }),
    //   totalDebt: new UintN64(disbursement),
    //   borrowedTokenId: this.base_token_id.value,
    //   lastAccrualTimestamp: new UintN64(Global.latestTimestamp - DEBUG_TIMESTAMP_OFFSET),
    // })
    dig 5
    frame_dig -2
    concat
    uncover 5
    concat
    uncover 3
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 5 // "loan_record"
    uncover 2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:747
    // this.loan_record(borrowerAddress).value = loanRecord.copy()
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:748
    // this.active_loan_records.value = this.active_loan_records.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    bytec_2 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:748
    // this.active_loan_records.value = this.active_loan_records.value + 1
    swap
    app_global_put
    b borrow_after_if_else@6

borrow_bool_false@21:
    intc_0 // 0
    b borrow_bool_merge@22

borrow_else_body@2:
    frame_dig -4
    frame_bury 1
    b borrow_after_if_else@3


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateLoanRecord(debtChange: bytes, totalDebt: uint64, collateralTokenId: bytes, borrowerAddress: bytes, collateralAmount: uint64) -> bytes:
updateLoanRecord:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:751-757
    // private updateLoanRecord(
    //   debtChange: DebtChange,
    //   totalDebt: uint64,
    //   collateralTokenId: UintN64,
    //   borrowerAddress: Account,
    //   collateralAmount: uint64,
    // ): void {
    proto 5 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:761
    // collateralAmount: new UintN64(collateralAmount),
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:763
    // totalDebt: new UintN64(totalDebt),
    frame_dig -4
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:765
    // lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:758-766
    // const loanRecord: LoanRecord = new LoanRecord({
    //   borrowerAddress: new Address(borrowerAddress.bytes),
    //   collateralTokenId: collateralTokenId,
    //   collateralAmount: new UintN64(collateralAmount),
    //   lastDebtChange: debtChange.copy(),
    //   totalDebt: new UintN64(totalDebt),
    //   borrowedTokenId: this.base_token_id.value,
    //   lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    // })
    frame_dig -2
    frame_dig -3
    concat
    uncover 4
    concat
    frame_dig -5
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 5 // "loan_record"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:767
    // this.loan_record(borrowerAddress).value = loanRecord.copy()
    swap
    box_put
    frame_dig -5
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest(debtor: bytes, templateReserveAddress: bytes) -> void:
accrueLoanInterest:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:777-778
    // @abimethod({ allowActions: 'NoOp' })
    // accrueLoanInterest(debtor: Account, templateReserveAddress: Account): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 5 // "loan_record"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:779
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    dup
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:780
    // const currentLoanRecord = this.loan_record(debtor).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:782
    // const iar = this.accrueInterest(currentLoanRecord)
    callsub accrueInterest
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:786
    // iar.change.copy(),
    dig 1
    extract 0 17 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:787
    // iar.totalDebt.native,
    uncover 2
    pushint 17 // 17
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:788
    // currentLoanRecord.collateralTokenId,
    dig 2
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:790
    // currentLoanRecord.collateralAmount.native,
    uncover 3
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:785-791
    // this.updateLoanRecord(
    //   iar.change.copy(),
    //   iar.totalDebt.native,
    //   currentLoanRecord.collateralTokenId,
    //   debtor,
    //   currentLoanRecord.collateralAmount.native,
    // )
    dig 3
    uncover 3
    uncover 3
    frame_dig -2
    uncover 4
    callsub updateLoanRecord
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:792
    // this.total_deposits.value += iar.change.amount.native // Update total deposits with interest earned
    swap
    intc_0 // 0
    extract_uint64
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    bytec_1 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:792
    // this.total_deposits.value += iar.change.amount.native // Update total deposits with interest earned
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps() -> uint64:
current_apr_bps:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:836
    // public current_apr_bps(): uint64 {
    proto 0 1
    pushbytes ""
    dupn 12
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "total_deposits"
    app_global_get_ex
    swap
    dup
    uncover 2
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "total_borrows"
    app_global_get_ex
    swap
    cover 2
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:95
    // util_cap_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 19 // "util_cap_bps"
    app_global_get_ex
    swap
    cover 2
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:800
    // if (D === 0) return 0
    bnz current_apr_bps_after_if_else@29
    intc_0 // 0
    frame_bury 0

current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:113
    // ema_alpha_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 24 // "ema_alpha_bps"
    app_global_get_ex
    swap
    dup
    cover 2
    frame_bury 2
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:843
    // if (alpha === 0) {
    bnz current_apr_bps_else_body@2
    frame_dig 0
    frame_bury 1

current_apr_bps_after_if_else@3:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:125
    // rate_model_type = GlobalState<uint64>()
    intc_0 // 0
    bytec 20 // "rate_model_type"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:855-857
    // let apr = (this.rate_model_type.value === 0)
    //   ? this.apr_bps_kinked(U_used)
    //   : this.base_bps.value // Fixed APR fallback
    bnz current_apr_bps_ternary_false@5
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:92
    // base_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 14 // "base_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:98
    // kink_norm_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 21 // "kink_norm_bps"
    app_global_get_ex
    swap
    dup
    cover 2
    cover 3
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:101
    // slope1_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 22 // "slope1_bps"
    app_global_get_ex
    swap
    frame_bury 10
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // slope2_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 23 // "slope2_bps"
    app_global_get_ex
    swap
    frame_bury 11
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:820
    // if (U_norm_bps <= kink_norm_bps) {
    frame_dig 1
    >=
    bz current_apr_bps_else_body@21
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:821
    // const [hi1, lo1] = mulw(slope1_bps, U_norm_bps)
    frame_dig 10
    frame_dig 1
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:822
    // apr = base_bps + divw(hi1, lo1, kink_norm_bps)
    uncover 3
    divw
    +
    frame_bury 3

current_apr_bps_after_if_else@22:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // max_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 12 // "max_apr_bps"
    app_global_get_ex
    swap
    dup
    cover 2
    frame_bury 8
    assert // check GlobalState exists
    frame_dig 3
    frame_bury 4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:831
    // if (maxCap > 0 && apr > maxCap) apr = maxCap
    bz current_apr_bps_after_if_else@25
    frame_dig 3
    dup
    frame_dig 8
    >
    swap
    frame_bury 4
    bz current_apr_bps_after_if_else@25
    frame_dig 8
    frame_bury 4

current_apr_bps_after_if_else@25:
    frame_dig 4
    frame_bury 3

current_apr_bps_ternary_merge@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:116
    // max_apr_step_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 25 // "max_apr_step_bps"
    app_global_get_ex
    swap
    dup
    cover 2
    frame_bury 12
    assert // check GlobalState exists
    frame_dig 3
    frame_bury 4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:861
    // if (stepMax > 0) {
    bz current_apr_bps_after_if_else@18
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:119
    // prev_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 13 // "prev_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:862-864
    // const prevApr: uint64 = (this.prev_apr_bps.value === 0)
    //   ? this.base_bps.value
    //   : this.prev_apr_bps.value
    bnz current_apr_bps_ternary_false@9
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:92
    // base_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 14 // "base_bps"
    app_global_get_ex
    assert // check GlobalState exists
    frame_bury 9

current_apr_bps_ternary_merge@10:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:865
    // const lo: uint64 = prevApr > stepMax ? prevApr - stepMax : 0
    frame_dig 9
    frame_dig 12
    >
    bz current_apr_bps_ternary_false@12
    frame_dig 9
    frame_dig 12
    -
    frame_bury 7

current_apr_bps_ternary_merge@13:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:866
    // const hi: uint64 = prevApr + stepMax
    frame_dig 9
    frame_dig 12
    +
    frame_bury 6
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:867
    // if (apr < lo) apr = lo
    frame_dig 3
    frame_dig 7
    <
    bz current_apr_bps_after_if_else@15
    frame_dig 7
    frame_bury 3

current_apr_bps_after_if_else@15:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:868
    // if (apr > hi) apr = hi
    frame_dig 3
    frame_dig 6
    >
    bz current_apr_bps_after_if_else@17
    frame_dig 6
    frame_bury 3

current_apr_bps_after_if_else@17:
    frame_dig 3
    frame_bury 4

current_apr_bps_after_if_else@18:
    frame_dig 4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:119
    // prev_apr_bps = GlobalState<uint64>()
    bytec 13 // "prev_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:871
    // this.prev_apr_bps.value = apr
    dig 1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:872
    // return apr
    frame_bury 0
    retsub

current_apr_bps_ternary_false@12:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:865
    // const lo: uint64 = prevApr > stepMax ? prevApr - stepMax : 0
    intc_0 // 0
    frame_bury 7
    b current_apr_bps_ternary_merge@13

current_apr_bps_ternary_false@9:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:119
    // prev_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 13 // "prev_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    frame_bury 9
    b current_apr_bps_ternary_merge@10

current_apr_bps_else_body@21:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:824
    // const over: uint64 = U_norm_bps - kink_norm_bps
    frame_dig 1
    uncover 2
    dup
    cover 2
    -
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const BASIS_POINTS: uint64 = 10_000
    intc_2 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:825
    // const denom: uint64 = BASIS_POINTS - kink_norm_bps
    uncover 2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:826
    // const [hi2, lo2] = mulw(slope2_bps, over)
    frame_dig 11
    uncover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:827
    // apr = base_bps + slope1_bps + divw(hi2, lo2, denom)
    uncover 3
    frame_dig 10
    +
    cover 2
    uncover 3
    divw
    +
    frame_bury 3
    b current_apr_bps_after_if_else@22

current_apr_bps_ternary_false@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:92
    // base_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 14 // "base_bps"
    app_global_get_ex
    assert // check GlobalState exists
    frame_bury 3
    b current_apr_bps_ternary_merge@6

current_apr_bps_else_body@2:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:122
    // util_ema_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 26 // "util_ema_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const BASIS_POINTS: uint64 = 10_000
    intc_2 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:847
    // const oneMinus: uint64 = BASIS_POINTS - alpha
    frame_dig 2
    dup
    cover 2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:848
    // const [hiA, loA] = mulw(alpha, U_raw)
    swap
    frame_dig 0
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:849
    // const [hiB, loB] = mulw(oneMinus, prevU)
    uncover 2
    uncover 3
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:850
    // U_used = divw(hiA, loA, BASIS_POINTS) + divw(hiB, loB, BASIS_POINTS)
    uncover 3
    uncover 3
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const BASIS_POINTS: uint64 = 10_000
    intc_2 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:850
    // U_used = divw(hiA, loA, BASIS_POINTS) + divw(hiB, loB, BASIS_POINTS)
    divw
    cover 2
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const BASIS_POINTS: uint64 = 10_000
    intc_2 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:850
    // U_used = divw(hiA, loA, BASIS_POINTS) + divw(hiB, loB, BASIS_POINTS)
    divw
    +
    dup
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:122
    // util_ema_bps = GlobalState<uint64>()
    bytec 26 // "util_ema_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:851
    // this.util_ema_bps.value = U_used
    swap
    app_global_put
    b current_apr_bps_after_if_else@3

current_apr_bps_after_if_else@29:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:803
    // const [hiCap, loCap] = mulw(D, cap_bps)
    frame_dig 13
    frame_dig 15
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const BASIS_POINTS: uint64 = 10_000
    intc_2 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:804
    // const capBorrow = divw(hiCap, loCap, BASIS_POINTS)
    divw
    dup
    frame_bury 5
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:805
    // if (capBorrow === 0) return 0
    bnz current_apr_bps_after_if_else@31
    intc_0 // 0
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:838
    // const U_raw: uint64 = this.util_norm_bps()
    b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32

current_apr_bps_after_if_else@31:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:807
    // const cappedB = B <= capBorrow ? B : capBorrow
    frame_dig 14
    dup
    frame_dig 5
    dup
    cover 2
    <=
    dig 1
    uncover 3
    uncover 2
    select
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const BASIS_POINTS: uint64 = 10_000
    intc_2 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:808
    // const [hiN, loN] = mulw(cappedB, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:809
    // return divw(hiN, loN, capBorrow)
    uncover 2
    divw
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:838
    // const U_raw: uint64 = this.util_norm_bps()
    b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest(record: bytes) -> bytes, bytes:
accrueInterest:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:875
    // private accrueInterest(record: LoanRecord): InterestAccrualReturn {
    proto 1 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:876
    // const now = Global.latestTimestamp
    global LatestTimestamp
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:877
    // const last = record.lastAccrualTimestamp.native
    frame_dig -1
    pushint 81 // 81
    extract_uint64
    dup
    cover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:879
    // if (now <= last)
    <=
    bz accrueInterest_after_if_else@2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:883
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:881-885
    // change: new DebtChange({
    //   amount: new UintN64(0),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(1),
    // }),
    pushbytes 0x000000000000000001
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:886
    // totalDebt: record.totalDebt,
    frame_dig -1
    extract 65 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:880-887
    // return new InterestAccrualReturn({
    //   change: new DebtChange({
    //     amount: new UintN64(0),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(1),
    //   }),
    //   totalDebt: record.totalDebt,
    // })
    concat
    frame_dig -1
    uncover 3
    uncover 3
    retsub

accrueInterest_after_if_else@2:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:889
    // const deltaT: uint64 = now - last
    frame_dig 0
    frame_dig 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:890
    // const principal: uint64 = record.totalDebt.native
    frame_dig -1
    pushint 65 // 65
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:893
    // const rateBps: uint64 = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:896
    // const [hi1, lo1] = mulw(principal, rateBps)
    dig 1
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const BASIS_POINTS: uint64 = 10_000
    intc_2 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:898
    // const rateScaled: uint64 = divw(hi1, lo1, BASIS_POINTS)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:900
    // const [hi2, lo2] = mulw(rateScaled, deltaT)
    uncover 2
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:15
    // export const SECONDS_PER_YEAR: uint64 = 365 * 24 * 60 * 60
    pushint 31536000 // 31536000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:902
    // const interest: uint64 = divw(hi2, lo2, SECONDS_PER_YEAR)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:89
    // protocol_share_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 30 // "protocol_share_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const BASIS_POINTS: uint64 = 10_000
    intc_2 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:905
    // const depositorBps: uint64 = BASIS_POINTS - protoBps
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:908
    // const [hiDep, loDep] = mulw(interest, depositorBps)
    dig 1
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const BASIS_POINTS: uint64 = 10_000
    intc_2 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:909
    // const depositorInterest: uint64 = divw(hiDep, loDep, BASIS_POINTS)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:912
    // const protocolInterest: uint64 = interest - depositorInterest
    dup2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:916
    // this.total_deposits.value += depositorInterest
    uncover 2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // total_deposits = GlobalState<uint64>()
    bytec_1 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:916
    // this.total_deposits.value += depositorInterest
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:63
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:918
    // this.fee_pool.value += protocolInterest
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:63
    // fee_pool = GlobalState<uint64>()
    bytec 9 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:918
    // this.fee_pool.value += protocolInterest
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:922
    // const newPrincipal: uint64 = principal + interest
    swap
    dig 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:926
    // amount: new UintN64(interest),
    swap
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:927
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:925-929
    // change: new DebtChange({
    //   amount: new UintN64(interest),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(1),
    // }),
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:928
    // changeType: new UintN8(1),
    pushbytes 0x01
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:925-929
    // change: new DebtChange({
    //   amount: new UintN64(interest),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(1),
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:930
    // totalDebt: new UintN64(newPrincipal),
    swap
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:924-931
    // return new InterestAccrualReturn({
    //   change: new DebtChange({
    //     amount: new UintN64(interest),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(1),
    //   }),
    //   totalDebt: new UintN64(newPrincipal),
    // })
    concat
    frame_dig -1
    uncover 3
    uncover 3
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord(borrowerAddress: bytes) -> bytes:
getLoanRecord:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:934
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 5 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:935
    // return this.loan_record(borrowerAddress).value
    box_get
    assert // Box must have value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanASA(assetTransferTxn: uint64, repaymentAmount: uint64, templateReserveAddress: bytes) -> void:
repayLoanASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:947-952
    // @abimethod({ allowActions: 'NoOp' })
    // repayLoanASA(
    //   assetTransferTxn: gtxn.AssetTransferTxn,
    //   repaymentAmount: uint64,
    //   templateReserveAddress: Account,
    // ): void {
    proto 3 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:953
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:954-958
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: repaymentAmount,
    // })
    frame_dig -3
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:955
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:954-958
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: repaymentAmount,
    // })
    ==
    bz repayLoanASA_bool_false@4
    frame_dig -3
    gtxns XferAsset
    frame_dig 1
    ==
    bz repayLoanASA_bool_false@4
    frame_dig -3
    gtxns AssetAmount
    frame_dig -2
    ==
    bz repayLoanASA_bool_false@4
    intc_1 // 1

repayLoanASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:954-958
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: repaymentAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:960
    // const loanRecord = this.getLoanRecord(op.Txn.sender)
    txn Sender
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:961
    // const iar = this.accrueInterest(loanRecord)
    callsub accrueInterest
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:964
    // assert(repaymentAmount <= iar.totalDebt.native)
    pushint 17 // 17
    extract_uint64
    frame_dig -2
    dig 1
    <=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:965
    // const remainingDebt: uint64 = iar.totalDebt.native - repaymentAmount
    frame_dig -2
    -
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:966
    // this.total_borrows.value = this.total_borrows.value - repaymentAmount
    frame_dig -2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // total_borrows = GlobalState<uint64>()
    bytec 7 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:966
    // this.total_borrows.value = this.total_borrows.value - repaymentAmount
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:968
    // if (remainingDebt === 0) {
    bnz repayLoanASA_else_body@8
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 5 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:970
    // this.loan_record(op.Txn.sender).delete()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:970
    // this.loan_record(op.Txn.sender).delete()
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:971
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    bytec_2 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:971
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:973-979
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:975
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:976
    // xferAsset: loanRecord.collateralTokenId.native,
    swap
    dup
    pushint 32 // 32
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:977
    // assetAmount: loanRecord.collateralAmount.native,
    swap
    pushint 40 // 40
    extract_uint64
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:973-978
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:973-979
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    //   .submit()
    itxn_submit
    retsub

repayLoanASA_else_body@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:984
    // amount: new UintN64(repaymentAmount),
    frame_dig -2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:985
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:983-987
    // new DebtChange({
    //   amount: new UintN64(repaymentAmount),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(2), // 2 for repayment
    // }), // scaledDownDisbursement
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:986
    // changeType: new UintN8(2), // 2 for repayment
    pushbytes 0x02
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:983-987
    // new DebtChange({
    //   amount: new UintN64(repaymentAmount),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(2), // 2 for repayment
    // }), // scaledDownDisbursement
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:989
    // loanRecord.collateralTokenId, // collateral type
    swap
    dup
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:990
    // op.Txn.sender, // borrower
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:991
    // loanRecord.collateralAmount.native, // collateral locked
    uncover 2
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:982-992
    // this.updateLoanRecord(
    //   new DebtChange({
    //     amount: new UintN64(repaymentAmount),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(2), // 2 for repayment
    //   }), // scaledDownDisbursement
    //   remainingDebt, // new debt
    //   loanRecord.collateralTokenId, // collateral type
    //   op.Txn.sender, // borrower
    //   loanRecord.collateralAmount.native, // collateral locked
    // )
    uncover 3
    frame_dig 0
    cover 4
    cover 4
    callsub updateLoanRecord
    pop
    retsub

repayLoanASA_bool_false@4:
    intc_0 // 0
    b repayLoanASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo(paymentTxn: uint64, repaymentAmount: uint64, templateReserveAddress: bytes) -> void:
repayLoanAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1005-1006
    // @abimethod({ allowActions: 'NoOp' })
    // repayLoanAlgo(paymentTxn: gtxn.PaymentTxn, repaymentAmount: uint64, templateReserveAddress: Account): void {
    proto 3 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    bury 1
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1008-1011
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: repaymentAmount,
    // })
    frame_dig -3
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1009
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1008-1011
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: repaymentAmount,
    // })
    ==
    bz repayLoanAlgo_bool_false@3
    frame_dig -3
    gtxns Amount
    frame_dig -2
    ==
    bz repayLoanAlgo_bool_false@3
    intc_1 // 1

repayLoanAlgo_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1008-1011
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: repaymentAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1013
    // const loanRecord = this.getLoanRecord(op.Txn.sender)
    txn Sender
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1014
    // const iar = this.accrueInterest(loanRecord)
    callsub accrueInterest
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1016
    // assert(repaymentAmount <= iar.totalDebt.native)
    pushint 17 // 17
    extract_uint64
    frame_dig -2
    dig 1
    <=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1017
    // const remainingDebt: uint64 = iar.totalDebt.native - repaymentAmount
    frame_dig -2
    -
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1018
    // this.total_borrows.value = this.total_borrows.value - repaymentAmount
    frame_dig -2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // total_borrows = GlobalState<uint64>()
    bytec 7 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1018
    // this.total_borrows.value = this.total_borrows.value - repaymentAmount
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1020
    // if (remainingDebt === 0) {
    bnz repayLoanAlgo_else_body@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 5 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1022
    // this.loan_record(op.Txn.sender).delete()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1022
    // this.loan_record(op.Txn.sender).delete()
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1023
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    bytec_2 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1023
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1025-1031
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1027
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1028
    // xferAsset: loanRecord.collateralTokenId.native,
    swap
    dup
    pushint 32 // 32
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1029
    // assetAmount: loanRecord.collateralAmount.native,
    swap
    pushint 40 // 40
    extract_uint64
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1025-1030
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1025-1031
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    //   .submit()
    itxn_submit
    retsub

repayLoanAlgo_else_body@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1036
    // amount: new UintN64(repaymentAmount),
    frame_dig -2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1037
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1035-1039
    // new DebtChange({
    //   amount: new UintN64(repaymentAmount),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(2), // 2 for repayment
    // }),
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1038
    // changeType: new UintN8(2), // 2 for repayment
    pushbytes 0x02
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1035-1039
    // new DebtChange({
    //   amount: new UintN64(repaymentAmount),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(2), // 2 for repayment
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1041
    // loanRecord.collateralTokenId, // collateral type
    swap
    dup
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1042
    // op.Txn.sender, // borrower
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1043
    // loanRecord.collateralAmount.native, // collateral locked
    uncover 2
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1034-1044
    // this.updateLoanRecord(
    //   new DebtChange({
    //     amount: new UintN64(repaymentAmount),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(2), // 2 for repayment
    //   }),
    //   remainingDebt,
    //   loanRecord.collateralTokenId, // collateral type
    //   op.Txn.sender, // borrower
    //   loanRecord.collateralAmount.native, // collateral locked
    // )
    uncover 3
    frame_dig 0
    cover 4
    cover 4
    callsub updateLoanRecord
    pop
    retsub

repayLoanAlgo_bool_false@3:
    intc_0 // 0
    b repayLoanAlgo_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawFees() -> void:
withdrawFees:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1055
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1055
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1056-1062
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: this.fee_pool.value,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1059
    // xferAsset: this.base_token_id.value.native,
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:63
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1056-1061
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: this.fee_pool.value,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1056-1062
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: this.fee_pool.value,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:63
    // fee_pool = GlobalState<uint64>()
    bytec 9 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1063
    // this.fee_pool.value = 0
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutASA(buyer: bytes, debtor: bytes, axferTxn: uint64) -> void:
buyoutASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1075-1076
    // @abimethod({ allowActions: 'NoOp' })
    // buyoutASA(buyer: Account, debtor: Account, axferTxn: gtxn.AssetTransferTxn): void {
    proto 3 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 5 // "loan_record"
    frame_dig -2
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1077
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1078
    // const currentLoanRecord = this.loan_record(debtor).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1079
    // this.loan_record(debtor).value = currentLoanRecord.copy()
    swap
    dig 1
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1081
    // const collateralAmount = currentLoanRecord.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1082
    // const debtAmount = currentLoanRecord.totalDebt.native
    dup
    pushint 65 // 65
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1083
    // const collateralTokenId: UintN64 = new UintN64(currentLoanRecord.collateralTokenId.native)
    swap
    pushint 32 // 32
    extract_uint64
    itob
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:141
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 11 // "accepted_collaterals"
    dig 1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:448
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1086
    // assert(acceptedCollateral.totalCollateral.native >= collateralAmount, 'Collateral amount exceeds current total')
    pushint 16 // 16
    extract_uint64
    dup
    cover 4
    dig 3
    >=
    assert // Collateral amount exceeds current total
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1089
    // const oraclePrice: uint64 = this.getOraclePrice(collateralTokenId)
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1090
    // const [hU, lU] = mulw(collateralAmount, oraclePrice)
    uncover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1091
    // const collateralUSD: uint64 = divw(hU, lU, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1092
    // const CR: uint64 = collateralUSD / debtAmount
    dup
    uncover 2
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:83
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1093
    // assert(CR > this.liq_threshold_bps.value, 'loan is not eligible for buyout')
    dig 1
    <
    assert // loan is not eligible for buyout
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1095
    // const premiumRate: uint64 = (CR * 10000) / this.liq_threshold_bps.value - 10000 // in basis points
    intc_2 // 10000
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:83
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1095
    // const premiumRate: uint64 = (CR * 10000) / this.liq_threshold_bps.value - 10000 // in basis points
    /
    intc_2 // 10000
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1096
    // const buyoutPrice: uint64 = collateralUSD * (1 + premiumRate / 10000)
    intc_2 // 10000
    /
    intc_1 // 1
    +
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1098-1102
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    frame_dig -1
    gtxns XferAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1099
    // xferAsset: Asset(this.base_token_id.value.native),
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1098-1102
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    ==
    bz buyoutASA_bool_false@4
    frame_dig -1
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1100
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1098-1102
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    ==
    bz buyoutASA_bool_false@4
    frame_dig -1
    gtxns AssetAmount
    frame_dig 4
    ==
    bz buyoutASA_bool_false@4
    intc_1 // 1

buyoutASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1098-1102
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1107
    // this.loan_record(debtor).delete()
    frame_dig 0
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1108
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    bytec_2 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1108
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1111-1117
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1114
    // xferAsset: collateralTokenId.native,
    frame_dig 2
    dup
    btoi
    frame_dig 1
    dup
    cover 2
    itxn_field AssetAmount
    itxn_field XferAsset
    frame_dig -3
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1111-1116
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1111-1117
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1119
    // const newTotal: uint64 = acceptedCollateral.totalCollateral.native - collateralAmount
    frame_dig 3
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1120
    // this.updateCollateralTotal(collateralTokenId, newTotal)
    callsub updateCollateralTotal
    retsub

buyoutASA_bool_false@4:
    intc_0 // 0
    b buyoutASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutAlgo(buyer: bytes, debtor: bytes, paymentTxn: uint64) -> void:
buyoutAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1132-1133
    // @abimethod({ allowActions: 'NoOp' })
    // buyoutAlgo(buyer: Account, debtor: Account, paymentTxn: gtxn.PaymentTxn): void {
    proto 3 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 5 // "loan_record"
    frame_dig -2
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1134
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1135
    // const currentLoanRecord = this.loan_record(debtor).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1136
    // this.loan_record(debtor).value = currentLoanRecord.copy()
    swap
    dig 1
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1138
    // const collateralAmount = currentLoanRecord.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1139
    // const debtAmount = currentLoanRecord.totalDebt.native
    dup
    pushint 65 // 65
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1140
    // const collateralTokenId: UintN64 = new UintN64(currentLoanRecord.collateralTokenId.native)
    swap
    pushint 32 // 32
    extract_uint64
    itob
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:141
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 11 // "accepted_collaterals"
    dig 1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:448
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1143
    // assert(acceptedCollateral.totalCollateral.native >= collateralAmount, 'Collateral amount exceeds current total')
    pushint 16 // 16
    extract_uint64
    dup
    cover 4
    dig 3
    >=
    assert // Collateral amount exceeds current total
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1146
    // const oraclePrice: uint64 = this.getOraclePrice(collateralTokenId)
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1147
    // const [hU, lU] = mulw(collateralAmount, oraclePrice)
    uncover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1148
    // const collateralUSD: uint64 = divw(hU, lU, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1149
    // const CR: uint64 = collateralUSD / debtAmount
    dup
    uncover 2
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:83
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1150
    // assert(CR > this.liq_threshold_bps.value, 'loan is not eligible for buyout')
    dig 1
    <
    assert // loan is not eligible for buyout
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1152
    // const premiumRate: uint64 = (CR * 10000) / this.liq_threshold_bps.value - 10000 // in basis points
    intc_2 // 10000
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:83
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1152
    // const premiumRate: uint64 = (CR * 10000) / this.liq_threshold_bps.value - 10000 // in basis points
    /
    intc_2 // 10000
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1153
    // const buyoutPrice: uint64 = collateralUSD * (1 + premiumRate / 10000)
    intc_2 // 10000
    /
    intc_1 // 1
    +
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1155-1158
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: buyoutPrice,
    // })
    frame_dig -1
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1156
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1155-1158
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: buyoutPrice,
    // })
    ==
    bz buyoutAlgo_bool_false@3
    frame_dig -1
    gtxns Amount
    frame_dig 4
    ==
    bz buyoutAlgo_bool_false@3
    intc_1 // 1

buyoutAlgo_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1155-1158
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: buyoutPrice,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1163
    // this.loan_record(debtor).delete()
    frame_dig 0
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1164
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    bytec_2 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1164
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1167-1173
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1170
    // xferAsset: collateralTokenId.native,
    frame_dig 2
    dup
    btoi
    frame_dig 1
    dup
    cover 2
    itxn_field AssetAmount
    itxn_field XferAsset
    frame_dig -3
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1167-1172
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1167-1173
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1175
    // const newTotal: uint64 = acceptedCollateral.totalCollateral.native - collateralAmount
    frame_dig 3
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1176
    // this.updateCollateralTotal(collateralTokenId, newTotal)
    callsub updateCollateralTotal
    retsub

buyoutAlgo_bool_false@3:
    intc_0 // 0
    b buyoutAlgo_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateASA(debtor: bytes, axferTxn: uint64) -> void:
liquidateASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1187-1188
    // @abimethod({ allowActions: 'NoOp' })
    // liquidateASA(debtor: Account, axferTxn: gtxn.AssetTransferTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 5 // "loan_record"
    frame_dig -2
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1189
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1191
    // const record = this.loan_record(debtor).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1192
    // const collateralAmount = record.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1193
    // const debtAmount = record.totalDebt.native
    dup
    pushint 65 // 65
    extract_uint64
    dup
    cover 3
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1194
    // const collateralTokenId = record.collateralTokenId
    extract 32 8 // on error: Index access is out of bounds
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:141
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 11 // "accepted_collaterals"
    dig 1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:448
    // return this.accepted_collaterals(key).value.copy()
    box_get
    swap
    cover 4
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1197
    // const oraclePrice = this.getOraclePrice(collateralTokenId)
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1198
    // const [h, l] = mulw(collateralAmount, oraclePrice)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1199
    // const collateralUSD = divw(h, l, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1201
    // const CR: uint64 = collateralUSD / debtAmount
    swap
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:83
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1202
    // assert(CR <= this.liq_threshold_bps.value, 'loan is not liquidatable')
    <=
    assert // loan is not liquidatable
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1205-1209
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    frame_dig -1
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1206
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1205-1209
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    ==
    bz liquidateASA_bool_false@4
    frame_dig -1
    gtxns XferAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1207
    // xferAsset: Asset(this.base_token_id.value.native),
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1205-1209
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    ==
    bz liquidateASA_bool_false@4
    frame_dig -1
    gtxns AssetAmount
    frame_dig 3
    ==
    bz liquidateASA_bool_false@4
    intc_1 // 1

liquidateASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1205-1209
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1214
    // this.loan_record(debtor).delete()
    frame_dig 0
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1215
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    bytec_2 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1215
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1218-1224
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1220
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1221
    // xferAsset: collateralTokenId.native,
    frame_dig 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1194
    // const collateralTokenId = record.collateralTokenId
    pushint 32 // 32
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1221
    // xferAsset: collateralTokenId.native,
    extract_uint64
    frame_dig 2
    dup
    cover 3
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1218-1223
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1218-1224
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1227
    // const newTotal: uint64 = acceptedCollateral.totalCollateral.native - collateralAmount
    frame_dig 5
    pushint 16 // 16
    extract_uint64
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1228
    // this.updateCollateralTotal(collateralTokenId, newTotal)
    frame_dig 4
    swap
    callsub updateCollateralTotal
    retsub

liquidateASA_bool_false@4:
    intc_0 // 0
    b liquidateASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateAlgo(debtor: bytes, paymentTxn: uint64) -> void:
liquidateAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1239-1240
    // @abimethod({ allowActions: 'NoOp' })
    // liquidateAlgo(debtor: Account, paymentTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 5 // "loan_record"
    frame_dig -2
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1241
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1243
    // const record = this.loan_record(debtor).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1244
    // const collateralAmount = record.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1245
    // const debtAmount = record.totalDebt.native
    dup
    pushint 65 // 65
    extract_uint64
    dup
    cover 3
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1246
    // const collateralTokenId = record.collateralTokenId
    extract 32 8 // on error: Index access is out of bounds
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:141
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 11 // "accepted_collaterals"
    dig 1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:448
    // return this.accepted_collaterals(key).value.copy()
    box_get
    swap
    cover 4
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1249
    // const oraclePrice = this.getOraclePrice(collateralTokenId)
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1250
    // const [h, l] = mulw(collateralAmount, oraclePrice)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1251
    // const collateralUSD = divw(h, l, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1253
    // const CR: uint64 = collateralUSD / debtAmount
    swap
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:83
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1254
    // assert(CR <= this.liq_threshold_bps.value, 'loan is not liquidatable')
    <=
    assert // loan is not liquidatable
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1257-1260
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: debtAmount,
    // })
    frame_dig -1
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1258
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1257-1260
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: debtAmount,
    // })
    ==
    bz liquidateAlgo_bool_false@3
    frame_dig -1
    gtxns Amount
    frame_dig 3
    ==
    bz liquidateAlgo_bool_false@3
    intc_1 // 1

liquidateAlgo_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1257-1260
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: debtAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1263
    // this.loan_record(debtor).delete()
    frame_dig 0
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1264
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // active_loan_records = GlobalState<uint64>()
    bytec_2 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1264
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1267-1273
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1269
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1270
    // xferAsset: collateralTokenId.native,
    frame_dig 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1246
    // const collateralTokenId = record.collateralTokenId
    pushint 32 // 32
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1270
    // xferAsset: collateralTokenId.native,
    extract_uint64
    frame_dig 2
    dup
    cover 3
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1267-1272
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1267-1273
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1276
    // const newTotal: uint64 = acceptedCollateral.totalCollateral.native - collateralAmount
    frame_dig 5
    pushint 16 // 16
    extract_uint64
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1277
    // this.updateCollateralTotal(collateralTokenId, newTotal)
    frame_dig 4
    swap
    callsub updateCollateralTotal
    retsub

liquidateAlgo_bool_false@3:
    intc_0 // 0
    b liquidateAlgo_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus(borrower: bytes) -> uint64, uint64, uint64, uint64, uint64, uint64, uint64:
getLoanStatus:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1287-1296
    // @abimethod({ allowActions: 'NoOp' })
    // getLoanStatus(borrower: Account): {
    //   outstandingDebt: uint64
    //   collateralValueUSD: uint64
    //   collateralAmount: uint64
    //   collateralRatioBps: uint64
    //   liquidationThresholdBps: uint64
    //   eligibleForLiquidation: boolean
    //   eligibleForBuyout: boolean
    // } {
    proto 1 7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 5 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1297
    // assert(this.loan_record(borrower).exists, 'Loan record does not exist')
    dup
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1298
    // const record = this.loan_record(borrower).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1299
    // const iar = this.accrueInterest(record) // simulate interest accrual for latest status
    callsub accrueInterest
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1301
    // const debt: uint64 = iar.totalDebt.native
    swap
    pushint 17 // 17
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1302
    // const collateralAmount: uint64 = record.collateralAmount.native
    dig 1
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:83
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1305
    // const oraclePrice = this.getOraclePrice(record.collateralTokenId)
    uncover 3
    extract 32 8 // on error: Index access is out of bounds
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1306
    // const [hi, lo] = mulw(collateralAmount, oraclePrice)
    dig 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1307
    // const collateralValueUSD = divw(hi, lo, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1309
    // const CR: uint64 = (collateralValueUSD * BASIS_POINTS) / debt
    dup
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const BASIS_POINTS: uint64 = 10_000
    intc_2 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1309
    // const CR: uint64 = (collateralValueUSD * BASIS_POINTS) / debt
    *
    dig 4
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1310
    // const eligibleForLiquidation = CR < liqBps
    dup
    dig 3
    <
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1311
    // const eligibleForBuyout = CR > liqBps
    dig 1
    dig 4
    >
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1313-1321
    // return {
    //   outstandingDebt: debt,
    //   collateralValueUSD: collateralValueUSD,
    //   collateralAmount: collateralAmount,
    //   collateralRatioBps: CR,
    //   liquidationThresholdBps: liqBps,
    //   eligibleForLiquidation,
    //   eligibleForBuyout,
    // }
    uncover 6
    uncover 4
    uncover 6
    uncover 5
    uncover 6
    uncover 6
    uncover 6
    retsub
