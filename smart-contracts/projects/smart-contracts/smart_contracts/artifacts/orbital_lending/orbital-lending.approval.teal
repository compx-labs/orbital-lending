#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 1000 10000 1000000 1000000000000
    bytecblock "base_token_id" 0x151f7c75 "admin_account" "total_deposits" "total_borrows" "contract_state" "loan_record" "accepted_collaterals" "circulating_lst" "active_loan_records" "lst_token_id" "borrow_index_wad" "migration_admin" "last_apr_bps" "cash_on_hand" "fee_pool" 0x09ef525f 0xae859f3b "buyout_token_id" "current_accumulated_commission" "accepted_collaterals_count" "max_apr_bps" "liq_threshold_bps" "base_bps" "liq_bonus_bps" "total_commission_earned" "total_additional_rewards" 0x00 "ltv_bps" "util_cap_bps" "prev_apr_bps" "last_accrual_ts" "commission_percentage" "flux_oracle_app" 0x0000000000000000 "rate_model_type" "kink_norm_bps" "slope1_bps" "slope2_bps" "origination_fee_bps" "protocol_share_bps" "oracle_app" "ema_alpha_bps" "power_gamma_q16" "scarcity_K_bps" "deposit_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn NumAppArgs
    bz main_after_if_else@41
    pushbytess 0x3b01665e 0xd2600ca9 0x6ca100cd 0x34b8343e 0xca7a1795 0x17c33662 0x5efce39a 0x5cac25a9 0xe596ac73 0x86a6b1bb 0xbae4c238 0x3e41a49b 0x15a5b25e 0xc0799344 0x8553cffa 0xb4a74766 0xae99f45b 0xbed00024 0xd217f842 0x0de801ad 0xd0e69812 0x5f0d6f03 // method "createApplication(account,uint64)void", method "initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void", method "setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void", method "setContractState(uint64)void", method "setMigrationAdmin(account)void", method "generateLSTToken(pay)void", method "optInToLST(uint64,pay)void", method "configureLSTToken(axfer,uint64)void", method "getOraclePrice(uint64)uint64", method "addNewCollateralType(uint64,uint64,pay,uint64)void", method "depositAlgo(pay,uint64,pay)void", method "withdrawDeposit(axfer,uint64,uint64,pay)void", method "borrow(axfer,uint64,uint64,uint64,uint64,pay)void", method "addLoanRecordExternal(uint64,uint64,account,uint64)void", method "accrueLoanInterest(account,account)void", method "current_apr_bps()uint64", method "getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)", method "repayLoanAlgo(pay,uint64)void", method "withdrawPlatformFees(account,pay)void", method "buyoutSplitAlgo(account,account,axfer,pay,uint64,pay)void", method "maxWithdrawableCollateralLST(uint64)uint64", method "withdrawCollateral(uint64,uint64,uint64)void"
    bytec 16 // method "getCirculatingLST()uint64"
    bytec 17 // method "getTotalDeposits()uint64"
    pushbytess 0x6c6337c0 0x70d451f7 0xdaa7f7f2 0x3172ca9d 0xef0bd27a 0x71757509 0x0ac83b5d 0xd0b8a7de 0x4d658379 0x400e14fb 0x51ef3b21 // method "getAcceptedCollateralsCount()uint64", method "liquidatePartialAlgo(account,pay,uint64,uint64)void", method "getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)", method "gas()void", method "calculateCollateralValueUSD(uint64,uint64,uint64)uint64", method "pickupAlgoRewards()void", method "migrateCollateralTokenId(uint64,pay)void", method "migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", method "acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void", method "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void", method "goOffline()void"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_initApplication_route@4 main_setRateParams_route@5 main_setContractState_route@6 main_setMigrationAdmin_route@7 main_generateLSTToken_route@8 main_optInToLST_route@9 main_configureLSTToken_route@10 main_getOraclePrice_route@11 main_addNewCollateralType_route@12 main_depositAlgo_route@13 main_withdrawDeposit_route@14 main_borrow_route@15 main_addLoanRecordExternal_route@16 main_accrueLoanInterest_route@17 main_current_apr_bps_route@18 main_getLoanRecord_route@19 main_repayLoanAlgo_route@20 main_withdrawPlatformFees_route@21 main_buyoutSplitAlgo_route@22 main_maxWithdrawableCollateralLST_route@23 main_withdrawCollateral_route@24 main_getCirculatingLST_route@25 main_getTotalDeposits_route@26 main_getAcceptedCollateralsCount_route@27 main_liquidatePartialAlgo_route@28 main_getLoanStatus_route@29 main_gas_route@30 main_calculateCollateralValueUSD_route@31 main_pickupAlgoRewards_route@32 main_migrateCollateralTokenId_route@33 main_migrateContract_route@34 main_acceptMigrationAlgoContract_route@35 main_goOnline_route@36 main_goOffline_route@37

main_after_if_else@41:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    intc_0 // 0
    return

main_goOffline_route@37:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2281
    // goOffline(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub goOffline
    intc_1 // 1
    return

main_goOnline_route@36:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2249-2257
    // goOnline(
    //   feePayment: gtxn.PaymentTxn,
    //   votePK: bytes,
    //   selectionPK: bytes,
    //   stateProofPK: bytes,
    //   voteFirst: uint64,
    //   voteLast: uint64,
    //   voteKeyDilution: uint64,
    // ): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2249-2257
    // goOnline(
    //   feePayment: gtxn.PaymentTxn,
    //   votePK: bytes,
    //   selectionPK: bytes,
    //   stateProofPK: bytes,
    //   voteFirst: uint64,
    //   voteLast: uint64,
    //   voteKeyDilution: uint64,
    // ): void {
    callsub goOnline
    intc_1 // 1
    return

main_acceptMigrationAlgoContract_route@35:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2191
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2191
    // @abimethod({ allowActions: 'NoOp' })
    callsub acceptMigrationAlgoContract
    intc_1 // 1
    return

main_migrateContract_route@34:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2113
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2113
    // @abimethod({ allowActions: 'NoOp' })
    callsub migrateContract
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_migrateCollateralTokenId_route@33:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2094
    // public migrateCollateralTokenId(collateralTokenId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2094
    // public migrateCollateralTokenId(collateralTokenId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    callsub migrateCollateralTokenId
    intc_1 // 1
    return

main_pickupAlgoRewards_route@32:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2065
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub pickupAlgoRewards
    intc_1 // 1
    return

main_calculateCollateralValueUSD_route@31:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1922
    // public calculateCollateralValueUSD(collateralTokenId: UintN64, collateralAmount: uint64, lstApp: uint64): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1922
    // public calculateCollateralValueUSD(collateralTokenId: UintN64, collateralAmount: uint64, lstApp: uint64): uint64 {
    callsub calculateCollateralValueUSD
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_gas_route@30:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1889
    // gas(): void {}
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_getLoanStatus_route@29:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1847
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1847
    // @abimethod({ allowActions: 'NoOp' })
    callsub getLoanStatus
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    bytec 27 // 0x00
    intc_0 // 0
    uncover 8
    setbit
    bytec 27 // 0x00
    intc_0 // 0
    uncover 8
    setbit
    uncover 6
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    intc_0 // 0
    getbit
    pushint 321 // 321
    swap
    setbit
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_liquidatePartialAlgo_route@28:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1683
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1683
    // @abimethod({ allowActions: 'NoOp' })
    callsub liquidatePartialAlgo
    intc_1 // 1
    return

main_getAcceptedCollateralsCount_route@27:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1671
    // getAcceptedCollateralsCount(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getAcceptedCollateralsCount
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getTotalDeposits_route@26:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1663
    // getTotalDeposits(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getTotalDeposits
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getCirculatingLST_route@25:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1655
    // getCirculatingLST(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getCirculatingLST
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_withdrawCollateral_route@24:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1524
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1524
    // @abimethod({ allowActions: 'NoOp' })
    callsub withdrawCollateral
    intc_1 // 1
    return

main_maxWithdrawableCollateralLST_route@23:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1398
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1398
    // @abimethod({ allowActions: 'NoOp' })
    callsub maxWithdrawableCollateralLST
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_buyoutSplitAlgo_route@22:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1245
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txn GroupIndex
    pushint 3 // 3
    -
    dup
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 3
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1245
    // @abimethod({ allowActions: 'NoOp' })
    callsub buyoutSplitAlgo
    intc_1 // 1
    return

main_withdrawPlatformFees_route@21:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1210
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1210
    // @abimethod({ allowActions: 'NoOp' })
    callsub withdrawPlatformFees
    intc_1 // 1
    return

main_repayLoanAlgo_route@20:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1154
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1154
    // @abimethod({ allowActions: 'NoOp' })
    callsub repayLoanAlgo
    intc_1 // 1
    return

main_getLoanRecord_route@19:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1141
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1141
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    callsub getLoanRecord
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_current_apr_bps_route@18:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:988
    // public current_apr_bps(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub current_apr_bps
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_accrueLoanInterest_route@17:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:923
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:923
    // @abimethod({ allowActions: 'NoOp' })
    callsub accrueLoanInterest
    intc_1 // 1
    return

main_addLoanRecordExternal_route@16:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:909
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    txna ApplicationArgs 4
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:909
    // @abimethod({ allowActions: 'NoOp' })
    callsub addLoanRecordExternal
    intc_1 // 1
    return

main_borrow_route@15:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:814
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:814
    // @abimethod({ allowActions: 'NoOp' })
    callsub borrow
    intc_1 // 1
    return

main_withdrawDeposit_route@14:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:716
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:716
    // @abimethod({ allowActions: 'NoOp' })
    callsub withdrawDeposit
    intc_1 // 1
    return

main_depositAlgo_route@13:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:654
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:654
    // @abimethod({ allowActions: 'NoOp' })
    callsub depositAlgo
    intc_1 // 1
    return

main_addNewCollateralType_route@12:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:551
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:551
    // @abimethod({ allowActions: 'NoOp' })
    callsub addNewCollateralType
    intc_1 // 1
    return

main_getOraclePrice_route@11:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:470
    // getOraclePrice(tokenId: UintN64): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:470
    // getOraclePrice(tokenId: UintN64): uint64 {
    callsub getOraclePrice
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_configureLSTToken_route@10:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:453
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:453
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    callsub configureLSTToken
    intc_1 // 1
    return

main_optInToLST_route@9:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:428
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:428
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    callsub optInToLST
    intc_1 // 1
    return

main_generateLSTToken_route@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:397
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:397
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    callsub generateLSTToken
    intc_1 // 1
    return

main_setMigrationAdmin_route@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:386
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:386
    // @abimethod({ allowActions: 'NoOp' })
    callsub setMigrationAdmin
    intc_1 // 1
    return

main_setContractState_route@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:375
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:375
    // @abimethod({ allowActions: 'NoOp' })
    callsub setContractState
    intc_1 // 1
    return

main_setRateParams_route@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:329
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txna ApplicationArgs 7
    btoi
    txna ApplicationArgs 8
    btoi
    txna ApplicationArgs 9
    btoi
    txna ApplicationArgs 10
    btoi
    txna ApplicationArgs 11
    btoi
    txna ApplicationArgs 12
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:329
    // @abimethod({ allowActions: 'NoOp' })
    callsub setRateParams
    intc_1 // 1
    return

main_initApplication_route@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:233
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txnas Applications
    txna ApplicationArgs 7
    btoi
    txna ApplicationArgs 8
    btoi
    txna ApplicationArgs 9
    btoi
    txnas Applications
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:233
    // @abimethod({ allowActions: 'NoOp' })
    callsub initApplication
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:213
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50-51
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:213
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication(admin: bytes, baseTokenId: uint64) -> void:
createApplication:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:213-214
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    // public createApplication(admin: Account, baseTokenId: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    bytec_2 // "admin_account"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:215
    // this.admin_account.value = admin
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:216
    // this.base_token_id.value = new UintN64(baseTokenId)
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    bytec_0 // "base_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:216
    // this.base_token_id.value = new UintN64(baseTokenId)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:197
    // migration_admin = GlobalState<Account>()
    bytec 12 // "migration_admin"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:217
    // this.migration_admin.value = admin
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    bytec 5 // "contract_state"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:218
    // this.contract_state.value = new UintN64(0) // inactive
    bytec 34 // 0x0000000000000000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:205
    // contract_version = GlobalState<UintN64>() // contract version number
    pushbytess "contract_version" 0x000000000000076c // "contract_version", 0x000000000000076c
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:219
    // this.contract_version.value = new UintN64(CONTRACT_VERSION)
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication(mbrTxn: uint64, ltv_bps: uint64, liq_threshold_bps: uint64, liq_bonus_bps: uint64, origination_fee_bps: uint64, protocol_share_bps: uint64, oracle_app_id: uint64, buyout_token_id: uint64, additional_rewards_commission_percentage: uint64, flux_oracle_app_id: uint64) -> void:
initApplication:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:233-245
    // @abimethod({ allowActions: 'NoOp' })
    // public initApplication(
    //   mbrTxn: gtxn.PaymentTxn,
    //   ltv_bps: uint64,
    //   liq_threshold_bps: uint64,
    //   liq_bonus_bps: uint64,
    //   origination_fee_bps: uint64,
    //   protocol_share_bps: uint64,
    //   oracle_app_id: Application,
    //   buyout_token_id: uint64,
    //   additional_rewards_commission_percentage: uint64,
    //   flux_oracle_app_id: Application,
    // ): void {
    proto 10 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:246
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:246
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:248-251
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    frame_dig -10
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:248-251
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    ==
    bz initApplication_bool_false@3
    frame_dig -10
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:3
    // export const MBR_CREATE_APP: uint64 = 400_000
    pushint 400000 // 400000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:248-251
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    ==
    bz initApplication_bool_false@3
    intc_1 // 1

initApplication_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:248-251
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:253
    // assert(additional_rewards_commission_percentage <= 100, 'COMMISSION_TOO_HIGH')
    frame_dig -2
    pushint 100 // 100
    <=
    assert // COMMISSION_TOO_HIGH
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:93
    // ltv_bps = GlobalState<uint64>()
    bytec 28 // "ltv_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:255
    // this.ltv_bps.value = ltv_bps
    frame_dig -9
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:96
    // liq_threshold_bps = GlobalState<uint64>()
    bytec 22 // "liq_threshold_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:256
    // this.liq_threshold_bps.value = liq_threshold_bps
    frame_dig -8
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:99
    // origination_fee_bps = GlobalState<uint64>()
    bytec 39 // "origination_fee_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:257
    // this.origination_fee_bps.value = origination_fee_bps
    frame_dig -6
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:168
    // accepted_collaterals_count = GlobalState<uint64>()
    bytec 20 // "accepted_collaterals_count"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:258
    // this.accepted_collaterals_count.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    bytec 15 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:259
    // this.fee_pool.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    bytec 8 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:260
    // this.circulating_lst.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    bytec_3 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:261
    // this.total_deposits.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:165
    // active_loan_records = GlobalState<uint64>()
    bytec 9 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:262
    // this.active_loan_records.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:102
    // protocol_share_bps = GlobalState<uint64>()
    bytec 40 // "protocol_share_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:263
    // this.protocol_share_bps.value = protocol_share_bps
    frame_dig -5
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:83
    // oracle_app = GlobalState<Application>()
    bytec 41 // "oracle_app"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:264
    // this.oracle_app.value = oracle_app_id
    frame_dig -4
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:265
    // this.lst_token_id.value = new UintN64(99)
    pushbytes 0x0000000000000063
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:105
    // base_bps = GlobalState<uint64>()
    bytec 23 // "base_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:266
    // this.base_bps.value = 50
    pushint 50 // 50
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:108
    // util_cap_bps = GlobalState<uint64>()
    bytec 29 // "util_cap_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:267
    // this.util_cap_bps.value = 8000 // 80% utilization cap
    pushint 8000 // 8000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:268
    // this.total_borrows.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // rate_model_type = GlobalState<uint64>()
    bytec 35 // "rate_model_type"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:269
    // this.rate_model_type.value = 0 // Default to kinked model
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:111
    // kink_norm_bps = GlobalState<uint64>()
    bytec 36 // "kink_norm_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:270
    // this.kink_norm_bps.value = 5000 // 50% kink point
    pushint 5000 // 5000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:114
    // slope1_bps = GlobalState<uint64>()
    bytec 37 // "slope1_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:271
    // this.slope1_bps.value = 1000 // 10% slope to kink
    intc_2 // 1000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:117
    // slope2_bps = GlobalState<uint64>()
    bytec 38 // "slope2_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:272
    // this.slope2_bps.value = 2000 // 20% slope after kink
    pushint 2000 // 2000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:120
    // max_apr_bps = GlobalState<uint64>()
    bytec 21 // "max_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:273
    // this.max_apr_bps.value = 6000 // 60% APR Cap by Default
    pushint 6000 // 6000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:122
    // ema_alpha_bps = GlobalState<uint64>()
    bytec 42 // "ema_alpha_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:274
    // this.ema_alpha_bps.value = 0 // No EMA smoothing by default
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:128
    // prev_apr_bps = GlobalState<uint64>()
    bytec 30 // "prev_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:275
    // this.prev_apr_bps.value = 50 // Same as base_bps by default
    pushint 50 // 50
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:131
    // util_ema_bps = GlobalState<uint64>()
    pushbytes "util_ema_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:276
    // this.util_ema_bps.value = 0 // No utilization EMA by default
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:137
    // power_gamma_q16 = GlobalState<uint64>()
    bytec 43 // "power_gamma_q16"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:277
    // this.power_gamma_q16.value = 0 // No power curve by default
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:140
    // scarcity_K_bps = GlobalState<uint64>()
    bytec 44 // "scarcity_K_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:278
    // this.scarcity_K_bps.value = 0 // No scarcity parameter by default
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    bytec 11 // "borrow_index_wad"
    // smart_contracts/orbital_lending/config.algo.ts:11
    // export const INDEX_SCALE: uint64 = 1_000_000_000_000 // 1e12
    intc 5 // 1000000000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:279
    // this.borrow_index_wad.value = INDEX_SCALE
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:149
    // last_accrual_ts = GlobalState<uint64>()
    bytec 31 // "last_accrual_ts"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:280
    // this.last_accrual_ts.value = Global.latestTimestamp
    global LatestTimestamp
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:105
    // base_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 23 // "base_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 13 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:281
    // this.last_apr_bps.value = this.base_bps.value
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:282
    // this.buyout_token_id.value = new UintN64(buyout_token_id)
    frame_dig -3
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:171
    // buyout_token_id = GlobalState<UintN64>()
    bytec 18 // "buyout_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:282
    // this.buyout_token_id.value = new UintN64(buyout_token_id)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:174
    // liq_bonus_bps = GlobalState<uint64>()
    bytec 24 // "liq_bonus_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:283
    // this.liq_bonus_bps.value = liq_bonus_bps
    frame_dig -7
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:186
    // total_commission_earned = GlobalState<uint64>()
    bytec 25 // "total_commission_earned"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:284
    // this.total_commission_earned.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:184
    // current_accumulated_commission = GlobalState<uint64>()
    bytec 19 // "current_accumulated_commission"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:285
    // this.current_accumulated_commission.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:182
    // commission_percentage = GlobalState<uint64>()
    bytec 32 // "commission_percentage"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:286
    // this.commission_percentage.value = additional_rewards_commission_percentage
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:190
    // cash_on_hand = GlobalState<uint64>()
    bytec 14 // "cash_on_hand"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:287
    // this.cash_on_hand.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:188
    // total_additional_rewards = GlobalState<uint64>()
    bytec 26 // "total_additional_rewards"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:288
    // this.total_additional_rewards.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:86
    // flux_oracle_app = GlobalState<Application>()
    bytec 33 // "flux_oracle_app"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:289
    // this.flux_oracle_app.value = flux_oracle_app_id
    frame_dig -1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:291
    // if (this.base_token_id.value.native !== 0) {
    btoi
    bz initApplication_after_if_else@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:292-299
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:294
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:295
    // xferAsset: this.base_token_id.value.native,
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:296
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:292-298
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:292-299
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit

initApplication_after_if_else@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:171
    // buyout_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 18 // "buyout_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:301
    // if (this.buyout_token_id.value.native !== 0) {
    btoi
    bz initApplication_after_if_else@10
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:302-309
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.buyout_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:304
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:171
    // buyout_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 18 // "buyout_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:305
    // xferAsset: this.buyout_token_id.value.native,
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:306
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:302-308
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.buyout_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:302-309
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.buyout_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit

initApplication_after_if_else@10:
    retsub

initApplication_bool_false@3:
    intc_0 // 0
    b initApplication_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setRateParams(base_bps: uint64, util_cap_bps: uint64, kink_norm_bps: uint64, slope1_bps: uint64, slope2_bps: uint64, max_apr_bps: uint64, max_apr_step_bps: uint64, ema_alpha_bps: uint64, power_gamma_q16: uint64, scarcity_K_bps: uint64, rate_model_type: uint64, liq_bonus_bps: uint64) -> void:
setRateParams:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:329-343
    // @abimethod({ allowActions: 'NoOp' })
    // public setRateParams(
    //   base_bps: uint64,
    //   util_cap_bps: uint64,
    //   kink_norm_bps: uint64,
    //   slope1_bps: uint64,
    //   slope2_bps: uint64,
    //   max_apr_bps: uint64,
    //   max_apr_step_bps: uint64,
    //   ema_alpha_bps: uint64,
    //   power_gamma_q16: uint64,
    //   scarcity_K_bps: uint64,
    //   rate_model_type: uint64, // or uint8
    //   liq_bonus_bps: uint64,
    // ) {
    proto 12 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:344
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:344
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    ==
    assert // UNAUTHORIZED
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:347
    // assert(util_cap_bps >= 1 && util_cap_bps <= 10_000, 'BAD_UTIL_CAP')
    frame_dig -11
    bz setRateParams_bool_false@3
    frame_dig -11
    intc_3 // 10000
    <=
    bz setRateParams_bool_false@3
    intc_1 // 1

setRateParams_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:347
    // assert(util_cap_bps >= 1 && util_cap_bps <= 10_000, 'BAD_UTIL_CAP')
    assert // BAD_UTIL_CAP
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:348
    // assert(kink_norm_bps >= 1 && kink_norm_bps < 10_000, 'BAD_KINK')
    frame_dig -10
    bz setRateParams_bool_false@7
    frame_dig -10
    intc_3 // 10000
    <
    bz setRateParams_bool_false@7
    intc_1 // 1

setRateParams_bool_merge@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:348
    // assert(kink_norm_bps >= 1 && kink_norm_bps < 10_000, 'BAD_KINK')
    assert // BAD_KINK
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:350
    // if (max_apr_bps > 0) {
    frame_dig -7
    bz setRateParams_after_if_else@14
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:351
    // assert(max_apr_bps >= base_bps, 'BAD_MAX_APR')
    frame_dig -7
    frame_dig -12
    >=
    assert // BAD_MAX_APR

setRateParams_after_if_else@14:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:353
    // assert(ema_alpha_bps <= 10_000, 'BAD_EMA_ALPHA')
    frame_dig -5
    intc_3 // 10000
    <=
    assert // BAD_EMA_ALPHA
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:356
    // assert(rate_model_type === 0 /* kinked */ || rate_model_type === 255 /* fixed */, 'UNSUPPORTED_MODEL')
    frame_dig -2
    bz setRateParams_bool_true@16
    frame_dig -2
    pushint 255 // 255
    ==
    bz setRateParams_bool_false@17

setRateParams_bool_true@16:
    intc_1 // 1

setRateParams_bool_merge@18:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:356
    // assert(rate_model_type === 0 /* kinked */ || rate_model_type === 255 /* fixed */, 'UNSUPPORTED_MODEL')
    assert // UNSUPPORTED_MODEL
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:105
    // base_bps = GlobalState<uint64>()
    bytec 23 // "base_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:357
    // this.base_bps.value = base_bps
    frame_dig -12
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:108
    // util_cap_bps = GlobalState<uint64>()
    bytec 29 // "util_cap_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:358
    // this.util_cap_bps.value = util_cap_bps
    frame_dig -11
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:111
    // kink_norm_bps = GlobalState<uint64>()
    bytec 36 // "kink_norm_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:359
    // this.kink_norm_bps.value = kink_norm_bps
    frame_dig -10
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:114
    // slope1_bps = GlobalState<uint64>()
    bytec 37 // "slope1_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:360
    // this.slope1_bps.value = slope1_bps
    frame_dig -9
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:117
    // slope2_bps = GlobalState<uint64>()
    bytec 38 // "slope2_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:361
    // this.slope2_bps.value = slope2_bps
    frame_dig -8
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:120
    // max_apr_bps = GlobalState<uint64>()
    bytec 21 // "max_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:362
    // this.max_apr_bps.value = max_apr_bps
    frame_dig -7
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:125
    // max_apr_step_bps = GlobalState<uint64>()
    pushbytes "max_apr_step_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:363
    // this.max_apr_step_bps.value = max_apr_step_bps
    frame_dig -6
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // rate_model_type = GlobalState<uint64>()
    bytec 35 // "rate_model_type"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:364
    // this.rate_model_type.value = rate_model_type
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:174
    // liq_bonus_bps = GlobalState<uint64>()
    bytec 24 // "liq_bonus_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:365
    // this.liq_bonus_bps.value = liq_bonus_bps
    frame_dig -1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:122
    // ema_alpha_bps = GlobalState<uint64>()
    bytec 42 // "ema_alpha_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:366
    // this.ema_alpha_bps.value = ema_alpha_bps
    frame_dig -5
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:137
    // power_gamma_q16 = GlobalState<uint64>()
    bytec 43 // "power_gamma_q16"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:367
    // this.power_gamma_q16.value = power_gamma_q16
    frame_dig -4
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:140
    // scarcity_K_bps = GlobalState<uint64>()
    bytec 44 // "scarcity_K_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:368
    // this.scarcity_K_bps.value = scarcity_K_bps
    frame_dig -3
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:120
    // max_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 21 // "max_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:370
    // if (this.max_apr_bps.value > 0 && this.prev_apr_bps.value > this.max_apr_bps.value) {
    bz setRateParams_after_if_else@21
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:128
    // prev_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 30 // "prev_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:120
    // max_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 21 // "max_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:370
    // if (this.max_apr_bps.value > 0 && this.prev_apr_bps.value > this.max_apr_bps.value) {
    >
    bz setRateParams_after_if_else@21
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:120
    // max_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 21 // "max_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:128
    // prev_apr_bps = GlobalState<uint64>()
    bytec 30 // "prev_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:371
    // this.prev_apr_bps.value = this.max_apr_bps.value
    swap
    app_global_put

setRateParams_after_if_else@21:
    retsub

setRateParams_bool_false@17:
    intc_0 // 0
    b setRateParams_bool_merge@18

setRateParams_bool_false@7:
    intc_0 // 0
    b setRateParams_bool_merge@8

setRateParams_bool_false@3:
    intc_0 // 0
    b setRateParams_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setContractState(state: uint64) -> void:
setContractState:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:375-376
    // @abimethod({ allowActions: 'NoOp' })
    // public setContractState(state: uint64): void {
    proto 1 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:377
    // assert(op.Txn.sender === this.admin_account.value || op.Txn.sender === this.migration_admin.value, 'UNAUTHORIZED')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:377
    // assert(op.Txn.sender === this.admin_account.value || op.Txn.sender === this.migration_admin.value, 'UNAUTHORIZED')
    ==
    bnz setContractState_bool_true@2
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:197
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 12 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:377
    // assert(op.Txn.sender === this.admin_account.value || op.Txn.sender === this.migration_admin.value, 'UNAUTHORIZED')
    ==
    bz setContractState_bool_false@3

setContractState_bool_true@2:
    intc_1 // 1

setContractState_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:377
    // assert(op.Txn.sender === this.admin_account.value || op.Txn.sender === this.migration_admin.value, 'UNAUTHORIZED')
    assert // UNAUTHORIZED
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:378
    // assert(state <= 2, 'INVALID_STATE') // 0=inactive,1=active,2=migrating
    frame_dig -1
    pushint 2 // 2
    <=
    assert // INVALID_STATE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:379
    // this.contract_state.value = new UintN64(state)
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    bytec 5 // "contract_state"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:379
    // this.contract_state.value = new UintN64(state)
    swap
    app_global_put
    retsub

setContractState_bool_false@3:
    intc_0 // 0
    b setContractState_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setMigrationAdmin(migrationAdmin: bytes) -> void:
setMigrationAdmin:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:386-387
    // @abimethod({ allowActions: 'NoOp' })
    // public setMigrationAdmin(migrationAdmin: Account): void {
    proto 1 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:388
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:388
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    ==
    assert // UNAUTHORIZED
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:197
    // migration_admin = GlobalState<Account>()
    bytec 12 // "migration_admin"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:389
    // this.migration_admin.value = migrationAdmin
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken(mbrTxn: uint64) -> void:
generateLSTToken:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:397
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    proto 1 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:398
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:398
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:399-402
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:399-402
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    ==
    bz generateLSTToken_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:4
    // export const MBR_INIT_APP: uint64 = 102_000
    pushint 102000 // 102000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:399-402
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    ==
    bz generateLSTToken_bool_false@3
    intc_1 // 1

generateLSTToken_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:399-402
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:406
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:407-418
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(baseToken.unitName),
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:409
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:410
    // total: baseToken.total,
    dig 1
    asset_params_get AssetTotal
    assert // asset exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:411
    // decimals: baseToken.decimals,
    dig 2
    asset_params_get AssetDecimals
    assert // asset exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:413
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:414
    // unitName: 'c' + String(baseToken.unitName),
    dig 4
    asset_params_get AssetUnitName
    assert // asset exists
    pushbytes "c"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:415
    // assetName: 'c' + String(baseToken.unitName),
    uncover 5
    asset_params_get AssetUnitName
    assert // asset exists
    pushbytes "c"
    swap
    concat
    itxn_field ConfigAssetName
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetManager
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:412
    // defaultFrozen: false,
    intc_0 // 0
    itxn_field ConfigAssetDefaultFrozen
    itxn_field ConfigAssetDecimals
    itxn_field ConfigAssetTotal
    itxn_field Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:407-417
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(baseToken.unitName),
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:407-418
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(baseToken.unitName),
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:419
    // this.lst_token_id.value = new UintN64(result.createdAsset.id)
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:419
    // this.lst_token_id.value = new UintN64(result.createdAsset.id)
    swap
    app_global_put
    retsub

generateLSTToken_bool_false@3:
    intc_0 // 0
    b generateLSTToken_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST(lstAssetId: uint64, mbrTxn: uint64) -> void:
optInToLST:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:428
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:429
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:429
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:430-433
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:430-433
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    ==
    bz optInToLST_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:5
    // export const MBR_OPT_IN_LST: uint64 = 2_000
    pushint 2000 // 2000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:430-433
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    ==
    bz optInToLST_bool_false@3
    intc_1 // 1

optInToLST_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:430-433
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:434
    // this.lst_token_id.value = new UintN64(lstAssetId)
    frame_dig -2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:434
    // this.lst_token_id.value = new UintN64(lstAssetId)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:437-444
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:439
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:441
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:437-443
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:437-444
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    retsub

optInToLST_bool_false@3:
    intc_0 // 0
    b optInToLST_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken(axferTxn: uint64, circulating_lst: uint64) -> void:
configureLSTToken:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:453
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:454
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:454
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:455
    // assert(this.lst_token_id.value.native === axferTxn.xferAsset.id, 'LST token not set')
    btoi
    frame_dig -2
    gtxns XferAsset
    ==
    assert // LST token not set
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:457-460
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    frame_dig -2
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:457-460
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    ==
    bz configureLSTToken_bool_false@3
    frame_dig -2
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:459
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:457-460
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    ==
    bz configureLSTToken_bool_false@3
    intc_1 // 1

configureLSTToken_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:457-460
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    bytec 8 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:461
    // this.circulating_lst.value = circulating_lst
    frame_dig -1
    app_global_put
    retsub

configureLSTToken_bool_false@3:
    intc_0 // 0
    b configureLSTToken_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice(tokenId: bytes) -> uint64:
getOraclePrice:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:470
    // getOraclePrice(tokenId: UintN64): uint64 {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:83
    // oracle_app = GlobalState<Application>()
    intc_0 // 0
    bytec 41 // "oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:472
    // const address = oracle.address
    dup
    app_params_get AppAddress
    bury 1
    assert // application exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:475-479
    // const result = abiCall(PriceOracleStub.prototype.getTokenPrice, {
    //   appId: contractAppId,
    //   args: [tokenId],
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    pushbytes 0xac13e004 // method "getTokenPrice(uint64)(uint64,uint64,uint64)"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:475-479
    // const result = abiCall(PriceOracleStub.prototype.getTokenPrice, {
    //   appId: contractAppId,
    //   args: [tokenId],
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    pushint 12 // 12
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:481
    // return result.price.native
    extract_uint64
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal(collateralTokenId: bytes, amount: uint64) -> void:
updateCollateralTotal:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:509
    // private updateCollateralTotal(collateralTokenId: UintN64, amount: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:159
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 7 // "accepted_collaterals"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:511
    // const collateral = this.accepted_collaterals(key).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:513
    // const newTotal: uint64 = collateral.totalCollateral.native + amount
    dup
    pushint 24 // 24
    extract_uint64
    frame_dig -1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:515
    // assetId: collateral.assetId,
    dig 1
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:516
    // baseAssetId: collateral.baseAssetId,
    dig 2
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:517
    // marketBaseAssetId: collateral.marketBaseAssetId,
    dig 3
    extract 16 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:518
    // totalCollateral: new UintN64(newTotal),
    uncover 3
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:519
    // originatingAppId: collateral.originatingAppId,
    uncover 4
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:514-520
    // this.accepted_collaterals(key).value = new AcceptedCollateral({
    //   assetId: collateral.assetId,
    //   baseAssetId: collateral.baseAssetId,
    //   marketBaseAssetId: collateral.marketBaseAssetId,
    //   totalCollateral: new UintN64(newTotal),
    //   originatingAppId: collateral.originatingAppId,
    // }).copy()
    uncover 4
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    box_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal(collateralTokenId: bytes, amount: uint64) -> void:
reduceCollateralTotal:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:529
    // private reduceCollateralTotal(collateralTokenId: UintN64, amount: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:159
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 7 // "accepted_collaterals"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:531
    // const collateral = this.accepted_collaterals(key).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:533
    // assert(collateral.totalCollateral.native >= amount, 'INSUFFICIENT_COLLATERAL')
    dup
    pushint 24 // 24
    extract_uint64
    dup
    frame_dig -1
    >=
    assert // INSUFFICIENT_COLLATERAL
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:534
    // const newTotal: uint64 = collateral.totalCollateral.native - amount
    frame_dig -1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:536
    // assetId: collateral.assetId,
    dig 1
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:537
    // baseAssetId: collateral.baseAssetId,
    dig 2
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:538
    // marketBaseAssetId: collateral.marketBaseAssetId,
    dig 3
    extract 16 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:539
    // totalCollateral: new UintN64(newTotal),
    uncover 3
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:540
    // originatingAppId: collateral.originatingAppId,
    uncover 4
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:535-541
    // this.accepted_collaterals(key).value = new AcceptedCollateral({
    //   assetId: collateral.assetId,
    //   baseAssetId: collateral.baseAssetId,
    //   marketBaseAssetId: collateral.marketBaseAssetId,
    //   totalCollateral: new UintN64(newTotal),
    //   originatingAppId: collateral.originatingAppId,
    // }).copy()
    uncover 4
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    box_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType(collateralTokenId: bytes, collateralBaseTokenId: bytes, mbrTxn: uint64, originatingAppId: bytes) -> void:
addNewCollateralType:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:551-557
    // @abimethod({ allowActions: 'NoOp' })
    // addNewCollateralType(
    //   collateralTokenId: UintN64,
    //   collateralBaseTokenId: UintN64,
    //   mbrTxn: gtxn.PaymentTxn,
    //   originatingAppId: UintN64,
    // ): void {
    proto 4 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:558
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:559
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:559
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    ==
    assert // UNAUTHORIZED
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:560
    // assert(collateralTokenId.native !== baseToken.id, 'CANNOT_USE_BASE_AS_COLLATERAL')
    frame_dig -4
    btoi
    dup
    uncover 2
    !=
    assert // CANNOT_USE_BASE_AS_COLLATERAL
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:159
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 7 // "accepted_collaterals"
    frame_dig -4
    concat
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:561
    // assert(!this.collateralExists(collateralTokenId), 'COLLATERAL_ALREADY_EXISTS')
    !
    assert // COLLATERAL_ALREADY_EXISTS
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:562-569
    // assertMatch(
    //   mbrTxn,
    //   {
    //     sender: this.admin_account.value,
    //     amount: MBR_COLLATERAL,
    //   },
    //   'INSUFFICIENT_MBR',
    // )
    frame_dig -2
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:562-569
    // assertMatch(
    //   mbrTxn,
    //   {
    //     sender: this.admin_account.value,
    //     amount: MBR_COLLATERAL,
    //   },
    //   'INSUFFICIENT_MBR',
    // )
    ==
    bz addNewCollateralType_bool_false@3
    frame_dig -2
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:6
    // export const MBR_COLLATERAL: uint64 = 101_000
    pushint 101000 // 101000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:562-569
    // assertMatch(
    //   mbrTxn,
    //   {
    //     sender: this.admin_account.value,
    //     amount: MBR_COLLATERAL,
    //   },
    //   'INSUFFICIENT_MBR',
    // )
    ==
    bz addNewCollateralType_bool_false@3
    intc_1 // 1

addNewCollateralType_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:562-569
    // assertMatch(
    //   mbrTxn,
    //   {
    //     sender: this.admin_account.value,
    //     amount: MBR_COLLATERAL,
    //   },
    //   'INSUFFICIENT_MBR',
    // )
    assert // INSUFFICIENT_MBR
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:571-577
    // const newAcceptedCollateral: AcceptedCollateral = new AcceptedCollateral({
    //   assetId: collateralTokenId,
    //   baseAssetId: collateralBaseTokenId,
    //   marketBaseAssetId: this.base_token_id.value,
    //   totalCollateral: new UintN64(0),
    //   originatingAppId: originatingAppId,
    // })
    frame_dig -4
    frame_dig -3
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:575
    // totalCollateral: new UintN64(0),
    bytec 34 // 0x0000000000000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:571-577
    // const newAcceptedCollateral: AcceptedCollateral = new AcceptedCollateral({
    //   assetId: collateralTokenId,
    //   baseAssetId: collateralBaseTokenId,
    //   marketBaseAssetId: this.base_token_id.value,
    //   totalCollateral: new UintN64(0),
    //   originatingAppId: originatingAppId,
    // })
    concat
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:579
    // this.accepted_collaterals(key).value = newAcceptedCollateral.copy()
    frame_dig 1
    dup
    uncover 2
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:168
    // accepted_collaterals_count = GlobalState<uint64>()
    intc_0 // 0
    bytec 20 // "accepted_collaterals_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:580
    // this.accepted_collaterals_count.value = this.accepted_collaterals_count.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:168
    // accepted_collaterals_count = GlobalState<uint64>()
    bytec 20 // "accepted_collaterals_count"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:580
    // this.accepted_collaterals_count.value = this.accepted_collaterals_count.value + 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:581-589
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:583
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:584
    // assetReceiver: Global.currentApplicationAddress,
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:586
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig 0
    itxn_field XferAsset
    itxn_field AssetReceiver
    itxn_field Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:581-588
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:581-589
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:591
    // assert(this.collateralExists(collateralTokenId), 'unsupported collateral')
    assert // unsupported collateral
    retsub

addNewCollateralType_bool_false@3:
    intc_0 // 0
    b addNewCollateralType_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo(depositTxn: uint64, amount: uint64, mbrTxn: uint64) -> void:
depositAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:654-655
    // @abimethod({ allowActions: 'NoOp' })
    // depositAlgo(depositTxn: gtxn.PaymentTxn, amount: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 3 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    bury 1
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:657
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:658-661
    // assertMatch(depositTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: amount,
    // })
    frame_dig -3
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:659
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:658-661
    // assertMatch(depositTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: amount,
    // })
    ==
    bz depositAlgo_bool_false@3
    frame_dig -3
    gtxns Amount
    frame_dig -2
    ==
    bz depositAlgo_bool_false@3
    intc_1 // 1

depositAlgo_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:658-661
    // assertMatch(depositTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:662-664
    // assertMatch(mbrTxn, {
    //   amount: DEPOSIT_MBR,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:17
    // export const DEPOSIT_MBR: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:662-664
    // assertMatch(mbrTxn, {
    //   amount: DEPOSIT_MBR,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:665
    // this.addCash(amount)
    frame_dig -2
    callsub addCash
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:667
    // const _interestSlice = this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:670
    // if (this.total_deposits.value === 0) {
    bnz depositAlgo_else_body@6
    frame_dig -2

depositAlgo_after_if_else@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:675-682
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:677
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:678
    // xferAsset: this.lst_token_id.value.native,
    btoi
    dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:675-681
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:675-682
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:684
    // this.circulating_lst.value += lstDue
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    bytec 8 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:684
    // this.circulating_lst.value += lstDue
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:685
    // this.total_deposits.value += amount
    frame_dig -2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    bytec_3 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:685
    // this.total_deposits.value += amount
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:686
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 13 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:686
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:689
    // assetId: new UintN64(this.base_token_id.value.native),
    btoi
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:690
    // userAddress: new Address(op.Txn.sender),
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:688-691
    // const depositKey = new DepositRecordKey({
    //   assetId: new UintN64(this.base_token_id.value.native),
    //   userAddress: new Address(op.Txn.sender),
    // })
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:176
    // deposit_record = BoxMap<DepositRecordKey, DepositRecord>({ keyPrefix: 'deposit_record' })
    bytec 45 // "deposit_record"
    swap
    concat
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:692
    // if (this.deposit_record(depositKey).exists) {
    box_len
    bury 1
    bz depositAlgo_else_body@10
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:693
    // const existingRecord = this.deposit_record(depositKey).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:694
    // const newAmount: uint64 = existingRecord.depositAmount.native + amount
    dup
    intc_0 // 0
    extract_uint64
    frame_dig -2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:696
    // assetId: existingRecord.assetId,
    swap
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:697
    // depositAmount: new UintN64(newAmount),
    swap
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:695-698
    // this.deposit_record(depositKey).value = new DepositRecord({
    //   assetId: existingRecord.assetId,
    //   depositAmount: new UintN64(newAmount),
    // }).copy()
    swap
    concat
    box_put
    retsub

depositAlgo_else_body@10:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:701
    // assetId: new UintN64(this.base_token_id.value.native),
    btoi
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:702
    // depositAmount: new UintN64(amount),
    frame_dig -2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:700-703
    // this.deposit_record(depositKey).value = new DepositRecord({
    //   assetId: new UintN64(this.base_token_id.value.native),
    //   depositAmount: new UintN64(amount),
    // }).copy()
    swap
    concat
    box_put
    retsub

depositAlgo_else_body@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:600
    // const [highBits1, lowBits1] = mulw(this.circulating_lst.value, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:602
    // const lstRatio = divw(highBits1, lowBits1, this.total_deposits.value)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:604
    // const [highBits2, lowBits2] = mulw(lstRatio, amount)
    frame_dig -2
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:605
    // return divw(highBits2, lowBits2, BASIS_POINTS)
    divw
    b depositAlgo_after_if_else@7

depositAlgo_bool_false@3:
    intc_0 // 0
    b depositAlgo_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit(assetTransferTxn: uint64, amount: uint64, lstAppId: uint64, mbrTxn: uint64) -> void:
withdrawDeposit:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:716-722
    // @abimethod({ allowActions: 'NoOp' })
    // withdrawDeposit(
    //   assetTransferTxn: gtxn.AssetTransferTxn,
    //   amount: uint64,
    //   lstAppId: uint64,
    //   mbrTxn: gtxn.PaymentTxn,
    // ): void {
    proto 4 0
    intc_0 // 0
    dup
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:723
    // const lstAsset = Asset(this.lst_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:724
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:725-729
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    frame_dig -4
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:726
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:725-729
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    ==
    bz withdrawDeposit_bool_false@4
    frame_dig -4
    gtxns XferAsset
    frame_dig 3
    ==
    bz withdrawDeposit_bool_false@4
    frame_dig -4
    gtxns AssetAmount
    frame_dig -3
    ==
    bz withdrawDeposit_bool_false@4
    intc_1 // 1

withdrawDeposit_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:725-729
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:731-733
    // assertMatch(mbrTxn, {
    //   amount: 3000,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:732
    // amount: 3000,
    pushint 3000 // 3000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:731-733
    // assertMatch(mbrTxn, {
    //   amount: 3000,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:735
    // const _interestSlice = this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:739
    // if (lstAppId === Global.currentApplicationId.id) {
    frame_dig -2
    global CurrentApplicationID
    ==
    bz withdrawDeposit_else_body@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:642
    // const [hi, lo] = mulw(totalDepositsExternal, amount)
    frame_dig -3
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:643
    // return divw(hi, lo, circulatingExternalLST)
    uncover 2
    divw

withdrawDeposit_after_if_else@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:744
    // this.removeCash(asaDue)
    dup
    callsub removeCash
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:746
    // assert(Global.currentApplicationAddress.balance - Global.currentApplicationAddress.minBalance >= asaDue)
    global CurrentApplicationAddress
    acct_params_get AcctBalance
    assert // account funded
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    -
    dig 1
    >=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:748-754
    // itxn
    //   .payment({
    //     receiver: op.Txn.sender,
    //     amount: asaDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:750
    // receiver: op.Txn.sender,
    txn Sender
    dig 1
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:748-753
    // itxn
    //   .payment({
    //     receiver: op.Txn.sender,
    //     amount: asaDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:748-754
    // itxn
    //   .payment({
    //     receiver: op.Txn.sender,
    //     amount: asaDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:756
    // this.circulating_lst.value -= amount // LST burned
    frame_dig -3
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    bytec 8 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:756
    // this.circulating_lst.value -= amount // LST burned
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:757
    // this.total_deposits.value -= asaDue // ASA returned
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    bytec_3 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:757
    // this.total_deposits.value -= asaDue // ASA returned
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:758
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 13 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:758
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:761
    // assetId: new UintN64(this.base_token_id.value.native),
    btoi
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:762
    // userAddress: new Address(op.Txn.sender),
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:760-763
    // const depositKey = new DepositRecordKey({
    //   assetId: new UintN64(this.base_token_id.value.native),
    //   userAddress: new Address(op.Txn.sender),
    // })
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:176
    // deposit_record = BoxMap<DepositRecordKey, DepositRecord>({ keyPrefix: 'deposit_record' })
    bytec 45 // "deposit_record"
    swap
    concat
    dup
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:764
    // if (this.deposit_record(depositKey).exists) {
    box_len
    bury 1
    bz withdrawDeposit_after_if_else@14
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:765
    // const existingRecord = this.deposit_record(depositKey).value.copy()
    frame_dig 1
    box_get
    swap
    dup
    cover 2
    frame_bury 0
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:766
    // const newAmount: uint64 = existingRecord.depositAmount.native - amount
    intc_0 // 0
    extract_uint64
    frame_dig -3
    -
    dup
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:768
    // if (newAmount === 0) {
    bnz withdrawDeposit_else_body@12
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:769
    // this.deposit_record(depositKey).delete()
    frame_dig 1
    box_del
    pop

withdrawDeposit_after_if_else@14:
    retsub

withdrawDeposit_else_body@12:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:772
    // assetId: existingRecord.assetId,
    frame_dig 0
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:773
    // depositAmount: new UintN64(newAmount),
    frame_dig 2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:771-774
    // this.deposit_record(depositKey).value = new DepositRecord({
    //   assetId: existingRecord.assetId,
    //   depositAmount: new UintN64(newAmount),
    // }).copy()
    swap
    concat
    frame_dig 1
    swap
    box_put
    retsub

withdrawDeposit_else_body@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:617-620
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 16 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:617-620
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:621-624
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 17 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:621-624
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:627
    // const [hi, lo] = mulw(totalDepositsExternal, amount)
    frame_dig -3
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:628
    // return divw(hi, lo, circulatingExternalLST)
    uncover 2
    divw
    b withdrawDeposit_after_if_else@8

withdrawDeposit_bool_false@4:
    intc_0 // 0
    b withdrawDeposit_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow(assetTransferTxn: uint64, requestedLoanAmount: uint64, collateralAmount: uint64, lstApp: uint64, collateralTokenId: bytes, mbrTxn: uint64) -> void:
borrow:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:814-822
    // @abimethod({ allowActions: 'NoOp' })
    // borrow(
    //   assetTransferTxn: gtxn.AssetTransferTxn,
    //   requestedLoanAmount: uint64,
    //   collateralAmount: uint64,
    //   lstApp: uint64,
    //   collateralTokenId: UintN64,
    //   mbrTxn: gtxn.PaymentTxn,
    // ): void {
    proto 6 0
    intc_0 // 0
    pushbytes ""
    dupn 4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:823
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 6 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:825
    // const hasLoan = this.loan_record(op.Txn.sender).exists
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:825
    // const hasLoan = this.loan_record(op.Txn.sender).exists
    box_len
    dup
    uncover 2
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:826
    // const _interestSlice = this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:828
    // if (hasLoan) {
    bz borrow_else_body@2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:829
    // const existingCollateral = this.getLoanRecord(op.Txn.sender).collateralAmount
    txn Sender
    callsub getLoanRecord
    pushint 40 // 40
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:830
    // collateralToUse = existingCollateral.native + collateralAmount
    extract_uint64
    frame_dig -4
    +
    frame_bury 1

borrow_after_if_else@3:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1904
    // assertMatch(mbrTxn, { amount: VALIDATE_BORROW_FEE })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:8
    // export const VALIDATE_BORROW_FEE: uint64 = 4_000
    pushint 4000 // 4000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1904
    // assertMatch(mbrTxn, { amount: VALIDATE_BORROW_FEE })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1906-1910
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: collateralAmount,
    //   xferAsset: Asset(collateralTokenId.native),
    // })
    frame_dig -6
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1907
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1906-1910
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: collateralAmount,
    //   xferAsset: Asset(collateralTokenId.native),
    // })
    ==
    bz borrow_bool_false@34
    frame_dig -6
    gtxns AssetAmount
    frame_dig -4
    ==
    bz borrow_bool_false@34
    frame_dig -6
    gtxns XferAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1909
    // xferAsset: Asset(collateralTokenId.native),
    frame_dig -2
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1906-1910
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: collateralAmount,
    //   xferAsset: Asset(collateralTokenId.native),
    // })
    ==
    bz borrow_bool_false@34
    intc_1 // 1

borrow_bool_merge@35:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1906-1910
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: collateralAmount,
    //   xferAsset: Asset(collateralTokenId.native),
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:159
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 7 // "accepted_collaterals"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1912
    // assert(this.collateralExists(collateralTokenId), 'unsupported collateral')
    assert // unsupported collateral
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:835
    // const collateralUSD = this.calculateCollateralValueUSD(collateralTokenId, collateralToUse, lstApp)
    frame_dig -2
    frame_dig 1
    frame_dig -3
    callsub calculateCollateralValueUSD
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:93
    // ltv_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 28 // "ltv_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:836
    // const maxBorrowUSD: uint64 = (collateralUSD * this.ltv_bps.value) / BASIS_POINTS
    *
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:836
    // const maxBorrowUSD: uint64 = (collateralUSD * this.ltv_bps.value) / BASIS_POINTS
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:837
    // const baseTokenOraclePrice: uint64 = this.getOraclePrice(this.base_token_id.value)
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1964
    // const [rH, rL] = mulw(requestedLoanAmount, baseTokenOraclePrice)
    frame_dig -5
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 4 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1965
    // const requestedLoanUSD = divw(rH, rL, USD_MICRO_UNITS)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1967
    // assert(requestedLoanUSD <= maxBorrowUSD, 'exceeds LTV limit')
    >=
    assert // exceeds LTV limit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:108
    // util_cap_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 29 // "util_cap_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1979
    // const [h, l] = mulw(this.total_deposits.value, this.util_cap_bps.value)
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1980
    // return divw(h, l, BASIS_POINTS)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1969
    // assert(this.total_borrows.value + requestedLoanAmount <= capBorrow, 'UTIL_CAP_EXCEEDED')
    frame_dig -5
    +
    >=
    assert // UTIL_CAP_EXCEEDED
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:841
    // let userTier: UintN64 = new UintN64(0)
    bytec 34 // 0x0000000000000000
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:86
    // flux_oracle_app = GlobalState<Application>()
    intc_0 // 0
    bytec 33 // "flux_oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:842
    // if (this.flux_oracle_app.value.id !== 0) {
    bz borrow_after_if_else@6
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:843-850
    // userTier = abiCall(FluxGateStub.prototype.getUserTier, {
    //   appId: this.flux_oracle_app.value.id,
    //   args: [new Address(op.Txn.sender)],
    //   sender: Global.currentApplicationAddress,
    //   fee: STANDARD_TXN_FEE,
    //   apps: [this.flux_oracle_app.value],
    //   accounts: [op.Txn.sender],
    // }).returnValue
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:86
    // flux_oracle_app = GlobalState<Application>()
    intc_0 // 0
    bytec 33 // "flux_oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:846
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:86
    // flux_oracle_app = GlobalState<Application>()
    intc_0 // 0
    bytec 33 // "flux_oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:849
    // accounts: [op.Txn.sender],
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:845
    // args: [new Address(op.Txn.sender)],
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:843-850
    // userTier = abiCall(FluxGateStub.prototype.getUserTier, {
    //   appId: this.flux_oracle_app.value.id,
    //   args: [new Address(op.Txn.sender)],
    //   sender: Global.currentApplicationAddress,
    //   fee: STANDARD_TXN_FEE,
    //   apps: [this.flux_oracle_app.value],
    //   accounts: [op.Txn.sender],
    // }).returnValue
    pushbytes 0xd4d7aa5c // method "getUserTier(address)uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field Accounts
    itxn_field Applications
    itxn_field Sender
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:843-850
    // userTier = abiCall(FluxGateStub.prototype.getUserTier, {
    //   appId: this.flux_oracle_app.value.id,
    //   args: [new Address(op.Txn.sender)],
    //   sender: Global.currentApplicationAddress,
    //   fee: STANDARD_TXN_FEE,
    //   apps: [this.flux_oracle_app.value],
    //   accounts: [op.Txn.sender],
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    frame_bury 0
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix

borrow_after_if_else@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:852
    // const calculatedFee = this.computeFees(requestedLoanAmount, userTier.native)
    frame_dig 0
    btoi
    dup
    frame_bury 5
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:99
    // origination_fee_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 39 // "origination_fee_bps"
    app_global_get_ex
    swap
    frame_bury 4
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:783
    // if (userTier === 1) {
    intc_1 // 1
    ==
    bz borrow_else_body@17
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:784
    // const [hi, lo] = mulw(initialFee, 90)
    frame_dig 4
    pushint 90 // 90
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:785
    // effectiveFeeBps = divw(hi, lo, 100)
    pushint 100 // 100
    divw
    frame_bury 3

borrow_after_if_else@26:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:797
    // const [feeHi, feeLo] = mulw(depositAmount, effectiveFeeBps)
    frame_dig -5
    frame_dig 3
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:798
    // const fee: uint64 = divw(feeHi, feeLo, 10_000)
    intc_3 // 10000
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1990
    // const disbursement: uint64 = requestedAmount - calculatedFee
    frame_dig -5
    dig 1
    -
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 15 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1992
    // this.fee_pool.value += calculatedFee
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    bytec 15 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1992
    // this.fee_pool.value += calculatedFee
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:856
    // if (hasLoan) {
    frame_dig 6
    bz borrow_else_body@8
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:858
    // op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2016
    // const existingLoan = this.getLoanRecord(borrower)
    dup
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2018
    // const liveDebt: uint64 = this.syncBorrowerSnapshot(borrower)
    dig 1
    callsub syncBorrowerSnapshot
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2026
    // const newDebt: uint64 = liveDebt + disbursement
    frame_dig 2
    dup
    cover 3
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2031
    // collateralTokenId: existingLoan.collateralTokenId,
    dig 1
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2032
    // collateralAmount: new UintN64(existingLoan.collateralAmount.native + collateralAmount),
    uncover 2
    pushint 40 // 40
    extract_uint64
    frame_dig -4
    +
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2035
    // amount: new UintN64(disbursement),
    uncover 4
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2036
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2034-2038
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // borrow
    // }),
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2037
    // changeType: new UintN8(0), // borrow
    bytec 27 // 0x00
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2034-2038
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // borrow
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2039
    // principal: new UintN64(newDebt),
    uncover 4
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2040
    // userIndexWad: new UintN64(this.borrow_index_wad.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2029-2041
    // this.loan_record(borrower).value = new LoanRecord({
    //   borrowerAddress: new Address(borrower.bytes),
    //   collateralTokenId: existingLoan.collateralTokenId,
    //   collateralAmount: new UintN64(existingLoan.collateralAmount.native + collateralAmount),
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(disbursement),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(0), // borrow
    //   }),
    //   principal: new UintN64(newDebt),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    // }).copy()
    dig 6
    uncover 6
    concat
    uncover 5
    concat
    uncover 3
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 6 // "loan_record"
    uncover 2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2029-2041
    // this.loan_record(borrower).value = new LoanRecord({
    //   borrowerAddress: new Address(borrower.bytes),
    //   collateralTokenId: existingLoan.collateralTokenId,
    //   collateralAmount: new UintN64(existingLoan.collateralAmount.native + collateralAmount),
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(disbursement),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(0), // borrow
    //   }),
    //   principal: new UintN64(newDebt),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    // }).copy()
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2044
    // this.updateCollateralTotal(collateralTokenId, collateralAmount)
    frame_dig -2
    frame_dig -4
    callsub updateCollateralTotal

borrow_after_if_else@9:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:871
    // this.disburseFunds(op.Txn.sender, disbursement)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2052-2058
    // itxn
    //   .payment({
    //     receiver: borrower,
    //     amount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    frame_dig 2
    dup
    cover 2
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2052-2057
    // itxn
    //   .payment({
    //     receiver: borrower,
    //     amount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2052-2058
    // itxn
    //   .payment({
    //     receiver: borrower,
    //     amount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:872
    // this.removeCash(disbursement)
    dup
    callsub removeCash
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:873
    // this.total_borrows.value = this.total_borrows.value + disbursement
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:873
    // this.total_borrows.value = this.total_borrows.value + disbursement
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:874
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 13 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:874
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    retsub

borrow_else_body@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:867
    // this.mintLoanRecord(disbursement, collateralTokenId, op.Txn.sender, collateralAmount)
    txn Sender
    frame_dig 2
    frame_dig -2
    uncover 2
    frame_dig -4
    callsub mintLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:868
    // this.updateCollateralTotal(collateralTokenId, collateralAmount)
    frame_dig -2
    frame_dig -4
    callsub updateCollateralTotal
    b borrow_after_if_else@9

borrow_else_body@17:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:786
    // } else if (userTier === 2) {
    frame_dig 5
    pushint 2 // 2
    ==
    bz borrow_else_body@19
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:787
    // const [hi, lo] = mulw(initialFee, 75)
    frame_dig 4
    pushint 75 // 75
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:788
    // effectiveFeeBps = divw(hi, lo, 100)
    pushint 100 // 100
    divw
    frame_bury 3
    b borrow_after_if_else@26

borrow_else_body@19:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:789
    // } else if (userTier === 3) {
    frame_dig 5
    pushint 3 // 3
    ==
    bz borrow_else_body@21
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:790
    // const [hi, lo] = mulw(initialFee, 50)
    frame_dig 4
    pushint 50 // 50
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:791
    // effectiveFeeBps = divw(hi, lo, 100)
    pushint 100 // 100
    divw
    frame_bury 3
    b borrow_after_if_else@26

borrow_else_body@21:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:792
    // } else if (userTier >= 4) {
    frame_dig 5
    pushint 4 // 4
    >=
    frame_dig 4
    frame_bury 3
    bz borrow_after_if_else@26
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:793
    // const [hi, lo] = mulw(initialFee, 25)
    frame_dig 4
    pushint 25 // 25
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:794
    // effectiveFeeBps = divw(hi, lo, 100)
    pushint 100 // 100
    divw
    frame_bury 3
    b borrow_after_if_else@26

borrow_bool_false@34:
    intc_0 // 0
    b borrow_bool_merge@35

borrow_else_body@2:
    frame_dig -4
    frame_bury 1
    b borrow_after_if_else@3


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.mintLoanRecord(disbursement: uint64, collateralTokenId: bytes, borrowerAddress: bytes, collateralAmount: uint64) -> void:
mintLoanRecord:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:884-889
    // private mintLoanRecord(
    //   disbursement: uint64,
    //   collateralTokenId: UintN64,
    //   borrowerAddress: Account,
    //   collateralAmount: uint64,
    // ): void {
    proto 4 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:895
    // collateralAmount: new UintN64(collateralAmount),
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:898
    // amount: new UintN64(disbursement),
    frame_dig -4
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:899
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:897-901
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // borrow
    // }),
    dig 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:900
    // changeType: new UintN8(0), // borrow
    bytec 27 // 0x00
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:897-901
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // borrow
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:903
    // userIndexWad: new UintN64(this.borrow_index_wad.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:892-904
    // this.loan_record(borrowerAddress).value = new LoanRecord({
    //   borrowerAddress: new Address(borrowerAddress.bytes),
    //   collateralTokenId,
    //   collateralAmount: new UintN64(collateralAmount),
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(disbursement),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(0), // borrow
    //   }),
    //   principal: new UintN64(disbursement),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    // }).copy()
    frame_dig -2
    frame_dig -3
    concat
    uncover 5
    concat
    uncover 2
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 6 // "loan_record"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:892-904
    // this.loan_record(borrowerAddress).value = new LoanRecord({
    //   borrowerAddress: new Address(borrowerAddress.bytes),
    //   collateralTokenId,
    //   collateralAmount: new UintN64(collateralAmount),
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(disbursement),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(0), // borrow
    //   }),
    //   principal: new UintN64(disbursement),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    // }).copy()
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:165
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:906
    // this.active_loan_records.value = this.active_loan_records.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:165
    // active_loan_records = GlobalState<uint64>()
    bytec 9 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:906
    // this.active_loan_records.value = this.active_loan_records.value + 1
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addLoanRecordExternal(disbursement: uint64, collateralTokenId: bytes, borrowerAddress: bytes, collateralAmount: uint64) -> void:
addLoanRecordExternal:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:909-915
    // @abimethod({ allowActions: 'NoOp' })
    // public addLoanRecordExternal(
    //   disbursement: uint64,
    //   collateralTokenId: UintN64,
    //   borrowerAddress: Account,
    //   collateralAmount: uint64,
    // ): void {
    proto 4 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:916
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:916
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    ==
    assert // UNAUTHORIZED
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:917
    // this.mintLoanRecord(disbursement, collateralTokenId, borrowerAddress, collateralAmount)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub mintLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:918
    // this.updateCollateralTotal(collateralTokenId, collateralAmount)
    frame_dig -3
    frame_dig -1
    callsub updateCollateralTotal
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:919
    // this.total_borrows.value = this.total_borrows.value + disbursement
    frame_dig -4
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:919
    // this.total_borrows.value = this.total_borrows.value + disbursement
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:920
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 13 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:920
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest(debtor: bytes, templateReserveAddress: bytes) -> void:
accrueLoanInterest:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:923-924
    // @abimethod({ allowActions: 'NoOp' })
    // accrueLoanInterest(debtor: Account, templateReserveAddress: Account): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 6 // "loan_record"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:925
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:926
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:927
    // this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:929
    // this.syncBorrowerSnapshot(debtor)
    frame_dig -2
    callsub syncBorrowerSnapshot
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:931
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 13 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:931
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps() -> uint64:
current_apr_bps:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:988
    // public current_apr_bps(): uint64 {
    proto 0 1
    pushbytes ""
    dupn 6
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    swap
    dup
    uncover 2
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    swap
    cover 2
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:108
    // util_cap_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 29 // "util_cap_bps"
    app_global_get_ex
    swap
    cover 2
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:943
    // if (D === 0) return 0
    bnz current_apr_bps_after_if_else@14
    intc_0 // 0
    frame_bury 0

current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@17:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // rate_model_type = GlobalState<uint64>()
    intc_0 // 0
    bytec 35 // "rate_model_type"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:995
    // const apr = this.rate_model_type.value === 0 ? this.apr_bps_kinked(U_used) : this.base_bps.value // Fixed APR fallback
    bnz current_apr_bps_ternary_false@2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:105
    // base_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 23 // "base_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:111
    // kink_norm_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 36 // "kink_norm_bps"
    app_global_get_ex
    swap
    dup
    cover 2
    cover 3
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:114
    // slope1_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 37 // "slope1_bps"
    app_global_get_ex
    swap
    frame_bury 5
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:117
    // slope2_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 38 // "slope2_bps"
    app_global_get_ex
    swap
    frame_bury 6
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:968
    // if (U_norm_bps <= kink_norm_bps) {
    frame_dig 0
    >=
    bz current_apr_bps_else_body@6
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:969
    // const [hi1, lo1] = mulw(slope1_bps, U_norm_bps)
    frame_dig 5
    frame_dig 0
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:970
    // apr = base_bps + divw(hi1, lo1, kink_norm_bps)
    uncover 3
    divw
    +
    frame_bury 1

current_apr_bps_after_if_else@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:120
    // max_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 21 // "max_apr_bps"
    app_global_get_ex
    swap
    dup
    cover 2
    frame_bury 4
    assert // check GlobalState exists
    frame_dig 1
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:979
    // if (maxCap > 0 && apr > maxCap) apr = maxCap
    bz current_apr_bps_after_if_else@10
    frame_dig 1
    dup
    frame_dig 4
    >
    swap
    frame_bury 2
    bz current_apr_bps_after_if_else@10
    frame_dig 4
    frame_bury 2

current_apr_bps_after_if_else@10:
    frame_dig 2
    frame_bury 1

current_apr_bps_ternary_merge@3:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:128
    // prev_apr_bps = GlobalState<uint64>()
    bytec 30 // "prev_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1007
    // this.prev_apr_bps.value = apr
    frame_dig 1
    dup
    cover 2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1008
    // return apr
    frame_bury 0
    retsub

current_apr_bps_else_body@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:972
    // const over: uint64 = U_norm_bps - kink_norm_bps
    frame_dig 0
    uncover 2
    dup
    cover 2
    -
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:973
    // const denom: uint64 = BASIS_POINTS - kink_norm_bps
    uncover 2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:974
    // const [hi2, lo2] = mulw(slope2_bps, over)
    frame_dig 6
    uncover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:975
    // apr = base_bps + slope1_bps + divw(hi2, lo2, denom)
    uncover 3
    frame_dig 5
    +
    cover 2
    uncover 3
    divw
    +
    frame_bury 1
    b current_apr_bps_after_if_else@7

current_apr_bps_ternary_false@2:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:105
    // base_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 23 // "base_bps"
    app_global_get_ex
    assert // check GlobalState exists
    frame_bury 1
    b current_apr_bps_ternary_merge@3

current_apr_bps_after_if_else@14:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:946
    // const [hiCap, loCap] = mulw(D, cap_bps)
    frame_dig 7
    frame_dig 9
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:947
    // const capBorrow = divw(hiCap, loCap, BASIS_POINTS)
    divw
    dup
    frame_bury 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:948
    // if (capBorrow === 0) return 0
    bnz current_apr_bps_after_if_else@16
    intc_0 // 0
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:990
    // const U_raw: uint64 = this.util_norm_bps()
    b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@17

current_apr_bps_after_if_else@16:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:950
    // const cappedB = B <= capBorrow ? B : capBorrow
    frame_dig 8
    dup
    frame_dig 3
    dup
    cover 2
    <=
    dig 1
    uncover 3
    uncover 2
    select
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:951
    // const [hiN, loN] = mulw(cappedB, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:952
    // return divw(hiN, loN, capBorrow)
    uncover 2
    divw
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:990
    // const U_raw: uint64 = this.util_norm_bps()
    b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@17


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot(rec: bytes) -> uint64, bytes:
currentDebtFromSnapshot:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1037
    // private currentDebtFromSnapshot(rec: LoanRecord): uint64 {
    proto 1 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1038
    // const p: uint64 = rec.principal.native
    frame_dig -1
    pushint 73 // 73
    extract_uint64
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1039
    // if (p === 0) return 0
    bnz currentDebtFromSnapshot_after_if_else@2
    intc_0 // 0
    frame_dig -1
    uncover 2
    retsub

currentDebtFromSnapshot_after_if_else@2:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1040
    // const [hi, lo] = mulw(p, this.borrow_index_wad.value)
    frame_dig 0
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1041
    // return divw(hi, lo, rec.userIndexWad.native)
    frame_dig -1
    pushint 81 // 81
    extract_uint64
    divw
    frame_dig -1
    uncover 2
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot(borrower: bytes) -> uint64:
syncBorrowerSnapshot:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1050
    // private syncBorrowerSnapshot(borrower: Account): uint64 {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 6 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1051
    // const rec = this.loan_record(borrower).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1052
    // const liveDebt: uint64 = this.currentDebtFromSnapshot(rec)
    callsub currentDebtFromSnapshot
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1055
    // collateralTokenId: rec.collateralTokenId,
    dup
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1056
    // collateralAmount: rec.collateralAmount,
    dig 1
    extract 40 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1058
    // lastDebtChange: rec.lastDebtChange.copy(), // keep your audit trail
    uncover 3
    extract 48 17 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1059
    // principal: new UintN64(liveDebt),
    dig 4
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1060
    // userIndexWad: new UintN64(this.borrow_index_wad.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1053-1061
    // const newRec = new LoanRecord({
    //   borrowerAddress: new Address(borrower.bytes),
    //   collateralTokenId: rec.collateralTokenId,
    //   collateralAmount: rec.collateralAmount,
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: rec.lastDebtChange.copy(), // keep your audit trail
    //   principal: new UintN64(liveDebt),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    // })
    frame_dig -1
    uncover 6
    concat
    uncover 5
    concat
    uncover 3
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1062
    // this.loan_record(borrower).value = newRec.copy()
    uncover 2
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1063
    // return liveDebt
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket() -> uint64:
accrueMarket:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1072
    // private accrueMarket(): uint64 {
    proto 0 1
    pushbytes ""
    dupn 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1073
    // const now: uint64 = Global.latestTimestamp
    global LatestTimestamp
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:149
    // last_accrual_ts = GlobalState<uint64>()
    intc_0 // 0
    bytec 31 // "last_accrual_ts"
    app_global_get_ex
    swap
    dup
    cover 2
    cover 3
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1075
    // if (now <= last) return 0
    <=
    bz accrueMarket_after_if_else@2
    intc_0 // 0
    frame_bury 0
    retsub

accrueMarket_after_if_else@2:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1077
    // const deltaT: uint64 = now - last
    frame_dig 4
    frame_dig 5
    -
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1019
    // if (deltaT === 0) return 0
    bnz accrueMarket_after_if_else@9
    intc_0 // 0
    frame_bury 2

accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.sliceFactorWad@10:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1086
    // if (simpleWad === 0) {
    frame_dig 2
    bnz accrueMarket_after_if_else@4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:149
    // last_accrual_ts = GlobalState<uint64>()
    bytec 31 // "last_accrual_ts"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1087
    // this.last_accrual_ts.value = now
    frame_dig 4
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1088
    // return 0
    intc_0 // 0
    frame_bury 0
    retsub

accrueMarket_after_if_else@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1094
    // const [hiI, loI] = mulw(oldIndex, simpleWad)
    dup
    frame_dig 2
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:11
    // export const INDEX_SCALE: uint64 = 1_000_000_000_000 // 1e12
    intc 5 // 1000000000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1095
    // const incrIndex: uint64 = divw(hiI, loI, INDEX_SCALE)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1096
    // const newIndex: uint64 = oldIndex + incrIndex
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    bytec 11 // "borrow_index_wad"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1097
    // this.borrow_index_wad.value = newIndex
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    swap
    dup
    cover 2
    frame_bury 3
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1103
    // let interest: uint64 = 0
    intc_0 // 0
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1104
    // if (totalBefore > 0) {
    bz accrueMarket_after_if_else@6
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1105
    // const [hiB, loB] = mulw(totalBefore, simpleWad)
    frame_dig 3
    frame_dig 2
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:11
    // export const INDEX_SCALE: uint64 = 1_000_000_000_000 // 1e12
    intc 5 // 1000000000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1106
    // interest = divw(hiB, loB, INDEX_SCALE)
    divw
    frame_bury 1

accrueMarket_after_if_else@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:102
    // protocol_share_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 40 // "protocol_share_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1111
    // const deposBps: uint64 = BASIS_POINTS - protoBps
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1114
    // const [hiD, loD] = mulw(interest, deposBps)
    frame_dig 1
    dup
    uncover 2
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1115
    // const depositorInterest: uint64 = divw(hiD, loD, BASIS_POINTS)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1116
    // const protocolInterest: uint64 = interest - depositorInterest
    dup2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1120
    // this.total_borrows.value = totalBefore + interest
    frame_dig 3
    dig 3
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1120
    // this.total_borrows.value = totalBefore + interest
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1123
    // this.total_deposits.value += depositorInterest
    uncover 2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    bytec_3 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1123
    // this.total_deposits.value += depositorInterest
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 15 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1126
    // this.fee_pool.value += protocolInterest
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    bytec 15 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1126
    // this.fee_pool.value += protocolInterest
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:149
    // last_accrual_ts = GlobalState<uint64>()
    bytec 31 // "last_accrual_ts"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1129
    // this.last_accrual_ts.value = now
    frame_dig 4
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1133
    // return interest
    frame_bury 0
    retsub

accrueMarket_after_if_else@9:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 13 // "last_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1022
    // const [h1, l1] = mulw(this.last_apr_bps.value, deltaT)
    frame_dig 0
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:13
    // export const SECONDS_PER_YEAR: uint64 = 365 * 24 * 60 * 60
    pushint 31536000 // 31536000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1024
    // const tmp2: uint64 = divw(h1, l1, SECONDS_PER_YEAR)
    divw
    // smart_contracts/orbital_lending/config.algo.ts:11
    // export const INDEX_SCALE: uint64 = 1_000_000_000_000 // 1e12
    intc 5 // 1000000000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1027
    // const [h2, l2] = mulw(INDEX_SCALE, tmp2)
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1028
    // const simpleWad: uint64 = divw(h2, l2, BASIS_POINTS)
    divw
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1085
    // const simpleWad: uint64 = this.sliceFactorWad(deltaT)
    b accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.sliceFactorWad@10


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord(borrowerAddress: bytes) -> bytes:
getLoanRecord:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1141
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 6 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1142
    // return this.loan_record(borrowerAddress).value
    box_get
    assert // Box must have value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo(paymentTxn: uint64, repaymentAmount: uint64) -> void:
repayLoanAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1154-1155
    // @abimethod({ allowActions: 'NoOp' })
    // repayLoanAlgo(paymentTxn: gtxn.PaymentTxn, repaymentAmount: uint64): void {
    proto 2 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    bury 1
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1157
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1158-1161
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: repaymentAmount,
    // })
    frame_dig -2
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1159
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1158-1161
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: repaymentAmount,
    // })
    ==
    bz repayLoanAlgo_bool_false@3
    frame_dig -2
    gtxns Amount
    frame_dig -1
    ==
    bz repayLoanAlgo_bool_false@3
    intc_1 // 1

repayLoanAlgo_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1158-1161
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: repaymentAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1162
    // const _interestSlice = this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1163
    // const loanRecord = this.getLoanRecord(op.Txn.sender)
    txn Sender
    callsub getLoanRecord
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1164
    // const rec = this.getLoanRecord(op.Txn.sender)
    txn Sender
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1165
    // const liveDebt: uint64 = this.currentDebtFromSnapshot(rec)
    callsub currentDebtFromSnapshot
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1167
    // assert(repaymentAmount <= liveDebt)
    frame_dig -1
    dig 1
    <=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1169
    // const remainingDebt: uint64 = liveDebt - repaymentAmount
    frame_dig -1
    -
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1172
    // this.total_borrows.value -= repaymentAmount
    frame_dig -1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1172
    // this.total_borrows.value -= repaymentAmount
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1173
    // this.addCash(repaymentAmount)
    frame_dig -1
    callsub addCash
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1175
    // if (remainingDebt === 0) {
    bnz repayLoanAlgo_else_body@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 6 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1176
    // this.loan_record(op.Txn.sender).delete()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1176
    // this.loan_record(op.Txn.sender).delete()
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:165
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1177
    // this.active_loan_records.value -= 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:165
    // active_loan_records = GlobalState<uint64>()
    bytec 9 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1177
    // this.active_loan_records.value -= 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1179-1186
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: rec.collateralTokenId.native,
    //     assetAmount: rec.collateralAmount.native,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1181
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1182
    // xferAsset: rec.collateralTokenId.native,
    swap
    dup
    pushint 32 // 32
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1183
    // assetAmount: rec.collateralAmount.native,
    swap
    pushint 40 // 40
    extract_uint64
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1179-1185
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: rec.collateralTokenId.native,
    //     assetAmount: rec.collateralAmount.native,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1179-1186
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: rec.collateralTokenId.native,
    //     assetAmount: rec.collateralAmount.native,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    retsub

repayLoanAlgo_else_body@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1190
    // borrowerAddress: new Address(op.Txn.sender.bytes),
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1191
    // collateralTokenId: rec.collateralTokenId,
    swap
    dup
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1192
    // collateralAmount: rec.collateralAmount,
    swap
    extract 40 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1195
    // amount: new UintN64(repaymentAmount),
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1196
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1194-1198
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(repaymentAmount),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(2), // repay
    // }),
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1197
    // changeType: new UintN8(2), // repay
    pushbytes 0x02
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1194-1198
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(repaymentAmount),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(2), // repay
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1199
    // principal: new UintN64(remainingDebt),
    frame_dig 0
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1200
    // userIndexWad: new UintN64(this.borrow_index_wad.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1189-1201
    // this.loan_record(op.Txn.sender).value = new LoanRecord({
    //   borrowerAddress: new Address(op.Txn.sender.bytes),
    //   collateralTokenId: rec.collateralTokenId,
    //   collateralAmount: rec.collateralAmount,
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(repaymentAmount),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(2), // repay
    //   }),
    //   principal: new UintN64(remainingDebt),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    // }).copy()
    uncover 6
    uncover 6
    concat
    uncover 5
    concat
    uncover 3
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 6 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1189
    // this.loan_record(op.Txn.sender).value = new LoanRecord({
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1189-1201
    // this.loan_record(op.Txn.sender).value = new LoanRecord({
    //   borrowerAddress: new Address(op.Txn.sender.bytes),
    //   collateralTokenId: rec.collateralTokenId,
    //   collateralAmount: rec.collateralAmount,
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(repaymentAmount),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(2), // repay
    //   }),
    //   principal: new UintN64(remainingDebt),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    // }).copy()
    swap
    box_put
    retsub

repayLoanAlgo_bool_false@3:
    intc_0 // 0
    b repayLoanAlgo_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawPlatformFees(paymentReceiver: bytes, feeTxn: uint64) -> void:
withdrawPlatformFees:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1210-1211
    // @abimethod({ allowActions: 'NoOp' })
    // public withdrawPlatformFees(paymentReceiver: Account, feeTxn: gtxn.PaymentTxn): void {
    proto 2 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1212
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1212
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    ==
    assert // UNAUTHORIZED
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1213
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1214-1217
    // assertMatch(feeTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: STANDARD_TXN_FEE,
    // })
    frame_dig -1
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1215
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1214-1217
    // assertMatch(feeTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: STANDARD_TXN_FEE,
    // })
    ==
    bz withdrawPlatformFees_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1214-1217
    // assertMatch(feeTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: STANDARD_TXN_FEE,
    // })
    ==
    bz withdrawPlatformFees_bool_false@3
    intc_1 // 1

withdrawPlatformFees_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1214-1217
    // assertMatch(feeTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: STANDARD_TXN_FEE,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 15 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:184
    // current_accumulated_commission = GlobalState<uint64>()
    intc_0 // 0
    bytec 19 // "current_accumulated_commission"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1218
    // const payout: uint64 = this.fee_pool.value + this.current_accumulated_commission.value
    +
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1219
    // if (payout > 0) {
    bz withdrawPlatformFees_after_if_else@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1220-1226
    // itxn
    //   .payment({
    //     receiver: paymentReceiver,
    //     amount: payout,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    frame_dig 0
    dup
    itxn_field Amount
    frame_dig -2
    itxn_field Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1220-1225
    // itxn
    //   .payment({
    //     receiver: paymentReceiver,
    //     amount: payout,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1220-1226
    // itxn
    //   .payment({
    //     receiver: paymentReceiver,
    //     amount: payout,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1228
    // this.removeCash(payout)
    callsub removeCash
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    bytec 15 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1229
    // this.fee_pool.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:184
    // current_accumulated_commission = GlobalState<uint64>()
    bytec 19 // "current_accumulated_commission"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1230
    // this.current_accumulated_commission.value = 0
    intc_0 // 0
    app_global_put

withdrawPlatformFees_after_if_else@7:
    retsub

withdrawPlatformFees_bool_false@3:
    intc_0 // 0
    b withdrawPlatformFees_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutSplitAlgo(buyer: bytes, debtor: bytes, premiumAxferTxn: uint64, repayPayTxn: uint64, lstAppId: uint64, mbrTxn: uint64) -> void:
buyoutSplitAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1245-1253
    // @abimethod({ allowActions: 'NoOp' })
    // public buyoutSplitAlgo(
    //   buyer: Account,
    //   debtor: Account,
    //   premiumAxferTxn: gtxn.AssetTransferTxn, // buyout token (xUSD) PREMIUM
    //   repayPayTxn: gtxn.PaymentTxn, // ALGO DEBT repayment
    //   lstAppId: uint64,
    //   mbrTxn: gtxn.PaymentTxn,
    // ): void {
    proto 6 0
    pushbytes ""
    dupn 5
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 6 // "loan_record"
    frame_dig -5
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1254
    // assert(this.loan_record(debtor).exists, 'NO_LOAN_RECORD')
    box_len
    bury 1
    assert // NO_LOAN_RECORD
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1255
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1258
    // this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1260-1262
    // assertMatch(mbrTxn, {
    //   amount: BUYOUT_MBR,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:16
    // export const BUYOUT_MBR: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1260-1262
    // assertMatch(mbrTxn, {
    //   amount: BUYOUT_MBR,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1264
    // const rec = this.loan_record(debtor).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1265
    // const collateralAmount: uint64 = rec.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1266
    // const collateralTokenId: UintN64 = rec.collateralTokenId
    dup
    extract 32 8 // on error: Index access is out of bounds
    dup
    cover 2
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1268
    // const debtBase: uint64 = this.currentDebtFromSnapshot(rec)
    callsub currentDebtFromSnapshot
    pop
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1269
    // assert(debtBase > 0, 'NO_DEBT')
    dup
    assert // NO_DEBT
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1272
    // const collateralUSD: uint64 = this.calculateCollateralValueUSD(collateralTokenId, collateralAmount, lstAppId)
    swap
    uncover 2
    frame_dig -2
    callsub calculateCollateralValueUSD
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1273
    // const debtUSDv: uint64 = this.debtUSD(debtBase)
    callsub debtUSD
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1274
    // assert(debtUSDv > 0, 'BAD_DEBT_USD')
    dup
    assert // BAD_DEBT_USD
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1276
    // const [hCR, lCR] = mulw(collateralUSD, BASIS_POINTS)
    swap
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1276
    // const [hCR, lCR] = mulw(collateralUSD, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1277
    // const CR_bps: uint64 = divw(hCR, lCR, debtUSDv)
    uncover 2
    divw
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1279
    // let premiumRateBps: uint64 = 0
    intc_0 // 0
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:96
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 22 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1280
    // if (CR_bps > this.liq_threshold_bps.value) {
    >
    bz buyoutSplitAlgo_after_if_else@2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1281
    // const [hR, lR] = mulw(CR_bps, BASIS_POINTS)
    frame_dig 12
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1281
    // const [hR, lR] = mulw(CR_bps, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:96
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 22 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1282
    // const ratio_bps: uint64 = divw(hR, lR, this.liq_threshold_bps.value)
    divw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1283
    // premiumRateBps = ratio_bps - BASIS_POINTS
    -
    frame_bury 13

buyoutSplitAlgo_after_if_else@2:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1286
    // const [hP, lP] = mulw(collateralUSD, premiumRateBps)
    frame_dig 11
    frame_dig 13
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1287
    // const premiumUSD: uint64 = divw(hP, lP, BASIS_POINTS)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:171
    // buyout_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 18 // "buyout_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1290
    // const buyoutTokenId: uint64 = this.buyout_token_id.value.native
    btoi
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:171
    // buyout_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 18 // "buyout_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1291
    // const buyoutTokenPrice: uint64 = this.getOraclePrice(this.buyout_token_id.value)
    callsub getOraclePrice
    dup
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1293
    // const [hPT, lPT] = mulw(premiumUSD, USD_MICRO_UNITS)
    swap
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 4 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1293
    // const [hPT, lPT] = mulw(premiumUSD, USD_MICRO_UNITS)
    mulw
    frame_bury 3
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1294
    // const premiumTokens: uint64 = buyoutTokenPrice === 0 ? 0 : divw(hPT, lPT, buyoutTokenPrice)
    bnz buyoutSplitAlgo_ternary_false@4
    intc_0 // 0
    frame_bury 4

buyoutSplitAlgo_ternary_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1296
    // assert(premiumAxferTxn.assetReceiver === Global.currentApplicationAddress, 'INVALID_RECEIVER')
    frame_dig -4
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // INVALID_RECEIVER
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1297
    // assert(premiumAxferTxn.xferAsset === Asset(buyoutTokenId), 'INVALID_XFER_ASSET')
    frame_dig -4
    gtxns XferAsset
    frame_dig 0
    ==
    assert // INVALID_XFER_ASSET
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1298
    // assert(premiumAxferTxn.assetAmount >= premiumTokens, 'INVALID_BUYOUT_AMOUNT')
    frame_dig -4
    gtxns AssetAmount
    dup
    frame_dig 4
    dup
    cover 3
    >=
    assert // INVALID_BUYOUT_AMOUNT
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1301
    // const refund: uint64 = paidAmount - premiumTokens
    swap
    -
    frame_bury 5
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1304-1308
    // assertMatch(repayPayTxn, {
    //   sender: buyer,
    //   receiver: Global.currentApplicationAddress,
    //   amount: debtBase,
    // })
    frame_dig -3
    gtxns Sender
    frame_dig -6
    ==
    bz buyoutSplitAlgo_bool_false@9
    frame_dig -3
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1306
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1304-1308
    // assertMatch(repayPayTxn, {
    //   sender: buyer,
    //   receiver: Global.currentApplicationAddress,
    //   amount: debtBase,
    // })
    ==
    bz buyoutSplitAlgo_bool_false@9
    frame_dig -3
    gtxns Amount
    frame_dig 10
    ==
    bz buyoutSplitAlgo_bool_false@9
    intc_1 // 1

buyoutSplitAlgo_bool_merge@10:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1304-1308
    // assertMatch(repayPayTxn, {
    //   sender: buyer,
    //   receiver: Global.currentApplicationAddress,
    //   amount: debtBase,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1311
    // this.loan_record(debtor).delete()
    frame_dig 6
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:165
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1312
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:165
    // active_loan_records = GlobalState<uint64>()
    bytec 9 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1312
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1314-1321
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1317
    // xferAsset: collateralTokenId.native,
    frame_dig 7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1266
    // const collateralTokenId: UintN64 = rec.collateralTokenId
    pushint 32 // 32
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1317
    // xferAsset: collateralTokenId.native,
    extract_uint64
    frame_dig 8
    dup
    cover 2
    itxn_field AssetAmount
    itxn_field XferAsset
    frame_dig -6
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1314-1320
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1314-1321
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:159
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 7 // "accepted_collaterals"
    frame_dig 9
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1324
    // const acVal = this.accepted_collaterals(acKey).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1325
    // const updatedTotal: uint64 = acVal.totalCollateral.native - collateralAmount
    dup
    pushint 24 // 24
    extract_uint64
    uncover 3
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1327
    // assetId: acVal.assetId,
    dig 1
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1328
    // baseAssetId: acVal.baseAssetId,
    dig 2
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1329
    // totalCollateral: new UintN64(updatedTotal),
    uncover 2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1330
    // marketBaseAssetId: acVal.marketBaseAssetId,
    dig 3
    extract 16 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1331
    // originatingAppId: acVal.originatingAppId,
    uncover 4
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1326-1332
    // this.accepted_collaterals(acKey).value = new AcceptedCollateral({
    //   assetId: acVal.assetId,
    //   baseAssetId: acVal.baseAssetId,
    //   totalCollateral: new UintN64(updatedTotal),
    //   marketBaseAssetId: acVal.marketBaseAssetId,
    //   originatingAppId: acVal.originatingAppId,
    // }).copy()
    uncover 4
    uncover 4
    concat
    uncover 2
    concat
    uncover 2
    concat
    swap
    concat
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1334
    // this.total_borrows.value = this.total_borrows.value - debtBase
    frame_dig 10
    dup
    cover 2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1334
    // this.total_borrows.value = this.total_borrows.value - debtBase
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1335
    // this.addCash(debtBase)
    callsub addCash
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1361
    // const halfPremium: uint64 = premiumTokens / 2
    frame_dig 4
    dup
    pushint 2 // 2
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1363-1370
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: halfPremium,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    dig 1
    itxn_field AssetAmount
    frame_dig 0
    dup
    cover 3
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1363-1369
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: halfPremium,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1363-1370
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: halfPremium,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1372-1379
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: premiumTokens - halfPremium, // cover odd token if any
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1376
    // assetAmount: premiumTokens - halfPremium, // cover odd token if any
    uncover 2
    swap
    -
    itxn_field AssetAmount
    itxn_field XferAsset
    frame_dig -5
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1372-1378
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: premiumTokens - halfPremium, // cover odd token if any
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1372-1379
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: premiumTokens - halfPremium, // cover odd token if any
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1339
    // if (refund > 0) {
    frame_dig 5
    bz buyoutSplitAlgo_after_if_else@14
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1340-1347
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: refund,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    frame_dig 5
    itxn_field AssetAmount
    frame_dig 0
    itxn_field XferAsset
    frame_dig -6
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1340-1346
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: refund,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1340-1347
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: refund,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit

buyoutSplitAlgo_after_if_else@14:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1350
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 13 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1350
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    retsub

buyoutSplitAlgo_bool_false@9:
    intc_0 // 0
    b buyoutSplitAlgo_bool_merge@10

buyoutSplitAlgo_ternary_false@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1294
    // const premiumTokens: uint64 = buyoutTokenPrice === 0 ? 0 : divw(hPT, lPT, buyoutTokenPrice)
    frame_dig 2
    frame_dig 3
    frame_dig 1
    divw
    frame_bury 4
    b buyoutSplitAlgo_ternary_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD(debtBaseUnits: uint64) -> uint64:
debtUSD:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1387
    // private debtUSD(debtBaseUnits: uint64): uint64 {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1388
    // const baseTokenPrice: uint64 = this.getOraclePrice(this.base_token_id.value) // price of market base token
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1389
    // const [h, l] = mulw(debtBaseUnits, baseTokenPrice)
    frame_dig -1
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 4 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1390
    // return divw(h, l, USD_MICRO_UNITS) // micro-USD
    divw
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLST(lstAppId: uint64) -> uint64:
maxWithdrawableCollateralLST:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1398-1399
    // @abimethod({ allowActions: 'NoOp' })
    // public maxWithdrawableCollateralLST(lstAppId: uint64): uint64 {
    proto 1 1
    intc_0 // 0
    pushbytes ""
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 6 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1400
    // assert(this.loan_record(op.Txn.sender).exists, 'NO_LOAN')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1400
    // assert(this.loan_record(op.Txn.sender).exists, 'NO_LOAN')
    box_len
    bury 1
    assert // NO_LOAN
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1401
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1402
    // this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 6 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1404
    // const rec = this.loan_record(op.Txn.sender).value.copy()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1404
    // const rec = this.loan_record(op.Txn.sender).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1405
    // const collateral = this.getCollateral(rec.collateralTokenId)
    dup
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:159
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 7 // "accepted_collaterals"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:501
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1406
    // assert(collateral.originatingAppId.native === lstAppId, 'mismatched LST app')
    pushint 32 // 32
    extract_uint64
    frame_dig -1
    ==
    assert // mismatched LST app
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1408
    // const debtBase: uint64 = this.currentDebtFromSnapshot(rec)
    callsub currentDebtFromSnapshot
    swap
    dup
    cover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1409
    // if (debtBase === 0) return rec.collateralAmount.native // all collateral is withdrawable if no debt
    bnz maxWithdrawableCollateralLST_after_if_else@2
    pushint 40 // 40
    extract_uint64
    frame_bury 0
    retsub

maxWithdrawableCollateralLST_after_if_else@2:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1413
    // rec.collateralTokenId,
    dup
    extract 32 8 // on error: Index access is out of bounds
    dup
    cover 2
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1414
    // rec.collateralAmount.native,
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1412-1416
    // const currCollatUSD: uint64 = this.calculateCollateralValueUSD(
    //   rec.collateralTokenId,
    //   rec.collateralAmount.native,
    //   lstAppId,
    // )
    frame_dig -1
    callsub calculateCollateralValueUSD
    dup
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1419
    // const debtUSDv: uint64 = this.debtUSD(debtBase)
    frame_dig 3
    callsub debtUSD
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1421
    // const [hReq, lReq] = mulw(debtUSDv, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:93
    // ltv_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 28 // "ltv_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1422
    // const requiredCollateralUSD: uint64 = divw(hReq, lReq, this.ltv_bps.value)
    divw
    dup
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1425
    // if (currCollatUSD <= requiredCollateralUSD) return 0
    <=
    bz maxWithdrawableCollateralLST_after_if_else@4
    intc_0 // 0
    frame_bury 0
    retsub

maxWithdrawableCollateralLST_after_if_else@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1428
    // const removableUSD: uint64 = currCollatUSD - requiredCollateralUSD
    frame_dig 1
    frame_dig 2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1432-1435
    // const circulatingLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 16 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1432-1435
    // const circulatingLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1436-1439
    // const totalDeposits = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 17 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1436-1439
    // const totalDeposits = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:159
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 7 // "accepted_collaterals"
    frame_dig 0
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:501
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1443
    // const basePrice = this.getOraclePrice(ac.baseAssetId)
    extract 8 8 // on error: Index access is out of bounds
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1446
    // const [hU, lU] = mulw(removableUSD, USD_MICRO_UNITS)
    uncover 3
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 4 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1446
    // const [hU, lU] = mulw(removableUSD, USD_MICRO_UNITS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1447
    // const removableUnderlying: uint64 = divw(hU, lU, basePrice)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1450
    // const [hL, lL] = mulw(removableUnderlying, circulatingLST)
    uncover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1451
    // const removableLST: uint64 = divw(hL, lL, totalDeposits)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1453
    // return removableLST
    frame_bury 0
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawCollateral(amountLST: uint64, collateralTokenId: uint64, lstAppId: uint64) -> void:
withdrawCollateral:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1524-1525
    // @abimethod({ allowActions: 'NoOp' })
    // public withdrawCollateral(amountLST: uint64, collateralTokenId: uint64, lstAppId: uint64): void {
    proto 3 0
    intc_0 // 0
    pushbytes ""
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1526
    // assert(amountLST > 0, 'ZERO_AMOUNT')
    frame_dig -3
    assert // ZERO_AMOUNT
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1527
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1528
    // const borrower = op.Txn.sender
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 6 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1528
    // const borrower = op.Txn.sender
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1529
    // assert(this.loan_record(borrower).exists, 'NO_LOAN')
    box_len
    bury 1
    assert // NO_LOAN
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1530
    // this.accrueMarket() // 1) make time current for everyone
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1531
    // const loan = this.loan_record(borrower).value.copy()
    dup
    box_get
    swap
    dup
    cover 2
    cover 3
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1533
    // assert(loan.collateralTokenId.native === collateralTokenId, 'WRONG_COLLATERAL')
    dup
    extract 32 8 // on error: Index access is out of bounds
    cover 2
    pushint 32 // 32
    extract_uint64
    frame_dig -2
    ==
    assert // WRONG_COLLATERAL
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1535
    // const acKey = new AcceptedCollateralKey({ assetId: new UintN64(collateralTokenId) })
    frame_dig -2
    itob
    dup
    cover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:159
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 7 // "accepted_collaterals"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1536
    // assert(this.accepted_collaterals(acKey).exists, 'BAD_COLLATERAL')
    dup
    box_len
    bury 1
    assert // BAD_COLLATERAL
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1537
    // const acVal = this.accepted_collaterals(acKey).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1538
    // assert(acVal.originatingAppId.native === lstAppId, 'mismatched LST app')
    pushint 32 // 32
    extract_uint64
    frame_dig -1
    ==
    assert // mismatched LST app
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1463
    // assert(this.loan_record(borrower).exists, 'NO_LOAN')
    dup
    box_len
    bury 1
    assert // NO_LOAN
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1464
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1465
    // this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1467
    // const rec = this.loan_record(borrower).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1468
    // const collateral = this.getCollateral(rec.collateralTokenId)
    dup
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:159
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 7 // "accepted_collaterals"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:501
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1469
    // assert(collateral.originatingAppId.native === lstAppId, 'mismatched LST app')
    pushint 32 // 32
    extract_uint64
    frame_dig -1
    ==
    assert // mismatched LST app
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1470
    // const debtBase: uint64 = this.currentDebtFromSnapshot(rec)
    callsub currentDebtFromSnapshot
    swap
    dup
    cover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1471
    // if (debtBase === 0) return rec.collateralAmount.native // all collateral is withdrawable if no debt
    bnz withdrawCollateral_after_if_else@4
    pushint 40 // 40
    extract_uint64

withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1541
    // assert(amountLST <= maxSafe, 'EXCEEDS_MAX_SAFE')
    frame_dig -3
    >=
    assert // EXCEEDS_MAX_SAFE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1542
    // assert(amountLST < loan.collateralAmount.native, 'INSUFFICIENT_COLLATERAL')
    frame_dig 5
    dup
    pushint 40 // 40
    extract_uint64
    frame_dig -3
    dig 1
    <
    assert // INSUFFICIENT_COLLATERAL
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1543
    // const remainLST: uint64 = loan.collateralAmount.native - amountLST
    frame_dig -3
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1546-1553
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: collateralTokenId, // LST ASA
    //     assetAmount: amountLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    frame_dig -3
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    frame_dig 3
    dup
    cover 2
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1546-1552
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: collateralTokenId, // LST ASA
    //     assetAmount: amountLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1546-1553
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: collateralTokenId, // LST ASA
    //     assetAmount: amountLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1559
    // collateralAmount: new UintN64(remainLST),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1562
    // amount: new UintN64(amountLST),
    frame_dig -3
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1563
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1561-1565
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(amountLST),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(3), // 3 = collateral withdraw
    // }),
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1564
    // changeType: new UintN8(3), // 3 = collateral withdraw
    pushbytes 0x03
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1561-1565
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(amountLST),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(3), // 3 = collateral withdraw
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1566
    // principal: loan.principal, // unchanged
    dig 4
    extract 73 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1567
    // userIndexWad: loan.userIndexWad, // unchanged snapshot; no debt change here
    uncover 5
    extract 81 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1556-1568
    // const newRec = new LoanRecord({
    //   borrowerAddress: new Address(borrower.bytes),
    //   collateralTokenId: new UintN64(collateralTokenId),
    //   collateralAmount: new UintN64(remainLST),
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(amountLST),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(3), // 3 = collateral withdraw
    //   }),
    //   principal: loan.principal, // unchanged
    //   userIndexWad: loan.userIndexWad, // unchanged snapshot; no debt change here
    // })
    uncover 5
    frame_dig 7
    concat
    uncover 5
    concat
    uncover 3
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1569
    // this.loan_record(borrower).value = newRec.copy()
    frame_dig 4
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1572
    // this.reduceCollateralTotal(loan.collateralTokenId, amountLST)
    frame_dig 6
    frame_dig -3
    callsub reduceCollateralTotal
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1575
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 13 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1575
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    retsub

withdrawCollateral_after_if_else@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1475
    // rec.collateralTokenId,
    dup
    extract 32 8 // on error: Index access is out of bounds
    dup
    cover 2
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1476
    // rec.collateralAmount.native,
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1474-1478
    // const currCollatUSD: uint64 = this.calculateCollateralValueUSD(
    //   rec.collateralTokenId,
    //   rec.collateralAmount.native,
    //   lstAppId,
    // )
    frame_dig -1
    callsub calculateCollateralValueUSD
    dup
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1481
    // const debtUSDv: uint64 = this.debtUSD(debtBase)
    frame_dig 8
    callsub debtUSD
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1483
    // const [hReq, lReq] = mulw(debtUSDv, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:93
    // ltv_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 28 // "ltv_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1484
    // const requiredCollateralUSD: uint64 = divw(hReq, lReq, this.ltv_bps.value)
    divw
    dup
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1487
    // if (currCollatUSD <= requiredCollateralUSD) return 0
    <=
    bz withdrawCollateral_after_if_else@6
    intc_0 // 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1540
    // const maxSafe = this.maxWithdrawableCollateralLSTLocal(borrower, lstAppId)
    b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7

withdrawCollateral_after_if_else@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1490
    // const removableUSD: uint64 = currCollatUSD - requiredCollateralUSD
    frame_dig 1
    frame_dig 2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1494-1497
    // const circulatingLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 16 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1494-1497
    // const circulatingLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1498-1501
    // const totalDeposits = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 17 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1498-1501
    // const totalDeposits = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:159
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 7 // "accepted_collaterals"
    frame_dig 0
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:501
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1505
    // const basePrice = this.getOraclePrice(ac.baseAssetId)
    extract 8 8 // on error: Index access is out of bounds
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1508
    // const [hU, lU] = mulw(removableUSD, USD_MICRO_UNITS)
    uncover 3
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 4 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1508
    // const [hU, lU] = mulw(removableUSD, USD_MICRO_UNITS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1509
    // const removableUnderlying: uint64 = divw(hU, lU, basePrice)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1512
    // const [hL, lL] = mulw(removableUnderlying, circulatingLST)
    uncover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1513
    // const removableLST: uint64 = divw(hL, lL, totalDeposits)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1540
    // const maxSafe = this.maxWithdrawableCollateralLSTLocal(borrower, lstAppId)
    b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST() -> uint64:
getCirculatingLST:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1656
    // return this.circulating_lst.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits() -> uint64:
getTotalDeposits:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1664
    // return this.total_deposits.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount() -> uint64:
getAcceptedCollateralsCount:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:168
    // accepted_collaterals_count = GlobalState<uint64>()
    intc_0 // 0
    bytec 20 // "accepted_collaterals_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1672
    // return this.accepted_collaterals_count.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidatePartialAlgo(debtor: bytes, repayPay: uint64, repayBaseAmount: uint64, lstAppId: uint64) -> void:
liquidatePartialAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1683-1689
    // @abimethod({ allowActions: 'NoOp' })
    // public liquidatePartialAlgo(
    //   debtor: Account,
    //   repayPay: gtxn.PaymentTxn, // liquidator pays ALGO
    //   repayBaseAmount: uint64, // amount to repay in microALGO (≤ live debt)
    //   lstAppId: uint64,
    // ): void {
    proto 4 0
    intc_0 // 0
    pushbytes ""
    dupn 23
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1690
    // assert(this.base_token_id.value.native === 0, 'BASE_NOT_ALGO')
    btoi
    !
    assert // BASE_NOT_ALGO
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1691
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 6 // "loan_record"
    frame_dig -4
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1692
    // assert(this.loan_record(debtor).exists, 'NO_LOAN')
    box_len
    bury 1
    assert // NO_LOAN
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1693
    // this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1695
    // const rec = this.loan_record(debtor).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1696
    // const collTok: UintN64 = rec.collateralTokenId
    dup
    extract 32 8 // on error: Index access is out of bounds
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1697
    // const collLSTBal: uint64 = rec.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1698
    // const liveDebt: uint64 = this.currentDebtFromSnapshot(rec)
    callsub currentDebtFromSnapshot
    swap
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1699
    // assert(liveDebt > 0, 'NO_DEBT')
    assert // NO_DEBT
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1700
    // assert(repayBaseAmount > 0 && repayBaseAmount <= liveDebt, 'BAD_REPAY')
    frame_dig -2
    bz liquidatePartialAlgo_bool_false@3
    frame_dig -2
    frame_dig 30
    <=
    bz liquidatePartialAlgo_bool_false@3
    intc_1 // 1

liquidatePartialAlgo_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1700
    // assert(repayBaseAmount > 0 && repayBaseAmount <= liveDebt, 'BAD_REPAY')
    assert // BAD_REPAY
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1702
    // const collateralUSD: uint64 = this.calculateCollateralValueUSD(collTok, collLSTBal, lstAppId)
    frame_dig 27
    frame_dig 28
    frame_dig -1
    callsub calculateCollateralValueUSD
    dup
    frame_bury 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1703
    // const debtUSDv: uint64 = this.debtUSD(liveDebt)
    frame_dig 30
    callsub debtUSD
    dup
    frame_bury 4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1704
    // assert(debtUSDv > 0, 'BAD_DEBT_USD')
    dup
    assert // BAD_DEBT_USD
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1706
    // const [hCR, lCR] = mulw(collateralUSD, BASIS_POINTS)
    swap
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1706
    // const [hCR, lCR] = mulw(collateralUSD, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1707
    // const CR_bps: uint64 = divw(hCR, lCR, debtUSDv)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:96
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 22 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1708
    // assert(CR_bps <= this.liq_threshold_bps.value, 'NOT_LIQUIDATABLE')
    <=
    assert // NOT_LIQUIDATABLE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1711-1715
    // assertMatch(repayPay, {
    //   sender: op.Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   amount: repayBaseAmount,
    // })
    frame_dig -3
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1712
    // sender: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1711-1715
    // assertMatch(repayPay, {
    //   sender: op.Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   amount: repayBaseAmount,
    // })
    ==
    bz liquidatePartialAlgo_bool_false@8
    frame_dig -3
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1713
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1711-1715
    // assertMatch(repayPay, {
    //   sender: op.Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   amount: repayBaseAmount,
    // })
    ==
    bz liquidatePartialAlgo_bool_false@8
    frame_dig -3
    gtxns Amount
    frame_dig -2
    ==
    bz liquidatePartialAlgo_bool_false@8
    intc_1 // 1

liquidatePartialAlgo_bool_merge@9:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1711-1715
    // assertMatch(repayPay, {
    //   sender: op.Txn.sender,
    //   receiver: Global.currentApplicationAddress,
    //   amount: repayBaseAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1717
    // const basePrice = this.getOraclePrice(this.base_token_id.value) // µUSD
    callsub getOraclePrice
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1718
    // const closeFactorHalf: uint64 = liveDebt / 2
    frame_dig 30
    dup
    pushint 2 // 2
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1719
    // const maxRepayAllowed: uint64 = closeFactorHalf > 0 ? closeFactorHalf : liveDebt
    dup2
    uncover 2
    select
    frame_bury 11
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:174
    // liq_bonus_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 24 // "liq_bonus_bps"
    app_global_get_ex
    swap
    frame_bury 2
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1722
    // const isFullRepayRequest = repayBaseAmount === liveDebt
    frame_dig -2
    ==
    dup
    frame_bury 8
    frame_dig -2
    frame_bury 18
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1725
    // if (!isFullRepayRequest && repayCandidate > maxRepayAllowed) {
    bnz liquidatePartialAlgo_after_if_else@12
    frame_dig -2
    frame_dig 11
    >
    frame_dig -2
    frame_bury 18
    bz liquidatePartialAlgo_after_if_else@12
    frame_dig 11
    frame_bury 18

liquidatePartialAlgo_after_if_else@12:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1729
    // const [hRU, lRU] = mulw(repayCandidate, basePrice)
    frame_dig 18
    frame_dig 1
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 4 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1730
    // const repayUSD: uint64 = divw(hRU, lRU, USD_MICRO_UNITS)
    divw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1732
    // const [hSZ, lSZ] = mulw(repayUSD, BASIS_POINTS + bonusBps)
    frame_dig 2
    +
    dup
    frame_bury 24
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1733
    // const seizeUSD: uint64 = divw(hSZ, lSZ, BASIS_POINTS)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:159
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 7 // "accepted_collaterals"
    frame_dig 27
    concat
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:501
    // return this.accepted_collaterals(key).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1592
    // const underlyingPrice = this.getOraclePrice(this.getCollateral(collateralTokenId).baseAssetId) // µUSD
    extract 8 8 // on error: Index access is out of bounds
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1593
    // const [hUnd, lUnd] = mulw(seizeUSD, USD_MICRO_UNITS)
    uncover 2
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 4 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1593
    // const [hUnd, lUnd] = mulw(seizeUSD, USD_MICRO_UNITS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1594
    // const seizeUnderlying: uint64 = divw(hUnd, lUnd, underlyingPrice)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:501
    // return this.accepted_collaterals(key).value.copy()
    swap
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1597
    // assert(collateral.originatingAppId.native === lstAppId, 'mismatched LST app')
    pushint 32 // 32
    extract_uint64
    frame_dig -1
    ==
    assert // mismatched LST app
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1600-1603
    // const circ = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 16 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1600-1603
    // const circ = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1604-1607
    // const total = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 17 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1604-1607
    // const total = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1608
    // const [hL, lL] = mulw(seizeUnderlying, circ)
    cover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1609
    // let seizeLST: uint64 = divw(hL, lL, total)
    uncover 2
    divw
    dup
    frame_bury 22
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1611
    // if (seizeLST > availableLST) seizeLST = availableLST
    frame_dig 28
    >
    bz liquidatePartialAlgo_after_if_else@45
    frame_dig 28
    frame_bury 22

liquidatePartialAlgo_after_if_else@45:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1736
    // assert(seizeLST > 0, 'NOTHING_TO_SEIZE')
    frame_dig 22
    dup
    assert // NOTHING_TO_SEIZE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1622
    // if (seizeLST === 0) return 0
    bnz liquidatePartialAlgo_after_if_else@49
    intc_0 // 0
    frame_bury 19

liquidatePartialAlgo_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayBaseFromSeizedLST@50:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1739
    // if (repaySupported > liveDebt) {
    frame_dig 19
    frame_dig 30
    >
    bz liquidatePartialAlgo_after_if_else@14
    frame_dig 30
    frame_bury 19

liquidatePartialAlgo_after_if_else@14:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1743
    // if (seizeLST === collLSTBal) {
    frame_dig 22
    frame_dig 28
    ==
    bz liquidatePartialAlgo_after_if_else@16
    frame_dig -2
    frame_bury 18

liquidatePartialAlgo_after_if_else@16:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1747
    // const proposedRepayUsed: uint64 = repayCandidate <= repaySupported ? repayCandidate : repaySupported
    frame_dig 18
    dup
    frame_dig 19
    dup
    cover 2
    <=
    swap
    cover 2
    select
    frame_bury 13
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1749
    // if (!isFullRepayRequest) {
    frame_dig 8
    bnz liquidatePartialAlgo_after_if_else@29
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1750
    // const remainingDebtBase: uint64 = liveDebt - proposedRepayUsed
    frame_dig 30
    frame_dig 13
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1751
    // if (remainingDebtBase > 0) {
    bz liquidatePartialAlgo_after_if_else@29
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1752
    // const [hRepayUsedUSD, lRepayUsedUSD] = mulw(proposedRepayUsed, basePrice)
    frame_dig 13
    frame_dig 1
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 4 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1753
    // const repayUsedUSD: uint64 = divw(hRepayUsedUSD, lRepayUsedUSD, USD_MICRO_UNITS)
    divw
    dup
    frame_bury 21
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1755
    // let remainingDebtUSD: uint64 = 0
    intc_0 // 0
    frame_bury 16
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1756
    // if (debtUSDv > repayUsedUSD) {
    frame_dig 4
    <
    bz liquidatePartialAlgo_after_if_else@20
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1757
    // remainingDebtUSD = debtUSDv - repayUsedUSD
    frame_dig 4
    frame_dig 21
    -
    frame_bury 16

liquidatePartialAlgo_after_if_else@20:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1760
    // const [hSeizedUSDActual, lSeizedUSDActual] = mulw(repayUsedUSD, BASIS_POINTS + bonusBps)
    frame_dig 21
    frame_dig 24
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1761
    // const seizedUSDActual: uint64 = divw(hSeizedUSDActual, lSeizedUSDActual, BASIS_POINTS)
    divw
    dup
    frame_bury 23
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1763
    // let remainingCollateralUSD: uint64 = 0
    intc_0 // 0
    frame_bury 15
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1764
    // if (collateralUSD > seizedUSDActual) {
    frame_dig 3
    <
    bz liquidatePartialAlgo_after_if_else@22
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1765
    // remainingCollateralUSD = collateralUSD - seizedUSDActual
    frame_dig 3
    frame_dig 23
    -
    frame_bury 15

liquidatePartialAlgo_after_if_else@22:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1768
    // const [hLeft, lLeft] = mulw(remainingCollateralUSD, BASIS_POINTS)
    frame_dig 15
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1768
    // const [hLeft, lLeft] = mulw(remainingCollateralUSD, BASIS_POINTS)
    mulw
    frame_bury 9
    dup
    frame_bury 5
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1769
    // const [hRight, lRight] = mulw(remainingDebtUSD, BASIS_POINTS + bonusBps)
    frame_dig 16
    frame_dig 24
    mulw
    frame_bury 10
    dup
    frame_bury 6
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1770
    // const supports = hLeft > hRight || (hLeft === hRight && lLeft >= lRight)
    >
    bnz liquidatePartialAlgo_bool_true@25
    frame_dig 5
    frame_dig 6
    ==
    bz liquidatePartialAlgo_bool_false@26
    frame_dig 9
    frame_dig 10
    >=
    bz liquidatePartialAlgo_bool_false@26

liquidatePartialAlgo_bool_true@25:
    intc_1 // 1

liquidatePartialAlgo_bool_merge@27:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1771
    // assert(supports, 'FULL_REPAY_REQUIRED')
    assert // FULL_REPAY_REQUIRED

liquidatePartialAlgo_after_if_else@29:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1775
    // const repayUsed: uint64 = isFullRepayRequest ? repayBaseAmount : proposedRepayUsed
    frame_dig 13
    frame_dig -2
    frame_dig 8
    dup
    cover 3
    select
    dup
    frame_bury 20
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1776
    // assert(repayUsed > 0, 'ZERO_REPAY_USED')
    assert // ZERO_REPAY_USED
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1777
    // const refundAmount: uint64 = isFullRepayRequest ? 0 : repayBaseAmount - repayUsed
    bz liquidatePartialAlgo_ternary_false@31
    intc_0 // 0
    frame_bury 14

liquidatePartialAlgo_ternary_merge@32:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1779-1786
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collTok.native,
    //     assetAmount: seizeLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1781
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1782
    // xferAsset: collTok.native,
    frame_dig 26
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1696
    // const collTok: UintN64 = rec.collateralTokenId
    pushint 32 // 32
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1782
    // xferAsset: collTok.native,
    extract_uint64
    dup
    frame_bury 7
    frame_dig 22
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1779-1785
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collTok.native,
    //     assetAmount: seizeLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1779-1786
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collTok.native,
    //     assetAmount: seizeLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1788
    // if (refundAmount > 0) {
    frame_dig 14
    bz liquidatePartialAlgo_after_if_else@36
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1789-1795
    // itxn
    //   .payment({
    //     amount: refundAmount,
    //     receiver: op.Txn.sender,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1792
    // receiver: op.Txn.sender,
    txn Sender
    itxn_field Receiver
    frame_dig 14
    dup
    itxn_field Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1789-1794
    // itxn
    //   .payment({
    //     amount: refundAmount,
    //     receiver: op.Txn.sender,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1789-1795
    // itxn
    //   .payment({
    //     amount: refundAmount,
    //     receiver: op.Txn.sender,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1796
    // this.removeCash(refundAmount)
    callsub removeCash

liquidatePartialAlgo_after_if_else@36:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1799
    // const remainingLST: uint64 = collLSTBal - seizeLST
    frame_dig 28
    frame_dig 22
    dup
    cover 2
    -
    frame_bury 17
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1800
    // const newDebtBase: uint64 = liveDebt - repayUsed
    frame_dig 30
    frame_dig 20
    dup
    cover 3
    -
    dup
    cover 3
    frame_bury 12
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1802
    // this.reduceCollateralTotal(collTok, seizeLST)
    frame_dig 27
    swap
    callsub reduceCollateralTotal
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1803
    // this.total_borrows.value = this.total_borrows.value - repayUsed
    dig 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1803
    // this.total_borrows.value = this.total_borrows.value - repayUsed
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1804
    // this.addCash(repayUsed)
    callsub addCash
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1806
    // if (newDebtBase === 0) {
    bnz liquidatePartialAlgo_else_body@41
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1807
    // if (remainingLST > 0) {
    frame_dig 17
    bz liquidatePartialAlgo_after_if_else@40
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1808-1815
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: collTok.native,
    //     assetAmount: remainingLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    frame_dig 17
    dup
    itxn_field AssetAmount
    frame_dig 7
    itxn_field XferAsset
    frame_dig -4
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1808-1814
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: collTok.native,
    //     assetAmount: remainingLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1808-1815
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: collTok.native,
    //     assetAmount: remainingLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1816
    // this.reduceCollateralTotal(collTok, remainingLST)
    frame_dig 27
    swap
    callsub reduceCollateralTotal

liquidatePartialAlgo_after_if_else@40:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1818
    // this.loan_record(debtor).delete()
    frame_dig 25
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:165
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1819
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:165
    // active_loan_records = GlobalState<uint64>()
    bytec 9 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1819
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put

liquidatePartialAlgo_after_if_else@42:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1837
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 13 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1837
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    retsub

liquidatePartialAlgo_else_body@41:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1822
    // borrowerAddress: rec.borrowerAddress,
    frame_dig 29
    dup
    extract 0 32 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1823
    // collateralTokenId: rec.collateralTokenId,
    swap
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1824
    // collateralAmount: new UintN64(remainingLST),
    frame_dig 17
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1826
    // principal: new UintN64(newDebtBase),
    frame_dig 12
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1827
    // userIndexWad: new UintN64(this.borrow_index_wad.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1829
    // amount: new UintN64(repayUsed),
    frame_dig 20
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1830
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1828-1832
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(repayUsed),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(4),
    // }),
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1831
    // changeType: new UintN8(4),
    pushbytes 0x04
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1828-1832
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(repayUsed),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(4),
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1821-1833
    // const newRec = new LoanRecord({
    //   borrowerAddress: rec.borrowerAddress,
    //   collateralTokenId: rec.collateralTokenId,
    //   collateralAmount: new UintN64(remainingLST),
    //   borrowedTokenId: this.base_token_id.value,
    //   principal: new UintN64(newDebtBase),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(repayUsed),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(4),
    //   }),
    // })
    uncover 6
    uncover 6
    concat
    uncover 5
    concat
    swap
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1834
    // this.loan_record(debtor).value = newRec.copy()
    frame_dig 25
    swap
    box_put
    b liquidatePartialAlgo_after_if_else@42

liquidatePartialAlgo_ternary_false@31:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1777
    // const refundAmount: uint64 = isFullRepayRequest ? 0 : repayBaseAmount - repayUsed
    frame_dig -2
    frame_dig 20
    -
    frame_bury 14
    b liquidatePartialAlgo_ternary_merge@32

liquidatePartialAlgo_bool_false@26:
    intc_0 // 0
    b liquidatePartialAlgo_bool_merge@27

liquidatePartialAlgo_after_if_else@49:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:501
    // return this.accepted_collaterals(key).value.copy()
    frame_dig 0
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1625
    // assert(collateral.originatingAppId.native === lstAppId, 'mismatched LST app')
    dup
    pushint 32 // 32
    extract_uint64
    frame_dig -1
    ==
    assert // mismatched LST app
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1627-1630
    // const circ = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 16 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1627-1630
    // const circ = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1631-1634
    // const total = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 17 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1631-1634
    // const total = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1635
    // const [hUnderlying, lUnderlying] = mulw(seizeLST, total)
    frame_dig 22
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1636
    // const seizedUnderlying: uint64 = divw(hUnderlying, lUnderlying, circ)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1638
    // const underlyingPrice = this.getOraclePrice(collateral.baseAssetId) // µUSD
    swap
    extract 8 8 // on error: Index access is out of bounds
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1639
    // const [hSeizeUSD, lSeizeUSD] = mulw(seizedUnderlying, underlyingPrice)
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 4 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1640
    // const seizeUSDActual: uint64 = divw(hSeizeUSD, lSeizeUSD, USD_MICRO_UNITS)
    divw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1642
    // const [hRepayUSD, lRepayUSD] = mulw(seizeUSDActual, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1643
    // const repayUSD: uint64 = divw(hRepayUSD, lRepayUSD, BASIS_POINTS + bonusBps)
    frame_dig 24
    divw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 4 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1645
    // const [hRepayBase, lRepayBase] = mulw(repayUSD, USD_MICRO_UNITS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1646
    // const repayBase: uint64 = divw(hRepayBase, lRepayBase, basePrice)
    frame_dig 1
    divw
    frame_bury 19
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1738
    // let repaySupported: uint64 = this.repayBaseFromSeizedLST(seizeLST, collTok, lstAppId, bonusBps, basePrice)
    b liquidatePartialAlgo_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayBaseFromSeizedLST@50

liquidatePartialAlgo_bool_false@8:
    intc_0 // 0
    b liquidatePartialAlgo_bool_merge@9

liquidatePartialAlgo_bool_false@3:
    intc_0 // 0
    b liquidatePartialAlgo_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus(borrower: bytes) -> uint64, uint64, uint64, uint64, uint64, uint64, uint64:
getLoanStatus:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1847-1856
    // @abimethod({ allowActions: 'NoOp' })
    // getLoanStatus(borrower: Account): {
    //   outstandingDebt: uint64
    //   collateralValueUSD: uint64
    //   collateralAmount: uint64
    //   collateralRatioBps: uint64
    //   liquidationThresholdBps: uint64
    //   eligibleForLiquidation: boolean
    //   eligibleForBuyout: boolean
    // } {
    proto 1 7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 6 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1857
    // assert(this.loan_record(borrower).exists, 'Loan record does not exist')
    dup
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1858
    // const record = this.loan_record(borrower).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1859
    // const collateralRecord = this.getCollateral(record.collateralTokenId)
    dup
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:159
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 7 // "accepted_collaterals"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:501
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1860
    // this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1861
    // const debt: uint64 = this.currentDebtFromSnapshot(record)
    swap
    callsub currentDebtFromSnapshot
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1862
    // const collateralAmount: uint64 = record.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:96
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 22 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1866
    // record.collateralTokenId,
    uncover 2
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1868
    // collateralRecord.originatingAppId.native,
    uncover 4
    pushint 32 // 32
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1865-1869
    // const collateralValueUSD: uint64 = this.calculateCollateralValueUSD(
    //   record.collateralTokenId,
    //   collateralAmount,
    //   collateralRecord.originatingAppId.native,
    // )
    dig 3
    swap
    callsub calculateCollateralValueUSD
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1871
    // const CR: uint64 = (collateralValueUSD * BASIS_POINTS) / debt
    dup
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1871
    // const CR: uint64 = (collateralValueUSD * BASIS_POINTS) / debt
    *
    dig 4
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1872
    // const eligibleForLiquidation = CR < liqBps
    dup
    dig 3
    <
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1873
    // const eligibleForBuyout = CR > liqBps
    dig 1
    dig 4
    >
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1875-1883
    // return {
    //   outstandingDebt: debt,
    //   collateralValueUSD: collateralValueUSD,
    //   collateralAmount: collateralAmount,
    //   collateralRatioBps: CR,
    //   liquidationThresholdBps: liqBps,
    //   eligibleForLiquidation,
    //   eligibleForBuyout,
    // }
    uncover 6
    uncover 4
    uncover 6
    uncover 5
    uncover 6
    uncover 6
    uncover 6
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD(collateralTokenId: bytes, collateralAmount: uint64, lstApp: uint64) -> uint64:
calculateCollateralValueUSD:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1922
    // public calculateCollateralValueUSD(collateralTokenId: UintN64, collateralAmount: uint64, lstApp: uint64): uint64 {
    proto 3 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:159
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 7 // "accepted_collaterals"
    frame_dig -3
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491
    // return this.accepted_collaterals(key).exists
    dup
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1924
    // assert(this.collateralExists(collateralTokenId), 'unknown collateral')
    assert // unknown collateral
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:501
    // return this.accepted_collaterals(key).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1926
    // assert(collateralInfo.originatingAppId.native === lstApp, 'mismatched LST app')
    pushint 32 // 32
    extract_uint64
    frame_dig -1
    ==
    assert // mismatched LST app
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1928-1931
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 16 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1928-1931
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1933-1936
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 17 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1933-1936
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1939
    // const [hC, lC] = mulw(totalDepositsExternal, collateralAmount)
    frame_dig -2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1940
    // const underlyingCollateral = divw(hC, lC, circulatingExternalLST)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:501
    // return this.accepted_collaterals(key).value.copy()
    swap
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1944
    // const baseTokenId = lstCollateral.baseAssetId
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1946
    // const baseTokenPrice = this.getOraclePrice(baseTokenId)
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1949
    // const [hU, lU] = mulw(underlyingCollateral, baseTokenPrice)
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 4 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1950
    // const collateralUSD = divw(hU, lU, USD_MICRO_UNITS)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1952
    // return collateralUSD
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.pickupAlgoRewards() -> void:
pickupAlgoRewards:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2065-2066
    // @abimethod({ allowActions: 'NoOp' })
    // pickupAlgoRewards(): void {
    proto 0 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2067
    // assert(op.Txn.sender === this.admin_account.value, 'Only admin can pickup rewards')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2067
    // assert(op.Txn.sender === this.admin_account.value, 'Only admin can pickup rewards')
    ==
    assert // Only admin can pickup rewards
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2068
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2070
    // const spendable: uint64 = Global.currentApplicationAddress.balance - Global.currentApplicationAddress.minBalance
    global CurrentApplicationAddress
    acct_params_get AcctBalance
    assert // account funded
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    -
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:190
    // cash_on_hand = GlobalState<uint64>()
    intc_0 // 0
    bytec 14 // "cash_on_hand"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2072
    // if (spendable <= this.cash_on_hand.value) {
    <=
    bz pickupAlgoRewards_after_if_else@2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2073
    // return // no new consensus payout to harvest
    retsub

pickupAlgoRewards_after_if_else@2:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:190
    // cash_on_hand = GlobalState<uint64>()
    intc_0 // 0
    bytec 14 // "cash_on_hand"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2076
    // const rawReward: uint64 = spendable - this.cash_on_hand.value
    frame_dig 1
    swap
    -
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/config.algo.ts:14
    // export const MINIMUM_ADDITIONAL_REWARD: uint64 = 10_000
    intc_3 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2077
    // if (rawReward <= MINIMUM_ADDITIONAL_REWARD) {
    <=
    bz pickupAlgoRewards_after_if_else@4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2078
    // return // defer tiny rewards
    retsub

pickupAlgoRewards_after_if_else@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2081
    // this.addCash(rawReward)
    frame_dig 0
    dup
    callsub addCash
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:182
    // commission_percentage = GlobalState<uint64>()
    intc_0 // 0
    bytec 32 // "commission_percentage"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2083
    // const [hi, lo] = mulw(rawReward, this.commission_percentage.value)
    dig 1
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2084
    // const commission: uint64 = divw(hi, lo, 100)
    pushint 100 // 100
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:184
    // current_accumulated_commission = GlobalState<uint64>()
    intc_0 // 0
    bytec 19 // "current_accumulated_commission"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2086
    // this.current_accumulated_commission.value += commission
    dig 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:184
    // current_accumulated_commission = GlobalState<uint64>()
    bytec 19 // "current_accumulated_commission"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2086
    // this.current_accumulated_commission.value += commission
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:186
    // total_commission_earned = GlobalState<uint64>()
    intc_0 // 0
    bytec 25 // "total_commission_earned"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2087
    // this.total_commission_earned.value += commission
    dig 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:186
    // total_commission_earned = GlobalState<uint64>()
    bytec 25 // "total_commission_earned"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2087
    // this.total_commission_earned.value += commission
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2089
    // const netReward: uint64 = rawReward - commission
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:188
    // total_additional_rewards = GlobalState<uint64>()
    intc_0 // 0
    bytec 26 // "total_additional_rewards"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2090
    // this.total_additional_rewards.value += netReward
    dig 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:188
    // total_additional_rewards = GlobalState<uint64>()
    bytec 26 // "total_additional_rewards"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2090
    // this.total_additional_rewards.value += netReward
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2091
    // this.total_deposits.value += netReward
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    bytec_3 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2091
    // this.total_deposits.value += netReward
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.migrateCollateralTokenId(collateralTokenId: uint64, mbrTxn: uint64) -> void:
migrateCollateralTokenId:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2094
    // public migrateCollateralTokenId(collateralTokenId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2095
    // assert(op.Txn.sender === this.migration_admin.value, 'Only migration admin can migrate collateral')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:197
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 12 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2095
    // assert(op.Txn.sender === this.migration_admin.value, 'Only migration admin can migrate collateral')
    ==
    assert // Only migration admin can migrate collateral
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2096
    // const collateralBalance = Asset(collateralTokenId).balance(Global.currentApplicationAddress)
    global CurrentApplicationAddress
    frame_dig -2
    asset_holding_get AssetBalance
    swap
    dup
    uncover 2
    assert // account opted into asset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2097
    // if (collateralBalance > 0) {
    bz migrateCollateralTokenId_after_if_else@3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2098-2105
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: collateralTokenId,
    //     assetAmount: collateralBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:197
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 12 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    frame_dig 0
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2098-2104
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: collateralTokenId,
    //     assetAmount: collateralBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2098-2105
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: collateralTokenId,
    //     assetAmount: collateralBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit

migrateCollateralTokenId_after_if_else@3:
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.migrateContract(feeTxn: uint64) -> bytes:
migrateContract:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2113-2114
    // @abimethod({ allowActions: 'NoOp' })
    // public migrateContract(feeTxn: gtxn.PaymentTxn): MigrationSnapshot {
    proto 1 1
    pushbytes ""
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2115
    // assert(op.Txn.sender === this.migration_admin.value, 'Only migration admin can migrate')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:197
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 12 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2115
    // assert(op.Txn.sender === this.migration_admin.value, 'Only migration admin can migrate')
    ==
    assert // Only migration admin can migrate
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2116
    // this.setContractState(2) // set to migrating
    pushint 2 // 2
    callsub setContractState
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2117
    // assertMatch(feeTxn, { amount: MIGRATION_FEE })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:15
    // export const MIGRATION_FEE: uint64 = 500_000 // 0.5 Algo
    pushint 500000 // 500000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2117
    // assertMatch(feeTxn, { amount: MIGRATION_FEE })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2118
    // this.goOffline()
    callsub goOffline
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2121
    // const lstAsset = Asset(this.lst_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2122
    // const lstBalance = lstAsset.balance(Global.currentApplicationAddress)
    global CurrentApplicationAddress
    swap
    asset_holding_get AssetBalance
    assert // account opted into asset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2125-2132
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:197
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 12 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2128
    // xferAsset: this.lst_token_id.value.native,
    btoi
    uncover 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2125-2131
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2125-2132
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2134
    // if (this.base_token_id.value.native === 0) {
    btoi
    bnz migrateContract_else_body@6
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2137
    // Global.currentApplicationAddress.balance - Global.currentApplicationAddress.minBalance - STANDARD_TXN_FEE
    global CurrentApplicationAddress
    acct_params_get AcctBalance
    assert // account funded
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    -
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2137
    // Global.currentApplicationAddress.balance - Global.currentApplicationAddress.minBalance - STANDARD_TXN_FEE
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2136-2137
    // const algoBalance: uint64 =
    //   Global.currentApplicationAddress.balance - Global.currentApplicationAddress.minBalance - STANDARD_TXN_FEE
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2138
    // if (algoBalance > 0) {
    bz migrateContract_after_if_else@10
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2139-2145
    // itxn
    //   .payment({
    //     receiver: this.migration_admin.value,
    //     amount: algoBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:197
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 12 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    frame_dig 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2139-2144
    // itxn
    //   .payment({
    //     receiver: this.migration_admin.value,
    //     amount: algoBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2139-2145
    // itxn
    //   .payment({
    //     receiver: this.migration_admin.value,
    //     amount: algoBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit

migrateContract_after_if_else@10:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:168
    // accepted_collaterals_count = GlobalState<uint64>()
    intc_0 // 0
    bytec 20 // "accepted_collaterals_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2164
    // accepted_collaterals_count: new UintN64(this.accepted_collaterals_count.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:190
    // cash_on_hand = GlobalState<uint64>()
    intc_0 // 0
    bytec 14 // "cash_on_hand"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2165
    // cash_on_hand: new UintN64(this.cash_on_hand.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2166
    // circulating_lst: new UintN64(this.circulating_lst.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2167
    // total_deposits: new UintN64(this.total_deposits.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2168
    // total_borrows: new UintN64(this.total_borrows.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:188
    // total_additional_rewards = GlobalState<uint64>()
    intc_0 // 0
    bytec 26 // "total_additional_rewards"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2169
    // total_additional_rewards: new UintN64(this.total_additional_rewards.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:186
    // total_commission_earned = GlobalState<uint64>()
    intc_0 // 0
    bytec 25 // "total_commission_earned"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2170
    // total_commission_earned: new UintN64(this.total_commission_earned.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:184
    // current_accumulated_commission = GlobalState<uint64>()
    intc_0 // 0
    bytec 19 // "current_accumulated_commission"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2171
    // current_accumulated_commission: new UintN64(this.current_accumulated_commission.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 15 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2172
    // fee_pool: new UintN64(this.fee_pool.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2173
    // borrowIndexWad: new UintN64(this.borrow_index_wad.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2174
    // base_token_id: new UintN64(this.base_token_id.value.native),
    btoi
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2175
    // lst_token_id: new UintN64(this.lst_token_id.value.native),
    btoi
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:171
    // buyout_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 18 // "buyout_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2176
    // buyout_token_id: new UintN64(this.buyout_token_id.value.native),
    btoi
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:182
    // commission_percentage = GlobalState<uint64>()
    intc_0 // 0
    bytec 32 // "commission_percentage"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2177
    // commission_percentage: new UintN64(this.commission_percentage.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:174
    // liq_bonus_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 24 // "liq_bonus_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2178
    // liq_bonus_bps: new UintN64(this.liq_bonus_bps.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:165
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2179
    // active_loan_records: new UintN64(this.active_loan_records.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2163-2180
    // return new MigrationSnapshot({
    //   accepted_collaterals_count: new UintN64(this.accepted_collaterals_count.value),
    //   cash_on_hand: new UintN64(this.cash_on_hand.value),
    //   circulating_lst: new UintN64(this.circulating_lst.value),
    //   total_deposits: new UintN64(this.total_deposits.value),
    //   total_borrows: new UintN64(this.total_borrows.value),
    //   total_additional_rewards: new UintN64(this.total_additional_rewards.value),
    //   total_commission_earned: new UintN64(this.total_commission_earned.value),
    //   current_accumulated_commission: new UintN64(this.current_accumulated_commission.value),
    //   fee_pool: new UintN64(this.fee_pool.value),
    //   borrowIndexWad: new UintN64(this.borrow_index_wad.value),
    //   base_token_id: new UintN64(this.base_token_id.value.native),
    //   lst_token_id: new UintN64(this.lst_token_id.value.native),
    //   buyout_token_id: new UintN64(this.buyout_token_id.value.native),
    //   commission_percentage: new UintN64(this.commission_percentage.value),
    //   liq_bonus_bps: new UintN64(this.liq_bonus_bps.value),
    //   active_loan_records: new UintN64(this.active_loan_records.value),
    // })
    uncover 12
    uncover 12
    concat
    uncover 12
    concat
    uncover 12
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 3
    concat
    uncover 4
    concat
    uncover 4
    concat
    uncover 7
    concat
    uncover 3
    concat
    uncover 2
    concat
    uncover 2
    concat
    uncover 2
    concat
    uncover 2
    concat
    swap
    concat
    frame_bury 0
    retsub

migrateContract_else_body@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2149
    // const baseAsset = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2150
    // const assetBalance = baseAsset.balance(Global.currentApplicationAddress)
    global CurrentApplicationAddress
    swap
    asset_holding_get AssetBalance
    swap
    dup
    cover 2
    frame_bury 1
    assert // account opted into asset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2151
    // if (assetBalance > 0) {
    bz migrateContract_after_if_else@10
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2152-2159
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: assetBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:197
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 12 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2155
    // xferAsset: this.base_token_id.value.native,
    btoi
    frame_dig 1
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2152-2158
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: assetBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2152-2159
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: assetBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    b migrateContract_after_if_else@10


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.acceptMigrationAlgoContract(lstTransferTxn: uint64, algoTxn: uint64, snapshot: bytes, migrationAdmin: bytes) -> void:
acceptMigrationAlgoContract:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2191-2197
    // @abimethod({ allowActions: 'NoOp' })
    // public acceptMigrationAlgoContract(
    //   lstTransferTxn: gtxn.AssetTransferTxn,
    //   algoTxn: gtxn.PaymentTxn,
    //   snapshot: MigrationSnapshot,
    //   migrationAdmin: Account,
    // ): void {
    proto 4 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2198
    // assert(op.Txn.sender === this.migration_admin.value, 'Only migration admin can accept migration')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:197
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 12 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2198
    // assert(op.Txn.sender === this.migration_admin.value, 'Only migration admin can accept migration')
    ==
    assert // Only migration admin can accept migration
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2200-2204
    // assertMatch(lstTransferTxn, {
    //   sender: migrationAdmin,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.lst_token_id.value.native),
    // })
    frame_dig -4
    gtxns Sender
    frame_dig -1
    ==
    bz acceptMigrationAlgoContract_bool_false@4
    frame_dig -4
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2202
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2200-2204
    // assertMatch(lstTransferTxn, {
    //   sender: migrationAdmin,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.lst_token_id.value.native),
    // })
    ==
    bz acceptMigrationAlgoContract_bool_false@4
    frame_dig -4
    gtxns XferAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2203
    // xferAsset: Asset(this.lst_token_id.value.native),
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2200-2204
    // assertMatch(lstTransferTxn, {
    //   sender: migrationAdmin,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.lst_token_id.value.native),
    // })
    ==
    bz acceptMigrationAlgoContract_bool_false@4
    intc_1 // 1

acceptMigrationAlgoContract_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2200-2204
    // assertMatch(lstTransferTxn, {
    //   sender: migrationAdmin,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.lst_token_id.value.native),
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2205-2208
    // assertMatch(algoTxn, {
    //   sender: migrationAdmin,
    //   receiver: Global.currentApplicationAddress,
    // })
    frame_dig -3
    gtxns Sender
    frame_dig -1
    ==
    bz acceptMigrationAlgoContract_bool_false@8
    frame_dig -3
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2207
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2205-2208
    // assertMatch(algoTxn, {
    //   sender: migrationAdmin,
    //   receiver: Global.currentApplicationAddress,
    // })
    ==
    bz acceptMigrationAlgoContract_bool_false@8
    intc_1 // 1

acceptMigrationAlgoContract_bool_merge@9:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2205-2208
    // assertMatch(algoTxn, {
    //   sender: migrationAdmin,
    //   receiver: Global.currentApplicationAddress,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2210
    // this.cash_on_hand.value = snapshot.cash_on_hand.native
    frame_dig -2
    pushint 24 // 24
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:190
    // cash_on_hand = GlobalState<uint64>()
    bytec 14 // "cash_on_hand"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2210
    // this.cash_on_hand.value = snapshot.cash_on_hand.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2211
    // this.total_deposits.value = snapshot.total_deposits.native
    frame_dig -2
    intc_0 // 0
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    bytec_3 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2211
    // this.total_deposits.value = snapshot.total_deposits.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2212
    // this.circulating_lst.value = snapshot.circulating_lst.native
    frame_dig -2
    pushint 16 // 16
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    bytec 8 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2212
    // this.circulating_lst.value = snapshot.circulating_lst.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2213
    // this.total_borrows.value = snapshot.total_borrows.native
    frame_dig -2
    pushint 8 // 8
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2213
    // this.total_borrows.value = snapshot.total_borrows.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2214
    // this.total_additional_rewards.value = snapshot.total_additional_rewards.native
    frame_dig -2
    pushint 112 // 112
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:188
    // total_additional_rewards = GlobalState<uint64>()
    bytec 26 // "total_additional_rewards"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2214
    // this.total_additional_rewards.value = snapshot.total_additional_rewards.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2215
    // this.total_commission_earned.value = snapshot.total_commission_earned.native
    frame_dig -2
    pushint 104 // 104
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:186
    // total_commission_earned = GlobalState<uint64>()
    bytec 25 // "total_commission_earned"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2215
    // this.total_commission_earned.value = snapshot.total_commission_earned.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2216
    // this.current_accumulated_commission.value = snapshot.current_accumulated_commission.native
    frame_dig -2
    pushint 96 // 96
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:184
    // current_accumulated_commission = GlobalState<uint64>()
    bytec 19 // "current_accumulated_commission"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2216
    // this.current_accumulated_commission.value = snapshot.current_accumulated_commission.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2217
    // this.fee_pool.value = snapshot.fee_pool.native
    frame_dig -2
    pushint 64 // 64
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    bytec 15 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2217
    // this.fee_pool.value = snapshot.fee_pool.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2218
    // this.borrow_index_wad.value = snapshot.borrowIndexWad.native
    frame_dig -2
    pushint 32 // 32
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    bytec 11 // "borrow_index_wad"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2218
    // this.borrow_index_wad.value = snapshot.borrowIndexWad.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2219
    // this.accepted_collaterals_count.value = snapshot.accepted_collaterals_count.native
    frame_dig -2
    pushint 72 // 72
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:168
    // accepted_collaterals_count = GlobalState<uint64>()
    bytec 20 // "accepted_collaterals_count"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2219
    // this.accepted_collaterals_count.value = snapshot.accepted_collaterals_count.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2220
    // this.base_token_id.value = new UintN64(snapshot.base_token_id.native)
    frame_dig -2
    pushint 40 // 40
    extract_uint64
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    bytec_0 // "base_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2220
    // this.base_token_id.value = new UintN64(snapshot.base_token_id.native)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2221
    // this.lst_token_id.value = new UintN64(snapshot.lst_token_id.native)
    frame_dig -2
    pushint 56 // 56
    extract_uint64
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2221
    // this.lst_token_id.value = new UintN64(snapshot.lst_token_id.native)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2222
    // this.buyout_token_id.value = new UintN64(snapshot.buyout_token_id.native)
    frame_dig -2
    pushint 80 // 80
    extract_uint64
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:171
    // buyout_token_id = GlobalState<UintN64>()
    bytec 18 // "buyout_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2222
    // this.buyout_token_id.value = new UintN64(snapshot.buyout_token_id.native)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2223
    // this.commission_percentage.value = snapshot.commission_percentage.native
    frame_dig -2
    pushint 48 // 48
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:182
    // commission_percentage = GlobalState<uint64>()
    bytec 32 // "commission_percentage"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2223
    // this.commission_percentage.value = snapshot.commission_percentage.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2224
    // this.liq_bonus_bps.value = snapshot.liq_bonus_bps.native
    frame_dig -2
    pushint 88 // 88
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:174
    // liq_bonus_bps = GlobalState<uint64>()
    bytec 24 // "liq_bonus_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2224
    // this.liq_bonus_bps.value = snapshot.liq_bonus_bps.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2225
    // this.active_loan_records.value = snapshot.active_loan_records.native
    frame_dig -2
    pushint 120 // 120
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:165
    // active_loan_records = GlobalState<uint64>()
    bytec 9 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2225
    // this.active_loan_records.value = snapshot.active_loan_records.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    bytec 5 // "contract_state"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2227
    // this.contract_state.value = new UintN64(1) // active
    pushbytes 0x0000000000000001
    app_global_put
    retsub

acceptMigrationAlgoContract_bool_false@8:
    intc_0 // 0
    b acceptMigrationAlgoContract_bool_merge@9

acceptMigrationAlgoContract_bool_false@4:
    intc_0 // 0
    b acceptMigrationAlgoContract_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.goOnline(feePayment: uint64, votePK: bytes, selectionPK: bytes, stateProofPK: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64) -> void:
goOnline:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2249-2257
    // goOnline(
    //   feePayment: gtxn.PaymentTxn,
    //   votePK: bytes,
    //   selectionPK: bytes,
    //   stateProofPK: bytes,
    //   voteFirst: uint64,
    //   voteLast: uint64,
    //   voteKeyDilution: uint64,
    // ): void {
    proto 7 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2258
    // assert(op.Txn.sender === this.admin_account.value, 'Only admin can go online')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2258
    // assert(op.Txn.sender === this.admin_account.value, 'Only admin can go online')
    ==
    assert // Only admin can go online
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2236
    // return Global.payoutsGoOnlineFee
    global PayoutsGoOnlineFee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2261-2264
    // assertMatch(feePayment, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: extraFee,
    // })
    frame_dig -7
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2262
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2261-2264
    // assertMatch(feePayment, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: extraFee,
    // })
    ==
    bz goOnline_bool_false@3
    frame_dig -7
    gtxns Amount
    frame_dig 0
    ==
    bz goOnline_bool_false@3
    intc_1 // 1

goOnline_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2261-2264
    // assertMatch(feePayment, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: extraFee,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2265-2275
    // itxn
    //   .keyRegistration({
    //     voteKey: votePK,
    //     selectionKey: selectionPK,
    //     stateProofKey: stateProofPK,
    //     voteFirst: voteFirst,
    //     voteLast: voteLast,
    //     voteKeyDilution: voteKeyDilution,
    //     fee: extraFee,
    //   })
    //   .submit()
    itxn_begin
    frame_dig -1
    itxn_field VoteKeyDilution
    frame_dig -2
    itxn_field VoteLast
    frame_dig -3
    itxn_field VoteFirst
    frame_dig -4
    itxn_field StateProofPK
    frame_dig -5
    itxn_field SelectionPK
    frame_dig -6
    itxn_field VotePK
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2265-2274
    // itxn
    //   .keyRegistration({
    //     voteKey: votePK,
    //     selectionKey: selectionPK,
    //     stateProofKey: stateProofPK,
    //     voteFirst: voteFirst,
    //     voteLast: voteLast,
    //     voteKeyDilution: voteKeyDilution,
    //     fee: extraFee,
    //   })
    pushint 2 // 2
    itxn_field TypeEnum
    frame_dig 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2265-2275
    // itxn
    //   .keyRegistration({
    //     voteKey: votePK,
    //     selectionKey: selectionPK,
    //     stateProofKey: stateProofPK,
    //     voteFirst: voteFirst,
    //     voteLast: voteLast,
    //     voteKeyDilution: voteKeyDilution,
    //     fee: extraFee,
    //   })
    //   .submit()
    itxn_submit
    retsub

goOnline_bool_false@3:
    intc_0 // 0
    b goOnline_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.goOffline() -> void:
goOffline:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2286
    // itxn.keyRegistration({ fee: STANDARD_TXN_FEE }).submit()
    itxn_begin
    pushint 2 // 2
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2286
    // itxn.keyRegistration({ fee: STANDARD_TXN_FEE }).submit()
    itxn_submit
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addCash(amount: uint64) -> void:
addCash:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2293
    // private addCash(amount: uint64): void {
    proto 1 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:190
    // cash_on_hand = GlobalState<uint64>()
    intc_0 // 0
    bytec 14 // "cash_on_hand"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2294
    // this.cash_on_hand.value = this.cash_on_hand.value + amount
    frame_dig -1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:190
    // cash_on_hand = GlobalState<uint64>()
    bytec 14 // "cash_on_hand"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2294
    // this.cash_on_hand.value = this.cash_on_hand.value + amount
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.removeCash(amount: uint64) -> void:
removeCash:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2302
    // private removeCash(amount: uint64): void {
    proto 1 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:190
    // cash_on_hand = GlobalState<uint64>()
    intc_0 // 0
    bytec 14 // "cash_on_hand"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2303
    // assert(this.cash_on_hand.value >= amount, 'INSUFFICIENT_CASH')
    frame_dig -1
    >=
    assert // INSUFFICIENT_CASH
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:190
    // cash_on_hand = GlobalState<uint64>()
    intc_0 // 0
    bytec 14 // "cash_on_hand"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2304
    // this.cash_on_hand.value = this.cash_on_hand.value - amount
    frame_dig -1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:190
    // cash_on_hand = GlobalState<uint64>()
    bytec 14 // "cash_on_hand"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:2304
    // this.cash_on_hand.value = this.cash_on_hand.value - amount
    swap
    app_global_put
    retsub
