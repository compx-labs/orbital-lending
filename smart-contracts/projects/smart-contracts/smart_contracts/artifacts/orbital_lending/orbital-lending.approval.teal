#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 4 10000 1000 4294967296
    bytecblock "base_token_id" "loan_record" "admin_account" "active_loan_records" 0x151f7c75 "total_deposits" "circulating_lst" "fee_pool" "liq_threshold_bps" "accepted_collaterals_count" "lst_token_id" "accepted_collaterals" 0x09ef525f 0xae859f3b ":" "ltv_bps" "interest_bps" "origination_fee_bps" "protocol_interest_fee_bps" "oracle_app"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn NumAppArgs
    bz main_after_if_else@28
    pushbytess 0x3b01665e 0x9de42732 0x17c33662 0x5efce39a 0x5cac25a9 // method "createApplication(account,uint64)void", method "initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void", method "generateLSTToken(pay)void", method "optInToLST(uint64,pay)void", method "configureLSTToken(axfer,uint64)void"
    bytec 12 // method "getCirculatingLST()uint64"
    bytec 13 // method "getTotalDeposits()uint64"
    pushbytess 0x6c6337c0 0xe596ac73 0x53b5111f 0x3acbfb6f 0x50c57985 0xad8d1580 0x6177ca28 0xf676074f 0xabaf9805 0xb278e573 0x96da416e 0xf0de9dc0 0x554adf13 0xc9db0463 0xdaa7f7f2 // method "getAcceptedCollateralsCount()uint64", method "getOraclePrice(uint64)uint64", method "addNewCollateralType(uint64,pay)void", method "depositASA(axfer,uint64)void", method "withdrawDeposit(axfer,uint64,uint64)void", method "borrow(axfer,uint64,uint64,uint64,byte[])void", method "claimLoanRecordASA(account,asset)void", method "getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", method "getLoanRecordASAId(account)uint64", method "repayLoan(axfer,uint64,byte[])void", method "withdrawFees()void", method "accrueLoanInterest(account,byte[])void", method "buyout(account,account,axfer)void", method "liquidate(account,axfer)void", method "getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_initApplication_route@4 main_generateLSTToken_route@5 main_optInToLST_route@6 main_configureLSTToken_route@7 main_getCirculatingLST_route@8 main_getTotalDeposits_route@9 main_getAcceptedCollateralsCount_route@10 main_getOraclePrice_route@11 main_addNewCollateralType_route@12 main_depositASA_route@13 main_withdrawDeposit_route@14 main_borrow_route@15 main_claimLoanRecordASA_route@16 main_getLoanRecord_route@17 main_getLoanRecordASAId_route@18 main_repayLoan_route@19 main_withdrawFees_route@20 main_accrueLoanInterest_route@21 main_buyout_route@22 main_liquidate_route@23 main_getLoanStatus_route@24

main_after_if_else@28:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    intc_0 // 0
    return

main_getLoanStatus_route@24:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:835
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:835
    // @abimethod({ allowActions: 'NoOp' })
    callsub getLoanStatus
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    pushbytes 0x00
    intc_0 // 0
    uncover 8
    setbit
    pushbytes 0x00
    intc_0 // 0
    uncover 8
    setbit
    uncover 6
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    intc_0 // 0
    getbit
    pushint 321 // 321
    swap
    setbit
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_liquidate_route@23:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:772
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:772
    // @abimethod({ allowActions: 'NoOp' })
    callsub liquidate
    intc_1 // 1
    return

main_buyout_route@22:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:704
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:704
    // @abimethod({ allowActions: 'NoOp' })
    callsub buyout
    intc_1 // 1
    return

main_accrueLoanInterest_route@21:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:675
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:675
    // @abimethod({ allowActions: 'NoOp' })
    callsub accrueLoanInterest
    intc_1 // 1
    return

main_withdrawFees_route@20:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:662
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub withdrawFees
    intc_1 // 1
    return

main_repayLoan_route@19:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:609
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:609
    // @abimethod({ allowActions: 'NoOp' })
    callsub repayLoan
    intc_1 // 1
    return

main_getLoanRecordASAId_route@18:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:605
    // getLoanRecordASAId(borrowerAddress: Account): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:605
    // getLoanRecordASAId(borrowerAddress: Account): uint64 {
    callsub getLoanRecordASAId
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getLoanRecord_route@17:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:601
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:601
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    callsub getLoanRecord
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_claimLoanRecordASA_route@16:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:524
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Assets
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:524
    // @abimethod({ allowActions: 'NoOp' })
    callsub claimLoanRecordASA
    intc_1 // 1
    return

main_borrow_route@15:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:337
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    extract 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:337
    // @abimethod({ allowActions: 'NoOp' })
    callsub borrow
    intc_1 // 1
    return

main_withdrawDeposit_route@14:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:312
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:312
    // @abimethod({ allowActions: 'NoOp' })
    callsub withdrawDeposit
    intc_1 // 1
    return

main_depositASA_route@13:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:281
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:281
    // @abimethod({ allowActions: 'NoOp' })
    callsub depositASA
    intc_1 // 1
    return

main_addNewCollateralType_route@12:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:231
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:231
    // @abimethod({ allowActions: 'NoOp' })
    callsub addNewCollateralType
    intc_1 // 1
    return

main_getOraclePrice_route@11:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:193
    // getOraclePrice(tokenId: uint64): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:193
    // getOraclePrice(tokenId: uint64): uint64 {
    callsub getOraclePrice
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getAcceptedCollateralsCount_route@10:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:189
    // getAcceptedCollateralsCount(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getAcceptedCollateralsCount
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getTotalDeposits_route@9:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:185
    // getTotalDeposits(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getTotalDeposits
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getCirculatingLST_route@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:181
    // getCirculatingLST(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getCirculatingLST
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_configureLSTToken_route@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:170
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:170
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    callsub configureLSTToken
    intc_1 // 1
    return

main_optInToLST_route@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:151
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:151
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    callsub optInToLST
    intc_1 // 1
    return

main_generateLSTToken_route@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:125
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:125
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    callsub generateLSTToken
    intc_1 // 1
    return

main_initApplication_route@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:83
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txnas Applications
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:83
    // @abimethod({ allowActions: 'NoOp' })
    callsub initApplication
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:77
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:77
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication(admin: bytes, baseTokenId: uint64) -> void:
createApplication:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:77-78
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    // public createApplication(admin: Account, baseTokenId: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    bytec_2 // "admin_account"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:79
    // this.admin_account.value = admin
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // this.base_token_id.value = new UintN64(baseTokenId)
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    bytec_0 // "base_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:80
    // this.base_token_id.value = new UintN64(baseTokenId)
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication(mbrTxn: uint64, ltv_bps: uint64, liq_threshold_bps: uint64, interest_bps: uint64, origination_fee_bps: uint64, protocol_interest_fee_bps: uint64, oracle_app_id: uint64) -> void:
initApplication:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:83-92
    // @abimethod({ allowActions: 'NoOp' })
    // public initApplication(
    //   mbrTxn: gtxn.PaymentTxn,
    //   ltv_bps: uint64,
    //   liq_threshold_bps: uint64,
    //   interest_bps: uint64,
    //   origination_fee_bps: uint64,
    //   protocol_interest_fee_bps: uint64,
    //   oracle_app_id: Application,
    // ): void {
    proto 7 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:93
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:93
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:95-98
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 400000,
    // })
    frame_dig -7
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:95-98
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 400000,
    // })
    ==
    bz initApplication_bool_false@3
    frame_dig -7
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:97
    // amount: 400000,
    pushint 400000 // 400000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:95-98
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 400000,
    // })
    ==
    bz initApplication_bool_false@3
    intc_1 // 1

initApplication_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:95-98
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 400000,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50
    // ltv_bps = GlobalState<uint64>()
    bytec 15 // "ltv_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:100
    // this.ltv_bps.value = ltv_bps
    frame_dig -6
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:53
    // liq_threshold_bps = GlobalState<uint64>()
    bytec 8 // "liq_threshold_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:101
    // this.liq_threshold_bps.value = liq_threshold_bps
    frame_dig -5
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // interest_bps = GlobalState<uint64>()
    bytec 16 // "interest_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:102
    // this.interest_bps.value = interest_bps
    frame_dig -4
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // origination_fee_bps = GlobalState<uint64>()
    bytec 17 // "origination_fee_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:103
    // this.origination_fee_bps.value = origination_fee_bps
    frame_dig -3
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // accepted_collaterals_count = GlobalState<uint64>()
    bytec 9 // "accepted_collaterals_count"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // this.accepted_collaterals_count.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:75
    // fee_pool = GlobalState<uint64>()
    bytec 7 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:105
    // this.fee_pool.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:106
    // this.circulating_lst.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    bytec 5 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // this.total_deposits.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_3 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:108
    // this.active_loan_records.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:61
    // protocol_interest_fee_bps = GlobalState<uint64>()
    bytec 18 // "protocol_interest_fee_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:109
    // this.protocol_interest_fee_bps.value = protocol_interest_fee_bps
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:63
    // oracle_app = GlobalState<Application>()
    bytec 19 // "oracle_app"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:110
    // this.oracle_app.value = oracle_app_id
    frame_dig -1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:112
    // if (this.base_token_id.value.native !== 0) {
    btoi
    bz initApplication_after_if_else@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:113-120
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:115
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:116
    // xferAsset: this.base_token_id.value.native,
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:117
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:113-119
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:118
    // fee: 1000,
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:113-120
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_submit

initApplication_after_if_else@7:
    retsub

initApplication_bool_false@3:
    intc_0 // 0
    b initApplication_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken(mbrTxn: uint64) -> void:
generateLSTToken:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:125
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    proto 1 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:126
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:126
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:127-130
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 102000,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:127-130
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 102000,
    // })
    ==
    bz generateLSTToken_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:129
    // amount: 102000,
    pushint 102000 // 102000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:127-130
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 102000,
    // })
    ==
    bz generateLSTToken_bool_false@3
    intc_1 // 1

generateLSTToken_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:127-130
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 102000,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:135-146
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(this.base_token_id.value.bytes),
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:137
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:138
    // total: baseToken.total,
    dig 1
    asset_params_get AssetTotal
    assert // asset exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:139
    // decimals: baseToken.decimals,
    dig 2
    asset_params_get AssetDecimals
    assert // asset exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:141
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:142
    // unitName: 'c' + String(baseToken.unitName),
    uncover 4
    asset_params_get AssetUnitName
    assert // asset exists
    pushbytes "c"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // assetName: 'c' + String(this.base_token_id.value.bytes),
    pushbytes "c"
    swap
    concat
    itxn_field ConfigAssetName
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetManager
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:140
    // defaultFrozen: false,
    intc_0 // 0
    itxn_field ConfigAssetDefaultFrozen
    itxn_field ConfigAssetDecimals
    itxn_field ConfigAssetTotal
    itxn_field Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:135-145
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(this.base_token_id.value.bytes),
    //     fee: 1000,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // fee: 1000,
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:135-146
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(this.base_token_id.value.bytes),
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_submit
    itxn ConfigAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // this.lst_token_id.value = new UintN64(result.configAsset.id)
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:38
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // this.lst_token_id.value = new UintN64(result.configAsset.id)
    swap
    app_global_put
    retsub

generateLSTToken_bool_false@3:
    intc_0 // 0
    b generateLSTToken_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST(lstAssetId: uint64, mbrTxn: uint64) -> void:
optInToLST:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:151
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:152
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:152
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:153-156
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 2000,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:153-156
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 2000,
    // })
    ==
    bz optInToLST_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:155
    // amount: 2000,
    pushint 2000 // 2000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:153-156
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 2000,
    // })
    ==
    bz optInToLST_bool_false@3
    intc_1 // 1

optInToLST_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:153-156
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 2000,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:157
    // this.lst_token_id.value = new UintN64(lstAssetId)
    frame_dig -2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:38
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:157
    // this.lst_token_id.value = new UintN64(lstAssetId)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:160-167
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:164
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:160-166
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:165
    // fee: 1000,
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:160-167
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_submit
    retsub

optInToLST_bool_false@3:
    intc_0 // 0
    b optInToLST_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken(axferTxn: uint64, circulating_lst: uint64) -> void:
configureLSTToken:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:170
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:171
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:171
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:38
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:172
    // assert(this.lst_token_id.value.native === axferTxn.xferAsset.id, 'LST token not set')
    btoi
    frame_dig -2
    gtxns XferAsset
    ==
    assert // LST token not set
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:174-177
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    frame_dig -2
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:174-177
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    ==
    bz configureLSTToken_bool_false@3
    frame_dig -2
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:176
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:174-177
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    ==
    bz configureLSTToken_bool_false@3
    intc_1 // 1

configureLSTToken_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:174-177
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:178
    // this.circulating_lst.value = circulating_lst
    frame_dig -1
    app_global_put
    retsub

configureLSTToken_bool_false@3:
    intc_0 // 0
    b configureLSTToken_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST() -> uint64:
getCirculatingLST:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:182
    // return this.circulating_lst.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits() -> uint64:
getTotalDeposits:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:186
    // return this.total_deposits.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount() -> uint64:
getAcceptedCollateralsCount:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // accepted_collaterals_count = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "accepted_collaterals_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:190
    // return this.accepted_collaterals_count.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice(tokenId: uint64) -> uint64:
getOraclePrice:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:193
    // getOraclePrice(tokenId: uint64): uint64 {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:63
    // oracle_app = GlobalState<Application>()
    intc_0 // 0
    bytec 19 // "oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:195
    // const address = oracle.address
    dup
    app_params_get AppAddress
    bury 1
    assert // application exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:198-201
    // const result = abiCall(PriceOracleStub.prototype.getTokenPrice, {
    //   appId: contractAppId,
    //   args: [new UintN64(tokenId)],
    // }).returnValue
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:200
    // args: [new UintN64(tokenId)],
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:198-201
    // const result = abiCall(PriceOracleStub.prototype.getTokenPrice, {
    //   appId: contractAppId,
    //   args: [new UintN64(tokenId)],
    // }).returnValue
    pushbytes 0xac13e004 // method "getTokenPrice(uint64)(uint64,uint64,uint64)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    pushint 12 // 12
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // return result.price.native
    extract_uint64
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCollateral(collateralTokenId: bytes) -> bytes:
getCollateral:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:211
    // private getCollateral(collateralTokenId: UintN64): AcceptedCollateral {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:66
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 11 // "accepted_collaterals"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:213
    // assert(this.accepted_collaterals(key).exists, 'Collateral not found')
    dup
    box_len
    bury 1
    assert // Collateral not found
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:214
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal(collateralTokenId: bytes, amount: uint64) -> void:
updateCollateralTotal:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:217
    // private updateCollateralTotal(collateralTokenId: UintN64, amount: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:66
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 11 // "accepted_collaterals"
    frame_dig -2
    concat
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:219
    // const collateral = this.accepted_collaterals(key).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:221
    // if (collateral.assetId.native === collateralTokenId.native) {
    dup
    extract 0 8 // on error: Index access is out of bounds
    swap
    intc_0 // 0
    extract_uint64
    frame_dig -2
    btoi
    ==
    bz updateCollateralTotal_after_if_else@2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:222
    // const newTotal: uint64 = collateral.totalCollateral.native + amount
    frame_dig 1
    dup
    pushint 16 // 16
    extract_uint64
    frame_dig -1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:225
    // baseAssetId: collateral.baseAssetId,
    swap
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:226
    // totalCollateral: new UintN64(newTotal),
    swap
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:223-227
    // this.accepted_collaterals(key).value = new AcceptedCollateral({
    //   assetId: collateral.assetId,
    //   baseAssetId: collateral.baseAssetId,
    //   totalCollateral: new UintN64(newTotal),
    // }).copy()
    frame_dig 2
    uncover 2
    concat
    swap
    concat
    frame_dig 0
    swap
    box_put

updateCollateralTotal_after_if_else@2:
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType(collateralTokenId: bytes, mbrTxn: uint64) -> void:
addNewCollateralType:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:231-232
    // @abimethod({ allowActions: 'NoOp' })
    // addNewCollateralType(collateralTokenId: UintN64, mbrTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:233
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:234
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:234
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:235
    // assert(collateralTokenId.native !== baseToken.id)
    frame_dig -2
    btoi
    dup
    uncover 2
    !=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:237-240
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 101000,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:237-240
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 101000,
    // })
    ==
    bz addNewCollateralType_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:239
    // amount: 101000,
    pushint 101000 // 101000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:237-240
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 101000,
    // })
    ==
    bz addNewCollateralType_bool_false@3
    intc_1 // 1

addNewCollateralType_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:237-240
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 101000,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:242-246
    // const newAcceptedCollateral: AcceptedCollateral = new AcceptedCollateral({
    //   assetId: collateralTokenId,
    //   baseAssetId: this.base_token_id.value,
    //   totalCollateral: new UintN64(0),
    // })
    frame_dig -2
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:245
    // totalCollateral: new UintN64(0),
    pushbytes 0x0000000000000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:242-246
    // const newAcceptedCollateral: AcceptedCollateral = new AcceptedCollateral({
    //   assetId: collateralTokenId,
    //   baseAssetId: this.base_token_id.value,
    //   totalCollateral: new UintN64(0),
    // })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:66
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 11 // "accepted_collaterals"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:248
    // this.accepted_collaterals(key).value = newAcceptedCollateral.copy()
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // accepted_collaterals_count = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "accepted_collaterals_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:249
    // this.accepted_collaterals_count.value = this.accepted_collaterals_count.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // accepted_collaterals_count = GlobalState<uint64>()
    bytec 9 // "accepted_collaterals_count"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:249
    // this.accepted_collaterals_count.value = this.accepted_collaterals_count.value + 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:250-258
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:252
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:253
    // assetReceiver: Global.currentApplicationAddress,
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:255
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig 0
    itxn_field XferAsset
    itxn_field AssetReceiver
    itxn_field Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:250-257
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:256
    // fee: 1000,
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:250-258
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_submit
    retsub

addNewCollateralType_bool_false@3:
    intc_0 // 0
    b addNewCollateralType_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositASA(assetTransferTxn: uint64, amount: uint64) -> void:
depositASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:281-282
    // @abimethod({ allowActions: 'NoOp' })
    // depositASA(assetTransferTxn: gtxn.AssetTransferTxn, amount: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:283
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:284-288
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    frame_dig -2
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:285
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:284-288
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    ==
    bz depositASA_bool_false@4
    frame_dig -2
    gtxns XferAsset
    frame_dig 0
    ==
    bz depositASA_bool_false@4
    frame_dig -2
    gtxns AssetAmount
    frame_dig -1
    ==
    bz depositASA_bool_false@4
    intc_1 // 1

depositASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:284-288
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:292
    // Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:293
    // this.base_token_id.value.native,
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:291-294
    // const depositBalance = op.AssetHolding.assetBalance(
    //   Global.currentApplicationAddress,
    //   this.base_token_id.value.native,
    // )
    asset_holding_get AssetBalance
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:295
    // if (depositBalance[0] === 0) {
    bnz depositASA_else_body@7
    frame_dig -1

depositASA_after_if_else@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:300-306
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:302
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:38
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:303
    // xferAsset: this.lst_token_id.value.native,
    btoi
    dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:300-305
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:300-306
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:308
    // this.circulating_lst.value += lstDue
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:308
    // this.circulating_lst.value += lstDue
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:309
    // this.total_deposits.value += amount
    frame_dig -1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    bytec 5 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:309
    // this.total_deposits.value += amount
    swap
    app_global_put
    retsub

depositASA_else_body@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:262
    // const [highBits1, lowBits1] = mulw(this.circulating_lst.value, 10000)
    intc_3 // 10000
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:264
    // const lstRatio = divw(highBits1, lowBits1, this.total_deposits.value)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:266
    // const [highBits2, lowBits2] = mulw(lstRatio, amount)
    frame_dig -1
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:267
    // return divw(highBits2, lowBits2, 10000)
    intc_3 // 10000
    divw
    b depositASA_after_if_else@8

depositASA_bool_false@4:
    intc_0 // 0
    b depositASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit(assetTransferTxn: uint64, amount: uint64, lstAppId: uint64) -> void:
withdrawDeposit:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:312-313
    // @abimethod({ allowActions: 'NoOp' })
    // withdrawDeposit(assetTransferTxn: gtxn.AssetTransferTxn, amount: uint64, lstAppId: uint64): void {
    proto 3 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:314
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:315-319
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    frame_dig -3
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:316
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:315-319
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    ==
    bz withdrawDeposit_bool_false@4
    frame_dig -3
    gtxns XferAsset
    frame_dig 0
    ==
    bz withdrawDeposit_bool_false@4
    frame_dig -3
    gtxns AssetAmount
    frame_dig -2
    ==
    bz withdrawDeposit_bool_false@4
    intc_1 // 1

withdrawDeposit_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:315-319
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:273
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, { appId: lstApp }).returnValue
    itxn_begin
    bytec 12 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:274
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, { appId: lstApp }).returnValue
    itxn_begin
    bytec 13 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:277
    // const [hi, lo] = mulw(totalDepositsExternal, amount)
    frame_dig -2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:278
    // return divw(hi, lo, circulatingExternalLST)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:324
    // assert(op.AssetHolding.assetBalance(Global.currentApplicationAddress, this.base_token_id.value.native)[0] >= asaDue)
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:324
    // assert(op.AssetHolding.assetBalance(Global.currentApplicationAddress, this.base_token_id.value.native)[0] >= asaDue)
    btoi
    asset_holding_get AssetBalance
    pop
    dig 1
    >=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:325-331
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:327
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:328
    // xferAsset: this.base_token_id.value.native,
    btoi
    dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:325-330
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:325-331
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:333
    // this.circulating_lst.value -= amount // LST burned
    frame_dig -2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:333
    // this.circulating_lst.value -= amount // LST burned
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:334
    // this.total_deposits.value -= asaDue // ASA returned
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    bytec 5 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:334
    // this.total_deposits.value -= asaDue // ASA returned
    swap
    app_global_put
    retsub

withdrawDeposit_bool_false@4:
    intc_0 // 0
    b withdrawDeposit_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow(assetTransferTxn: uint64, requestedLoanAmount: uint64, lstApp: uint64, collateralTokenId: bytes, arc19MetadataStr: bytes) -> void:
borrow:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:337-344
    // @abimethod({ allowActions: 'NoOp' })
    // borrow(
    //   assetTransferTxn: gtxn.AssetTransferTxn,
    //   requestedLoanAmount: uint64,
    //   lstApp: uint64,
    //   collateralTokenId: UintN64,
    //   arc19MetadataStr: bytes,
    // ): void {
    proto 5 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_1 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:346
    // const hasLoan = this.loan_record(op.Txn.sender).exists
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:346
    // const hasLoan = this.loan_record(op.Txn.sender).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:349-352
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   // user must transfer LST collateral in this txn…
    // })
    frame_dig -5
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:350
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:349-352
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   // user must transfer LST collateral in this txn…
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:66
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 11 // "accepted_collaterals"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:208
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:353
    // assert(this.collateralExists(collateralTokenId), 'unsupported collateral')
    assert // unsupported collateral
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:354
    // const collateralDeposit = assetTransferTxn.assetAmount
    frame_dig -5
    gtxns AssetAmount
    dup
    cover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:357
    // const acceptedCollateral = this.getCollateral(collateralTokenId)
    frame_dig -2
    callsub getCollateral
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:358
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, { appId: lstApp }).returnValue
    itxn_begin
    bytec 12 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -3
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:359
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, { appId: lstApp }).returnValue
    itxn_begin
    bytec 13 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -3
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:362
    // const [hC, lC] = mulw(totalDepositsExternal, collateralDeposit)
    uncover 3
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:363
    // const underlyingCollateral: uint64 = divw(hC, lC, circulatingExternalLST)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:366
    // const oraclePrice: uint64 = this.getOraclePrice(acceptedCollateral.baseAssetId.native)
    swap
    pushint 8 // 8
    extract_uint64
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:367
    // const [hU, lU] = mulw(underlyingCollateral, oraclePrice)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:368
    // const collateralUSD: uint64 = divw(hU, lU, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50
    // ltv_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 15 // "ltv_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:370
    // const maxBorrowUSD: uint64 = (collateralUSD * this.ltv_bps.value) / 10000
    *
    intc_3 // 10000
    /
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // origination_fee_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 17 // "origination_fee_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:373
    // const fee: uint64 = (requestedLoanAmount * this.origination_fee_bps.value) / 10000
    frame_dig -4
    *
    intc_3 // 10000
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:374
    // const disbursement: uint64 = requestedLoanAmount - fee
    frame_dig -4
    dig 1
    -
    dup
    cover 2
    cover 4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:75
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:375
    // this.fee_pool.value += fee
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:75
    // fee_pool = GlobalState<uint64>()
    bytec 7 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:375
    // this.fee_pool.value += fee
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:378
    // const [decimals, decExists] = op.AssetParams.assetDecimals(this.base_token_id.value.native)
    btoi
    asset_params_get AssetDecimals
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:379
    // const assetScale: uint64 = 10 ** decimals
    pushint 10 // 10
    swap
    exp
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:380
    // const [aH, aL] = mulw(disbursement, assetScale)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:381
    // const dividerScalar: uint64 = 2 ** 32
    intc 5 // 4294967296
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:382
    // const interim: uint64 = divw(aH, aL, dividerScalar)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:381
    // const dividerScalar: uint64 = 2 ** 32
    intc 5 // 4294967296
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:383
    // const scaledDown: uint64 = interim / dividerScalar
    /
    cover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:386
    // if (hasLoan) {
    bz borrow_else_body@4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:388
    // let old = this.getLoanRecord(op.Txn.sender)
    txn Sender
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:389
    // old = this.accrueInterest(old)
    callsub accrueInterest
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_1 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:390
    // this.loan_record(op.Txn.sender).value = old.copy()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:390
    // this.loan_record(op.Txn.sender).value = old.copy()
    dig 1
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:392
    // const totalRequested: uint64 = old.scaledDownDisbursement.native + requestedLoanAmount
    dup
    pushint 56 // 56
    extract_uint64
    dup
    frame_dig -4
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:393
    // assert(totalRequested <= maxBorrowUSD, 'exceeds LTV limit with existing debt')
    uncover 3
    <=
    assert // exceeds LTV limit with existing debt
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:396
    // const totalCollateral: uint64 = old.collateralAmount.native + collateralDeposit
    dig 1
    pushint 40 // 40
    extract_uint64
    frame_dig 0
    dup
    cover 4
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:398
    // const newDebt: uint64 = oldDebt + disbursement
    swap
    frame_dig 1
    dup
    cover 2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:399
    // const newTotalDisb: uint64 = old.disbursement.native + disbursement
    dig 3
    pushint 48 // 48
    extract_uint64
    uncover 2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:405
    // old.collateralTokenId,
    dig 3
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:406
    // op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:409
    // old.loanRecordASAId.native,
    dig 5
    extract 72 8 // on error: Index access is out of bounds
    dig 6
    pushint 72 // 72
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:402-410
    // this.updateLoanRecord(
    //   newDebt,
    //   newTotalDisb,
    //   old.collateralTokenId,
    //   op.Txn.sender,
    //   totalCollateral,
    //   arc19MetadataStr,
    //   old.loanRecordASAId.native,
    // )
    dig 5
    dig 5
    dig 5
    uncover 5
    dig 9
    frame_dig -1
    uncover 6
    callsub updateLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:413
    // borrowerAddress: old.borrowerAddress,
    dig 5
    extract 0 32 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:415
    // collateralAmount: new UintN64(totalCollateral),
    uncover 5
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:416
    // disbursement: new UintN64(newTotalDisb),
    uncover 4
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:417
    // scaledDownDisbursement: new UintN64(newDebt),
    uncover 5
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:418
    // borrowedTokenId: old.borrowedTokenId,
    uncover 6
    extract 64 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:420
    // lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:412-421
    // this.loan_record(op.Txn.sender).value = new LoanRecord({
    //   borrowerAddress: old.borrowerAddress,
    //   collateralTokenId: old.collateralTokenId,
    //   collateralAmount: new UintN64(totalCollateral),
    //   disbursement: new UintN64(newTotalDisb),
    //   scaledDownDisbursement: new UintN64(newDebt),
    //   borrowedTokenId: old.borrowedTokenId,
    //   loanRecordASAId: old.loanRecordASAId,
    //   lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    // }).copy()
    uncover 5
    uncover 7
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_1 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:412
    // this.loan_record(op.Txn.sender).value = new LoanRecord({
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:412-421
    // this.loan_record(op.Txn.sender).value = new LoanRecord({
    //   borrowerAddress: old.borrowerAddress,
    //   collateralTokenId: old.collateralTokenId,
    //   collateralAmount: new UintN64(totalCollateral),
    //   disbursement: new UintN64(newTotalDisb),
    //   scaledDownDisbursement: new UintN64(newDebt),
    //   borrowedTokenId: old.borrowedTokenId,
    //   loanRecordASAId: old.loanRecordASAId,
    //   lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    // }).copy()
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:422
    // this.active_loan_records.value = this.active_loan_records.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_3 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:422
    // this.active_loan_records.value = this.active_loan_records.value + 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:423
    // this.updateCollateralTotal(collateralTokenId, collateralDeposit)
    frame_dig -2
    swap
    callsub updateCollateralTotal

borrow_after_if_else@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:438-444
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: scaledDown,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:440
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:441
    // xferAsset: this.base_token_id.value.native,
    btoi
    frame_dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:438-443
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: scaledDown,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:438-444
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: scaledDown,
    //   })
    //   .submit()
    itxn_submit
    retsub

borrow_else_body@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:426
    // assert(requestedLoanAmount <= maxBorrowUSD, 'exceeds LTV limit')
    frame_dig -4
    >=
    assert // exceeds LTV limit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:431
    // op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:487-508
    // const asset = itxn
    //   .assetConfig({
    //     assetName: 'r' + String(collateralTokenId.bytes) + 'b' + String(this.base_token_id.value.bytes),
    //     url:
    //       String(borrowerAddress.bytes) +
    //       ':' +
    //       String(collateralTokenId.bytes) +
    //       ':' +
    //       String(new UintN64(scaledDownDisbursement).bytes) +
    //       ':' +
    //       String(new UintN64(Global.latestTimestamp).bytes),
    //     manager: Global.currentApplicationAddress,
    //     decimals: 0,
    //     total: disbursement,
    //     sender: Global.currentApplicationAddress,
    //     unitName: 'r' + String(collateralTokenId.bytes) + String(this.base_token_id.value.bytes),
    //     reserve: arc19MetadataStr,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     defaultFrozen: false,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:489
    // assetName: 'r' + String(collateralTokenId.bytes) + 'b' + String(this.base_token_id.value.bytes),
    pushbytes "r"
    frame_dig -2
    concat
    dup
    pushbytes "b"
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:489
    // assetName: 'r' + String(collateralTokenId.bytes) + 'b' + String(this.base_token_id.value.bytes),
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491-492
    // String(borrowerAddress.bytes) +
    // ':' +
    dig 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:492
    // ':' +
    bytec 14 // ":"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491-492
    // String(borrowerAddress.bytes) +
    // ':' +
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491-493
    // String(borrowerAddress.bytes) +
    // ':' +
    // String(collateralTokenId.bytes) +
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:494
    // ':' +
    bytec 14 // ":"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491-494
    // String(borrowerAddress.bytes) +
    // ':' +
    // String(collateralTokenId.bytes) +
    // ':' +
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:495
    // String(new UintN64(scaledDownDisbursement).bytes) +
    frame_dig 2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491-495
    // String(borrowerAddress.bytes) +
    // ':' +
    // String(collateralTokenId.bytes) +
    // ':' +
    // String(new UintN64(scaledDownDisbursement).bytes) +
    swap
    dig 1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:496
    // ':' +
    bytec 14 // ":"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491-496
    // String(borrowerAddress.bytes) +
    // ':' +
    // String(collateralTokenId.bytes) +
    // ':' +
    // String(new UintN64(scaledDownDisbursement).bytes) +
    // ':' +
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:497
    // String(new UintN64(Global.latestTimestamp).bytes),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491-497
    // String(borrowerAddress.bytes) +
    // ':' +
    // String(collateralTokenId.bytes) +
    // ':' +
    // String(new UintN64(scaledDownDisbursement).bytes) +
    // ':' +
    // String(new UintN64(Global.latestTimestamp).bytes),
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:498
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:501
    // sender: Global.currentApplicationAddress,
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:502
    // unitName: 'r' + String(collateralTokenId.bytes) + String(this.base_token_id.value.bytes),
    uncover 6
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:504
    // freeze: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:505
    // clawback: Global.currentApplicationAddress,
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:506
    // defaultFrozen: false,
    intc_0 // 0
    itxn_field ConfigAssetDefaultFrozen
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    frame_dig -1
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetUnitName
    itxn_field Sender
    frame_dig 1
    dup
    itxn_field ConfigAssetTotal
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:499
    // decimals: 0,
    intc_0 // 0
    itxn_field ConfigAssetDecimals
    swap
    itxn_field ConfigAssetManager
    swap
    itxn_field ConfigAssetURL
    uncover 2
    itxn_field ConfigAssetName
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:487-507
    // const asset = itxn
    //   .assetConfig({
    //     assetName: 'r' + String(collateralTokenId.bytes) + 'b' + String(this.base_token_id.value.bytes),
    //     url:
    //       String(borrowerAddress.bytes) +
    //       ':' +
    //       String(collateralTokenId.bytes) +
    //       ':' +
    //       String(new UintN64(scaledDownDisbursement).bytes) +
    //       ':' +
    //       String(new UintN64(Global.latestTimestamp).bytes),
    //     manager: Global.currentApplicationAddress,
    //     decimals: 0,
    //     total: disbursement,
    //     sender: Global.currentApplicationAddress,
    //     unitName: 'r' + String(collateralTokenId.bytes) + String(this.base_token_id.value.bytes),
    //     reserve: arc19MetadataStr,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     defaultFrozen: false,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:487-508
    // const asset = itxn
    //   .assetConfig({
    //     assetName: 'r' + String(collateralTokenId.bytes) + 'b' + String(this.base_token_id.value.bytes),
    //     url:
    //       String(borrowerAddress.bytes) +
    //       ':' +
    //       String(collateralTokenId.bytes) +
    //       ':' +
    //       String(new UintN64(scaledDownDisbursement).bytes) +
    //       ':' +
    //       String(new UintN64(Global.latestTimestamp).bytes),
    //     manager: Global.currentApplicationAddress,
    //     decimals: 0,
    //     total: disbursement,
    //     sender: Global.currentApplicationAddress,
    //     unitName: 'r' + String(collateralTokenId.bytes) + String(this.base_token_id.value.bytes),
    //     reserve: arc19MetadataStr,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     defaultFrozen: false,
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:513
    // collateralAmount: new UintN64(collateralAmount),
    frame_dig 0
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:514
    // disbursement: new UintN64(disbursement),
    uncover 2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:517
    // loanRecordASAId: new UintN64(asset.createdAsset.id),
    uncover 3
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:518
    // lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:510-519
    // const loanRecord: LoanRecord = new LoanRecord({
    //   borrowerAddress: new Address(borrowerAddress.bytes),
    //   collateralTokenId: collateralTokenId,
    //   collateralAmount: new UintN64(collateralAmount),
    //   disbursement: new UintN64(disbursement),
    //   scaledDownDisbursement: new UintN64(scaledDownDisbursement),
    //   borrowedTokenId: this.base_token_id.value,
    //   loanRecordASAId: new UintN64(asset.createdAsset.id),
    //   lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    // })
    dig 6
    frame_dig -2
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_1 // "loan_record"
    uncover 2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:520
    // this.loan_record(borrowerAddress).value = loanRecord.copy()
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:521
    // this.active_loan_records.value = this.active_loan_records.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_3 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:521
    // this.active_loan_records.value = this.active_loan_records.value + 1
    swap
    app_global_put
    b borrow_after_if_else@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateLoanRecord(scaledDownDisbursement: uint64, disbursement: uint64, collateralTokenId: bytes, borrowerAddress: bytes, collateralAmount: uint64, arc19MetadataStr: bytes, assetId: uint64) -> void:
updateLoanRecord:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:447-455
    // private updateLoanRecord(
    //   scaledDownDisbursement: uint64,
    //   disbursement: uint64,
    //   collateralTokenId: UintN64,
    //   borrowerAddress: Account,
    //   collateralAmount: uint64,
    //   arc19MetadataStr: bytes,
    //   assetId: uint64,
    // ): void {
    proto 7 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:456-463
    // const asset = itxn
    //   .assetConfig({
    //     manager: Global.currentApplicationAddress,
    //     sender: Global.currentApplicationAddress,
    //     reserve: arc19MetadataStr,
    //     configAsset: assetId,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:458
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:459
    // sender: Global.currentApplicationAddress,
    dup
    frame_dig -1
    itxn_field ConfigAsset
    frame_dig -2
    itxn_field ConfigAssetReserve
    itxn_field Sender
    itxn_field ConfigAssetManager
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:456-462
    // const asset = itxn
    //   .assetConfig({
    //     manager: Global.currentApplicationAddress,
    //     sender: Global.currentApplicationAddress,
    //     reserve: arc19MetadataStr,
    //     configAsset: assetId,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:456-463
    // const asset = itxn
    //   .assetConfig({
    //     manager: Global.currentApplicationAddress,
    //     sender: Global.currentApplicationAddress,
    //     reserve: arc19MetadataStr,
    //     configAsset: assetId,
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:468
    // collateralAmount: new UintN64(collateralAmount),
    frame_dig -3
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:469
    // disbursement: new UintN64(disbursement),
    frame_dig -6
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:470
    // scaledDownDisbursement: new UintN64(scaledDownDisbursement),
    frame_dig -7
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:472
    // loanRecordASAId: new UintN64(asset.createdAsset.id),
    uncover 4
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:473
    // lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:465-474
    // const loanRecord: LoanRecord = new LoanRecord({
    //   borrowerAddress: new Address(borrowerAddress.bytes),
    //   collateralTokenId: collateralTokenId,
    //   collateralAmount: new UintN64(collateralAmount),
    //   disbursement: new UintN64(disbursement),
    //   scaledDownDisbursement: new UintN64(scaledDownDisbursement),
    //   borrowedTokenId: this.base_token_id.value,
    //   loanRecordASAId: new UintN64(asset.createdAsset.id),
    //   lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    // })
    frame_dig -4
    frame_dig -5
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_1 // "loan_record"
    frame_dig -4
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:475
    // this.loan_record(borrowerAddress).value = loanRecord.copy()
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:476
    // this.active_loan_records.value = this.active_loan_records.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_3 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:476
    // this.active_loan_records.value = this.active_loan_records.value + 1
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.claimLoanRecordASA(debtor: bytes, assetId: uint64) -> void:
claimLoanRecordASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:524-525
    // @abimethod({ allowActions: 'NoOp' })
    // claimLoanRecordASA(debtor: Account, assetId: Asset): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_1 // "loan_record"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:526
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    dup
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:527
    // const assetExists = Global.currentApplicationAddress.isOptedIn(assetId)
    global CurrentApplicationAddress
    frame_dig -1
    asset_holding_get AssetBalance
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:528
    // assert(assetExists, 'Loan record ASA does not exist')
    assert // Loan record ASA does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:529
    // const loanRecord = this.loan_record(debtor).value.copy()
    box_get
    bury 1
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:530-536
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: assetId,
    //     assetAmount: 1,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:534
    // assetAmount: 1,
    intc_1 // 1
    itxn_field AssetAmount
    frame_dig -1
    itxn_field XferAsset
    frame_dig -2
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:530-535
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: assetId,
    //     assetAmount: 1,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:530-536
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: assetId,
    //     assetAmount: 1,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:539-546
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: assetId,
    //     assetAmount: 0,
    //     assetCloseTo: debtor,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:541
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    frame_dig -2
    itxn_field AssetCloseTo
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:543
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig -1
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:539-545
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: assetId,
    //     assetAmount: 0,
    //     assetCloseTo: debtor,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:539-546
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: assetId,
    //     assetAmount: 0,
    //     assetCloseTo: debtor,
    //   })
    //   .submit()
    itxn_submit
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest(record: bytes) -> bytes, bytes:
accrueInterest:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:549
    // private accrueInterest(record: LoanRecord): LoanRecord {
    proto 1 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:550
    // const now = Global.latestTimestamp
    global LatestTimestamp
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:551
    // const last = record.lastAccrualTimestamp.native
    frame_dig -1
    pushint 80 // 80
    extract_uint64
    dup
    cover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:553
    // if (now <= last) return record
    <=
    bz accrueInterest_after_if_else@2
    frame_dig -1
    dup
    uncover 3
    uncover 3
    retsub

accrueInterest_after_if_else@2:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:555
    // const deltaT: uint64 = now - last
    frame_dig 0
    dup
    frame_dig 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:556
    // const principal: uint64 = record.scaledDownDisbursement.native
    frame_dig -1
    pushint 56 // 56
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // interest_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 16 // "interest_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:560
    // const [hi1, lo1] = mulw(principal, rateBps)
    dig 1
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:562
    // const rateScaled: uint64 = divw(hi1, lo1, 10000)
    intc_3 // 10000
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:564
    // const [hi2, lo2] = mulw(rateScaled, deltaT)
    uncover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:28
    // const SECONDS_PER_YEAR: uint64 = 365 * 24 * 60 * 60
    pushint 31536000 // 31536000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:566
    // const interest: uint64 = divw(hi2, lo2, SECONDS_PER_YEAR)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:61
    // protocol_interest_fee_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 18 // "protocol_interest_fee_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:569
    // const depositorBps: uint64 = 10000 - protoBps
    intc_3 // 10000
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:572
    // const [hiDep, loDep] = mulw(interest, depositorBps)
    dig 1
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:573
    // const depositorInterest: uint64 = divw(hiDep, loDep, 10000)
    intc_3 // 10000
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:576
    // const protocolInterest: uint64 = interest - depositorInterest
    dup2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:580
    // this.total_deposits.value += depositorInterest
    uncover 2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    bytec 5 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:580
    // this.total_deposits.value += depositorInterest
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:75
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:582
    // this.fee_pool.value += protocolInterest
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:75
    // fee_pool = GlobalState<uint64>()
    bytec 7 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:582
    // this.fee_pool.value += protocolInterest
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:586
    // const newPrincipal: uint64 = principal + interest
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:590
    // borrowerAddress: record.borrowerAddress,
    frame_dig -1
    extract 0 32 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:591
    // collateralTokenId: record.collateralTokenId,
    frame_dig -1
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:592
    // collateralAmount: record.collateralAmount,
    frame_dig -1
    extract 40 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:593
    // disbursement: record.disbursement, // original
    frame_dig -1
    extract 48 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:594
    // scaledDownDisbursement: new UintN64(newPrincipal),
    uncover 4
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:595
    // borrowedTokenId: record.borrowedTokenId,
    frame_dig -1
    extract 64 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:596
    // loanRecordASAId: record.loanRecordASAId,
    frame_dig -1
    extract 72 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:597
    // lastAccrualTimestamp: new UintN64(now),
    uncover 7
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:589-598
    // return new LoanRecord({
    //   borrowerAddress: record.borrowerAddress,
    //   collateralTokenId: record.collateralTokenId,
    //   collateralAmount: record.collateralAmount,
    //   disbursement: record.disbursement, // original
    //   scaledDownDisbursement: new UintN64(newPrincipal),
    //   borrowedTokenId: record.borrowedTokenId,
    //   loanRecordASAId: record.loanRecordASAId,
    //   lastAccrualTimestamp: new UintN64(now),
    // })
    uncover 7
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    frame_dig -1
    uncover 3
    uncover 3
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord(borrowerAddress: bytes) -> bytes:
getLoanRecord:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:601
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_1 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:602
    // return this.loan_record(borrowerAddress).value
    box_get
    assert // Box must have value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecordASAId(borrowerAddress: bytes) -> uint64:
getLoanRecordASAId:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:605
    // getLoanRecordASAId(borrowerAddress: Account): uint64 {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_1 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:606
    // return this.loan_record(borrowerAddress).value.loanRecordASAId.native
    box_get
    assert // Box must have value
    pushint 72 // 72
    extract_uint64
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoan(assetTransferTxn: uint64, amount: uint64, arc19MetaDataStr: bytes) -> void:
repayLoan:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:609-610
    // @abimethod({ allowActions: 'NoOp' })
    // repayLoan(assetTransferTxn: gtxn.AssetTransferTxn, amount: uint64, arc19MetaDataStr: bytes): void {
    proto 3 0
    intc_0 // 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:611
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:612-616
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    frame_dig -3
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:613
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:612-616
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    ==
    bz repayLoan_bool_false@4
    frame_dig -3
    gtxns XferAsset
    frame_dig 2
    ==
    bz repayLoan_bool_false@4
    frame_dig -3
    gtxns AssetAmount
    frame_dig -2
    ==
    bz repayLoan_bool_false@4
    intc_1 // 1

repayLoan_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:612-616
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:618
    // let loanRecord = this.getLoanRecord(op.Txn.sender)
    txn Sender
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:619
    // loanRecord = this.accrueInterest(loanRecord)
    callsub accrueInterest
    pop
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_1 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:620
    // this.loan_record(op.Txn.sender).value = loanRecord.copy()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:620
    // this.loan_record(op.Txn.sender).value = loanRecord.copy()
    dig 1
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:622
    // const loanRecordASAId = this.getLoanRecordASAId(op.Txn.sender)
    txn Sender
    callsub getLoanRecordASAId
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:624
    // const currentdebt: UintN64 = loanRecord.scaledDownDisbursement
    pushint 56 // 56
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:625
    // assert(amount <= currentdebt.native)
    extract_uint64
    frame_dig -2
    dig 1
    <=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:626
    // const remainingDebt: uint64 = currentdebt.native - amount
    frame_dig -2
    -
    dup
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:628
    // if (remainingDebt === 0) {
    bnz repayLoan_else_body@9
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:629-634
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:632
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field Sender
    itxn_field ConfigAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:629-633
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:629-634
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_1 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:638
    // this.loan_record(op.Txn.sender).delete()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:638
    // this.loan_record(op.Txn.sender).delete()
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:639
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_3 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:639
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:641-647
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:643
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:644
    // xferAsset: loanRecord.collateralTokenId.native,
    frame_dig 0
    dup
    pushint 32 // 32
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:645
    // assetAmount: loanRecord.collateralAmount.native,
    swap
    pushint 40 // 40
    extract_uint64
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:641-646
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:641-647
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    //   .submit()
    itxn_submit
    retsub

repayLoan_else_body@9:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:652
    // loanRecord.disbursement.native, // original disbursement (for metadata)
    frame_dig 0
    dup
    pushint 48 // 48
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:653
    // loanRecord.collateralTokenId, // collateral type
    dig 1
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:654
    // op.Txn.sender, // borrower
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:655
    // loanRecord.collateralAmount.native, // collateral locked
    uncover 3
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:650-658
    // this.updateLoanRecord(
    //   remainingDebt, // scaledDownDisbursement
    //   loanRecord.disbursement.native, // original disbursement (for metadata)
    //   loanRecord.collateralTokenId, // collateral type
    //   op.Txn.sender, // borrower
    //   loanRecord.collateralAmount.native, // collateral locked
    //   arc19MetaDataStr, // arc19 metadata
    //   loanRecordASAId, // existing ASA ID to update
    // )
    frame_dig 1
    cover 4
    frame_dig -1
    uncover 6
    callsub updateLoanRecord
    retsub

repayLoan_bool_false@4:
    intc_0 // 0
    b repayLoan_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawFees() -> void:
withdrawFees:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:664
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:664
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:665-671
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: this.fee_pool.value,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:668
    // xferAsset: this.base_token_id.value.native,
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:75
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:665-670
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: this.fee_pool.value,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:665-671
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: this.fee_pool.value,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:75
    // fee_pool = GlobalState<uint64>()
    bytec 7 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:672
    // this.fee_pool.value = 0
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest(debtor: bytes, arc19MetaDataStr: bytes) -> void:
accrueLoanInterest:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:675-676
    // @abimethod({ allowActions: 'NoOp' })
    // accrueLoanInterest(debtor: Account, arc19MetaDataStr: bytes): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_1 // "loan_record"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:677
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    dup
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:678
    // const currentLoanRecord = this.loan_record(debtor).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:680
    // this.accrueInterest(currentLoanRecord)
    callsub accrueInterest
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:683-688
    // itxn
    //   .assetConfig({
    //     configAsset: currentLoanRecord.loanRecordASAId.native,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:685
    // configAsset: currentLoanRecord.loanRecordASAId.native,
    dup
    pushint 72 // 72
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:686
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field Sender
    dup
    itxn_field ConfigAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:683-687
    // itxn
    //   .assetConfig({
    //     configAsset: currentLoanRecord.loanRecordASAId.native,
    //     sender: Global.currentApplicationAddress,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:683-688
    // itxn
    //   .assetConfig({
    //     configAsset: currentLoanRecord.loanRecordASAId.native,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:692
    // currentLoanRecord.scaledDownDisbursement.native,
    dig 1
    pushint 56 // 56
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:693
    // currentLoanRecord.disbursement.native,
    dig 2
    pushint 48 // 48
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:694
    // currentLoanRecord.collateralTokenId,
    dig 3
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:696
    // currentLoanRecord.collateralAmount.native,
    dig 4
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:691-699
    // this.updateLoanRecord(
    //   currentLoanRecord.scaledDownDisbursement.native,
    //   currentLoanRecord.disbursement.native,
    //   currentLoanRecord.collateralTokenId,
    //   debtor,
    //   currentLoanRecord.collateralAmount.native,
    //   arc19MetaDataStr,
    //   currentLoanRecord.loanRecordASAId.native, // existing ASA ID to update
    // )
    cover 3
    frame_dig -2
    uncover 4
    frame_dig -1
    uncover 6
    callsub updateLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:701
    // this.loan_record(debtor).value = currentLoanRecord.copy()
    box_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyout(buyer: bytes, debtor: bytes, axferTxn: uint64) -> void:
buyout:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:704-705
    // @abimethod({ allowActions: 'NoOp' })
    // buyout(buyer: Account, debtor: Account, axferTxn: gtxn.AssetTransferTxn): void {
    proto 3 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_1 // "loan_record"
    frame_dig -2
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:706
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:707
    // const currentLoanRecord = this.loan_record(debtor).value.copy()
    dup
    box_get
    swap
    dup
    cover 2
    cover 3
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:708
    // this.loan_record(debtor).value = currentLoanRecord.copy()
    swap
    dig 1
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:710
    // const collateralAmount = currentLoanRecord.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:711
    // const debtAmount = currentLoanRecord.scaledDownDisbursement.native
    dup
    pushint 56 // 56
    extract_uint64
    dup
    cover 3
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:712
    // const collateralTokenId: UintN64 = new UintN64(currentLoanRecord.collateralTokenId.native)
    pushint 32 // 32
    extract_uint64
    itob
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:713
    // const acceptedCollateral = this.getCollateral(collateralTokenId)
    callsub getCollateral
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:715
    // assert(acceptedCollateral.totalCollateral.native >= collateralAmount, 'Collateral amount exceeds current total')
    dup
    pushint 16 // 16
    extract_uint64
    dup
    cover 4
    dig 2
    >=
    assert // Collateral amount exceeds current total
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:718
    // const oraclePrice: uint64 = this.getOraclePrice(acceptedCollateral.baseAssetId.native)
    pushint 8 // 8
    extract_uint64
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:719
    // const [hU, lU] = mulw(collateralAmount, oraclePrice)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:720
    // const collateralUSD: uint64 = divw(hU, lU, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:721
    // const CR: uint64 = collateralUSD / debtAmount
    dup
    uncover 2
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:53
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:722
    // assert(CR > this.liq_threshold_bps.value, 'loan is not eligible for buyout')
    dig 1
    <
    assert // loan is not eligible for buyout
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:724
    // const premiumRate: uint64 = (CR * 10000) / this.liq_threshold_bps.value - 10000 // in basis points
    intc_3 // 10000
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:53
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:724
    // const premiumRate: uint64 = (CR * 10000) / this.liq_threshold_bps.value - 10000 // in basis points
    /
    intc_3 // 10000
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:725
    // const buyoutPrice: uint64 = collateralUSD * (1 + premiumRate / 10000)
    intc_3 // 10000
    /
    intc_1 // 1
    +
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:727-731
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    frame_dig -1
    gtxns XferAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:728
    // xferAsset: Asset(this.base_token_id.value.native),
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:727-731
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    ==
    bz buyout_bool_false@4
    frame_dig -1
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:729
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:727-731
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    ==
    bz buyout_bool_false@4
    frame_dig -1
    gtxns AssetAmount
    frame_dig 7
    ==
    bz buyout_bool_false@4
    intc_1 // 1

buyout_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:727-731
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:736
    // const assetExists = Global.currentApplicationAddress.isOptedIn(Asset(currentLoanRecord.loanRecordASAId.native))
    global CurrentApplicationAddress
    frame_dig 2
    pushint 72 // 72
    extract_uint64
    dup
    frame_bury 0
    asset_holding_get AssetBalance
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:737
    // if (!assetExists) {
    bnz buyout_after_if_else@8
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:738-745
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: currentLoanRecord.loanRecordASAId.native,
    //     assetSender: debtor,
    //     assetAmount: currentLoanRecord.scaledDownDisbursement.native,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:740
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    frame_dig 4
    itxn_field AssetAmount
    frame_dig -2
    itxn_field AssetSender
    frame_dig 0
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:738-744
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: currentLoanRecord.loanRecordASAId.native,
    //     assetSender: debtor,
    //     assetAmount: currentLoanRecord.scaledDownDisbursement.native,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:738-745
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: currentLoanRecord.loanRecordASAId.native,
    //     assetSender: debtor,
    //     assetAmount: currentLoanRecord.scaledDownDisbursement.native,
    //   })
    //   .submit()
    itxn_submit

buyout_after_if_else@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:748-753
    // itxn
    //   .assetConfig({
    //     configAsset: currentLoanRecord.loanRecordASAId.native,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:751
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field Sender
    frame_dig 0
    itxn_field ConfigAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:748-752
    // itxn
    //   .assetConfig({
    //     configAsset: currentLoanRecord.loanRecordASAId.native,
    //     sender: Global.currentApplicationAddress,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:748-753
    // itxn
    //   .assetConfig({
    //     configAsset: currentLoanRecord.loanRecordASAId.native,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:756
    // this.loan_record(debtor).delete()
    frame_dig 1
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:757
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_3 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:757
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:760-766
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:763
    // xferAsset: collateralTokenId.native,
    frame_dig 5
    dup
    btoi
    frame_dig 3
    dup
    cover 2
    itxn_field AssetAmount
    itxn_field XferAsset
    frame_dig -3
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:760-765
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:760-766
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:768
    // const newTotal: uint64 = acceptedCollateral.totalCollateral.native - collateralAmount
    frame_dig 6
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:769
    // this.updateCollateralTotal(collateralTokenId, newTotal)
    callsub updateCollateralTotal
    retsub

buyout_bool_false@4:
    intc_0 // 0
    b buyout_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidate(debtor: bytes, axferTxn: uint64) -> void:
liquidate:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:772-773
    // @abimethod({ allowActions: 'NoOp' })
    // liquidate(debtor: Account, axferTxn: gtxn.AssetTransferTxn): void {
    proto 2 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_1 // "loan_record"
    frame_dig -2
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:774
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:776
    // const record = this.loan_record(debtor).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:777
    // const collateralAmount = record.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:778
    // const debtAmount = record.scaledDownDisbursement.native
    dup
    pushint 56 // 56
    extract_uint64
    dup
    cover 3
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:779
    // const collateralTokenId = record.collateralTokenId
    extract 32 8 // on error: Index access is out of bounds
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:780
    // const acceptedCollateral = this.getCollateral(collateralTokenId)
    callsub getCollateral
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:782
    // const oraclePrice = this.getOraclePrice(acceptedCollateral.baseAssetId.native)
    pushint 8 // 8
    extract_uint64
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:783
    // const [h, l] = mulw(collateralAmount, oraclePrice)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:784
    // const collateralUSD = divw(h, l, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:786
    // const CR: uint64 = collateralUSD / debtAmount
    swap
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:53
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:787
    // assert(CR <= this.liq_threshold_bps.value, 'loan is not liquidatable')
    <=
    assert // loan is not liquidatable
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:790-794
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    frame_dig -1
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:791
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:790-794
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    ==
    bz liquidate_bool_false@4
    frame_dig -1
    gtxns XferAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:792
    // xferAsset: Asset(this.base_token_id.value.native),
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:790-794
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    ==
    bz liquidate_bool_false@4
    frame_dig -1
    gtxns AssetAmount
    frame_dig 4
    ==
    bz liquidate_bool_false@4
    intc_1 // 1

liquidate_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:790-794
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:797
    // const loanRecordASAId = record.loanRecordASAId.native
    frame_dig 2
    pushint 72 // 72
    extract_uint64
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:798
    // const assetExists = Global.currentApplicationAddress.isOptedIn(Asset(loanRecordASAId))
    global CurrentApplicationAddress
    swap
    asset_holding_get AssetBalance
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:799
    // if (!assetExists) {
    bnz liquidate_after_if_else@8
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:800-807
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetSender: debtor,
    //     xferAsset: loanRecordASAId,
    //     assetAmount: 1,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:802
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:805
    // assetAmount: 1,
    intc_1 // 1
    itxn_field AssetAmount
    frame_dig 0
    itxn_field XferAsset
    frame_dig -2
    itxn_field AssetSender
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:800-806
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetSender: debtor,
    //     xferAsset: loanRecordASAId,
    //     assetAmount: 1,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:800-807
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetSender: debtor,
    //     xferAsset: loanRecordASAId,
    //     assetAmount: 1,
    //   })
    //   .submit()
    itxn_submit

liquidate_after_if_else@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:810-815
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:813
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field Sender
    frame_dig 0
    itxn_field ConfigAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:810-814
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:810-815
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:818
    // this.loan_record(debtor).delete()
    frame_dig 1
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:819
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_3 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:819
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:822-828
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:824
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:825
    // xferAsset: collateralTokenId.native,
    frame_dig 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:779
    // const collateralTokenId = record.collateralTokenId
    pushint 32 // 32
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:825
    // xferAsset: collateralTokenId.native,
    extract_uint64
    frame_dig 3
    dup
    cover 3
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:822-827
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:822-828
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:831
    // const newTotal: uint64 = acceptedCollateral.totalCollateral.native - collateralAmount
    frame_dig 6
    pushint 16 // 16
    extract_uint64
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:832
    // this.updateCollateralTotal(collateralTokenId, newTotal)
    frame_dig 5
    swap
    callsub updateCollateralTotal
    retsub

liquidate_bool_false@4:
    intc_0 // 0
    b liquidate_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus(borrower: bytes) -> uint64, uint64, uint64, uint64, uint64, uint64, uint64:
getLoanStatus:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:835-844
    // @abimethod({ allowActions: 'NoOp' })
    // getLoanStatus(borrower: Account): {
    //   outstandingDebt: uint64
    //   collateralValueUSD: uint64
    //   collateralAmount: uint64
    //   collateralRatioBps: uint64
    //   liquidationThresholdBps: uint64
    //   eligibleForLiquidation: boolean
    //   eligibleForBuyout: boolean
    // } {
    proto 1 7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_1 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:845
    // assert(this.loan_record(borrower).exists, 'Loan record does not exist')
    dup
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:846
    // let record = this.loan_record(borrower).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:847
    // record = this.accrueInterest(record) // simulate interest accrual for latest status
    callsub accrueInterest
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:849
    // const debt: uint64 = record.scaledDownDisbursement.native
    dup
    pushint 56 // 56
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:850
    // const collateralAmount: uint64 = record.collateralAmount.native
    dig 1
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:53
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:853
    // const acceptedCollateral = this.getCollateral(record.collateralTokenId)
    uncover 3
    extract 32 8 // on error: Index access is out of bounds
    callsub getCollateral
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:854
    // const oraclePrice = this.getOraclePrice(acceptedCollateral.baseAssetId.native)
    pushint 8 // 8
    extract_uint64
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:855
    // const [hi, lo] = mulw(collateralAmount, oraclePrice)
    dig 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:856
    // const collateralValueUSD = divw(hi, lo, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:858
    // const CR: uint64 = (collateralValueUSD * 10000) / debt
    dup
    intc_3 // 10000
    *
    dig 4
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:859
    // const eligibleForLiquidation = CR < liqBps
    dup
    dig 3
    <
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:860
    // const eligibleForBuyout = CR > liqBps
    dig 1
    dig 4
    >
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:862-870
    // return {
    //   outstandingDebt: debt,
    //   collateralValueUSD: collateralValueUSD,
    //   collateralAmount: collateralAmount,
    //   collateralRatioBps: CR,
    //   liquidationThresholdBps: liqBps,
    //   eligibleForLiquidation,
    //   eligibleForBuyout,
    // }
    uncover 6
    uncover 4
    uncover 6
    uncover 5
    uncover 6
    uncover 6
    uncover 6
    retsub
