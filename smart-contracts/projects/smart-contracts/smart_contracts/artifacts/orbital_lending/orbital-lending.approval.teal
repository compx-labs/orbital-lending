#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 4 1000 10000 1000000
    bytecblock "base_token_id" "active_loan_records" "total_deposits" "admin_account" "loan_record" 0x151f7c75 "circulating_lst" "liq_threshold_bps" "fee_pool" "lst_token_id" "accepted_collaterals" 0x00 "accepted_collaterals_count" 0x09ef525f 0xae859f3b "ltv_bps" "interest_bps" "origination_fee_bps" "protocol_share_bps" "oracle_app"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn NumAppArgs
    bz main_after_if_else@31
    pushbytess 0x3b01665e 0x9de42732 0x17c33662 0x5efce39a 0x5cac25a9 // method "createApplication(account,uint64)void", method "initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void", method "generateLSTToken(pay)void", method "optInToLST(uint64,pay)void", method "configureLSTToken(axfer,uint64)void"
    bytec 13 // method "getCirculatingLST()uint64"
    bytec 14 // method "getTotalDeposits()uint64"
    pushbytess 0x6c6337c0 0xe596ac73 0x53b5111f 0x72c5c57b 0xbae4c238 0x3e41a49b 0x15a5b25e 0x8553cffa 0xae99f45b 0xbe1256e6 0xb95560e0 0x96da416e 0x1dffadde 0xf0eda6a8 0x836dbb73 0xf16507ce 0xdaa7f7f2 0x3172ca9d // method "getAcceptedCollateralsCount()uint64", method "getOraclePrice(uint64)uint64", method "addNewCollateralType(uint64,pay)void", method "depositASA(axfer,uint64,pay)void", method "depositAlgo(pay,uint64,pay)void", method "withdrawDeposit(axfer,uint64,uint64,pay)void", method "borrow(axfer,uint64,uint64,uint64,uint64,pay)void", method "accrueLoanInterest(account,account)void", method "getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)", method "repayLoanASA(axfer,uint64,account)void", method "repayLoanAlgo(pay,uint64,account)void", method "withdrawFees()void", method "buyoutASA(account,account,axfer)void", method "buyoutAlgo(account,account,pay)void", method "liquidateASA(account,axfer)void", method "liquidateAlgo(account,pay)void", method "getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)", method "gas()void"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_initApplication_route@4 main_generateLSTToken_route@5 main_optInToLST_route@6 main_configureLSTToken_route@7 main_getCirculatingLST_route@8 main_getTotalDeposits_route@9 main_getAcceptedCollateralsCount_route@10 main_getOraclePrice_route@11 main_addNewCollateralType_route@12 main_depositASA_route@13 main_depositAlgo_route@14 main_withdrawDeposit_route@15 main_borrow_route@16 main_accrueLoanInterest_route@17 main_getLoanRecord_route@18 main_repayLoanASA_route@19 main_repayLoanAlgo_route@20 main_withdrawFees_route@21 main_buyoutASA_route@22 main_buyoutAlgo_route@23 main_liquidateASA_route@24 main_liquidateAlgo_route@25 main_getLoanStatus_route@26 main_gas_route@27

main_after_if_else@31:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    intc_0 // 0
    return

main_gas_route@27:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1111
    // gas(): void {}
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_getLoanStatus_route@26:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1074
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1074
    // @abimethod({ allowActions: 'NoOp' })
    callsub getLoanStatus
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    bytec 11 // 0x00
    intc_0 // 0
    uncover 8
    setbit
    bytec 11 // 0x00
    intc_0 // 0
    uncover 8
    setbit
    uncover 6
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    intc_0 // 0
    getbit
    pushint 321 // 321
    swap
    setbit
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_liquidateAlgo_route@25:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1026
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1026
    // @abimethod({ allowActions: 'NoOp' })
    callsub liquidateAlgo
    intc_1 // 1
    return

main_liquidateASA_route@24:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:974
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:974
    // @abimethod({ allowActions: 'NoOp' })
    callsub liquidateASA
    intc_1 // 1
    return

main_buyoutAlgo_route@23:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:919
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:919
    // @abimethod({ allowActions: 'NoOp' })
    callsub buyoutAlgo
    intc_1 // 1
    return

main_buyoutASA_route@22:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:862
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:862
    // @abimethod({ allowActions: 'NoOp' })
    callsub buyoutASA
    intc_1 // 1
    return

main_withdrawFees_route@21:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:840
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub withdrawFees
    intc_1 // 1
    return

main_repayLoanAlgo_route@20:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:793
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:793
    // @abimethod({ allowActions: 'NoOp' })
    callsub repayLoanAlgo
    intc_1 // 1
    return

main_repayLoanASA_route@19:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:736
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:736
    // @abimethod({ allowActions: 'NoOp' })
    callsub repayLoanASA
    intc_1 // 1
    return

main_getLoanRecord_route@18:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:723
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:723
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    callsub getLoanRecord
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_accrueLoanInterest_route@17:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:649
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:649
    // @abimethod({ allowActions: 'NoOp' })
    callsub accrueLoanInterest
    intc_1 // 1
    return

main_borrow_route@16:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:555
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:555
    // @abimethod({ allowActions: 'NoOp' })
    callsub borrow
    intc_1 // 1
    return

main_withdrawDeposit_route@15:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:503
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:503
    // @abimethod({ allowActions: 'NoOp' })
    callsub withdrawDeposit
    intc_1 // 1
    return

main_depositAlgo_route@14:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:464
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:464
    // @abimethod({ allowActions: 'NoOp' })
    callsub depositAlgo
    intc_1 // 1
    return

main_depositASA_route@13:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:421
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:421
    // @abimethod({ allowActions: 'NoOp' })
    callsub depositASA
    intc_1 // 1
    return

main_addNewCollateralType_route@12:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:345
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:345
    // @abimethod({ allowActions: 'NoOp' })
    callsub addNewCollateralType
    intc_1 // 1
    return

main_getOraclePrice_route@11:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:300
    // getOraclePrice(tokenId: UintN64): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:300
    // getOraclePrice(tokenId: UintN64): uint64 {
    callsub getOraclePrice
    itob
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getAcceptedCollateralsCount_route@10:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:290
    // getAcceptedCollateralsCount(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getAcceptedCollateralsCount
    itob
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getTotalDeposits_route@9:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:282
    // getTotalDeposits(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getTotalDeposits
    itob
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getCirculatingLST_route@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:274
    // getCirculatingLST(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getCirculatingLST
    itob
    bytec 5 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_configureLSTToken_route@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:259
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:259
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    callsub configureLSTToken
    intc_1 // 1
    return

main_optInToLST_route@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:234
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:234
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    callsub optInToLST
    intc_1 // 1
    return

main_generateLSTToken_route@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:202
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:202
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    callsub generateLSTToken
    intc_1 // 1
    return

main_initApplication_route@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:151
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txnas Applications
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:151
    // @abimethod({ allowActions: 'NoOp' })
    callsub initApplication
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:39-40
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication(admin: bytes, baseTokenId: uint64) -> void:
createApplication:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:134-135
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    // public createApplication(admin: Account, baseTokenId: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:69
    // admin_account = GlobalState<Account>()
    bytec_3 // "admin_account"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:136
    // this.admin_account.value = admin
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:137
    // this.base_token_id.value = new UintN64(baseTokenId)
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    bytec_0 // "base_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:137
    // this.base_token_id.value = new UintN64(baseTokenId)
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication(mbrTxn: uint64, ltv_bps: uint64, liq_threshold_bps: uint64, interest_bps: uint64, origination_fee_bps: uint64, protocol_share_bps: uint64, oracle_app_id: uint64) -> void:
initApplication:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:151-161
    // @abimethod({ allowActions: 'NoOp' })
    // public initApplication(
    //   mbrTxn: gtxn.PaymentTxn,
    //   ltv_bps: uint64,
    //   liq_threshold_bps: uint64,
    //   interest_bps: uint64,
    //   origination_fee_bps: uint64,
    //   protocol_share_bps: uint64,
    // 
    //   oracle_app_id: Application,
    // ): void {
    proto 7 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:69
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:162
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:164-167
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    frame_dig -7
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:69
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:164-167
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    ==
    bz initApplication_bool_false@3
    frame_dig -7
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:29
    // const MBR_CREATE_APP: uint64 = 400_000
    pushint 400000 // 400000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:164-167
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    ==
    bz initApplication_bool_false@3
    intc_1 // 1

initApplication_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:164-167
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:79
    // ltv_bps = GlobalState<uint64>()
    bytec 15 // "ltv_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:169
    // this.ltv_bps.value = ltv_bps
    frame_dig -6
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:82
    // liq_threshold_bps = GlobalState<uint64>()
    bytec 7 // "liq_threshold_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:170
    // this.liq_threshold_bps.value = liq_threshold_bps
    frame_dig -5
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:85
    // interest_bps = GlobalState<uint64>()
    bytec 16 // "interest_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:171
    // this.interest_bps.value = interest_bps
    frame_dig -4
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:88
    // origination_fee_bps = GlobalState<uint64>()
    bytec 17 // "origination_fee_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:172
    // this.origination_fee_bps.value = origination_fee_bps
    frame_dig -3
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:110
    // accepted_collaterals_count = GlobalState<uint64>()
    bytec 12 // "accepted_collaterals_count"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:173
    // this.accepted_collaterals_count.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:62
    // fee_pool = GlobalState<uint64>()
    bytec 8 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:174
    // this.fee_pool.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:175
    // this.circulating_lst.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // total_deposits = GlobalState<uint64>()
    bytec_2 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:176
    // this.total_deposits.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:177
    // this.active_loan_records.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:91
    // protocol_share_bps = GlobalState<uint64>()
    bytec 18 // "protocol_share_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:178
    // this.protocol_share_bps.value = protocol_share_bps
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:36
    // const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:179
    // this.depositor_share_bps.value = BASIS_POINTS - protocol_share_bps
    frame_dig -2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:94
    // depositor_share_bps = GlobalState<uint64>()
    pushbytes "depositor_share_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:179
    // this.depositor_share_bps.value = BASIS_POINTS - protocol_share_bps
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:72
    // oracle_app = GlobalState<Application>()
    bytec 19 // "oracle_app"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:180
    // this.oracle_app.value = oracle_app_id
    frame_dig -1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:49
    // lst_token_id = GlobalState<UintN64>()
    bytec 9 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:181
    // this.lst_token_id.value = new UintN64(99)
    pushbytes 0x0000000000000063
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:183
    // if (this.base_token_id.value.native !== 0) {
    btoi
    bz initApplication_after_if_else@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:184-191
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:186
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:187
    // xferAsset: this.base_token_id.value.native,
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:188
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:184-190
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:184-191
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit

initApplication_after_if_else@7:
    retsub

initApplication_bool_false@3:
    intc_0 // 0
    b initApplication_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken(mbrTxn: uint64) -> void:
generateLSTToken:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:202
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    proto 1 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:69
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:204-207
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:69
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:204-207
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    ==
    bz generateLSTToken_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:30
    // const MBR_INIT_APP: uint64 = 102_000
    pushint 102000 // 102000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:204-207
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    ==
    bz generateLSTToken_bool_false@3
    intc_1 // 1

generateLSTToken_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:204-207
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:211
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:212-223
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(this.base_token_id.value.bytes),
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:214
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:215
    // total: baseToken.total,
    dig 1
    asset_params_get AssetTotal
    assert // asset exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:216
    // decimals: baseToken.decimals,
    dig 2
    asset_params_get AssetDecimals
    assert // asset exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:218
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:219
    // unitName: 'c' + String(baseToken.unitName),
    uncover 4
    asset_params_get AssetUnitName
    assert // asset exists
    pushbytes "c"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:220
    // assetName: 'c' + String(this.base_token_id.value.bytes),
    pushbytes "c"
    swap
    concat
    itxn_field ConfigAssetName
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetManager
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:217
    // defaultFrozen: false,
    intc_0 // 0
    itxn_field ConfigAssetDefaultFrozen
    itxn_field ConfigAssetDecimals
    itxn_field ConfigAssetTotal
    itxn_field Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:212-222
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(this.base_token_id.value.bytes),
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:212-223
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(this.base_token_id.value.bytes),
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:224
    // this.lst_token_id.value = new UintN64(result.createdAsset.id)
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:49
    // lst_token_id = GlobalState<UintN64>()
    bytec 9 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:224
    // this.lst_token_id.value = new UintN64(result.createdAsset.id)
    swap
    app_global_put
    retsub

generateLSTToken_bool_false@3:
    intc_0 // 0
    b generateLSTToken_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST(lstAssetId: uint64, mbrTxn: uint64) -> void:
optInToLST:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:234
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:235
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:69
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:235
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:236-239
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:69
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:236-239
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    ==
    bz optInToLST_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:31
    // const MBR_OPT_IN_LST: uint64 = 2_000
    pushint 2000 // 2000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:236-239
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    ==
    bz optInToLST_bool_false@3
    intc_1 // 1

optInToLST_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:236-239
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:240
    // this.lst_token_id.value = new UintN64(lstAssetId)
    frame_dig -2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:49
    // lst_token_id = GlobalState<UintN64>()
    bytec 9 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:240
    // this.lst_token_id.value = new UintN64(lstAssetId)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:243-250
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:245
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:247
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:243-249
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:243-250
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    retsub

optInToLST_bool_false@3:
    intc_0 // 0
    b optInToLST_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken(axferTxn: uint64, circulating_lst: uint64) -> void:
configureLSTToken:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:259
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:260
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:69
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:260
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:49
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 9 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:261
    // assert(this.lst_token_id.value.native === axferTxn.xferAsset.id, 'LST token not set')
    btoi
    frame_dig -2
    gtxns XferAsset
    ==
    assert // LST token not set
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:263-266
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    frame_dig -2
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:69
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:263-266
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    ==
    bz configureLSTToken_bool_false@3
    frame_dig -2
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:265
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:263-266
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    ==
    bz configureLSTToken_bool_false@3
    intc_1 // 1

configureLSTToken_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:263-266
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:267
    // this.circulating_lst.value = circulating_lst
    frame_dig -1
    app_global_put
    retsub

configureLSTToken_bool_false@3:
    intc_0 // 0
    b configureLSTToken_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST() -> uint64:
getCirculatingLST:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:275
    // return this.circulating_lst.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits() -> uint64:
getTotalDeposits:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:283
    // return this.total_deposits.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount() -> uint64:
getAcceptedCollateralsCount:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:110
    // accepted_collaterals_count = GlobalState<uint64>()
    intc_0 // 0
    bytec 12 // "accepted_collaterals_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:291
    // return this.accepted_collaterals_count.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice(tokenId: bytes) -> uint64:
getOraclePrice:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:300
    // getOraclePrice(tokenId: UintN64): uint64 {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:72
    // oracle_app = GlobalState<Application>()
    intc_0 // 0
    bytec 19 // "oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:302
    // const address = oracle.address
    dup
    app_params_get AppAddress
    bury 1
    assert // application exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:305-309
    // const result = abiCall(PriceOracleStub.prototype.getTokenPrice, {
    //   appId: contractAppId,
    //   args: [tokenId],
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    pushbytes 0xac13e004 // method "getTokenPrice(uint64)(uint64,uint64,uint64)"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:305-309
    // const result = abiCall(PriceOracleStub.prototype.getTokenPrice, {
    //   appId: contractAppId,
    //   args: [tokenId],
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec 5 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    pushint 12 // 12
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:311
    // return result.price.native
    extract_uint64
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal(collateralTokenId: bytes, amount: uint64) -> void:
updateCollateralTotal:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:324
    // private updateCollateralTotal(collateralTokenId: UintN64, amount: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:101
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 10 // "accepted_collaterals"
    frame_dig -2
    concat
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:326
    // const collateral = this.accepted_collaterals(key).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:328
    // if (collateral.assetId.native === collateralTokenId.native) {
    dup
    extract 0 8 // on error: Index access is out of bounds
    swap
    intc_0 // 0
    extract_uint64
    frame_dig -2
    btoi
    ==
    bz updateCollateralTotal_after_if_else@2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:329
    // const newTotal: uint64 = collateral.totalCollateral.native + amount
    frame_dig 1
    dup
    pushint 16 // 16
    extract_uint64
    frame_dig -1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:332
    // baseAssetId: collateral.baseAssetId,
    swap
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:333
    // totalCollateral: new UintN64(newTotal),
    swap
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:330-334
    // this.accepted_collaterals(key).value = new AcceptedCollateral({
    //   assetId: collateral.assetId,
    //   baseAssetId: collateral.baseAssetId,
    //   totalCollateral: new UintN64(newTotal),
    // }).copy()
    frame_dig 2
    uncover 2
    concat
    swap
    concat
    frame_dig 0
    swap
    box_put

updateCollateralTotal_after_if_else@2:
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType(collateralTokenId: bytes, mbrTxn: uint64) -> void:
addNewCollateralType:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:345-346
    // @abimethod({ allowActions: 'NoOp' })
    // addNewCollateralType(collateralTokenId: UintN64, mbrTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:347
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:348
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:69
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:348
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:349
    // assert(collateralTokenId.native !== baseToken.id)
    frame_dig -2
    btoi
    dup
    uncover 2
    !=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:101
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 10 // "accepted_collaterals"
    frame_dig -2
    concat
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:316
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:350
    // assert(!this.collateralExists(collateralTokenId))
    !
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:351-354
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_COLLATERAL,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:69
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:351-354
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_COLLATERAL,
    // })
    ==
    bz addNewCollateralType_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32
    // const MBR_COLLATERAL: uint64 = 101_000
    pushint 101000 // 101000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:351-354
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_COLLATERAL,
    // })
    ==
    bz addNewCollateralType_bool_false@3
    intc_1 // 1

addNewCollateralType_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:351-354
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_COLLATERAL,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:356-360
    // const newAcceptedCollateral: AcceptedCollateral = new AcceptedCollateral({
    //   assetId: collateralTokenId,
    //   baseAssetId: this.base_token_id.value,
    //   totalCollateral: new UintN64(0),
    // })
    frame_dig -2
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:359
    // totalCollateral: new UintN64(0),
    pushbytes 0x0000000000000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:356-360
    // const newAcceptedCollateral: AcceptedCollateral = new AcceptedCollateral({
    //   assetId: collateralTokenId,
    //   baseAssetId: this.base_token_id.value,
    //   totalCollateral: new UintN64(0),
    // })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:362
    // this.accepted_collaterals(key).value = newAcceptedCollateral.copy()
    frame_dig 1
    dup
    uncover 2
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:110
    // accepted_collaterals_count = GlobalState<uint64>()
    intc_0 // 0
    bytec 12 // "accepted_collaterals_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:363
    // this.accepted_collaterals_count.value = this.accepted_collaterals_count.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:110
    // accepted_collaterals_count = GlobalState<uint64>()
    bytec 12 // "accepted_collaterals_count"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:363
    // this.accepted_collaterals_count.value = this.accepted_collaterals_count.value + 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:364-372
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:366
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:367
    // assetReceiver: Global.currentApplicationAddress,
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:369
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig 0
    itxn_field XferAsset
    itxn_field AssetReceiver
    itxn_field Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:364-371
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:364-372
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:316
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:374
    // assert(this.collateralExists(collateralTokenId), 'unsupported collateral')
    assert // unsupported collateral
    retsub

addNewCollateralType_bool_false@3:
    intc_0 // 0
    b addNewCollateralType_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue(amount: uint64) -> uint64:
calculateLSTDue:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:377
    // private calculateLSTDue(amount: uint64): uint64 {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:36
    // const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:378
    // const [highBits1, lowBits1] = mulw(this.circulating_lst.value, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:380
    // const lstRatio = divw(highBits1, lowBits1, this.total_deposits.value)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:382
    // const [highBits2, lowBits2] = mulw(lstRatio, amount)
    frame_dig -1
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:36
    // const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:383
    // return divw(highBits2, lowBits2, BASIS_POINTS)
    divw
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositASA(assetTransferTxn: uint64, amount: uint64, mbrTxn: uint64) -> void:
depositASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:421-422
    // @abimethod({ allowActions: 'NoOp' })
    // depositASA(assetTransferTxn: gtxn.AssetTransferTxn, amount: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 3 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:423
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:424-428
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    frame_dig -3
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:425
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:424-428
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    ==
    bz depositASA_bool_false@4
    frame_dig -3
    gtxns XferAsset
    frame_dig 0
    ==
    bz depositASA_bool_false@4
    frame_dig -3
    gtxns AssetAmount
    frame_dig -2
    ==
    bz depositASA_bool_false@4
    intc_1 // 1

depositASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:424-428
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:429-431
    // assertMatch(mbrTxn, {
    //   amount: STANDARD_TXN_FEE,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:429-431
    // assertMatch(mbrTxn, {
    //   amount: STANDARD_TXN_FEE,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    bury 1
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:438
    // if (this.total_deposits.value === 0) {
    bnz depositASA_else_body@7
    frame_dig -2

depositASA_after_if_else@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:443-450
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:445
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:49
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 9 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:446
    // xferAsset: this.lst_token_id.value.native,
    btoi
    dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:443-449
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:443-450
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:452
    // this.circulating_lst.value += lstDue
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:452
    // this.circulating_lst.value += lstDue
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:453
    // this.total_deposits.value += amount
    frame_dig -2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // total_deposits = GlobalState<uint64>()
    bytec_2 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:453
    // this.total_deposits.value += amount
    swap
    app_global_put
    retsub

depositASA_else_body@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:441
    // lstDue = this.calculateLSTDue(amount)
    frame_dig -2
    callsub calculateLSTDue
    b depositASA_after_if_else@8

depositASA_bool_false@4:
    intc_0 // 0
    b depositASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo(depositTxn: uint64, amount: uint64, mbrTxn: uint64) -> void:
depositAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:464-465
    // @abimethod({ allowActions: 'NoOp' })
    // depositAlgo(depositTxn: gtxn.PaymentTxn, amount: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 3 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    bury 1
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:467-470
    // assertMatch(depositTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: amount,
    // })
    frame_dig -3
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:468
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:467-470
    // assertMatch(depositTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: amount,
    // })
    ==
    bz depositAlgo_bool_false@3
    frame_dig -3
    gtxns Amount
    frame_dig -2
    ==
    bz depositAlgo_bool_false@3
    intc_1 // 1

depositAlgo_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:467-470
    // assertMatch(depositTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:471-473
    // assertMatch(mbrTxn, {
    //   amount: STANDARD_TXN_FEE,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:471-473
    // assertMatch(mbrTxn, {
    //   amount: STANDARD_TXN_FEE,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:476
    // if (this.total_deposits.value === 0) {
    bnz depositAlgo_else_body@6
    frame_dig -2

depositAlgo_after_if_else@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:481-488
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:483
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:49
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 9 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:484
    // xferAsset: this.lst_token_id.value.native,
    btoi
    dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:481-487
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:481-488
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:490
    // this.circulating_lst.value += lstDue
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:490
    // this.circulating_lst.value += lstDue
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491
    // this.total_deposits.value += amount
    frame_dig -2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // total_deposits = GlobalState<uint64>()
    bytec_2 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491
    // this.total_deposits.value += amount
    swap
    app_global_put
    retsub

depositAlgo_else_body@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:479
    // lstDue = this.calculateLSTDue(amount)
    frame_dig -2
    callsub calculateLSTDue
    b depositAlgo_after_if_else@7

depositAlgo_bool_false@3:
    intc_0 // 0
    b depositAlgo_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit(assetTransferTxn: uint64, amount: uint64, lstAppId: uint64, mbrTxn: uint64) -> void:
withdrawDeposit:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:503-509
    // @abimethod({ allowActions: 'NoOp' })
    // withdrawDeposit(
    //   assetTransferTxn: gtxn.AssetTransferTxn,
    //   amount: uint64,
    //   lstAppId: uint64,
    //   mbrTxn: gtxn.PaymentTxn,
    // ): void {
    proto 4 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:49
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 9 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:510
    // const lstAsset = Asset(this.lst_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:511-515
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    frame_dig -4
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:512
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:511-515
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    ==
    bz withdrawDeposit_bool_false@4
    frame_dig -4
    gtxns XferAsset
    frame_dig 0
    ==
    bz withdrawDeposit_bool_false@4
    frame_dig -4
    gtxns AssetAmount
    frame_dig -3
    ==
    bz withdrawDeposit_bool_false@4
    intc_1 // 1

withdrawDeposit_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:511-515
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:517-519
    // assertMatch(mbrTxn, {
    //   amount: 3000,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:518
    // amount: 3000,
    pushint 3000 // 3000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:517-519
    // assertMatch(mbrTxn, {
    //   amount: 3000,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:523
    // if (lstAppId === Global.currentApplicationId.id) {
    frame_dig -2
    global CurrentApplicationID
    ==
    bz withdrawDeposit_else_body@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:409
    // const [hi, lo] = mulw(totalDepositsExternal, amount)
    frame_dig -3
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:410
    // return divw(hi, lo, circulatingExternalLST)
    uncover 2
    divw

withdrawDeposit_after_if_else@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:529
    // assert(op.AssetHolding.assetBalance(Global.currentApplicationAddress, this.base_token_id.value.native)[0] >= asaDue)
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:529
    // assert(op.AssetHolding.assetBalance(Global.currentApplicationAddress, this.base_token_id.value.native)[0] >= asaDue)
    btoi
    asset_holding_get AssetBalance
    pop
    dig 1
    >=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:530-537
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:532
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:533
    // xferAsset: this.base_token_id.value.native,
    btoi
    dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:530-536
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:530-537
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:539
    // this.circulating_lst.value -= amount // LST burned
    frame_dig -3
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:539
    // this.circulating_lst.value -= amount // LST burned
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:540
    // this.total_deposits.value -= asaDue // ASA returned
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // total_deposits = GlobalState<uint64>()
    bytec_2 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:540
    // this.total_deposits.value -= asaDue // ASA returned
    swap
    app_global_put
    retsub

withdrawDeposit_else_body@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:389-392
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 13 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:389-392
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 5 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:393-396
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 14 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:393-396
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 5 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:399
    // const [hi, lo] = mulw(totalDepositsExternal, amount)
    frame_dig -3
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:400
    // return divw(hi, lo, circulatingExternalLST)
    uncover 2
    divw
    b withdrawDeposit_after_if_else@8

withdrawDeposit_bool_false@4:
    intc_0 // 0
    b withdrawDeposit_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow(assetTransferTxn: uint64, requestedLoanAmount: uint64, collateralAmount: uint64, lstApp: uint64, collateralTokenId: bytes, mbrTxn: uint64) -> void:
borrow:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:555-563
    // @abimethod({ allowActions: 'NoOp' })
    // borrow(
    //   assetTransferTxn: gtxn.AssetTransferTxn,
    //   requestedLoanAmount: uint64,
    //   collateralAmount: uint64,
    //   lstApp: uint64,
    //   collateralTokenId: UintN64,
    //   mbrTxn: gtxn.PaymentTxn,
    // ): void {
    proto 6 0
    pushbytes ""
    dupn 4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 4 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:565
    // const hasLoan = this.loan_record(op.Txn.sender).exists
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:565
    // const hasLoan = this.loan_record(op.Txn.sender).exists
    box_len
    dup
    uncover 2
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:567
    // if (hasLoan) {
    bz borrow_else_body@2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:568
    // const existingCollateral = this.getLoanRecord(op.Txn.sender).collateralAmount
    txn Sender
    callsub getLoanRecord
    pushint 40 // 40
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:569
    // collateralToUse = existingCollateral.native
    extract_uint64
    frame_bury 1

borrow_after_if_else@3:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1119
    // assertMatch(mbrTxn, { amount: VALIDATE_BORROW_FEE })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:34
    // const VALIDATE_BORROW_FEE: uint64 = 4_000
    pushint 4000 // 4000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1119
    // assertMatch(mbrTxn, { amount: VALIDATE_BORROW_FEE })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1121-1124
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: collateralAmount,
    // })
    frame_dig -6
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1122
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1121-1124
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: collateralAmount,
    // })
    ==
    bz borrow_bool_false@21
    frame_dig -6
    gtxns AssetAmount
    frame_dig -4
    ==
    bz borrow_bool_false@21
    intc_1 // 1

borrow_bool_merge@22:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1121-1124
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: collateralAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:101
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 10 // "accepted_collaterals"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:316
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1126
    // assert(this.collateralExists(collateralTokenId), 'unsupported collateral')
    assert // unsupported collateral
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1131-1134
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 13 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -3
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1131-1134
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 5 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1136-1139
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 14 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -3
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1136-1139
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 5 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1142
    // const [hC, lC] = mulw(totalDepositsExternal, collateralAmount)
    frame_dig 1
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1143
    // const underlyingCollateral = divw(hC, lC, circulatingExternalLST)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1146
    // const collateralOraclePrice = this.getOraclePrice(collateralTokenId)
    frame_dig -2
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1147
    // const [hU, lU] = mulw(underlyingCollateral, collateralOraclePrice)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:37
    // const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1148
    // const collateralUSD = divw(hU, lU, USD_MICRO_UNITS)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:79
    // ltv_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 15 // "ltv_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:575
    // const maxBorrowUSD: uint64 = (collateralUSD * this.ltv_bps.value) / BASIS_POINTS
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:36
    // const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:575
    // const maxBorrowUSD: uint64 = (collateralUSD * this.ltv_bps.value) / BASIS_POINTS
    /
    dup
    frame_bury 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:120
    // last_max_borrow = GlobalState<uint64>()
    pushbytes "last_max_borrow"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:576
    // this.last_max_borrow.value = maxBorrowUSD
    dig 1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:577
    // const baseTokenOraclePrice: uint64 = this.getOraclePrice(this.base_token_id.value)
    callsub getOraclePrice
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1155
    // const [rH, rL] = mulw(requestedLoanAmount, baseTokenOraclePrice)
    frame_dig -5
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:37
    // const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1156
    // const requestedLoanUSD = divw(rH, rL, USD_MICRO_UNITS)
    divw
    dup
    frame_bury 4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:123
    // last_requested_loan = GlobalState<uint64>()
    pushbytes "last_requested_loan"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1159
    // this.last_requested_loan.value = requestedLoanUSD
    dig 1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1160
    // this.debug_diff.value = maxBorrowUSD - requestedLoanUSD
    dup2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:126
    // debug_diff = GlobalState<uint64>()
    pushbytes "debug_diff"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1160
    // this.debug_diff.value = maxBorrowUSD - requestedLoanUSD
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1162
    // assert(requestedLoanUSD <= maxBorrowUSD, 'exceeds LTV limit')
    >=
    assert // exceeds LTV limit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:88
    // origination_fee_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 17 // "origination_fee_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1168
    // const fee: uint64 = (requestedAmount * this.origination_fee_bps.value) / BASIS_POINTS
    frame_dig -5
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:36
    // const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1168
    // const fee: uint64 = (requestedAmount * this.origination_fee_bps.value) / BASIS_POINTS
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1169
    // const disbursement: uint64 = requestedAmount - fee
    frame_dig -5
    dig 1
    -
    dup
    cover 2
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:62
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1171
    // this.fee_pool.value += fee
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:62
    // fee_pool = GlobalState<uint64>()
    bytec 8 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1171
    // this.fee_pool.value += fee
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:117
    // last_scaled_down_disbursement = GlobalState<uint64>()
    pushbytes "last_scaled_down_disbursement"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1172
    // this.last_scaled_down_disbursement.value = disbursement
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:581
    // if (hasLoan) {
    frame_dig 5
    bz borrow_else_body@5
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:583
    // op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1186
    // const existingLoan = this.getLoanRecord(borrower)
    dup
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1187
    // const iar = this.accrueInterest(existingLoan).copy()
    callsub accrueInterest
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1190
    // const [h1, l1] = mulw(iar.totalDebt.native, baseTokenOraclePrice)
    swap
    pushint 17 // 17
    extract_uint64
    frame_dig 0
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:37
    // const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1191
    // const oldLoanUSD = divw(h1, l1, USD_MICRO_UNITS)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1196
    // const totalRequestedUSD: uint64 = oldLoanUSD + newLoanUSD
    frame_dig 4
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1197
    // assert(totalRequestedUSD <= maxBorrowUSD, 'exceeds LTV limit with existing debt')
    frame_dig 3
    <=
    assert // exceeds LTV limit with existing debt
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1200
    // const totalCollateral: uint64 = existingLoan.collateralAmount.native + collateralAmount
    dup
    pushint 40 // 40
    extract_uint64
    frame_dig -4
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1202
    // const newTotalDisb: uint64 = existingLoan.totalDebt.native + disbursement
    dig 1
    pushint 65 // 65
    extract_uint64
    frame_dig 2
    dup
    cover 2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1206
    // amount: new UintN64(disbursement),
    swap
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1207
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1205-1209
    // new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // 0 for borrow
    // }),
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1208
    // changeType: new UintN8(0), // 0 for borrow
    bytec 11 // 0x00
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1205-1209
    // new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // 0 for borrow
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1211
    // existingLoan.collateralTokenId,
    uncover 3
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1204-1214
    // this.updateLoanRecord(
    //   new DebtChange({
    //     amount: new UintN64(disbursement),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(0), // 0 for borrow
    //   }),
    //   newTotalDisb,
    //   existingLoan.collateralTokenId,
    //   borrower,
    //   totalCollateral,
    // )
    swap
    cover 2
    uncover 4
    uncover 4
    callsub updateLoanRecord
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1215
    // this.updateCollateralTotal(collateralTokenId, collateralAmount)
    frame_dig -2
    frame_dig -4
    callsub updateCollateralTotal

borrow_after_if_else@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:595
    // this.disburseFunds(op.Txn.sender, disbursement)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1218
    // if (this.base_token_id.value.native === 0) {
    btoi
    bnz borrow_else_body@10
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1219-1225
    // itxn
    //   .payment({
    //     receiver: borrower,
    //     amount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    frame_dig 2
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1219-1224
    // itxn
    //   .payment({
    //     receiver: borrower,
    //     amount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1219-1225
    // itxn
    //   .payment({
    //     receiver: borrower,
    //     amount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    retsub

borrow_else_body@10:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1227-1234
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1230
    // xferAsset: this.base_token_id.value.native,
    btoi
    frame_dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1227-1233
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:33
    // const STANDARD_TXN_FEE: uint64 = 1_000
    intc_3 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1227-1234
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    retsub

borrow_else_body@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:592
    // this.mintLoanRecord(disbursement, collateralTokenId, op.Txn.sender, collateralAmount)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:609
    // collateralAmount: new UintN64(collateralAmount),
    frame_dig -4
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:611
    // amount: new UintN64(disbursement),
    frame_dig 2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:612
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:610-614
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // 0 for borrow
    // }),
    dig 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:613
    // changeType: new UintN8(0), // 0 for borrow
    bytec 11 // 0x00
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:610-614
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // 0 for borrow
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:617
    // lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:606-618
    // const loanRecord: LoanRecord = new LoanRecord({
    //   borrowerAddress: new Address(borrowerAddress.bytes),
    //   collateralTokenId: collateralTokenId,
    //   collateralAmount: new UintN64(collateralAmount),
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(disbursement),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(0), // 0 for borrow
    //   }),
    //   totalDebt: new UintN64(disbursement),
    //   borrowedTokenId: this.base_token_id.value,
    //   lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    // })
    dig 5
    frame_dig -2
    concat
    uncover 5
    concat
    uncover 3
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 4 // "loan_record"
    uncover 2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:619
    // this.loan_record(borrowerAddress).value = loanRecord.copy()
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:620
    // this.active_loan_records.value = this.active_loan_records.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:620
    // this.active_loan_records.value = this.active_loan_records.value + 1
    swap
    app_global_put
    b borrow_after_if_else@6

borrow_bool_false@21:
    intc_0 // 0
    b borrow_bool_merge@22

borrow_else_body@2:
    frame_dig -4
    frame_bury 1
    b borrow_after_if_else@3


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateLoanRecord(debtChange: bytes, totalDebt: uint64, collateralTokenId: bytes, borrowerAddress: bytes, collateralAmount: uint64) -> bytes:
updateLoanRecord:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:623-629
    // private updateLoanRecord(
    //   debtChange: DebtChange,
    //   totalDebt: uint64,
    //   collateralTokenId: UintN64,
    //   borrowerAddress: Account,
    //   collateralAmount: uint64,
    // ): void {
    proto 5 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:633
    // collateralAmount: new UintN64(collateralAmount),
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:635
    // totalDebt: new UintN64(totalDebt),
    frame_dig -4
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:637
    // lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:630-638
    // const loanRecord: LoanRecord = new LoanRecord({
    //   borrowerAddress: new Address(borrowerAddress.bytes),
    //   collateralTokenId: collateralTokenId,
    //   collateralAmount: new UintN64(collateralAmount),
    //   lastDebtChange: debtChange.copy(),
    //   totalDebt: new UintN64(totalDebt),
    //   borrowedTokenId: this.base_token_id.value,
    //   lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    // })
    frame_dig -2
    frame_dig -3
    concat
    uncover 4
    concat
    frame_dig -5
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 4 // "loan_record"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:639
    // this.loan_record(borrowerAddress).value = loanRecord.copy()
    swap
    box_put
    frame_dig -5
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest(debtor: bytes, templateReserveAddress: bytes) -> void:
accrueLoanInterest:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:649-650
    // @abimethod({ allowActions: 'NoOp' })
    // accrueLoanInterest(debtor: Account, templateReserveAddress: Account): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 4 // "loan_record"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:651
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    dup
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:652
    // const currentLoanRecord = this.loan_record(debtor).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:654
    // const iar = this.accrueInterest(currentLoanRecord)
    callsub accrueInterest
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:658
    // iar.change.copy(),
    dig 1
    extract 0 17 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:659
    // iar.totalDebt.native,
    uncover 2
    pushint 17 // 17
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:660
    // currentLoanRecord.collateralTokenId,
    dig 2
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:662
    // currentLoanRecord.collateralAmount.native,
    uncover 3
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:657-663
    // this.updateLoanRecord(
    //   iar.change.copy(),
    //   iar.totalDebt.native,
    //   currentLoanRecord.collateralTokenId,
    //   debtor,
    //   currentLoanRecord.collateralAmount.native,
    // )
    cover 3
    frame_dig -2
    uncover 4
    callsub updateLoanRecord
    pop
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest(record: bytes) -> bytes, bytes:
accrueInterest:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:666
    // private accrueInterest(record: LoanRecord): InterestAccrualReturn {
    proto 1 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:667
    // const now = Global.latestTimestamp
    global LatestTimestamp
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:668
    // const last = record.lastAccrualTimestamp.native
    frame_dig -1
    pushint 81 // 81
    extract_uint64
    dup
    cover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:670
    // if (now <= last)
    <=
    bz accrueInterest_after_if_else@2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:674
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:672-676
    // change: new DebtChange({
    //   amount: new UintN64(0),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(1),
    // }),
    pushbytes 0x000000000000000001
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:677
    // totalDebt: record.totalDebt,
    frame_dig -1
    extract 65 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:671-678
    // return new InterestAccrualReturn({
    //   change: new DebtChange({
    //     amount: new UintN64(0),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(1),
    //   }),
    //   totalDebt: record.totalDebt,
    // })
    concat
    frame_dig -1
    uncover 3
    uncover 3
    retsub

accrueInterest_after_if_else@2:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:680
    // const deltaT: uint64 = now - last
    frame_dig 0
    frame_dig 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:681
    // const principal: uint64 = record.totalDebt.native
    frame_dig -1
    pushint 65 // 65
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:85
    // interest_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 16 // "interest_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:685
    // const [hi1, lo1] = mulw(principal, rateBps)
    dig 1
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:36
    // const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:687
    // const rateScaled: uint64 = divw(hi1, lo1, BASIS_POINTS)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:689
    // const [hi2, lo2] = mulw(rateScaled, deltaT)
    uncover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:25
    // const SECONDS_PER_YEAR: uint64 = 365 * 24 * 60 * 60
    pushint 31536000 // 31536000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:691
    // const interest: uint64 = divw(hi2, lo2, SECONDS_PER_YEAR)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:91
    // protocol_share_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 18 // "protocol_share_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:36
    // const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:694
    // const depositorBps: uint64 = BASIS_POINTS - protoBps
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:697
    // const [hiDep, loDep] = mulw(interest, depositorBps)
    dig 1
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:36
    // const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:698
    // const depositorInterest: uint64 = divw(hiDep, loDep, BASIS_POINTS)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:701
    // const protocolInterest: uint64 = interest - depositorInterest
    dup2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:705
    // this.total_deposits.value += depositorInterest
    uncover 2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // total_deposits = GlobalState<uint64>()
    bytec_2 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:705
    // this.total_deposits.value += depositorInterest
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:62
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:707
    // this.fee_pool.value += protocolInterest
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:62
    // fee_pool = GlobalState<uint64>()
    bytec 8 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:707
    // this.fee_pool.value += protocolInterest
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:711
    // const newPrincipal: uint64 = principal + interest
    swap
    dig 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:715
    // amount: new UintN64(interest),
    swap
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:716
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:714-718
    // change: new DebtChange({
    //   amount: new UintN64(interest),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(1),
    // }),
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:717
    // changeType: new UintN8(1),
    pushbytes 0x01
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:714-718
    // change: new DebtChange({
    //   amount: new UintN64(interest),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(1),
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:719
    // totalDebt: new UintN64(newPrincipal),
    swap
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:713-720
    // return new InterestAccrualReturn({
    //   change: new DebtChange({
    //     amount: new UintN64(interest),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(1),
    //   }),
    //   totalDebt: new UintN64(newPrincipal),
    // })
    concat
    frame_dig -1
    uncover 3
    uncover 3
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord(borrowerAddress: bytes) -> bytes:
getLoanRecord:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:723
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 4 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:724
    // return this.loan_record(borrowerAddress).value
    box_get
    assert // Box must have value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanASA(assetTransferTxn: uint64, repaymentAmount: uint64, templateReserveAddress: bytes) -> void:
repayLoanASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:736-741
    // @abimethod({ allowActions: 'NoOp' })
    // repayLoanASA(
    //   assetTransferTxn: gtxn.AssetTransferTxn,
    //   repaymentAmount: uint64,
    //   templateReserveAddress: Account,
    // ): void {
    proto 3 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:742
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:743-747
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: repaymentAmount,
    // })
    frame_dig -3
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:744
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:743-747
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: repaymentAmount,
    // })
    ==
    bz repayLoanASA_bool_false@4
    frame_dig -3
    gtxns XferAsset
    frame_dig 1
    ==
    bz repayLoanASA_bool_false@4
    frame_dig -3
    gtxns AssetAmount
    frame_dig -2
    ==
    bz repayLoanASA_bool_false@4
    intc_1 // 1

repayLoanASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:743-747
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: repaymentAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:749
    // const loanRecord = this.getLoanRecord(op.Txn.sender)
    txn Sender
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:750
    // const iar = this.accrueInterest(loanRecord)
    callsub accrueInterest
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:753
    // assert(repaymentAmount <= iar.totalDebt.native)
    pushint 17 // 17
    extract_uint64
    frame_dig -2
    dig 1
    <=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:754
    // const remainingDebt: uint64 = iar.totalDebt.native - repaymentAmount
    frame_dig -2
    -
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:756
    // if (remainingDebt === 0) {
    bnz repayLoanASA_else_body@8
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 4 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:758
    // this.loan_record(op.Txn.sender).delete()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:758
    // this.loan_record(op.Txn.sender).delete()
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:759
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:759
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:761-767
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:763
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:764
    // xferAsset: loanRecord.collateralTokenId.native,
    swap
    dup
    pushint 32 // 32
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:765
    // assetAmount: loanRecord.collateralAmount.native,
    swap
    pushint 40 // 40
    extract_uint64
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:761-766
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:761-767
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    //   .submit()
    itxn_submit
    retsub

repayLoanASA_else_body@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:772
    // amount: new UintN64(repaymentAmount),
    frame_dig -2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:773
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:771-775
    // new DebtChange({
    //   amount: new UintN64(repaymentAmount),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(2), // 2 for repayment
    // }), // scaledDownDisbursement
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:774
    // changeType: new UintN8(2), // 2 for repayment
    pushbytes 0x02
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:771-775
    // new DebtChange({
    //   amount: new UintN64(repaymentAmount),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(2), // 2 for repayment
    // }), // scaledDownDisbursement
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:777
    // loanRecord.collateralTokenId, // collateral type
    swap
    dup
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:778
    // op.Txn.sender, // borrower
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:779
    // loanRecord.collateralAmount.native, // collateral locked
    uncover 2
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:770-780
    // this.updateLoanRecord(
    //   new DebtChange({
    //     amount: new UintN64(repaymentAmount),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(2), // 2 for repayment
    //   }), // scaledDownDisbursement
    //   remainingDebt, // new debt
    //   loanRecord.collateralTokenId, // collateral type
    //   op.Txn.sender, // borrower
    //   loanRecord.collateralAmount.native, // collateral locked
    // )
    uncover 3
    frame_dig 0
    cover 4
    cover 4
    callsub updateLoanRecord
    pop
    retsub

repayLoanASA_bool_false@4:
    intc_0 // 0
    b repayLoanASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo(paymentTxn: uint64, repaymentAmount: uint64, templateReserveAddress: bytes) -> void:
repayLoanAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:793-794
    // @abimethod({ allowActions: 'NoOp' })
    // repayLoanAlgo(paymentTxn: gtxn.PaymentTxn, repaymentAmount: uint64, templateReserveAddress: Account): void {
    proto 3 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    bury 1
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:796-799
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: repaymentAmount,
    // })
    frame_dig -3
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:797
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:796-799
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: repaymentAmount,
    // })
    ==
    bz repayLoanAlgo_bool_false@3
    frame_dig -3
    gtxns Amount
    frame_dig -2
    ==
    bz repayLoanAlgo_bool_false@3
    intc_1 // 1

repayLoanAlgo_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:796-799
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: repaymentAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:801
    // const loanRecord = this.getLoanRecord(op.Txn.sender)
    txn Sender
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:802
    // const iar = this.accrueInterest(loanRecord)
    callsub accrueInterest
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:804
    // assert(repaymentAmount <= iar.totalDebt.native)
    pushint 17 // 17
    extract_uint64
    frame_dig -2
    dig 1
    <=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:805
    // const remainingDebt: uint64 = iar.totalDebt.native - repaymentAmount
    frame_dig -2
    -
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:807
    // if (remainingDebt === 0) {
    bnz repayLoanAlgo_else_body@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 4 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:809
    // this.loan_record(op.Txn.sender).delete()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:809
    // this.loan_record(op.Txn.sender).delete()
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:810
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:810
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:812-818
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:814
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:815
    // xferAsset: loanRecord.collateralTokenId.native,
    swap
    dup
    pushint 32 // 32
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:816
    // assetAmount: loanRecord.collateralAmount.native,
    swap
    pushint 40 // 40
    extract_uint64
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:812-817
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:812-818
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    //   .submit()
    itxn_submit
    retsub

repayLoanAlgo_else_body@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:823
    // amount: new UintN64(repaymentAmount),
    frame_dig -2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:824
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:822-826
    // new DebtChange({
    //   amount: new UintN64(repaymentAmount),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(2), // 2 for repayment
    // }),
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:825
    // changeType: new UintN8(2), // 2 for repayment
    pushbytes 0x02
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:822-826
    // new DebtChange({
    //   amount: new UintN64(repaymentAmount),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(2), // 2 for repayment
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:828
    // loanRecord.collateralTokenId, // collateral type
    swap
    dup
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:829
    // op.Txn.sender, // borrower
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:830
    // loanRecord.collateralAmount.native, // collateral locked
    uncover 2
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:821-831
    // this.updateLoanRecord(
    //   new DebtChange({
    //     amount: new UintN64(repaymentAmount),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(2), // 2 for repayment
    //   }),
    //   remainingDebt,
    //   loanRecord.collateralTokenId, // collateral type
    //   op.Txn.sender, // borrower
    //   loanRecord.collateralAmount.native, // collateral locked
    // )
    uncover 3
    frame_dig 0
    cover 4
    cover 4
    callsub updateLoanRecord
    pop
    retsub

repayLoanAlgo_bool_false@3:
    intc_0 // 0
    b repayLoanAlgo_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawFees() -> void:
withdrawFees:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:842
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:69
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:842
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:843-849
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: this.fee_pool.value,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:69
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:846
    // xferAsset: this.base_token_id.value.native,
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:62
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:843-848
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: this.fee_pool.value,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:843-849
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: this.fee_pool.value,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:62
    // fee_pool = GlobalState<uint64>()
    bytec 8 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:850
    // this.fee_pool.value = 0
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutASA(buyer: bytes, debtor: bytes, axferTxn: uint64) -> void:
buyoutASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:862-863
    // @abimethod({ allowActions: 'NoOp' })
    // buyoutASA(buyer: Account, debtor: Account, axferTxn: gtxn.AssetTransferTxn): void {
    proto 3 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 4 // "loan_record"
    frame_dig -2
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:864
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:865
    // const currentLoanRecord = this.loan_record(debtor).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:866
    // this.loan_record(debtor).value = currentLoanRecord.copy()
    swap
    dig 1
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:868
    // const collateralAmount = currentLoanRecord.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:869
    // const debtAmount = currentLoanRecord.totalDebt.native
    dup
    pushint 65 // 65
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:870
    // const collateralTokenId: UintN64 = new UintN64(currentLoanRecord.collateralTokenId.native)
    swap
    pushint 32 // 32
    extract_uint64
    itob
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:101
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 10 // "accepted_collaterals"
    dig 1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:321
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:873
    // assert(acceptedCollateral.totalCollateral.native >= collateralAmount, 'Collateral amount exceeds current total')
    pushint 16 // 16
    extract_uint64
    dup
    cover 4
    dig 3
    >=
    assert // Collateral amount exceeds current total
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:876
    // const oraclePrice: uint64 = this.getOraclePrice(collateralTokenId)
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:877
    // const [hU, lU] = mulw(collateralAmount, oraclePrice)
    uncover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:878
    // const collateralUSD: uint64 = divw(hU, lU, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:879
    // const CR: uint64 = collateralUSD / debtAmount
    dup
    uncover 2
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:82
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:880
    // assert(CR > this.liq_threshold_bps.value, 'loan is not eligible for buyout')
    dig 1
    <
    assert // loan is not eligible for buyout
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:882
    // const premiumRate: uint64 = (CR * 10000) / this.liq_threshold_bps.value - 10000 // in basis points
    intc 4 // 10000
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:82
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:882
    // const premiumRate: uint64 = (CR * 10000) / this.liq_threshold_bps.value - 10000 // in basis points
    /
    intc 4 // 10000
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:883
    // const buyoutPrice: uint64 = collateralUSD * (1 + premiumRate / 10000)
    intc 4 // 10000
    /
    intc_1 // 1
    +
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:885-889
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    frame_dig -1
    gtxns XferAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:886
    // xferAsset: Asset(this.base_token_id.value.native),
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:885-889
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    ==
    bz buyoutASA_bool_false@4
    frame_dig -1
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:887
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:885-889
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    ==
    bz buyoutASA_bool_false@4
    frame_dig -1
    gtxns AssetAmount
    frame_dig 4
    ==
    bz buyoutASA_bool_false@4
    intc_1 // 1

buyoutASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:885-889
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:894
    // this.loan_record(debtor).delete()
    frame_dig 0
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:895
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:895
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:898-904
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:901
    // xferAsset: collateralTokenId.native,
    frame_dig 2
    dup
    btoi
    frame_dig 1
    dup
    cover 2
    itxn_field AssetAmount
    itxn_field XferAsset
    frame_dig -3
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:898-903
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:898-904
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:906
    // const newTotal: uint64 = acceptedCollateral.totalCollateral.native - collateralAmount
    frame_dig 3
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:907
    // this.updateCollateralTotal(collateralTokenId, newTotal)
    callsub updateCollateralTotal
    retsub

buyoutASA_bool_false@4:
    intc_0 // 0
    b buyoutASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutAlgo(buyer: bytes, debtor: bytes, paymentTxn: uint64) -> void:
buyoutAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:919-920
    // @abimethod({ allowActions: 'NoOp' })
    // buyoutAlgo(buyer: Account, debtor: Account, paymentTxn: gtxn.PaymentTxn): void {
    proto 3 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 4 // "loan_record"
    frame_dig -2
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:921
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:922
    // const currentLoanRecord = this.loan_record(debtor).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:923
    // this.loan_record(debtor).value = currentLoanRecord.copy()
    swap
    dig 1
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:925
    // const collateralAmount = currentLoanRecord.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:926
    // const debtAmount = currentLoanRecord.totalDebt.native
    dup
    pushint 65 // 65
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:927
    // const collateralTokenId: UintN64 = new UintN64(currentLoanRecord.collateralTokenId.native)
    swap
    pushint 32 // 32
    extract_uint64
    itob
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:101
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 10 // "accepted_collaterals"
    dig 1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:321
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:930
    // assert(acceptedCollateral.totalCollateral.native >= collateralAmount, 'Collateral amount exceeds current total')
    pushint 16 // 16
    extract_uint64
    dup
    cover 4
    dig 3
    >=
    assert // Collateral amount exceeds current total
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:933
    // const oraclePrice: uint64 = this.getOraclePrice(collateralTokenId)
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:934
    // const [hU, lU] = mulw(collateralAmount, oraclePrice)
    uncover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:935
    // const collateralUSD: uint64 = divw(hU, lU, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:936
    // const CR: uint64 = collateralUSD / debtAmount
    dup
    uncover 2
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:82
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:937
    // assert(CR > this.liq_threshold_bps.value, 'loan is not eligible for buyout')
    dig 1
    <
    assert // loan is not eligible for buyout
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:939
    // const premiumRate: uint64 = (CR * 10000) / this.liq_threshold_bps.value - 10000 // in basis points
    intc 4 // 10000
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:82
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:939
    // const premiumRate: uint64 = (CR * 10000) / this.liq_threshold_bps.value - 10000 // in basis points
    /
    intc 4 // 10000
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:940
    // const buyoutPrice: uint64 = collateralUSD * (1 + premiumRate / 10000)
    intc 4 // 10000
    /
    intc_1 // 1
    +
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:942-945
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: buyoutPrice,
    // })
    frame_dig -1
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:943
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:942-945
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: buyoutPrice,
    // })
    ==
    bz buyoutAlgo_bool_false@3
    frame_dig -1
    gtxns Amount
    frame_dig 4
    ==
    bz buyoutAlgo_bool_false@3
    intc_1 // 1

buyoutAlgo_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:942-945
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: buyoutPrice,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:950
    // this.loan_record(debtor).delete()
    frame_dig 0
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:951
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:951
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:954-960
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:957
    // xferAsset: collateralTokenId.native,
    frame_dig 2
    dup
    btoi
    frame_dig 1
    dup
    cover 2
    itxn_field AssetAmount
    itxn_field XferAsset
    frame_dig -3
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:954-959
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:954-960
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:962
    // const newTotal: uint64 = acceptedCollateral.totalCollateral.native - collateralAmount
    frame_dig 3
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:963
    // this.updateCollateralTotal(collateralTokenId, newTotal)
    callsub updateCollateralTotal
    retsub

buyoutAlgo_bool_false@3:
    intc_0 // 0
    b buyoutAlgo_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateASA(debtor: bytes, axferTxn: uint64) -> void:
liquidateASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:974-975
    // @abimethod({ allowActions: 'NoOp' })
    // liquidateASA(debtor: Account, axferTxn: gtxn.AssetTransferTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 4 // "loan_record"
    frame_dig -2
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:976
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:978
    // const record = this.loan_record(debtor).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:979
    // const collateralAmount = record.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:980
    // const debtAmount = record.totalDebt.native
    dup
    pushint 65 // 65
    extract_uint64
    dup
    cover 3
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:981
    // const collateralTokenId = record.collateralTokenId
    extract 32 8 // on error: Index access is out of bounds
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:101
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 10 // "accepted_collaterals"
    dig 1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:321
    // return this.accepted_collaterals(key).value.copy()
    box_get
    swap
    cover 4
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:984
    // const oraclePrice = this.getOraclePrice(collateralTokenId)
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:985
    // const [h, l] = mulw(collateralAmount, oraclePrice)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:986
    // const collateralUSD = divw(h, l, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:988
    // const CR: uint64 = collateralUSD / debtAmount
    swap
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:82
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:989
    // assert(CR <= this.liq_threshold_bps.value, 'loan is not liquidatable')
    <=
    assert // loan is not liquidatable
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:992-996
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    frame_dig -1
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:993
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:992-996
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    ==
    bz liquidateASA_bool_false@4
    frame_dig -1
    gtxns XferAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:46
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:994
    // xferAsset: Asset(this.base_token_id.value.native),
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:992-996
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    ==
    bz liquidateASA_bool_false@4
    frame_dig -1
    gtxns AssetAmount
    frame_dig 3
    ==
    bz liquidateASA_bool_false@4
    intc_1 // 1

liquidateASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:992-996
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1001
    // this.loan_record(debtor).delete()
    frame_dig 0
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1002
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1002
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1005-1011
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1007
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1008
    // xferAsset: collateralTokenId.native,
    frame_dig 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:981
    // const collateralTokenId = record.collateralTokenId
    pushint 32 // 32
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1008
    // xferAsset: collateralTokenId.native,
    extract_uint64
    frame_dig 2
    dup
    cover 3
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1005-1010
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1005-1011
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1014
    // const newTotal: uint64 = acceptedCollateral.totalCollateral.native - collateralAmount
    frame_dig 5
    pushint 16 // 16
    extract_uint64
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1015
    // this.updateCollateralTotal(collateralTokenId, newTotal)
    frame_dig 4
    swap
    callsub updateCollateralTotal
    retsub

liquidateASA_bool_false@4:
    intc_0 // 0
    b liquidateASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateAlgo(debtor: bytes, paymentTxn: uint64) -> void:
liquidateAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1026-1027
    // @abimethod({ allowActions: 'NoOp' })
    // liquidateAlgo(debtor: Account, paymentTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 4 // "loan_record"
    frame_dig -2
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1028
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1030
    // const record = this.loan_record(debtor).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1031
    // const collateralAmount = record.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1032
    // const debtAmount = record.totalDebt.native
    dup
    pushint 65 // 65
    extract_uint64
    dup
    cover 3
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1033
    // const collateralTokenId = record.collateralTokenId
    extract 32 8 // on error: Index access is out of bounds
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:101
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 10 // "accepted_collaterals"
    dig 1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:321
    // return this.accepted_collaterals(key).value.copy()
    box_get
    swap
    cover 4
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1036
    // const oraclePrice = this.getOraclePrice(collateralTokenId)
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1037
    // const [h, l] = mulw(collateralAmount, oraclePrice)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1038
    // const collateralUSD = divw(h, l, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1040
    // const CR: uint64 = collateralUSD / debtAmount
    swap
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:82
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1041
    // assert(CR <= this.liq_threshold_bps.value, 'loan is not liquidatable')
    <=
    assert // loan is not liquidatable
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1044-1047
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: debtAmount,
    // })
    frame_dig -1
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1045
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1044-1047
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: debtAmount,
    // })
    ==
    bz liquidateAlgo_bool_false@3
    frame_dig -1
    gtxns Amount
    frame_dig 3
    ==
    bz liquidateAlgo_bool_false@3
    intc_1 // 1

liquidateAlgo_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1044-1047
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: debtAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1050
    // this.loan_record(debtor).delete()
    frame_dig 0
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1051
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1051
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1054-1060
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1056
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1057
    // xferAsset: collateralTokenId.native,
    frame_dig 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1033
    // const collateralTokenId = record.collateralTokenId
    pushint 32 // 32
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1057
    // xferAsset: collateralTokenId.native,
    extract_uint64
    frame_dig 2
    dup
    cover 3
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1054-1059
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1054-1060
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1063
    // const newTotal: uint64 = acceptedCollateral.totalCollateral.native - collateralAmount
    frame_dig 5
    pushint 16 // 16
    extract_uint64
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1064
    // this.updateCollateralTotal(collateralTokenId, newTotal)
    frame_dig 4
    swap
    callsub updateCollateralTotal
    retsub

liquidateAlgo_bool_false@3:
    intc_0 // 0
    b liquidateAlgo_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus(borrower: bytes) -> uint64, uint64, uint64, uint64, uint64, uint64, uint64:
getLoanStatus:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1074-1083
    // @abimethod({ allowActions: 'NoOp' })
    // getLoanStatus(borrower: Account): {
    //   outstandingDebt: uint64
    //   collateralValueUSD: uint64
    //   collateralAmount: uint64
    //   collateralRatioBps: uint64
    //   liquidationThresholdBps: uint64
    //   eligibleForLiquidation: boolean
    //   eligibleForBuyout: boolean
    // } {
    proto 1 7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 4 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1084
    // assert(this.loan_record(borrower).exists, 'Loan record does not exist')
    dup
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1085
    // const record = this.loan_record(borrower).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1086
    // const iar = this.accrueInterest(record) // simulate interest accrual for latest status
    callsub accrueInterest
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1088
    // const debt: uint64 = iar.totalDebt.native
    swap
    pushint 17 // 17
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1089
    // const collateralAmount: uint64 = record.collateralAmount.native
    dig 1
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:82
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1092
    // const oraclePrice = this.getOraclePrice(record.collateralTokenId)
    uncover 3
    extract 32 8 // on error: Index access is out of bounds
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1093
    // const [hi, lo] = mulw(collateralAmount, oraclePrice)
    dig 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1094
    // const collateralValueUSD = divw(hi, lo, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1096
    // const CR: uint64 = (collateralValueUSD * BASIS_POINTS) / debt
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:36
    // const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1096
    // const CR: uint64 = (collateralValueUSD * BASIS_POINTS) / debt
    *
    dig 4
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1097
    // const eligibleForLiquidation = CR < liqBps
    dup
    dig 3
    <
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1098
    // const eligibleForBuyout = CR > liqBps
    dig 1
    dig 4
    >
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1100-1108
    // return {
    //   outstandingDebt: debt,
    //   collateralValueUSD: collateralValueUSD,
    //   collateralAmount: collateralAmount,
    //   collateralRatioBps: CR,
    //   liquidationThresholdBps: liqBps,
    //   eligibleForLiquidation,
    //   eligibleForBuyout,
    // }
    uncover 6
    uncover 4
    uncover 6
    uncover 5
    uncover 6
    uncover 6
    uncover 6
    retsub
