#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 4 10000 1000 4294967296
    bytecblock "base_token_id" "active_loan_records" "loan_record" "admin_account" 0x151f7c75 "total_deposits" "circulating_lst" "liq_threshold_bps" "accepted_collaterals" "fee_pool" "lst_token_id" "accepted_collaterals_count" 0x09ef525f 0xae859f3b ":" "ltv_bps" "interest_bps" "origination_fee_bps" "protocol_interest_fee_bps" "oracle_app"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn NumAppArgs
    bz main_after_if_else@31
    pushbytess 0x3b01665e 0x9de42732 0x17c33662 0x5efce39a 0x5cac25a9 // method "createApplication(account,uint64)void", method "initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void", method "generateLSTToken(pay)void", method "optInToLST(uint64,pay)void", method "configureLSTToken(axfer,uint64)void"
    bytec 12 // method "getCirculatingLST()uint64"
    bytec 13 // method "getTotalDeposits()uint64"
    pushbytess 0x6c6337c0 0xe596ac73 0x53b5111f 0x72c5c57b 0x3e41a49b 0x3ff83798 0x6177ca28 0xf676074f 0xabaf9805 0x0e6e6369 0x44e03043 0x96da416e 0xf0de9dc0 0x1dffadde 0xf0eda6a8 0x836dbb73 0xf16507ce 0xdaa7f7f2 // method "getAcceptedCollateralsCount()uint64", method "getOraclePrice(uint64)uint64", method "addNewCollateralType(uint64,pay)void", method "depositASA(axfer,uint64,pay)void", method "withdrawDeposit(axfer,uint64,uint64,pay)void", method "borrow(axfer,uint64,uint64,uint64,byte[],pay)void", method "claimLoanRecordASA(account,asset)void", method "getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", method "getLoanRecordASAId(account)uint64", method "repayLoanASA(axfer,uint64,byte[])void", method "repayLoanAlgo(pay,uint64,byte[])void", method "withdrawFees()void", method "accrueLoanInterest(account,byte[])void", method "buyoutASA(account,account,axfer)void", method "buyoutAlgo(account,account,pay)void", method "liquidateASA(account,axfer)void", method "liquidateAlgo(account,pay)void", method "getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_initApplication_route@4 main_generateLSTToken_route@5 main_optInToLST_route@6 main_configureLSTToken_route@7 main_getCirculatingLST_route@8 main_getTotalDeposits_route@9 main_getAcceptedCollateralsCount_route@10 main_getOraclePrice_route@11 main_addNewCollateralType_route@12 main_depositASA_route@13 main_withdrawDeposit_route@14 main_borrow_route@15 main_claimLoanRecordASA_route@16 main_getLoanRecord_route@17 main_getLoanRecordASAId_route@18 main_repayLoanASA_route@19 main_repayLoanAlgo_route@20 main_withdrawFees_route@21 main_accrueLoanInterest_route@22 main_buyoutASA_route@23 main_buyoutAlgo_route@24 main_liquidateASA_route@25 main_liquidateAlgo_route@26 main_getLoanStatus_route@27

main_after_if_else@31:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    intc_0 // 0
    return

main_getLoanStatus_route@27:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1066
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1066
    // @abimethod({ allowActions: 'NoOp' })
    callsub getLoanStatus
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    pushbytes 0x00
    intc_0 // 0
    uncover 8
    setbit
    pushbytes 0x00
    intc_0 // 0
    uncover 8
    setbit
    uncover 6
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    intc_0 // 0
    getbit
    pushint 321 // 321
    swap
    setbit
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_liquidateAlgo_route@26:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1004
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1004
    // @abimethod({ allowActions: 'NoOp' })
    callsub liquidateAlgo
    intc_1 // 1
    return

main_liquidateASA_route@25:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:941
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:941
    // @abimethod({ allowActions: 'NoOp' })
    callsub liquidateASA
    intc_1 // 1
    return

main_buyoutAlgo_route@24:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:874
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:874
    // @abimethod({ allowActions: 'NoOp' })
    callsub buyoutAlgo
    intc_1 // 1
    return

main_buyoutASA_route@23:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:806
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:806
    // @abimethod({ allowActions: 'NoOp' })
    callsub buyoutASA
    intc_1 // 1
    return

main_accrueLoanInterest_route@22:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:785
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:785
    // @abimethod({ allowActions: 'NoOp' })
    callsub accrueLoanInterest
    intc_1 // 1
    return

main_withdrawFees_route@21:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:772
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub withdrawFees
    intc_1 // 1
    return

main_repayLoanAlgo_route@20:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:719
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:719
    // @abimethod({ allowActions: 'NoOp' })
    callsub repayLoanAlgo
    intc_1 // 1
    return

main_repayLoanASA_route@19:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:666
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:666
    // @abimethod({ allowActions: 'NoOp' })
    callsub repayLoanASA
    intc_1 // 1
    return

main_getLoanRecordASAId_route@18:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:662
    // getLoanRecordASAId(borrowerAddress: Account): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:662
    // getLoanRecordASAId(borrowerAddress: Account): uint64 {
    callsub getLoanRecordASAId
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getLoanRecord_route@17:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:658
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:658
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    callsub getLoanRecord
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_claimLoanRecordASA_route@16:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:581
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Assets
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:581
    // @abimethod({ allowActions: 'NoOp' })
    callsub claimLoanRecordASA
    intc_1 // 1
    return

main_borrow_route@15:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:377
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    extract 2 0
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:377
    // @abimethod({ allowActions: 'NoOp' })
    callsub borrow
    intc_1 // 1
    return

main_withdrawDeposit_route@14:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:337
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:337
    // @abimethod({ allowActions: 'NoOp' })
    callsub withdrawDeposit
    intc_1 // 1
    return

main_depositASA_route@13:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:302
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:302
    // @abimethod({ allowActions: 'NoOp' })
    callsub depositASA
    intc_1 // 1
    return

main_addNewCollateralType_route@12:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:233
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:233
    // @abimethod({ allowActions: 'NoOp' })
    callsub addNewCollateralType
    intc_1 // 1
    return

main_getOraclePrice_route@11:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:196
    // getOraclePrice(tokenId: uint64): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:196
    // getOraclePrice(tokenId: uint64): uint64 {
    callsub getOraclePrice
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getAcceptedCollateralsCount_route@10:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:192
    // getAcceptedCollateralsCount(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getAcceptedCollateralsCount
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getTotalDeposits_route@9:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:188
    // getTotalDeposits(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getTotalDeposits
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getCirculatingLST_route@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:184
    // getCirculatingLST(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getCirculatingLST
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_configureLSTToken_route@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:173
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:173
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    callsub configureLSTToken
    intc_1 // 1
    return

main_optInToLST_route@6:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:154
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:154
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    callsub optInToLST
    intc_1 // 1
    return

main_generateLSTToken_route@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:128
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:128
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    callsub generateLSTToken
    intc_1 // 1
    return

main_initApplication_route@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:85
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txnas Applications
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:85
    // @abimethod({ allowActions: 'NoOp' })
    callsub initApplication
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:79
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:32-33
    // @contract({ name: 'orbital-lending', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:79
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication(admin: bytes, baseTokenId: uint64) -> void:
createApplication:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:79-80
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    // public createApplication(admin: Account, baseTokenId: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    bytec_3 // "admin_account"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:81
    // this.admin_account.value = admin
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:82
    // this.base_token_id.value = new UintN64(baseTokenId)
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    bytec_0 // "base_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:82
    // this.base_token_id.value = new UintN64(baseTokenId)
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication(mbrTxn: uint64, ltv_bps: uint64, liq_threshold_bps: uint64, interest_bps: uint64, origination_fee_bps: uint64, protocol_interest_fee_bps: uint64, oracle_app_id: uint64) -> void:
initApplication:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:85-94
    // @abimethod({ allowActions: 'NoOp' })
    // public initApplication(
    //   mbrTxn: gtxn.PaymentTxn,
    //   ltv_bps: uint64,
    //   liq_threshold_bps: uint64,
    //   interest_bps: uint64,
    //   origination_fee_bps: uint64,
    //   protocol_interest_fee_bps: uint64,
    //   oracle_app_id: Application,
    // ): void {
    proto 7 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:95
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:95
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:97-100
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 400000,
    // })
    frame_dig -7
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:97-100
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 400000,
    // })
    ==
    bz initApplication_bool_false@3
    frame_dig -7
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:99
    // amount: 400000,
    pushint 400000 // 400000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:97-100
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 400000,
    // })
    ==
    bz initApplication_bool_false@3
    intc_1 // 1

initApplication_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:97-100
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 400000,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50
    // ltv_bps = GlobalState<uint64>()
    bytec 15 // "ltv_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:102
    // this.ltv_bps.value = ltv_bps
    frame_dig -6
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:53
    // liq_threshold_bps = GlobalState<uint64>()
    bytec 7 // "liq_threshold_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:103
    // this.liq_threshold_bps.value = liq_threshold_bps
    frame_dig -5
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // interest_bps = GlobalState<uint64>()
    bytec 16 // "interest_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:104
    // this.interest_bps.value = interest_bps
    frame_dig -4
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // origination_fee_bps = GlobalState<uint64>()
    bytec 17 // "origination_fee_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:105
    // this.origination_fee_bps.value = origination_fee_bps
    frame_dig -3
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // accepted_collaterals_count = GlobalState<uint64>()
    bytec 11 // "accepted_collaterals_count"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:106
    // this.accepted_collaterals_count.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:75
    // fee_pool = GlobalState<uint64>()
    bytec 9 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:107
    // this.fee_pool.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:108
    // this.circulating_lst.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    bytec 5 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:109
    // this.total_deposits.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:110
    // this.active_loan_records.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:61
    // protocol_interest_fee_bps = GlobalState<uint64>()
    bytec 18 // "protocol_interest_fee_bps"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:111
    // this.protocol_interest_fee_bps.value = protocol_interest_fee_bps
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:63
    // oracle_app = GlobalState<Application>()
    bytec 19 // "oracle_app"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:112
    // this.oracle_app.value = oracle_app_id
    frame_dig -1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:38
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:113
    // this.lst_token_id.value = new UintN64(99)
    pushbytes 0x0000000000000063
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:115
    // if (this.base_token_id.value.native !== 0) {
    btoi
    bz initApplication_after_if_else@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:116-123
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:118
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:119
    // xferAsset: this.base_token_id.value.native,
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:120
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:116-122
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:121
    // fee: 1000,
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:116-123
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_submit

initApplication_after_if_else@7:
    retsub

initApplication_bool_false@3:
    intc_0 // 0
    b initApplication_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken(mbrTxn: uint64) -> void:
generateLSTToken:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:128
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    proto 1 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:129
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:129
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:130-133
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 102000,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:130-133
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 102000,
    // })
    ==
    bz generateLSTToken_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:132
    // amount: 102000,
    pushint 102000 // 102000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:130-133
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 102000,
    // })
    ==
    bz generateLSTToken_bool_false@3
    intc_1 // 1

generateLSTToken_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:130-133
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 102000,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:137
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:138-149
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(this.base_token_id.value.bytes),
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:140
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:141
    // total: baseToken.total,
    dig 1
    asset_params_get AssetTotal
    assert // asset exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:142
    // decimals: baseToken.decimals,
    dig 2
    asset_params_get AssetDecimals
    assert // asset exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:144
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:145
    // unitName: 'c' + String(baseToken.unitName),
    uncover 4
    asset_params_get AssetUnitName
    assert // asset exists
    pushbytes "c"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:146
    // assetName: 'c' + String(this.base_token_id.value.bytes),
    pushbytes "c"
    swap
    concat
    itxn_field ConfigAssetName
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetManager
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:143
    // defaultFrozen: false,
    intc_0 // 0
    itxn_field ConfigAssetDefaultFrozen
    itxn_field ConfigAssetDecimals
    itxn_field ConfigAssetTotal
    itxn_field Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:138-148
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(this.base_token_id.value.bytes),
    //     fee: 1000,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:147
    // fee: 1000,
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:138-149
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(this.base_token_id.value.bytes),
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:150
    // this.lst_token_id.value = new UintN64(result.createdAsset.id)
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:38
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:150
    // this.lst_token_id.value = new UintN64(result.createdAsset.id)
    swap
    app_global_put
    retsub

generateLSTToken_bool_false@3:
    intc_0 // 0
    b generateLSTToken_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST(lstAssetId: uint64, mbrTxn: uint64) -> void:
optInToLST:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:154
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:155
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:155
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:156-159
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 2000,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:156-159
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 2000,
    // })
    ==
    bz optInToLST_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:158
    // amount: 2000,
    pushint 2000 // 2000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:156-159
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 2000,
    // })
    ==
    bz optInToLST_bool_false@3
    intc_1 // 1

optInToLST_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:156-159
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 2000,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:160
    // this.lst_token_id.value = new UintN64(lstAssetId)
    frame_dig -2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:38
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:160
    // this.lst_token_id.value = new UintN64(lstAssetId)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:163-170
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:165
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:167
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:163-169
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:168
    // fee: 1000,
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:163-170
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_submit
    retsub

optInToLST_bool_false@3:
    intc_0 // 0
    b optInToLST_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken(axferTxn: uint64, circulating_lst: uint64) -> void:
configureLSTToken:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:173
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:174
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:174
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:38
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:175
    // assert(this.lst_token_id.value.native === axferTxn.xferAsset.id, 'LST token not set')
    btoi
    frame_dig -2
    gtxns XferAsset
    ==
    assert // LST token not set
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:177-180
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    frame_dig -2
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:177-180
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    ==
    bz configureLSTToken_bool_false@3
    frame_dig -2
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:179
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:177-180
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    ==
    bz configureLSTToken_bool_false@3
    intc_1 // 1

configureLSTToken_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:177-180
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:181
    // this.circulating_lst.value = circulating_lst
    frame_dig -1
    app_global_put
    retsub

configureLSTToken_bool_false@3:
    intc_0 // 0
    b configureLSTToken_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST() -> uint64:
getCirculatingLST:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:185
    // return this.circulating_lst.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits() -> uint64:
getTotalDeposits:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:189
    // return this.total_deposits.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount() -> uint64:
getAcceptedCollateralsCount:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // accepted_collaterals_count = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "accepted_collaterals_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:193
    // return this.accepted_collaterals_count.value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice(tokenId: uint64) -> uint64:
getOraclePrice:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:196
    // getOraclePrice(tokenId: uint64): uint64 {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:63
    // oracle_app = GlobalState<Application>()
    intc_0 // 0
    bytec 19 // "oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:198
    // const address = oracle.address
    dup
    app_params_get AppAddress
    bury 1
    assert // application exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:201-204
    // const result = abiCall(PriceOracleStub.prototype.getTokenPrice, {
    //   appId: contractAppId,
    //   args: [new UintN64(tokenId)],
    // }).returnValue
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:203
    // args: [new UintN64(tokenId)],
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:201-204
    // const result = abiCall(PriceOracleStub.prototype.getTokenPrice, {
    //   appId: contractAppId,
    //   args: [new UintN64(tokenId)],
    // }).returnValue
    pushbytes 0xac13e004 // method "getTokenPrice(uint64)(uint64,uint64,uint64)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    pushint 12 // 12
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:206
    // return result.price.native
    extract_uint64
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal(collateralTokenId: bytes, amount: uint64) -> void:
updateCollateralTotal:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:219
    // private updateCollateralTotal(collateralTokenId: UintN64, amount: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:66
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 8 // "accepted_collaterals"
    frame_dig -2
    concat
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:221
    // const collateral = this.accepted_collaterals(key).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:223
    // if (collateral.assetId.native === collateralTokenId.native) {
    dup
    extract 0 8 // on error: Index access is out of bounds
    swap
    intc_0 // 0
    extract_uint64
    frame_dig -2
    btoi
    ==
    bz updateCollateralTotal_after_if_else@2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:224
    // const newTotal: uint64 = collateral.totalCollateral.native + amount
    frame_dig 1
    dup
    pushint 16 // 16
    extract_uint64
    frame_dig -1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:227
    // baseAssetId: collateral.baseAssetId,
    swap
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:228
    // totalCollateral: new UintN64(newTotal),
    swap
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:225-229
    // this.accepted_collaterals(key).value = new AcceptedCollateral({
    //   assetId: collateral.assetId,
    //   baseAssetId: collateral.baseAssetId,
    //   totalCollateral: new UintN64(newTotal),
    // }).copy()
    frame_dig 2
    uncover 2
    concat
    swap
    concat
    frame_dig 0
    swap
    box_put

updateCollateralTotal_after_if_else@2:
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType(collateralTokenId: bytes, mbrTxn: uint64) -> void:
addNewCollateralType:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:233-234
    // @abimethod({ allowActions: 'NoOp' })
    // addNewCollateralType(collateralTokenId: UintN64, mbrTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:235
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:236
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:236
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:237
    // assert(collateralTokenId.native !== baseToken.id)
    frame_dig -2
    btoi
    dup
    uncover 2
    !=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:66
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 8 // "accepted_collaterals"
    frame_dig -2
    concat
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:211
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:238
    // assert(!this.collateralExists(collateralTokenId))
    !
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:239-242
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 101000,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:239-242
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 101000,
    // })
    ==
    bz addNewCollateralType_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:241
    // amount: 101000,
    pushint 101000 // 101000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:239-242
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 101000,
    // })
    ==
    bz addNewCollateralType_bool_false@3
    intc_1 // 1

addNewCollateralType_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:239-242
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: 101000,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:244-248
    // const newAcceptedCollateral: AcceptedCollateral = new AcceptedCollateral({
    //   assetId: collateralTokenId,
    //   baseAssetId: this.base_token_id.value,
    //   totalCollateral: new UintN64(0),
    // })
    frame_dig -2
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:247
    // totalCollateral: new UintN64(0),
    pushbytes 0x0000000000000000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:244-248
    // const newAcceptedCollateral: AcceptedCollateral = new AcceptedCollateral({
    //   assetId: collateralTokenId,
    //   baseAssetId: this.base_token_id.value,
    //   totalCollateral: new UintN64(0),
    // })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:250
    // this.accepted_collaterals(key).value = newAcceptedCollateral.copy()
    frame_dig 1
    dup
    uncover 2
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // accepted_collaterals_count = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "accepted_collaterals_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:251
    // this.accepted_collaterals_count.value = this.accepted_collaterals_count.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:73
    // accepted_collaterals_count = GlobalState<uint64>()
    bytec 11 // "accepted_collaterals_count"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:251
    // this.accepted_collaterals_count.value = this.accepted_collaterals_count.value + 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:252-260
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:254
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:255
    // assetReceiver: Global.currentApplicationAddress,
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:257
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig 0
    itxn_field XferAsset
    itxn_field AssetReceiver
    itxn_field Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:252-259
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:258
    // fee: 1000,
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:252-260
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:77
    // last_added_collateral = GlobalState<UintN64>()
    pushbytes "last_added_collateral"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:261
    // this.last_added_collateral.value = collateralTokenId
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:211
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:263
    // assert(this.collateralExists(collateralTokenId), 'unsupported collateral')
    assert // unsupported collateral
    retsub

addNewCollateralType_bool_false@3:
    intc_0 // 0
    b addNewCollateralType_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositASA(assetTransferTxn: uint64, amount: uint64, mbrTxn: uint64) -> void:
depositASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:302-303
    // @abimethod({ allowActions: 'NoOp' })
    // depositASA(assetTransferTxn: gtxn.AssetTransferTxn, amount: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 3 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:304
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:305-309
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    frame_dig -3
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:306
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:305-309
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    ==
    bz depositASA_bool_false@4
    frame_dig -3
    gtxns XferAsset
    frame_dig 0
    ==
    bz depositASA_bool_false@4
    frame_dig -3
    gtxns AssetAmount
    frame_dig -2
    ==
    bz depositASA_bool_false@4
    intc_1 // 1

depositASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:305-309
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:310-312
    // assertMatch(mbrTxn, {
    //   amount: 1000,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:311
    // amount: 1000,
    intc 4 // 1000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:310-312
    // assertMatch(mbrTxn, {
    //   amount: 1000,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    bury 1
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:319
    // if (this.total_deposits.value === 0) {
    bnz depositASA_else_body@7
    frame_dig -2

depositASA_after_if_else@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:324-331
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:326
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:38
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:327
    // xferAsset: this.lst_token_id.value.native,
    btoi
    dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:324-330
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: 1000,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:329
    // fee: 1000,
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:324-331
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:333
    // this.circulating_lst.value += lstDue
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:333
    // this.circulating_lst.value += lstDue
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:334
    // this.total_deposits.value += amount
    frame_dig -2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    bytec 5 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:334
    // this.total_deposits.value += amount
    swap
    app_global_put
    retsub

depositASA_else_body@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:267
    // const [highBits1, lowBits1] = mulw(this.circulating_lst.value, 10000)
    intc_3 // 10000
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:269
    // const lstRatio = divw(highBits1, lowBits1, this.total_deposits.value)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:271
    // const [highBits2, lowBits2] = mulw(lstRatio, amount)
    frame_dig -2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:272
    // return divw(highBits2, lowBits2, 10000)
    intc_3 // 10000
    divw
    b depositASA_after_if_else@8

depositASA_bool_false@4:
    intc_0 // 0
    b depositASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit(assetTransferTxn: uint64, amount: uint64, lstAppId: uint64, mbrTxn: uint64) -> void:
withdrawDeposit:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:337-343
    // @abimethod({ allowActions: 'NoOp' })
    // withdrawDeposit(
    //   assetTransferTxn: gtxn.AssetTransferTxn,
    //   amount: uint64,
    //   lstAppId: uint64,
    //   mbrTxn: gtxn.PaymentTxn,
    // ): void {
    proto 4 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:38
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:344
    // const lstAsset = Asset(this.lst_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:345-349
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    frame_dig -4
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:346
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:345-349
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    ==
    bz withdrawDeposit_bool_false@4
    frame_dig -4
    gtxns XferAsset
    frame_dig 0
    ==
    bz withdrawDeposit_bool_false@4
    frame_dig -4
    gtxns AssetAmount
    frame_dig -3
    ==
    bz withdrawDeposit_bool_false@4
    intc_1 // 1

withdrawDeposit_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:345-349
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:351-353
    // assertMatch(mbrTxn, {
    //   amount: 3000,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:352
    // amount: 3000,
    pushint 3000 // 3000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:351-353
    // assertMatch(mbrTxn, {
    //   amount: 3000,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:357
    // if (lstAppId === Global.currentApplicationId.id) {
    frame_dig -2
    global CurrentApplicationID
    ==
    bz withdrawDeposit_else_body@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:298
    // const [hi, lo] = mulw(totalDepositsExternal, amount)
    frame_dig -3
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:299
    // return divw(hi, lo, circulatingExternalLST)
    uncover 2
    divw

withdrawDeposit_after_if_else@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:363
    // assert(op.AssetHolding.assetBalance(Global.currentApplicationAddress, this.base_token_id.value.native)[0] >= asaDue)
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:363
    // assert(op.AssetHolding.assetBalance(Global.currentApplicationAddress, this.base_token_id.value.native)[0] >= asaDue)
    btoi
    asset_holding_get AssetBalance
    pop
    dig 1
    >=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:364-371
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:366
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:367
    // xferAsset: this.base_token_id.value.native,
    btoi
    dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:364-370
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //     fee: 1000,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:369
    // fee: 1000,
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:364-371
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 6 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:373
    // this.circulating_lst.value -= amount // LST burned
    frame_dig -3
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:41
    // circulating_lst = GlobalState<uint64>()
    bytec 6 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:373
    // this.circulating_lst.value -= amount // LST burned
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:374
    // this.total_deposits.value -= asaDue // ASA returned
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    bytec 5 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:374
    // this.total_deposits.value -= asaDue // ASA returned
    swap
    app_global_put
    retsub

withdrawDeposit_else_body@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:278-281
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: 1000,
    // }).returnValue
    itxn_begin
    bytec 12 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:280
    // fee: 1000,
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:278-281
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: 1000,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:282-285
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: 1000,
    // }).returnValue
    itxn_begin
    bytec 13 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:284
    // fee: 1000,
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:282-285
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: 1000,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:288
    // const [hi, lo] = mulw(totalDepositsExternal, amount)
    frame_dig -3
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:289
    // return divw(hi, lo, circulatingExternalLST)
    uncover 2
    divw
    b withdrawDeposit_after_if_else@8

withdrawDeposit_bool_false@4:
    intc_0 // 0
    b withdrawDeposit_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow(assetTransferTxn: uint64, requestedLoanAmount: uint64, lstApp: uint64, collateralTokenId: bytes, arc19MetadataStr: bytes, mbrTxn: uint64) -> void:
borrow:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:377-385
    // @abimethod({ allowActions: 'NoOp' })
    // borrow(
    //   assetTransferTxn: gtxn.AssetTransferTxn,
    //   requestedLoanAmount: uint64,
    //   lstApp: uint64,
    //   collateralTokenId: UintN64,
    //   arc19MetadataStr: bytes,
    //   mbrTxn: gtxn.PaymentTxn,
    // ): void {
    proto 6 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:387
    // const hasLoan = this.loan_record(op.Txn.sender).exists
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:387
    // const hasLoan = this.loan_record(op.Txn.sender).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:388-390
    // assertMatch(mbrTxn, {
    //   amount: 4000,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:389
    // amount: 4000,
    pushint 4000 // 4000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:388-390
    // assertMatch(mbrTxn, {
    //   amount: 4000,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:393-396
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   // user must transfer LST collateral in this txn…
    // })
    frame_dig -6
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:394
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:393-396
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   // user must transfer LST collateral in this txn…
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:398
    // const collateralDeposit = assetTransferTxn.assetAmount
    frame_dig -6
    gtxns AssetAmount
    dup
    cover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:66
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 8 // "accepted_collaterals"
    frame_dig -3
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:216
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:402
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, { appId: lstApp }).returnValue
    itxn_begin
    bytec 12 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -4
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:403
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, { appId: lstApp }).returnValue
    itxn_begin
    bytec 13 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -4
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:406
    // const [hC, lC] = mulw(totalDepositsExternal, collateralDeposit)
    uncover 3
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:407
    // const underlyingCollateral: uint64 = divw(hC, lC, circulatingExternalLST)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:410
    // const oraclePrice: uint64 = this.getOraclePrice(acceptedCollateral.baseAssetId.native)
    swap
    pushint 8 // 8
    extract_uint64
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:411
    // const [hU, lU] = mulw(underlyingCollateral, oraclePrice)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:412
    // const collateralUSD: uint64 = divw(hU, lU, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:50
    // ltv_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 15 // "ltv_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:414
    // const maxBorrowUSD: uint64 = (collateralUSD * this.ltv_bps.value) / 10000
    *
    intc_3 // 10000
    /
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:59
    // origination_fee_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 17 // "origination_fee_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:417
    // const fee: uint64 = (requestedLoanAmount * this.origination_fee_bps.value) / 10000
    frame_dig -5
    *
    intc_3 // 10000
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:418
    // const disbursement: uint64 = requestedLoanAmount - fee
    frame_dig -5
    dig 1
    -
    dup
    cover 2
    cover 4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:75
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:419
    // this.fee_pool.value += fee
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:75
    // fee_pool = GlobalState<uint64>()
    bytec 9 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:419
    // this.fee_pool.value += fee
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:422
    // const [decimals, decExists] = op.AssetParams.assetDecimals(this.base_token_id.value.native)
    btoi
    asset_params_get AssetDecimals
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:423
    // const assetScale: uint64 = 10 ** decimals
    pushint 10 // 10
    swap
    exp
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:424
    // const [aH, aL] = mulw(disbursement, assetScale)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:425
    // const dividerScalar: uint64 = 2 ** 32
    intc 5 // 4294967296
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:426
    // const interim: uint64 = divw(aH, aL, dividerScalar)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:425
    // const dividerScalar: uint64 = 2 ** 32
    intc 5 // 4294967296
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:427
    // const scaledDown: uint64 = interim / dividerScalar
    /
    cover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:430
    // if (hasLoan) {
    bz borrow_else_body@4
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:432
    // let old = this.getLoanRecord(op.Txn.sender)
    txn Sender
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:433
    // old = this.accrueInterest(old)
    callsub accrueInterest
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:434
    // this.loan_record(op.Txn.sender).value = old.copy()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:434
    // this.loan_record(op.Txn.sender).value = old.copy()
    dig 1
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:436
    // const totalRequested: uint64 = old.scaledDownDisbursement.native + requestedLoanAmount
    dup
    pushint 56 // 56
    extract_uint64
    dup
    frame_dig -5
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:437
    // assert(totalRequested <= maxBorrowUSD, 'exceeds LTV limit with existing debt')
    uncover 3
    <=
    assert // exceeds LTV limit with existing debt
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:440
    // const totalCollateral: uint64 = old.collateralAmount.native + collateralDeposit
    dig 1
    pushint 40 // 40
    extract_uint64
    frame_dig 0
    dup
    cover 4
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:442
    // const newDebt: uint64 = oldDebt + disbursement
    swap
    frame_dig 1
    dup
    cover 2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:443
    // const newTotalDisb: uint64 = old.disbursement.native + disbursement
    dig 3
    pushint 48 // 48
    extract_uint64
    uncover 2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:449
    // old.collateralTokenId,
    dig 3
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:450
    // op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:453
    // old.loanRecordASAId.native,
    dig 5
    extract 72 8 // on error: Index access is out of bounds
    dig 6
    pushint 72 // 72
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:446-454
    // this.updateLoanRecord(
    //   newDebt,
    //   newTotalDisb,
    //   old.collateralTokenId,
    //   op.Txn.sender,
    //   totalCollateral,
    //   arc19MetadataStr,
    //   old.loanRecordASAId.native,
    // )
    dig 5
    dig 5
    dig 5
    uncover 5
    dig 9
    frame_dig -2
    uncover 6
    callsub updateLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:457
    // borrowerAddress: old.borrowerAddress,
    dig 5
    extract 0 32 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:459
    // collateralAmount: new UintN64(totalCollateral),
    uncover 5
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:460
    // disbursement: new UintN64(newTotalDisb),
    uncover 4
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:461
    // scaledDownDisbursement: new UintN64(newDebt),
    uncover 5
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:462
    // borrowedTokenId: old.borrowedTokenId,
    uncover 6
    extract 64 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:464
    // lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:456-465
    // this.loan_record(op.Txn.sender).value = new LoanRecord({
    //   borrowerAddress: old.borrowerAddress,
    //   collateralTokenId: old.collateralTokenId,
    //   collateralAmount: new UintN64(totalCollateral),
    //   disbursement: new UintN64(newTotalDisb),
    //   scaledDownDisbursement: new UintN64(newDebt),
    //   borrowedTokenId: old.borrowedTokenId,
    //   loanRecordASAId: old.loanRecordASAId,
    //   lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    // }).copy()
    uncover 5
    uncover 7
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:456
    // this.loan_record(op.Txn.sender).value = new LoanRecord({
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:456-465
    // this.loan_record(op.Txn.sender).value = new LoanRecord({
    //   borrowerAddress: old.borrowerAddress,
    //   collateralTokenId: old.collateralTokenId,
    //   collateralAmount: new UintN64(totalCollateral),
    //   disbursement: new UintN64(newTotalDisb),
    //   scaledDownDisbursement: new UintN64(newDebt),
    //   borrowedTokenId: old.borrowedTokenId,
    //   loanRecordASAId: old.loanRecordASAId,
    //   lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    // }).copy()
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:466
    // this.active_loan_records.value = this.active_loan_records.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:466
    // this.active_loan_records.value = this.active_loan_records.value + 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:467
    // this.updateCollateralTotal(collateralTokenId, collateralDeposit)
    frame_dig -3
    swap
    callsub updateCollateralTotal

borrow_after_if_else@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:482
    // if (this.base_token_id.value.native === 0) {
    btoi
    bnz borrow_else_body@8
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:483-489
    // itxn
    //   .payment({
    //     receiver: op.Txn.sender,
    //     amount: scaledDown,
    //     fee: 1000, // Set a small fee for the payment transaction
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:485
    // receiver: op.Txn.sender,
    txn Sender
    frame_dig 2
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:483-488
    // itxn
    //   .payment({
    //     receiver: op.Txn.sender,
    //     amount: scaledDown,
    //     fee: 1000, // Set a small fee for the payment transaction
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:487
    // fee: 1000, // Set a small fee for the payment transaction
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:483-489
    // itxn
    //   .payment({
    //     receiver: op.Txn.sender,
    //     amount: scaledDown,
    //     fee: 1000, // Set a small fee for the payment transaction
    //   })
    //   .submit()
    itxn_submit
    retsub

borrow_else_body@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491-498
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: scaledDown,
    //     fee: 1000, // Set a small fee for the asset transfer transaction
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:493
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:494
    // xferAsset: this.base_token_id.value.native,
    btoi
    frame_dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491-497
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: scaledDown,
    //     fee: 1000, // Set a small fee for the asset transfer transaction
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:496
    // fee: 1000, // Set a small fee for the asset transfer transaction
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:491-498
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: scaledDown,
    //     fee: 1000, // Set a small fee for the asset transfer transaction
    //   })
    //   .submit()
    itxn_submit
    retsub

borrow_else_body@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:470
    // assert(requestedLoanAmount <= maxBorrowUSD, 'exceeds LTV limit')
    frame_dig -5
    >=
    assert // exceeds LTV limit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:475
    // op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:543-565
    // const asset = itxn
    //   .assetConfig({
    //     assetName: 'r' + String(collateralTokenId.bytes) + 'b' + String(this.base_token_id.value.bytes),
    //     url:
    //       String(borrowerAddress.bytes) +
    //       ':' +
    //       String(collateralTokenId.bytes) +
    //       ':' +
    //       String(new UintN64(scaledDownDisbursement).bytes) +
    //       ':' +
    //       String(new UintN64(Global.latestTimestamp).bytes),
    //     manager: Global.currentApplicationAddress,
    //     decimals: 0,
    //     total: disbursement,
    //     sender: Global.currentApplicationAddress,
    //     unitName: 'r' + String(collateralTokenId.bytes) + String(this.base_token_id.value.bytes),
    //     reserve: arc19MetadataStr,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     defaultFrozen: false,
    //     fee: 1000, // Set a small fee for the asset config transaction
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:545
    // assetName: 'r' + String(collateralTokenId.bytes) + 'b' + String(this.base_token_id.value.bytes),
    pushbytes "r"
    frame_dig -3
    concat
    dup
    pushbytes "b"
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:545
    // assetName: 'r' + String(collateralTokenId.bytes) + 'b' + String(this.base_token_id.value.bytes),
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:547-548
    // String(borrowerAddress.bytes) +
    // ':' +
    dig 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:548
    // ':' +
    bytec 14 // ":"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:547-548
    // String(borrowerAddress.bytes) +
    // ':' +
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:547-549
    // String(borrowerAddress.bytes) +
    // ':' +
    // String(collateralTokenId.bytes) +
    frame_dig -3
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:550
    // ':' +
    bytec 14 // ":"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:547-550
    // String(borrowerAddress.bytes) +
    // ':' +
    // String(collateralTokenId.bytes) +
    // ':' +
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:551
    // String(new UintN64(scaledDownDisbursement).bytes) +
    frame_dig 2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:547-551
    // String(borrowerAddress.bytes) +
    // ':' +
    // String(collateralTokenId.bytes) +
    // ':' +
    // String(new UintN64(scaledDownDisbursement).bytes) +
    swap
    dig 1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:552
    // ':' +
    bytec 14 // ":"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:547-552
    // String(borrowerAddress.bytes) +
    // ':' +
    // String(collateralTokenId.bytes) +
    // ':' +
    // String(new UintN64(scaledDownDisbursement).bytes) +
    // ':' +
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:553
    // String(new UintN64(Global.latestTimestamp).bytes),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:547-553
    // String(borrowerAddress.bytes) +
    // ':' +
    // String(collateralTokenId.bytes) +
    // ':' +
    // String(new UintN64(scaledDownDisbursement).bytes) +
    // ':' +
    // String(new UintN64(Global.latestTimestamp).bytes),
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:554
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:557
    // sender: Global.currentApplicationAddress,
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:558
    // unitName: 'r' + String(collateralTokenId.bytes) + String(this.base_token_id.value.bytes),
    uncover 6
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:560
    // freeze: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:561
    // clawback: Global.currentApplicationAddress,
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:562
    // defaultFrozen: false,
    intc_0 // 0
    itxn_field ConfigAssetDefaultFrozen
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    frame_dig -2
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetUnitName
    itxn_field Sender
    frame_dig 1
    dup
    itxn_field ConfigAssetTotal
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:555
    // decimals: 0,
    intc_0 // 0
    itxn_field ConfigAssetDecimals
    swap
    itxn_field ConfigAssetManager
    swap
    itxn_field ConfigAssetURL
    uncover 2
    itxn_field ConfigAssetName
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:543-564
    // const asset = itxn
    //   .assetConfig({
    //     assetName: 'r' + String(collateralTokenId.bytes) + 'b' + String(this.base_token_id.value.bytes),
    //     url:
    //       String(borrowerAddress.bytes) +
    //       ':' +
    //       String(collateralTokenId.bytes) +
    //       ':' +
    //       String(new UintN64(scaledDownDisbursement).bytes) +
    //       ':' +
    //       String(new UintN64(Global.latestTimestamp).bytes),
    //     manager: Global.currentApplicationAddress,
    //     decimals: 0,
    //     total: disbursement,
    //     sender: Global.currentApplicationAddress,
    //     unitName: 'r' + String(collateralTokenId.bytes) + String(this.base_token_id.value.bytes),
    //     reserve: arc19MetadataStr,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     defaultFrozen: false,
    //     fee: 1000, // Set a small fee for the asset config transaction
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:563
    // fee: 1000, // Set a small fee for the asset config transaction
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:543-565
    // const asset = itxn
    //   .assetConfig({
    //     assetName: 'r' + String(collateralTokenId.bytes) + 'b' + String(this.base_token_id.value.bytes),
    //     url:
    //       String(borrowerAddress.bytes) +
    //       ':' +
    //       String(collateralTokenId.bytes) +
    //       ':' +
    //       String(new UintN64(scaledDownDisbursement).bytes) +
    //       ':' +
    //       String(new UintN64(Global.latestTimestamp).bytes),
    //     manager: Global.currentApplicationAddress,
    //     decimals: 0,
    //     total: disbursement,
    //     sender: Global.currentApplicationAddress,
    //     unitName: 'r' + String(collateralTokenId.bytes) + String(this.base_token_id.value.bytes),
    //     reserve: arc19MetadataStr,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     defaultFrozen: false,
    //     fee: 1000, // Set a small fee for the asset config transaction
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:570
    // collateralAmount: new UintN64(collateralAmount),
    frame_dig 0
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:571
    // disbursement: new UintN64(disbursement),
    uncover 2
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:574
    // loanRecordASAId: new UintN64(asset.createdAsset.id),
    uncover 3
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:575
    // lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:567-576
    // const loanRecord: LoanRecord = new LoanRecord({
    //   borrowerAddress: new Address(borrowerAddress.bytes),
    //   collateralTokenId: collateralTokenId,
    //   collateralAmount: new UintN64(collateralAmount),
    //   disbursement: new UintN64(disbursement),
    //   scaledDownDisbursement: new UintN64(scaledDownDisbursement),
    //   borrowedTokenId: this.base_token_id.value,
    //   loanRecordASAId: new UintN64(asset.createdAsset.id),
    //   lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    // })
    dig 6
    frame_dig -3
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    uncover 2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:577
    // this.loan_record(borrowerAddress).value = loanRecord.copy()
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:578
    // this.active_loan_records.value = this.active_loan_records.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:578
    // this.active_loan_records.value = this.active_loan_records.value + 1
    swap
    app_global_put
    b borrow_after_if_else@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateLoanRecord(scaledDownDisbursement: uint64, disbursement: uint64, collateralTokenId: bytes, borrowerAddress: bytes, collateralAmount: uint64, arc19MetadataStr: bytes, assetId: uint64) -> void:
updateLoanRecord:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:502-510
    // private updateLoanRecord(
    //   scaledDownDisbursement: uint64,
    //   disbursement: uint64,
    //   collateralTokenId: UintN64,
    //   borrowerAddress: Account,
    //   collateralAmount: uint64,
    //   arc19MetadataStr: bytes,
    //   assetId: uint64,
    // ): void {
    proto 7 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:511-519
    // const asset = itxn
    //   .assetConfig({
    //     manager: Global.currentApplicationAddress,
    //     sender: Global.currentApplicationAddress,
    //     reserve: arc19MetadataStr,
    //     configAsset: assetId,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:513
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:514
    // sender: Global.currentApplicationAddress,
    dup
    frame_dig -1
    itxn_field ConfigAsset
    frame_dig -2
    itxn_field ConfigAssetReserve
    itxn_field Sender
    itxn_field ConfigAssetManager
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:511-518
    // const asset = itxn
    //   .assetConfig({
    //     manager: Global.currentApplicationAddress,
    //     sender: Global.currentApplicationAddress,
    //     reserve: arc19MetadataStr,
    //     configAsset: assetId,
    //     fee: 1000,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:517
    // fee: 1000,
    intc 4 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:511-519
    // const asset = itxn
    //   .assetConfig({
    //     manager: Global.currentApplicationAddress,
    //     sender: Global.currentApplicationAddress,
    //     reserve: arc19MetadataStr,
    //     configAsset: assetId,
    //     fee: 1000,
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:524
    // collateralAmount: new UintN64(collateralAmount),
    frame_dig -3
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:525
    // disbursement: new UintN64(disbursement),
    frame_dig -6
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:526
    // scaledDownDisbursement: new UintN64(scaledDownDisbursement),
    frame_dig -7
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:528
    // loanRecordASAId: new UintN64(asset.createdAsset.id),
    uncover 4
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:529
    // lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:521-530
    // const loanRecord: LoanRecord = new LoanRecord({
    //   borrowerAddress: new Address(borrowerAddress.bytes),
    //   collateralTokenId: collateralTokenId,
    //   collateralAmount: new UintN64(collateralAmount),
    //   disbursement: new UintN64(disbursement),
    //   scaledDownDisbursement: new UintN64(scaledDownDisbursement),
    //   borrowedTokenId: this.base_token_id.value,
    //   loanRecordASAId: new UintN64(asset.createdAsset.id),
    //   lastAccrualTimestamp: new UintN64(Global.latestTimestamp),
    // })
    frame_dig -4
    frame_dig -5
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    frame_dig -4
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:531
    // this.loan_record(borrowerAddress).value = loanRecord.copy()
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:532
    // this.active_loan_records.value = this.active_loan_records.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:532
    // this.active_loan_records.value = this.active_loan_records.value + 1
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.claimLoanRecordASA(debtor: bytes, assetId: uint64) -> void:
claimLoanRecordASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:581-582
    // @abimethod({ allowActions: 'NoOp' })
    // claimLoanRecordASA(debtor: Account, assetId: Asset): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:583
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    dup
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:584
    // const assetExists = Global.currentApplicationAddress.isOptedIn(assetId)
    global CurrentApplicationAddress
    frame_dig -1
    asset_holding_get AssetBalance
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:585
    // assert(assetExists, 'Loan record ASA does not exist')
    assert // Loan record ASA does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:586
    // const loanRecord = this.loan_record(debtor).value.copy()
    box_get
    bury 1
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:587-593
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: assetId,
    //     assetAmount: 1,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:591
    // assetAmount: 1,
    intc_1 // 1
    itxn_field AssetAmount
    frame_dig -1
    itxn_field XferAsset
    frame_dig -2
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:587-592
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: assetId,
    //     assetAmount: 1,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:587-593
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: assetId,
    //     assetAmount: 1,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:596-603
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: assetId,
    //     assetAmount: 0,
    //     assetCloseTo: debtor,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:598
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    frame_dig -2
    itxn_field AssetCloseTo
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:600
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig -1
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:596-602
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: assetId,
    //     assetAmount: 0,
    //     assetCloseTo: debtor,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:596-603
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: assetId,
    //     assetAmount: 0,
    //     assetCloseTo: debtor,
    //   })
    //   .submit()
    itxn_submit
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest(record: bytes) -> bytes, bytes:
accrueInterest:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:606
    // private accrueInterest(record: LoanRecord): LoanRecord {
    proto 1 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:607
    // const now = Global.latestTimestamp
    global LatestTimestamp
    dup
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:608
    // const last = record.lastAccrualTimestamp.native
    frame_dig -1
    pushint 80 // 80
    extract_uint64
    dup
    cover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:610
    // if (now <= last) return record
    <=
    bz accrueInterest_after_if_else@2
    frame_dig -1
    dup
    uncover 3
    uncover 3
    retsub

accrueInterest_after_if_else@2:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:612
    // const deltaT: uint64 = now - last
    frame_dig 0
    dup
    frame_dig 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:613
    // const principal: uint64 = record.scaledDownDisbursement.native
    frame_dig -1
    pushint 56 // 56
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:56
    // interest_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 16 // "interest_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:617
    // const [hi1, lo1] = mulw(principal, rateBps)
    dig 1
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:619
    // const rateScaled: uint64 = divw(hi1, lo1, 10000)
    intc_3 // 10000
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:621
    // const [hi2, lo2] = mulw(rateScaled, deltaT)
    uncover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:28
    // const SECONDS_PER_YEAR: uint64 = 365 * 24 * 60 * 60
    pushint 31536000 // 31536000
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:623
    // const interest: uint64 = divw(hi2, lo2, SECONDS_PER_YEAR)
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:61
    // protocol_interest_fee_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 18 // "protocol_interest_fee_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:626
    // const depositorBps: uint64 = 10000 - protoBps
    intc_3 // 10000
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:629
    // const [hiDep, loDep] = mulw(interest, depositorBps)
    dig 1
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:630
    // const depositorInterest: uint64 = divw(hiDep, loDep, 10000)
    intc_3 // 10000
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:633
    // const protocolInterest: uint64 = interest - depositorInterest
    dup2
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec 5 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:637
    // this.total_deposits.value += depositorInterest
    uncover 2
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:44
    // total_deposits = GlobalState<uint64>()
    bytec 5 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:637
    // this.total_deposits.value += depositorInterest
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:75
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:639
    // this.fee_pool.value += protocolInterest
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:75
    // fee_pool = GlobalState<uint64>()
    bytec 9 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:639
    // this.fee_pool.value += protocolInterest
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:643
    // const newPrincipal: uint64 = principal + interest
    +
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:647
    // borrowerAddress: record.borrowerAddress,
    frame_dig -1
    extract 0 32 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:648
    // collateralTokenId: record.collateralTokenId,
    frame_dig -1
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:649
    // collateralAmount: record.collateralAmount,
    frame_dig -1
    extract 40 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:650
    // disbursement: record.disbursement, // original
    frame_dig -1
    extract 48 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:651
    // scaledDownDisbursement: new UintN64(newPrincipal),
    uncover 4
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:652
    // borrowedTokenId: record.borrowedTokenId,
    frame_dig -1
    extract 64 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:653
    // loanRecordASAId: record.loanRecordASAId,
    frame_dig -1
    extract 72 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:654
    // lastAccrualTimestamp: new UintN64(now),
    uncover 7
    itob
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:646-655
    // return new LoanRecord({
    //   borrowerAddress: record.borrowerAddress,
    //   collateralTokenId: record.collateralTokenId,
    //   collateralAmount: record.collateralAmount,
    //   disbursement: record.disbursement, // original
    //   scaledDownDisbursement: new UintN64(newPrincipal),
    //   borrowedTokenId: record.borrowedTokenId,
    //   loanRecordASAId: record.loanRecordASAId,
    //   lastAccrualTimestamp: new UintN64(now),
    // })
    uncover 7
    uncover 7
    concat
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    frame_dig -1
    uncover 3
    uncover 3
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord(borrowerAddress: bytes) -> bytes:
getLoanRecord:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:658
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:659
    // return this.loan_record(borrowerAddress).value
    box_get
    assert // Box must have value
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecordASAId(borrowerAddress: bytes) -> uint64:
getLoanRecordASAId:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:662
    // getLoanRecordASAId(borrowerAddress: Account): uint64 {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:663
    // return this.loan_record(borrowerAddress).value.loanRecordASAId.native
    box_get
    assert // Box must have value
    pushint 72 // 72
    extract_uint64
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanASA(assetTransferTxn: uint64, amount: uint64, arc19MetaDataStr: bytes) -> void:
repayLoanASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:666-667
    // @abimethod({ allowActions: 'NoOp' })
    // repayLoanASA(assetTransferTxn: gtxn.AssetTransferTxn, amount: uint64, arc19MetaDataStr: bytes): void {
    proto 3 0
    intc_0 // 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:668
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:669-673
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    frame_dig -3
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:670
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:669-673
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    ==
    bz repayLoanASA_bool_false@4
    frame_dig -3
    gtxns XferAsset
    frame_dig 2
    ==
    bz repayLoanASA_bool_false@4
    frame_dig -3
    gtxns AssetAmount
    frame_dig -2
    ==
    bz repayLoanASA_bool_false@4
    intc_1 // 1

repayLoanASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:669-673
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:675
    // let loanRecord = this.getLoanRecord(op.Txn.sender)
    txn Sender
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:676
    // loanRecord = this.accrueInterest(loanRecord)
    callsub accrueInterest
    pop
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:677
    // this.loan_record(op.Txn.sender).value = loanRecord.copy()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:677
    // this.loan_record(op.Txn.sender).value = loanRecord.copy()
    dig 1
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:679
    // const loanRecordASAId = this.getLoanRecordASAId(op.Txn.sender)
    txn Sender
    callsub getLoanRecordASAId
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:681
    // const currentdebt: UintN64 = loanRecord.scaledDownDisbursement
    pushint 56 // 56
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:682
    // assert(amount <= currentdebt.native)
    extract_uint64
    frame_dig -2
    dig 1
    <=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:683
    // const remainingDebt: uint64 = currentdebt.native - amount
    frame_dig -2
    -
    dup
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:685
    // if (remainingDebt === 0) {
    bnz repayLoanASA_else_body@9
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:686-691
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:689
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field Sender
    itxn_field ConfigAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:686-690
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:686-691
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:695
    // this.loan_record(op.Txn.sender).delete()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:695
    // this.loan_record(op.Txn.sender).delete()
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:696
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:696
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:698-704
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:700
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:701
    // xferAsset: loanRecord.collateralTokenId.native,
    frame_dig 0
    dup
    pushint 32 // 32
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:702
    // assetAmount: loanRecord.collateralAmount.native,
    swap
    pushint 40 // 40
    extract_uint64
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:698-703
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:698-704
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    //   .submit()
    itxn_submit
    retsub

repayLoanASA_else_body@9:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:709
    // loanRecord.disbursement.native, // original disbursement (for metadata)
    frame_dig 0
    dup
    pushint 48 // 48
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:710
    // loanRecord.collateralTokenId, // collateral type
    dig 1
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:711
    // op.Txn.sender, // borrower
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:712
    // loanRecord.collateralAmount.native, // collateral locked
    uncover 3
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:707-715
    // this.updateLoanRecord(
    //   remainingDebt, // scaledDownDisbursement
    //   loanRecord.disbursement.native, // original disbursement (for metadata)
    //   loanRecord.collateralTokenId, // collateral type
    //   op.Txn.sender, // borrower
    //   loanRecord.collateralAmount.native, // collateral locked
    //   arc19MetaDataStr, // arc19 metadata
    //   loanRecordASAId, // existing ASA ID to update
    // )
    frame_dig 1
    cover 4
    frame_dig -1
    uncover 6
    callsub updateLoanRecord
    retsub

repayLoanASA_bool_false@4:
    intc_0 // 0
    b repayLoanASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo(paymentTxn: uint64, amount: uint64, arc19MetaDataStr: bytes) -> void:
repayLoanAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:719-720
    // @abimethod({ allowActions: 'NoOp' })
    // repayLoanAlgo(paymentTxn: gtxn.PaymentTxn, amount: uint64, arc19MetaDataStr: bytes): void {
    proto 3 0
    intc_0 // 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    bury 1
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:722-725
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: amount,
    // })
    frame_dig -3
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:723
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:722-725
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: amount,
    // })
    ==
    bz repayLoanAlgo_bool_false@3
    frame_dig -3
    gtxns Amount
    frame_dig -2
    ==
    bz repayLoanAlgo_bool_false@3
    intc_1 // 1

repayLoanAlgo_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:722-725
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:727
    // let loanRecord = this.getLoanRecord(op.Txn.sender)
    txn Sender
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:728
    // loanRecord = this.accrueInterest(loanRecord)
    callsub accrueInterest
    pop
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:729
    // this.loan_record(op.Txn.sender).value = loanRecord.copy()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:729
    // this.loan_record(op.Txn.sender).value = loanRecord.copy()
    dig 1
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:731
    // const loanRecordASAId = this.getLoanRecordASAId(op.Txn.sender)
    txn Sender
    callsub getLoanRecordASAId
    swap
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:733
    // const currentdebt: UintN64 = loanRecord.scaledDownDisbursement
    pushint 56 // 56
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:734
    // assert(amount <= currentdebt.native)
    extract_uint64
    frame_dig -2
    dig 1
    <=
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:735
    // const remainingDebt: uint64 = currentdebt.native - amount
    frame_dig -2
    -
    dup
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:737
    // if (remainingDebt === 0) {
    bnz repayLoanAlgo_else_body@8
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:739-744
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:742
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field Sender
    itxn_field ConfigAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:739-743
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:739-744
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:748
    // this.loan_record(op.Txn.sender).delete()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:748
    // this.loan_record(op.Txn.sender).delete()
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:749
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:749
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:751-757
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:753
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:754
    // xferAsset: loanRecord.collateralTokenId.native,
    frame_dig 0
    dup
    pushint 32 // 32
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:755
    // assetAmount: loanRecord.collateralAmount.native,
    swap
    pushint 40 // 40
    extract_uint64
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:751-756
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:751-757
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: loanRecord.collateralTokenId.native,
    //     assetAmount: loanRecord.collateralAmount.native,
    //   })
    //   .submit()
    itxn_submit
    retsub

repayLoanAlgo_else_body@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:762
    // loanRecord.disbursement.native, // original disbursement (for metadata)
    frame_dig 0
    dup
    pushint 48 // 48
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:763
    // loanRecord.collateralTokenId, // collateral type
    dig 1
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:764
    // op.Txn.sender, // borrower
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:765
    // loanRecord.collateralAmount.native, // collateral locked
    uncover 3
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:760-768
    // this.updateLoanRecord(
    //   remainingDebt, // scaledDownDisbursement
    //   loanRecord.disbursement.native, // original disbursement (for metadata)
    //   loanRecord.collateralTokenId, // collateral type
    //   op.Txn.sender, // borrower
    //   loanRecord.collateralAmount.native, // collateral locked
    //   arc19MetaDataStr, // arc19 metadata
    //   loanRecordASAId, // existing ASA ID to update
    // )
    frame_dig 1
    cover 4
    frame_dig -1
    uncover 6
    callsub updateLoanRecord
    retsub

repayLoanAlgo_bool_false@3:
    intc_0 // 0
    b repayLoanAlgo_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawFees() -> void:
withdrawFees:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:774
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:774
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:775-781
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: this.fee_pool.value,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:47
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_3 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:778
    // xferAsset: this.base_token_id.value.native,
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:75
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:775-780
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: this.fee_pool.value,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:775-781
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: this.fee_pool.value,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:75
    // fee_pool = GlobalState<uint64>()
    bytec 9 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:782
    // this.fee_pool.value = 0
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest(debtor: bytes, arc19MetaDataStr: bytes) -> void:
accrueLoanInterest:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:785-786
    // @abimethod({ allowActions: 'NoOp' })
    // accrueLoanInterest(debtor: Account, arc19MetaDataStr: bytes): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:787
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    dup
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:788
    // const currentLoanRecord = this.loan_record(debtor).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:790
    // this.accrueInterest(currentLoanRecord)
    callsub accrueInterest
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:794
    // currentLoanRecord.scaledDownDisbursement.native,
    dup
    pushint 56 // 56
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:795
    // currentLoanRecord.disbursement.native,
    dig 1
    pushint 48 // 48
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:796
    // currentLoanRecord.collateralTokenId,
    dig 2
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:798
    // currentLoanRecord.collateralAmount.native,
    dig 3
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:800
    // currentLoanRecord.loanRecordASAId.native, // existing ASA ID to update
    dig 4
    pushint 72 // 72
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:793-801
    // this.updateLoanRecord(
    //   currentLoanRecord.scaledDownDisbursement.native,
    //   currentLoanRecord.disbursement.native,
    //   currentLoanRecord.collateralTokenId,
    //   debtor,
    //   currentLoanRecord.collateralAmount.native,
    //   arc19MetaDataStr,
    //   currentLoanRecord.loanRecordASAId.native, // existing ASA ID to update
    // )
    cover 4
    cover 4
    frame_dig -2
    uncover 5
    frame_dig -1
    uncover 6
    callsub updateLoanRecord
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:803
    // this.loan_record(debtor).value = currentLoanRecord.copy()
    box_put
    retsub


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutASA(buyer: bytes, debtor: bytes, axferTxn: uint64) -> void:
buyoutASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:806-807
    // @abimethod({ allowActions: 'NoOp' })
    // buyoutASA(buyer: Account, debtor: Account, axferTxn: gtxn.AssetTransferTxn): void {
    proto 3 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    frame_dig -2
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:808
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:809
    // const currentLoanRecord = this.loan_record(debtor).value.copy()
    dup
    box_get
    swap
    dup
    cover 2
    cover 3
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:810
    // this.loan_record(debtor).value = currentLoanRecord.copy()
    swap
    dig 1
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:812
    // const collateralAmount = currentLoanRecord.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:813
    // const debtAmount = currentLoanRecord.scaledDownDisbursement.native
    dup
    pushint 56 // 56
    extract_uint64
    dup
    cover 3
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:814
    // const collateralTokenId: UintN64 = new UintN64(currentLoanRecord.collateralTokenId.native)
    pushint 32 // 32
    extract_uint64
    itob
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:66
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 8 // "accepted_collaterals"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:216
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:817
    // assert(acceptedCollateral.totalCollateral.native >= collateralAmount, 'Collateral amount exceeds current total')
    dup
    pushint 16 // 16
    extract_uint64
    dup
    cover 4
    dig 2
    >=
    assert // Collateral amount exceeds current total
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:820
    // const oraclePrice: uint64 = this.getOraclePrice(acceptedCollateral.baseAssetId.native)
    pushint 8 // 8
    extract_uint64
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:821
    // const [hU, lU] = mulw(collateralAmount, oraclePrice)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:822
    // const collateralUSD: uint64 = divw(hU, lU, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:823
    // const CR: uint64 = collateralUSD / debtAmount
    dup
    uncover 2
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:53
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:824
    // assert(CR > this.liq_threshold_bps.value, 'loan is not eligible for buyout')
    dig 1
    <
    assert // loan is not eligible for buyout
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:826
    // const premiumRate: uint64 = (CR * 10000) / this.liq_threshold_bps.value - 10000 // in basis points
    intc_3 // 10000
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:53
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:826
    // const premiumRate: uint64 = (CR * 10000) / this.liq_threshold_bps.value - 10000 // in basis points
    /
    intc_3 // 10000
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:827
    // const buyoutPrice: uint64 = collateralUSD * (1 + premiumRate / 10000)
    intc_3 // 10000
    /
    intc_1 // 1
    +
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:829-833
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    frame_dig -1
    gtxns XferAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:830
    // xferAsset: Asset(this.base_token_id.value.native),
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:829-833
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    ==
    bz buyoutASA_bool_false@4
    frame_dig -1
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:831
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:829-833
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    ==
    bz buyoutASA_bool_false@4
    frame_dig -1
    gtxns AssetAmount
    frame_dig 7
    ==
    bz buyoutASA_bool_false@4
    intc_1 // 1

buyoutASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:829-833
    // assertMatch(axferTxn, {
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: buyoutPrice,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:838
    // const assetExists = Global.currentApplicationAddress.isOptedIn(Asset(currentLoanRecord.loanRecordASAId.native))
    global CurrentApplicationAddress
    frame_dig 2
    pushint 72 // 72
    extract_uint64
    dup
    frame_bury 0
    asset_holding_get AssetBalance
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:839
    // if (!assetExists) {
    bnz buyoutASA_after_if_else@8
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:840-847
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: currentLoanRecord.loanRecordASAId.native,
    //     assetSender: debtor,
    //     assetAmount: currentLoanRecord.scaledDownDisbursement.native,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:842
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    frame_dig 4
    itxn_field AssetAmount
    frame_dig -2
    itxn_field AssetSender
    frame_dig 0
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:840-846
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: currentLoanRecord.loanRecordASAId.native,
    //     assetSender: debtor,
    //     assetAmount: currentLoanRecord.scaledDownDisbursement.native,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:840-847
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: currentLoanRecord.loanRecordASAId.native,
    //     assetSender: debtor,
    //     assetAmount: currentLoanRecord.scaledDownDisbursement.native,
    //   })
    //   .submit()
    itxn_submit

buyoutASA_after_if_else@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:850-855
    // itxn
    //   .assetConfig({
    //     configAsset: currentLoanRecord.loanRecordASAId.native,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:853
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field Sender
    frame_dig 0
    itxn_field ConfigAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:850-854
    // itxn
    //   .assetConfig({
    //     configAsset: currentLoanRecord.loanRecordASAId.native,
    //     sender: Global.currentApplicationAddress,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:850-855
    // itxn
    //   .assetConfig({
    //     configAsset: currentLoanRecord.loanRecordASAId.native,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:858
    // this.loan_record(debtor).delete()
    frame_dig 1
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:859
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:859
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:862-868
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:865
    // xferAsset: collateralTokenId.native,
    frame_dig 5
    dup
    btoi
    frame_dig 3
    dup
    cover 2
    itxn_field AssetAmount
    itxn_field XferAsset
    frame_dig -3
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:862-867
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:862-868
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:870
    // const newTotal: uint64 = acceptedCollateral.totalCollateral.native - collateralAmount
    frame_dig 6
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:871
    // this.updateCollateralTotal(collateralTokenId, newTotal)
    callsub updateCollateralTotal
    retsub

buyoutASA_bool_false@4:
    intc_0 // 0
    b buyoutASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutAlgo(buyer: bytes, debtor: bytes, paymentTxn: uint64) -> void:
buyoutAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:874-875
    // @abimethod({ allowActions: 'NoOp' })
    // buyoutAlgo(buyer: Account, debtor: Account, paymentTxn: gtxn.PaymentTxn): void {
    proto 3 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    frame_dig -2
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:876
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:877
    // const currentLoanRecord = this.loan_record(debtor).value.copy()
    dup
    box_get
    swap
    dup
    cover 2
    cover 3
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:878
    // this.loan_record(debtor).value = currentLoanRecord.copy()
    swap
    dig 1
    box_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:880
    // const collateralAmount = currentLoanRecord.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:881
    // const debtAmount = currentLoanRecord.scaledDownDisbursement.native
    dup
    pushint 56 // 56
    extract_uint64
    dup
    cover 3
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:882
    // const collateralTokenId: UintN64 = new UintN64(currentLoanRecord.collateralTokenId.native)
    pushint 32 // 32
    extract_uint64
    itob
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:66
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 8 // "accepted_collaterals"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:216
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:885
    // assert(acceptedCollateral.totalCollateral.native >= collateralAmount, 'Collateral amount exceeds current total')
    dup
    pushint 16 // 16
    extract_uint64
    dup
    cover 4
    dig 2
    >=
    assert // Collateral amount exceeds current total
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:888
    // const oraclePrice: uint64 = this.getOraclePrice(acceptedCollateral.baseAssetId.native)
    pushint 8 // 8
    extract_uint64
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:889
    // const [hU, lU] = mulw(collateralAmount, oraclePrice)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:890
    // const collateralUSD: uint64 = divw(hU, lU, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:891
    // const CR: uint64 = collateralUSD / debtAmount
    dup
    uncover 2
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:53
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:892
    // assert(CR > this.liq_threshold_bps.value, 'loan is not eligible for buyout')
    dig 1
    <
    assert // loan is not eligible for buyout
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:894
    // const premiumRate: uint64 = (CR * 10000) / this.liq_threshold_bps.value - 10000 // in basis points
    intc_3 // 10000
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:53
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:894
    // const premiumRate: uint64 = (CR * 10000) / this.liq_threshold_bps.value - 10000 // in basis points
    /
    intc_3 // 10000
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:895
    // const buyoutPrice: uint64 = collateralUSD * (1 + premiumRate / 10000)
    intc_3 // 10000
    /
    intc_1 // 1
    +
    *
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:897-900
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: buyoutPrice,
    // })
    frame_dig -1
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:898
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:897-900
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: buyoutPrice,
    // })
    ==
    bz buyoutAlgo_bool_false@3
    frame_dig -1
    gtxns Amount
    frame_dig 7
    ==
    bz buyoutAlgo_bool_false@3
    intc_1 // 1

buyoutAlgo_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:897-900
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: buyoutPrice,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:905
    // const assetExists = Global.currentApplicationAddress.isOptedIn(Asset(currentLoanRecord.loanRecordASAId.native))
    global CurrentApplicationAddress
    frame_dig 2
    pushint 72 // 72
    extract_uint64
    dup
    frame_bury 0
    asset_holding_get AssetBalance
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:906
    // if (!assetExists) {
    bnz buyoutAlgo_after_if_else@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:907-914
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: currentLoanRecord.loanRecordASAId.native,
    //     assetSender: debtor,
    //     assetAmount: currentLoanRecord.scaledDownDisbursement.native,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:909
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    frame_dig 4
    itxn_field AssetAmount
    frame_dig -2
    itxn_field AssetSender
    frame_dig 0
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:907-913
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: currentLoanRecord.loanRecordASAId.native,
    //     assetSender: debtor,
    //     assetAmount: currentLoanRecord.scaledDownDisbursement.native,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:907-914
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: currentLoanRecord.loanRecordASAId.native,
    //     assetSender: debtor,
    //     assetAmount: currentLoanRecord.scaledDownDisbursement.native,
    //   })
    //   .submit()
    itxn_submit

buyoutAlgo_after_if_else@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:917-922
    // itxn
    //   .assetConfig({
    //     configAsset: currentLoanRecord.loanRecordASAId.native,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:920
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field Sender
    frame_dig 0
    itxn_field ConfigAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:917-921
    // itxn
    //   .assetConfig({
    //     configAsset: currentLoanRecord.loanRecordASAId.native,
    //     sender: Global.currentApplicationAddress,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:917-922
    // itxn
    //   .assetConfig({
    //     configAsset: currentLoanRecord.loanRecordASAId.native,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:925
    // this.loan_record(debtor).delete()
    frame_dig 1
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:926
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:926
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:929-935
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:932
    // xferAsset: collateralTokenId.native,
    frame_dig 5
    dup
    btoi
    frame_dig 3
    dup
    cover 2
    itxn_field AssetAmount
    itxn_field XferAsset
    frame_dig -3
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:929-934
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:929-935
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:937
    // const newTotal: uint64 = acceptedCollateral.totalCollateral.native - collateralAmount
    frame_dig 6
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:938
    // this.updateCollateralTotal(collateralTokenId, newTotal)
    callsub updateCollateralTotal
    retsub

buyoutAlgo_bool_false@3:
    intc_0 // 0
    b buyoutAlgo_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateASA(debtor: bytes, axferTxn: uint64) -> void:
liquidateASA:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:941-942
    // @abimethod({ allowActions: 'NoOp' })
    // liquidateASA(debtor: Account, axferTxn: gtxn.AssetTransferTxn): void {
    proto 2 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    frame_dig -2
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:943
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:945
    // const record = this.loan_record(debtor).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:946
    // const collateralAmount = record.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:947
    // const debtAmount = record.scaledDownDisbursement.native
    dup
    pushint 56 // 56
    extract_uint64
    dup
    cover 3
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:948
    // const collateralTokenId = record.collateralTokenId
    extract 32 8 // on error: Index access is out of bounds
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:66
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 8 // "accepted_collaterals"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:216
    // return this.accepted_collaterals(key).value.copy()
    box_get
    swap
    dup
    cover 2
    cover 4
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:951
    // const oraclePrice = this.getOraclePrice(acceptedCollateral.baseAssetId.native)
    pushint 8 // 8
    extract_uint64
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:952
    // const [h, l] = mulw(collateralAmount, oraclePrice)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:953
    // const collateralUSD = divw(h, l, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:955
    // const CR: uint64 = collateralUSD / debtAmount
    swap
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:53
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:956
    // assert(CR <= this.liq_threshold_bps.value, 'loan is not liquidatable')
    <=
    assert // loan is not liquidatable
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:959-963
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    frame_dig -1
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:960
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:959-963
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    ==
    bz liquidateASA_bool_false@4
    frame_dig -1
    gtxns XferAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:35
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:961
    // xferAsset: Asset(this.base_token_id.value.native),
    btoi
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:959-963
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    ==
    bz liquidateASA_bool_false@4
    frame_dig -1
    gtxns AssetAmount
    frame_dig 4
    ==
    bz liquidateASA_bool_false@4
    intc_1 // 1

liquidateASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:959-963
    // assertMatch(axferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    //   assetAmount: debtAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:966
    // const loanRecordASAId = record.loanRecordASAId.native
    frame_dig 2
    pushint 72 // 72
    extract_uint64
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:967
    // const assetExists = Global.currentApplicationAddress.isOptedIn(Asset(loanRecordASAId))
    global CurrentApplicationAddress
    swap
    asset_holding_get AssetBalance
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:968
    // if (!assetExists) {
    bnz liquidateASA_after_if_else@8
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:969-976
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetSender: debtor,
    //     xferAsset: loanRecordASAId,
    //     assetAmount: 1,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:971
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:974
    // assetAmount: 1,
    intc_1 // 1
    itxn_field AssetAmount
    frame_dig 0
    itxn_field XferAsset
    frame_dig -2
    itxn_field AssetSender
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:969-975
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetSender: debtor,
    //     xferAsset: loanRecordASAId,
    //     assetAmount: 1,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:969-976
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetSender: debtor,
    //     xferAsset: loanRecordASAId,
    //     assetAmount: 1,
    //   })
    //   .submit()
    itxn_submit

liquidateASA_after_if_else@8:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:979-984
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:982
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field Sender
    frame_dig 0
    itxn_field ConfigAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:979-983
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:979-984
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:987
    // this.loan_record(debtor).delete()
    frame_dig 1
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:988
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:988
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:991-997
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:993
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:994
    // xferAsset: collateralTokenId.native,
    frame_dig 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:948
    // const collateralTokenId = record.collateralTokenId
    pushint 32 // 32
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:994
    // xferAsset: collateralTokenId.native,
    extract_uint64
    frame_dig 3
    dup
    cover 3
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:991-996
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:991-997
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1000
    // const newTotal: uint64 = acceptedCollateral.totalCollateral.native - collateralAmount
    frame_dig 6
    pushint 16 // 16
    extract_uint64
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1001
    // this.updateCollateralTotal(collateralTokenId, newTotal)
    frame_dig 5
    swap
    callsub updateCollateralTotal
    retsub

liquidateASA_bool_false@4:
    intc_0 // 0
    b liquidateASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateAlgo(debtor: bytes, paymentTxn: uint64) -> void:
liquidateAlgo:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1004-1005
    // @abimethod({ allowActions: 'NoOp' })
    // liquidateAlgo(debtor: Account, paymentTxn: gtxn.PaymentTxn): void {
    proto 2 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    frame_dig -2
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1006
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1008
    // const record = this.loan_record(debtor).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1009
    // const collateralAmount = record.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1010
    // const debtAmount = record.scaledDownDisbursement.native
    dup
    pushint 56 // 56
    extract_uint64
    dup
    cover 3
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1011
    // const collateralTokenId = record.collateralTokenId
    extract 32 8 // on error: Index access is out of bounds
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:66
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 8 // "accepted_collaterals"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:216
    // return this.accepted_collaterals(key).value.copy()
    box_get
    swap
    dup
    cover 2
    cover 4
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1014
    // const oraclePrice = this.getOraclePrice(acceptedCollateral.baseAssetId.native)
    pushint 8 // 8
    extract_uint64
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1015
    // const [h, l] = mulw(collateralAmount, oraclePrice)
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1016
    // const collateralUSD = divw(h, l, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1018
    // const CR: uint64 = collateralUSD / debtAmount
    swap
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:53
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1019
    // assert(CR <= this.liq_threshold_bps.value, 'loan is not liquidatable')
    <=
    assert // loan is not liquidatable
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1022-1025
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: debtAmount,
    // })
    frame_dig -1
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1023
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1022-1025
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: debtAmount,
    // })
    ==
    bz liquidateAlgo_bool_false@3
    frame_dig -1
    gtxns Amount
    frame_dig 4
    ==
    bz liquidateAlgo_bool_false@3
    intc_1 // 1

liquidateAlgo_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1022-1025
    // assertMatch(paymentTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: debtAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1028
    // const loanRecordASAId = record.loanRecordASAId.native
    frame_dig 2
    pushint 72 // 72
    extract_uint64
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1029
    // const assetExists = Global.currentApplicationAddress.isOptedIn(Asset(loanRecordASAId))
    global CurrentApplicationAddress
    swap
    asset_holding_get AssetBalance
    bury 1
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1030
    // if (!assetExists) {
    bnz liquidateAlgo_after_if_else@7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1031-1038
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetSender: debtor,
    //     xferAsset: loanRecordASAId,
    //     assetAmount: 1,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1033
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1036
    // assetAmount: 1,
    intc_1 // 1
    itxn_field AssetAmount
    frame_dig 0
    itxn_field XferAsset
    frame_dig -2
    itxn_field AssetSender
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1031-1037
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetSender: debtor,
    //     xferAsset: loanRecordASAId,
    //     assetAmount: 1,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1031-1038
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetSender: debtor,
    //     xferAsset: loanRecordASAId,
    //     assetAmount: 1,
    //   })
    //   .submit()
    itxn_submit

liquidateAlgo_after_if_else@7:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1041-1046
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1044
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field Sender
    frame_dig 0
    itxn_field ConfigAsset
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1041-1045
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1041-1046
    // itxn
    //   .assetConfig({
    //     configAsset: loanRecordASAId,
    //     sender: Global.currentApplicationAddress,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1049
    // this.loan_record(debtor).delete()
    frame_dig 1
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1050
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:70
    // active_loan_records = GlobalState<uint64>()
    bytec_1 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1050
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1053-1059
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1055
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1056
    // xferAsset: collateralTokenId.native,
    frame_dig 2
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1011
    // const collateralTokenId = record.collateralTokenId
    pushint 32 // 32
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1056
    // xferAsset: collateralTokenId.native,
    extract_uint64
    frame_dig 3
    dup
    cover 3
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1053-1058
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1053-1059
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1062
    // const newTotal: uint64 = acceptedCollateral.totalCollateral.native - collateralAmount
    frame_dig 6
    pushint 16 // 16
    extract_uint64
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1063
    // this.updateCollateralTotal(collateralTokenId, newTotal)
    frame_dig 5
    swap
    callsub updateCollateralTotal
    retsub

liquidateAlgo_bool_false@3:
    intc_0 // 0
    b liquidateAlgo_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus(borrower: bytes) -> uint64, uint64, uint64, uint64, uint64, uint64, uint64:
getLoanStatus:
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1066-1075
    // @abimethod({ allowActions: 'NoOp' })
    // getLoanStatus(borrower: Account): {
    //   outstandingDebt: uint64
    //   collateralValueUSD: uint64
    //   collateralAmount: uint64
    //   collateralRatioBps: uint64
    //   liquidationThresholdBps: uint64
    //   eligibleForLiquidation: boolean
    //   eligibleForBuyout: boolean
    // } {
    proto 1 7
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:68
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec_2 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1076
    // assert(this.loan_record(borrower).exists, 'Loan record does not exist')
    dup
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1077
    // let record = this.loan_record(borrower).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1078
    // record = this.accrueInterest(record) // simulate interest accrual for latest status
    callsub accrueInterest
    pop
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1080
    // const debt: uint64 = record.scaledDownDisbursement.native
    dup
    pushint 56 // 56
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1081
    // const collateralAmount: uint64 = record.collateralAmount.native
    dig 1
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:53
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 7 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1084
    // const acceptedCollateral = this.getCollateral(record.collateralTokenId)
    uncover 3
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:66
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 8 // "accepted_collaterals"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:216
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1085
    // const oraclePrice = this.getOraclePrice(acceptedCollateral.baseAssetId.native)
    pushint 8 // 8
    extract_uint64
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1086
    // const [hi, lo] = mulw(collateralAmount, oraclePrice)
    dig 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1087
    // const collateralValueUSD = divw(hi, lo, 1)
    intc_1 // 1
    divw
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1089
    // const CR: uint64 = (collateralValueUSD * 10000) / debt
    dup
    intc_3 // 10000
    *
    dig 4
    /
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1090
    // const eligibleForLiquidation = CR < liqBps
    dup
    dig 3
    <
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1091
    // const eligibleForBuyout = CR > liqBps
    dig 1
    dig 4
    >
    // smart_contracts/orbital_lending/OrbitalLending.algo.ts:1093-1101
    // return {
    //   outstandingDebt: debt,
    //   collateralValueUSD: collateralValueUSD,
    //   collateralAmount: collateralAmount,
    //   collateralRatioBps: CR,
    //   liquidationThresholdBps: liqBps,
    //   eligibleForLiquidation,
    //   eligibleForBuyout,
    // }
    uncover 6
    uncover 4
    uncover 6
    uncover 5
    uncover 6
    uncover 6
    uncover 6
    retsub
