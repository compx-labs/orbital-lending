/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"orbital-lending","structs":{"AcceptedCollateral":[{"name":"assetId","type":"uint64"},{"name":"baseAssetId","type":"uint64"},{"name":"totalCollateral","type":"uint64"}],"AcceptedCollateralKey":[{"name":"assetId","type":"uint64"}],"LoanRecord":[{"name":"borrowerAddress","type":"address"},{"name":"collateralTokenId","type":"uint64"},{"name":"collateralAmount","type":"uint64"},{"name":"disbursement","type":"uint64"},{"name":"scaledDownDisbursement","type":"uint64"},{"name":"borrowedTokenId","type":"uint64"},{"name":"loanRecordAsaId","type":"uint64"},{"name":"lastAccrualTimestamp","type":"uint64"}],"getLoanStatusResult":[{"name":"outstandingDebt","type":"uint64"},{"name":"collateralValueUsd","type":"uint64"},{"name":"collateralAmount","type":"uint64"},{"name":"collateralRatioBps","type":"uint64"},{"name":"liquidationThresholdBps","type":"uint64"},{"name":"eligibleForLiquidation","type":"bool"},{"name":"eligibleForBuyout","type":"bool"}]},"methods":[{"name":"createApplication","args":[{"type":"account","name":"admin"},{"type":"uint64","name":"baseTokenId"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"initApplication","args":[{"type":"pay","name":"mbrTxn"},{"type":"uint64","name":"ltv_bps"},{"type":"uint64","name":"liq_threshold_bps"},{"type":"uint64","name":"interest_bps"},{"type":"uint64","name":"origination_fee_bps"},{"type":"uint64","name":"protocol_interest_fee_bps"},{"type":"application","name":"oracle_app_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"generateLSTToken","args":[{"type":"pay","name":"mbrTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"optInToLST","args":[{"type":"uint64","name":"lstAssetId"},{"type":"pay","name":"mbrTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"configureLSTToken","args":[{"type":"axfer","name":"axferTxn"},{"type":"uint64","name":"circulating_lst"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getCirculatingLST","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getTotalDeposits","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getAcceptedCollateralsCount","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getOraclePrice","args":[{"type":"uint64","name":"tokenId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addNewCollateralType","args":[{"type":"uint64","name":"collateralTokenId"},{"type":"pay","name":"mbrTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"depositASA","args":[{"type":"axfer","name":"assetTransferTxn"},{"type":"uint64","name":"amount"},{"type":"pay","name":"mbrTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"depositAlgo","args":[{"type":"pay","name":"depositTxn"},{"type":"uint64","name":"amount"},{"type":"pay","name":"mbrTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"withdrawDeposit","args":[{"type":"axfer","name":"assetTransferTxn"},{"type":"uint64","name":"amount"},{"type":"uint64","name":"lstAppId"},{"type":"pay","name":"mbrTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"borrow","args":[{"type":"axfer","name":"assetTransferTxn"},{"type":"uint64","name":"requestedLoanAmount"},{"type":"uint64","name":"collateralAmount"},{"type":"uint64","name":"lstApp"},{"type":"uint64","name":"collateralTokenId"},{"type":"account","name":"templateReserveAddress"},{"type":"string","name":"arc19MetaDataStr"},{"type":"pay","name":"mbrTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"claimLoanRecordASA","args":[{"type":"account","name":"debtor"},{"type":"asset","name":"assetId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getLoanRecord","args":[{"type":"account","name":"borrowerAddress"}],"returns":{"type":"(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)","struct":"LoanRecord"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getLoanRecordASAId","args":[{"type":"account","name":"borrowerAddress"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"repayLoanASA","args":[{"type":"axfer","name":"assetTransferTxn"},{"type":"uint64","name":"amount"},{"type":"account","name":"templateReserveAddress"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"repayLoanAlgo","args":[{"type":"pay","name":"paymentTxn"},{"type":"uint64","name":"amount"},{"type":"account","name":"templateReserveAddress"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"withdrawFees","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"accrueLoanInterest","args":[{"type":"account","name":"debtor"},{"type":"account","name":"templateReserveAddress"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"buyoutASA","args":[{"type":"account","name":"buyer"},{"type":"account","name":"debtor"},{"type":"axfer","name":"axferTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"buyoutAlgo","args":[{"type":"account","name":"buyer"},{"type":"account","name":"debtor"},{"type":"pay","name":"paymentTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"liquidateASA","args":[{"type":"account","name":"debtor"},{"type":"axfer","name":"axferTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"liquidateAlgo","args":[{"type":"account","name":"debtor"},{"type":"pay","name":"paymentTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getLoanStatus","args":[{"type":"account","name":"borrower"}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,bool,bool)","struct":"getLoanStatusResult"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"gas","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":15,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"base_token_id":{"keyType":"AVMString","valueType":"uint64","key":"YmFzZV90b2tlbl9pZA=="},"lst_token_id":{"keyType":"AVMString","valueType":"uint64","key":"bHN0X3Rva2VuX2lk"},"circulating_lst":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y2lyY3VsYXRpbmdfbHN0"},"total_deposits":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfZGVwb3NpdHM="},"admin_account":{"keyType":"AVMString","valueType":"address","key":"YWRtaW5fYWNjb3VudA=="},"ltv_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"bHR2X2Jwcw=="},"liq_threshold_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGlxX3RocmVzaG9sZF9icHM="},"interest_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"aW50ZXJlc3RfYnBz"},"origination_fee_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"b3JpZ2luYXRpb25fZmVlX2Jwcw=="},"protocol_interest_fee_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJvdG9jb2xfaW50ZXJlc3RfZmVlX2Jwcw=="},"oracle_app":{"keyType":"AVMString","valueType":"AVMUint64","key":"b3JhY2xlX2FwcA=="},"active_loan_records":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWN0aXZlX2xvYW5fcmVjb3Jkcw=="},"accepted_collaterals_count":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWNjZXB0ZWRfY29sbGF0ZXJhbHNfY291bnQ="},"fee_pool":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZmVlX3Bvb2w="},"last_scaled_down_disbursement":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdF9zY2FsZWRfZG93bl9kaXNidXJzZW1lbnQ="},"last_max_borrow":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdF9tYXhfYm9ycm93"},"last_requested_loan":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdF9yZXF1ZXN0ZWRfbG9hbg=="},"debug_diff":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGVidWdfZGlmZg=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"accepted_collaterals":{"keyType":"AcceptedCollateralKey","valueType":"AcceptedCollateral","prefix":"YWNjZXB0ZWRfY29sbGF0ZXJhbHM="},"loan_record":{"keyType":"address","valueType":"LoanRecord","prefix":"bG9hbl9yZWNvcmQ="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1760,2460,3147,3359,3369,3775,3843,3877,4091,4125,4323,4355,4541,4573,4739,4771],"errorMessage":"Box must have value"},{"pc":[1741,2340,2372,2491,2523],"errorMessage":"Bytes has valid prefix"},{"pc":[3887,4135],"errorMessage":"Collateral amount exceeds current total"},{"pc":[1762,1785,2761,2768,2795,2809,2814,3288,3293,3298,3303,3311,3316,3525,3693,3791,4340,4558,4760],"errorMessage":"Index access is out of bounds"},{"pc":[1642],"errorMessage":"LST token not set"},{"pc":[3143],"errorMessage":"Loan record ASA does not exist"},{"pc":[3134,3773,3834,4082,4317,4535,4737],"errorMessage":"Loan record does not exist"},{"pc":[489,498,575,603,631,665,699,723,735,767,799,823,846,870,930,971,1008,1045,1070,1091,1109,1127,1145,1171,1197,1219,1267],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1708],"errorMessage":"application exists"},{"pc":[1340,1475,1587,1667,1864,1994,2001,2104,2111,2218,2227,2424,2446,3416,3584,3959,4194,4405,4610],"errorMessage":"assert target is match for conditions"},{"pc":[1488,1493,1500],"errorMessage":"asset exists"},{"pc":[1271],"errorMessage":"can only call when creating"},{"pc":[492,501,578,606,634,668,702,726,738,770,802,826,849,873,933,974,1011,1048,1073,1094,1112,1130,1148,1174,1200,1222],"errorMessage":"can only call when not creating"},{"pc":[1311,1322,1405,1416,1446,1457,1479,1509,1559,1570,1628,1635,1651,1682,1687,1693,1702,1808,1816,1846,1868,1894,1939,1946,1961,2007,2011,2024,2045,2054,2082,2115,2128,2149,2158,2185,2240,2244,2256,2271,2292,2303,2544,2575,2637,2658,2855,2883,2917,2983,3021,3087,3232,3252,3268,3279,3383,3484,3562,3652,3725,3733,3737,3743,3902,3914,3932,4025,4150,4162,4260,4368,4388,4471,4586,4676,4757],"errorMessage":"check GlobalState exists"},{"pc":[2632],"errorMessage":"exceeds LTV limit"},{"pc":[2735],"errorMessage":"exceeds LTV limit with existing debt"},{"pc":[3906,4154],"errorMessage":"loan is not eligible for buyout"},{"pc":[4370,4588],"errorMessage":"loan is not liquidatable"},{"pc":[622,690,780,884,944,1022,1158],"errorMessage":"transaction type is axfer"},{"pc":[594,656,748,921,962,985,999,1036,1061,1188,1210,1232],"errorMessage":"transaction type is pay"},{"pc":[1926,2456],"errorMessage":"unsupported collateral"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyAGAAEE6AeQTsCEPSYTDWJhc2VfdG9rZW5faWQLbG9hbl9yZWNvcmQTYWN0aXZlX2xvYW5fcmVjb3Jkcw50b3RhbF9kZXBvc2l0cw1hZG1pbl9hY2NvdW50BBUffHUPY2lyY3VsYXRpbmdfbHN0EWxpcV90aHJlc2hvbGRfYnBzFGFjY2VwdGVkX2NvbGxhdGVyYWxzCGZlZV9wb29sDGxzdF90b2tlbl9pZBphY2NlcHRlZF9jb2xsYXRlcmFsc19jb3VudAQJ71JfBK6FnzsHbHR2X2JwcwxpbnRlcmVzdF9icHMTb3JpZ2luYXRpb25fZmVlX2Jwcxlwcm90b2NvbF9pbnRlcmVzdF9mZWVfYnBzCm9yYWNsZV9hcHAxG0EAwIIFBDsBZl4EneQnMgQXwzZiBF7845oEXKwlqScMJw2CFARsYzfABOWWrHMEU7URHwRyxcV7BLrkwjgEPkGkmwT76GPKBGF3yigE9nYHTwSrr5gFBL4SVuYEuVVg4ASW2kFuBIVTz/oEHf+t3gTw7aaoBINtu3ME8WUHzgTap/fyBDFyyp02GgCOGwMMAtwCxgKsApICgAJuAlwCRwIuAgkB5AG7AX8BZwFQATgBGAD4AOwA1ACyAJAAdABYAAsAAiJDMRkURDEYRCNDMRkURDEYRDYaARfAHIgQd08GFk8GFk8GFk8GFk8GFoABACJPCFSAAQAiTwhUTwZPBlBPBVBPBFBPA1BPAlBMIlOBwQJMVCcFTFCwI0MxGRREMRhENhoBF8AcMRYjCUk4ECMSRIgPUyNDMRkURDEYRDYaARfAHDEWIwlJOBAkEkSIDl0jQzEZFEQxGEQ2GgEXwBw2GgIXwBwxFiMJSTgQIxJEiA1QI0MxGRREMRhENhoBF8AcNhoCF8AcMRYjCUk4ECQSRIgMNiNDMRkURDEYRDYaARfAHDYaAhfAHIgL5CNDMRkURDEYRIgLrSNDMRkURDEYRDEWIwlJOBAjEkQ2GgEXNhoCF8AciArlI0MxGRREMRhEMRYjCUk4ECQSRDYaARc2GgIXwByIChQjQzEZFEQxGEQ2GgEXwByICfUWJwVMULAjQzEZFEQxGEQ2GgEXwByICdMnBUxQsCNDMRkURDEYRDYaARfAHDYaAhfAMIgI0iNDMRkURDEYRDEWgQIJSTgQJBJENhoBFzYaAhc2GgMXNhoENhoFF8AcNhoGVwIAMRYjCUk4ECMSRIgFtiNDMRkURDEYRDEWgQIJSTgQJBJENhoBFzYaAhcxFiMJSTgQIxJEiAS8I0MxGRREMRhEMRaBAglJOBAjEkQ2GgEXMRYjCUk4ECMSRIgELyNDMRkURDEYRDEWgQIJSTgQJBJENhoBFzEWIwlJOBAjEkSIA5MjQzEZFEQxGEQ2GgExFiMJSTgQIxJEiALhI0MxGRREMRhENhoBiAJnFicFTFCwI0MxGRREMRhEiAJPFicFTFCwI0MxGRREMRhEiAI4FicFTFCwI0MxGRREMRhEiAIgFicFTFCwI0MxGRREMRhEMRYjCUk4ECQSRDYaAReIAcUjQzEZFEQxGEQ2GgEXMRYjCUk4ECMSRIgBZiNDMRkURDEYRDEWIwlJOBAjEkSIAN8jQzEZFEQxGEQxFiMJSTgQIxJENhoBFzYaAhc2GgMXNhoEFzYaBRc2GgYXwDKIACgjQzEZFEQxGBRENhoBF8AcNhoCF4gAAiNDigIAJwSL/meL/xYoTGeJigcAMQAiJwRlRBJEi/k4ACInBGVEEkEAaov5OAiBgLUYEkEAXiNEJw6L+mcnB4v7ZycPi/xnJxCL/WcnCyJnJwkiZycGImcrImcqImcnEYv+ZycSi/9nJwqACAAAAAAAAABjZyIoZUQXQQAWsTIKIihlRBcishKyEbIUJLIQJbIBs4kiQv+figEAMQAiJwRlRBJEi/84ACInBGVEEkEAVIv/OAiB8JwGEkEASCNEIihlRBexMgpLAXEAREsCcQFEMgpPBHEDRIABY0xQIihlRIABY0xQsiayJbIpIrIksiOyIrIAgQOyECWyAbO0PBYnCkxniSJC/7WKAgAxACInBGVEEkSL/zgAIicEZUQSQQAoi/84CIHQDxJBAB0jRIv+FicKTGexMgoishKL/rIRshQkshAlsgGziSJC/+CKAgAxACInBGVEEkQiJwplRBeL/jgREkSL/jgAIicEZUQSQQASi/44FDIKEkEACCNEJwaL/2eJIkL/9SInBmVEiSIrZUSJIicLZUSJigEBIicSZURJcghFAUSxgASsE+AEshqL/7IashiBBrIQJbIBs7Q+SVcABCcFEkSBDFuJigIAJwiL/lBJvkxJTwJESVcACEwiW4v+FxJBABqLAUmBEFuL/whMVwgITBaLAk8CUExQiwBMv4mKAgAiKGVEFzEAIicEZUQSRIv+F0lPAhNEJwiL/lBJvUUBFESL/zgAIicEZUQSQQBNi/84CIGIlQYSQQBBI0QiKGVEi/5MUIAIAAAAAAAAAABQiwFJTwK/IicLZUQjCCcLTGexMgpJIrISiwCyEbIUsgAkshAlsgGzvUUBRIkiQv+8igEBIicGZUQhBB0iK2VEl4v/HSEEl4mKAwAiKGVEF4v9OBQyChJBAGGL/TgRiwASQQBXi/04Eov+EkEATSNEi/84CCUSRCIoZUUBRCIrZURAAC+L/rExACInCmVEF0sCshKyEbIUJLIQJbIBsyInBmVECCcGTGciK2VEi/4IK0xniYv+iP95Qv/LIkL/sIoDACIoZUUBRIv9OAcyChJBAFGL/TgIi/4SQQBHI0SL/zgIJRJEIitlREAAL4v+sTEAIicKZUQXSwKyErIRshQkshAlsgGzIicGZUQIJwZMZyIrZUSL/ggrTGeJi/6I/xFC/8siQv+2igQAIicKZUQXi/w4FDIKEkEAuov8OBGLABJBALCL/DgSi/0SQQCmI0SL/zgIgbgXEkSL/jIIEkEASiInBmVEIitlRIv9HU8ClzIKIihlRBdwAEhLAQ9EsTEAIihlRBdLArISshGyFCSyECWyAbMiJwZlRIv9CScGTGciK2VETAkrTGeJsScMshqL/rIYgQayECWyAbO0PklXBABMVwAEJwUSRBexJw2yGov+shiBBrIQJbIBs7Q+SVcEAExXAAQnBRJEF4v9HU8Cl0L/fCJC/1eKCACAAEcEKTEAUL1JTwJIQQJ0MQCIA6yBKFuMAYv/OAiBoB8SRIv4OBQyChJBAlOL+DgSi/oSQQJJI0QnCIv8UEm9RQFEvkUBRLEnDLIai/uyGIEGshAlsgGztD5JVwQATFcABCcFEkQXsScNshqL+7IYgQayECWyAbO0PklXBABMVwAEJwUSRBeLAR1PApeL/Ij8tx0hBZciJw5lRAshBApJjAOAD2xhc3RfbWF4X2JvcnJvd0sBZyIoZUSI/IxJjACL+R0hBZdJjASAE2xhc3RfcmVxdWVzdGVkX2xvYW5LAWdKCYAKZGVidWdfZGlmZkxnD0QiJxBlRIv5CyEECov5SwEJSU4CjAIiJwllRAgnCUxngB1sYXN0X3NjYWxlZF9kb3duX2Rpc2J1cnNlbWVudExniwVBAMcxAIgChIgB4UgpMQBQSwG/SYE4W0mLAB0hBZeLBAiLAw5ESwGBKFuL+ghMiwJJTgIISwOBMFtPAghLA1cgCDEASwVXSAhLBoFIW0sFSwVLBU8FSwmL/U8GiAD4SwVXACBPBRZPBBZPBRZLBldACE8HV1AITwVPB1BPBVBPBFBPA1BPAlBPAlBMUCkxAFBMv4v8i/qI+64iKGVEF0AAEbExAIsCsgiyByOyECWyAbOJsTEAIihlRBeLArISshGyFCSyECWyAbOJMQCxgAFyi/xQgAFiUCIoZURQMgpHAyKyJLIssiuL/bIqgAZDTVBYTFKyJbIAiwJJsiIisiNMsimL/rInTLImgQOyECWyAbO0PIv6Fk8CFiIoZURPAxYyBxZLBYv8UE8FUEsEUE8EUE8DUE8CUExQKU8CUEy/IiplRCMIKkxnQv9OIkL9tIv6jAFC/Y+KBwCxMgpHA4v/siGyLLIri/6yKrIAsimBA7IQJbIBs7Q8i/0Wi/oWi/kWIihlRE8EFjIHFov8i/tQTwZQTwVQTwRQTwNQTwJQTFApi/xQTL+JigIAKYv+UEm9RQFEMgqL/3AARQFEvkUBRLEjshKL/7IRi/6yFCSyECKyAbOxMgqL/rIVIrISi/+yEbIUJLIQIrIBs4mKAQIyB0mL/4FQW0lOAg5BAAiL/0lPA08DiYsASYsBCYv/gThbIicPZURLAR0hBJdPAh2BgOeED5ciJxFlRCEETAlLAR0hBJdKCSIrZURPAggrTGciJwllRAgnCUxnCIv/VwAgi/9XIAiL/1coCIv/VzAITwQWi/9XQAiL/1dICE8HFk8HTwdQTwZQTwVQTwRQTwNQTwJQTFCL/08DTwOJigEBKYv/UL5EiYoBASmL/1C+RIFIW4mKAwAigAAiKGVEF4v9OBQyChJBAJiL/TgRiwISQQCOi/04Eov+EkEAhCNEMQCI/7mI/xZISYwAKTEAUEsBvzEAiP+wTIE4W4v+SwEORIv+CUmMAUAAObEyCrIAsiGBA7IQIrIBsykxAFC8SCIqZUQjCSpMZ7ExAIsASYEgW0yBKFuyErIRshQkshAisgGziYsASYEwW0sBVyAIMQBPA4EoW4sBTgSL/08GiP4HiSJC/3mKAwAigAAiKGVFAUSL/TgHMgoSQQCOi/04CIv+EkEAhCNEMQCI/xGI/m5ISYwAKTEAUEsBvzEAiP8ITIE4W4v+SwEORIv+CUmMAUAAObEyCrIAsiGBA7IQIrIBsykxAFC8SCIqZUQjCSpMZ7ExAIsASYEgW0yBKFuyErIRshQkshAisgGziYsASYEwW0sBVyAIMQBPA4EoW4sBTgSL/08GiP1fiSJC/3kxACInBGVEEkSxIicEZUQiKGVEFyInCWVEshKyEbIUJLIQIrIBsycJImeJigIAKYv+UEm9RQFEvkSI/bRISYE4W0sBgTBbSwJXIAhLA4EoW08EgUhbTgROBIv+TwWL/08GiPz2iYoDAIAAKYv+UEcCvUUBREm+TElOAk4DRExLAb9JgShbSU8CSYE4W0lOA04DgSBbFklOAycISwFQvkSBEFtJTgRLAg9EiPdsHSOXSU8CCiInB2VESwEMRCEECyInB2VECiEECSEECiMIC4v/OBEiKGVEFxJBAH6L/zgUMgoSQQB0i/84EosHEkEAaiNEMgqLAoFIW0mMAHAARQFAABixMgqLBLISi/6yE4sAshGyFCSyECKyAbOxMgqyAIsAsiGBA7IQIrIBs4sBvEgiKmVEIwkqTGexiwVJF4sDSU4CshKyEYv9shQkshAisgGziwZMCYj284kiQv+TigMAgAApi/5QRwK9RQFESb5MSU4CTgNETEsBv0mBKFtJTwJJgThbSU4DTgOBIFsWSU4DJwhLAVC+RIEQW0lOBEsCD0SI9nQdI5dJTwIKIicHZURLAQxEIQQLIicHZUQKIQQJIQQKIwgLi/84BzIKEkEAdIv/OAiLBxJBAGojRDIKiwKBSFtJjABwAEUBQAAYsTIKiwSyEov+shOLALIRshQkshAisgGzsTIKsgCLALIhgQOyECKyAbOLAbxIIiplRCMJKkxnsYsFSReLA0lOArISshGL/bIUJLIQIrIBs4sGTAmI9giJIkL/k4oCAIAAKYv+UEcCvUUBRL5MSU8CREmBKFtJTwJJgThbSU4DTgNXIAhJTgMnCEsBUL5MTgREiPWYHSOXTAoiJwdlRA5Ei/84FDIKEkEAiIv/OBEiKGVEFxJBAHuL/zgSiwQSQQBxI0SLAoFIW0mMADIKTHAARQFAABexMgojshKLALIRi/6yE7IUJLIQIrIBs7EyCrIAiwCyIYEDshAisgGziwG8SCIqZUQjCSpMZ7ExAIsCgSBbiwNJTgOyErIRshQkshAisgGziwaBEFtMCYsFTIj1LokiQv+MigIAgAApi/5QRwK9RQFEvkxJTwJESYEoW0lPAkmBOFtJTgNOA1cgCElOAycISwFQvkxOBESI9L4dI5dMCiInB2VEDkSL/zgHMgoSQQB7i/84CIsEEkEAcSNEiwKBSFtJjAAyCkxwAEUBQAAXsTIKI7ISiwCyEYv+shOyFCSyECKyAbOxMgqyAIsAsiGBA7IQIrIBs4sBvEgiKmVEIwkqTGexMQCLAoEgW4sDSU4DshKyEbIUJLIQIrIBs4sGgRBbTAmLBUyI9GGJIkL/jIoBBymL/1BJvUUBRL5EiPnwSEmBOFtLAYEoWyInB2VETwNXIAgnCEsBUL5FAUSI8/hLAh0jl0khBAtLBApJSwMMSwFLBA1PBk8ETwZPBU8GTwZPBok=","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type AcceptedCollateral = {
  assetId: bigint,
  baseAssetId: bigint,
  totalCollateral: bigint
}


/**
 * Converts the ABI tuple representation of a AcceptedCollateral to the struct representation
 */
export function AcceptedCollateralFromTuple(abiTuple: [bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AcceptedCollateral, APP_SPEC.structs) as AcceptedCollateral
}

export type AcceptedCollateralKey = {
  assetId: bigint
}


/**
 * Converts the ABI tuple representation of a AcceptedCollateralKey to the struct representation
 */
export function AcceptedCollateralKeyFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AcceptedCollateralKey, APP_SPEC.structs) as AcceptedCollateralKey
}

export type LoanRecord = {
  borrowerAddress: string,
  collateralTokenId: bigint,
  collateralAmount: bigint,
  disbursement: bigint,
  scaledDownDisbursement: bigint,
  borrowedTokenId: bigint,
  loanRecordAsaId: bigint,
  lastAccrualTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a LoanRecord to the struct representation
 */
export function LoanRecordFromTuple(abiTuple: [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.LoanRecord, APP_SPEC.structs) as LoanRecord
}

export type GetLoanStatusResult = {
  outstandingDebt: bigint,
  collateralValueUsd: bigint,
  collateralAmount: bigint,
  collateralRatioBps: bigint,
  liquidationThresholdBps: bigint,
  eligibleForLiquidation: boolean,
  eligibleForBuyout: boolean
}


/**
 * Converts the ABI tuple representation of a getLoanStatusResult to the struct representation
 */
export function GetLoanStatusResultFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, boolean, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.getLoanStatusResult, APP_SPEC.structs) as GetLoanStatusResult
}

/**
 * The argument types for the OrbitalLending contract
 */
export type OrbitalLendingArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(account,uint64)void': {
      admin: Uint8Array | string
      baseTokenId: bigint | number
    }
    'initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void': {
      mbrTxn: AppMethodCallTransactionArgument
      ltvBps: bigint | number
      liqThresholdBps: bigint | number
      interestBps: bigint | number
      originationFeeBps: bigint | number
      protocolInterestFeeBps: bigint | number
      oracleAppId: bigint
    }
    'generateLSTToken(pay)void': {
      mbrTxn: AppMethodCallTransactionArgument
    }
    'optInToLST(uint64,pay)void': {
      lstAssetId: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'configureLSTToken(axfer,uint64)void': {
      axferTxn: AppMethodCallTransactionArgument
      circulatingLst: bigint | number
    }
    'getCirculatingLST()uint64': Record<string, never>
    'getTotalDeposits()uint64': Record<string, never>
    'getAcceptedCollateralsCount()uint64': Record<string, never>
    'getOraclePrice(uint64)uint64': {
      tokenId: bigint | number
    }
    'addNewCollateralType(uint64,pay)void': {
      collateralTokenId: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'depositASA(axfer,uint64,pay)void': {
      assetTransferTxn: AppMethodCallTransactionArgument
      amount: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'depositAlgo(pay,uint64,pay)void': {
      depositTxn: AppMethodCallTransactionArgument
      amount: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'withdrawDeposit(axfer,uint64,uint64,pay)void': {
      assetTransferTxn: AppMethodCallTransactionArgument
      amount: bigint | number
      lstAppId: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void': {
      assetTransferTxn: AppMethodCallTransactionArgument
      requestedLoanAmount: bigint | number
      collateralAmount: bigint | number
      lstApp: bigint | number
      collateralTokenId: bigint | number
      templateReserveAddress: Uint8Array | string
      arc19MetaDataStr: string
      mbrTxn: AppMethodCallTransactionArgument
    }
    'claimLoanRecordASA(account,asset)void': {
      debtor: Uint8Array | string
      assetId: bigint
    }
    'getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': {
      borrowerAddress: Uint8Array | string
    }
    'getLoanRecordASAId(account)uint64': {
      borrowerAddress: Uint8Array | string
    }
    'repayLoanASA(axfer,uint64,account)void': {
      assetTransferTxn: AppMethodCallTransactionArgument
      amount: bigint | number
      templateReserveAddress: Uint8Array | string
    }
    'repayLoanAlgo(pay,uint64,account)void': {
      paymentTxn: AppMethodCallTransactionArgument
      amount: bigint | number
      templateReserveAddress: Uint8Array | string
    }
    'withdrawFees()void': Record<string, never>
    'accrueLoanInterest(account,account)void': {
      debtor: Uint8Array | string
      templateReserveAddress: Uint8Array | string
    }
    'buyoutASA(account,account,axfer)void': {
      buyer: Uint8Array | string
      debtor: Uint8Array | string
      axferTxn: AppMethodCallTransactionArgument
    }
    'buyoutAlgo(account,account,pay)void': {
      buyer: Uint8Array | string
      debtor: Uint8Array | string
      paymentTxn: AppMethodCallTransactionArgument
    }
    'liquidateASA(account,axfer)void': {
      debtor: Uint8Array | string
      axferTxn: AppMethodCallTransactionArgument
    }
    'liquidateAlgo(account,pay)void': {
      debtor: Uint8Array | string
      paymentTxn: AppMethodCallTransactionArgument
    }
    'getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)': {
      borrower: Uint8Array | string
    }
    'gas()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(account,uint64)void': [admin: Uint8Array | string, baseTokenId: bigint | number]
    'initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void': [mbrTxn: AppMethodCallTransactionArgument, ltvBps: bigint | number, liqThresholdBps: bigint | number, interestBps: bigint | number, originationFeeBps: bigint | number, protocolInterestFeeBps: bigint | number, oracleAppId: bigint]
    'generateLSTToken(pay)void': [mbrTxn: AppMethodCallTransactionArgument]
    'optInToLST(uint64,pay)void': [lstAssetId: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'configureLSTToken(axfer,uint64)void': [axferTxn: AppMethodCallTransactionArgument, circulatingLst: bigint | number]
    'getCirculatingLST()uint64': []
    'getTotalDeposits()uint64': []
    'getAcceptedCollateralsCount()uint64': []
    'getOraclePrice(uint64)uint64': [tokenId: bigint | number]
    'addNewCollateralType(uint64,pay)void': [collateralTokenId: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'depositASA(axfer,uint64,pay)void': [assetTransferTxn: AppMethodCallTransactionArgument, amount: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'depositAlgo(pay,uint64,pay)void': [depositTxn: AppMethodCallTransactionArgument, amount: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'withdrawDeposit(axfer,uint64,uint64,pay)void': [assetTransferTxn: AppMethodCallTransactionArgument, amount: bigint | number, lstAppId: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void': [assetTransferTxn: AppMethodCallTransactionArgument, requestedLoanAmount: bigint | number, collateralAmount: bigint | number, lstApp: bigint | number, collateralTokenId: bigint | number, templateReserveAddress: Uint8Array | string, arc19MetaDataStr: string, mbrTxn: AppMethodCallTransactionArgument]
    'claimLoanRecordASA(account,asset)void': [debtor: Uint8Array | string, assetId: bigint]
    'getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [borrowerAddress: Uint8Array | string]
    'getLoanRecordASAId(account)uint64': [borrowerAddress: Uint8Array | string]
    'repayLoanASA(axfer,uint64,account)void': [assetTransferTxn: AppMethodCallTransactionArgument, amount: bigint | number, templateReserveAddress: Uint8Array | string]
    'repayLoanAlgo(pay,uint64,account)void': [paymentTxn: AppMethodCallTransactionArgument, amount: bigint | number, templateReserveAddress: Uint8Array | string]
    'withdrawFees()void': []
    'accrueLoanInterest(account,account)void': [debtor: Uint8Array | string, templateReserveAddress: Uint8Array | string]
    'buyoutASA(account,account,axfer)void': [buyer: Uint8Array | string, debtor: Uint8Array | string, axferTxn: AppMethodCallTransactionArgument]
    'buyoutAlgo(account,account,pay)void': [buyer: Uint8Array | string, debtor: Uint8Array | string, paymentTxn: AppMethodCallTransactionArgument]
    'liquidateASA(account,axfer)void': [debtor: Uint8Array | string, axferTxn: AppMethodCallTransactionArgument]
    'liquidateAlgo(account,pay)void': [debtor: Uint8Array | string, paymentTxn: AppMethodCallTransactionArgument]
    'getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)': [borrower: Uint8Array | string]
    'gas()void': []
  }
}

/**
 * The return type for each method
 */
export type OrbitalLendingReturns = {
  'createApplication(account,uint64)void': void
  'initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void': void
  'generateLSTToken(pay)void': void
  'optInToLST(uint64,pay)void': void
  'configureLSTToken(axfer,uint64)void': void
  'getCirculatingLST()uint64': bigint
  'getTotalDeposits()uint64': bigint
  'getAcceptedCollateralsCount()uint64': bigint
  'getOraclePrice(uint64)uint64': bigint
  'addNewCollateralType(uint64,pay)void': void
  'depositASA(axfer,uint64,pay)void': void
  'depositAlgo(pay,uint64,pay)void': void
  'withdrawDeposit(axfer,uint64,uint64,pay)void': void
  'borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void': void
  'claimLoanRecordASA(account,asset)void': void
  'getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': LoanRecord
  'getLoanRecordASAId(account)uint64': bigint
  'repayLoanASA(axfer,uint64,account)void': void
  'repayLoanAlgo(pay,uint64,account)void': void
  'withdrawFees()void': void
  'accrueLoanInterest(account,account)void': void
  'buyoutASA(account,account,axfer)void': void
  'buyoutAlgo(account,account,pay)void': void
  'liquidateASA(account,axfer)void': void
  'liquidateAlgo(account,pay)void': void
  'getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)': GetLoanStatusResult
  'gas()void': void
}

/**
 * Defines the types of available calls and state of the OrbitalLending smart contract.
 */
export type OrbitalLendingTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(account,uint64)void' | 'createApplication', {
      argsObj: OrbitalLendingArgs['obj']['createApplication(account,uint64)void']
      argsTuple: OrbitalLendingArgs['tuple']['createApplication(account,uint64)void']
      returns: OrbitalLendingReturns['createApplication(account,uint64)void']
    }>
    & Record<'initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void' | 'initApplication', {
      argsObj: OrbitalLendingArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void']
      argsTuple: OrbitalLendingArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void']
      returns: OrbitalLendingReturns['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void']
    }>
    & Record<'generateLSTToken(pay)void' | 'generateLSTToken', {
      argsObj: OrbitalLendingArgs['obj']['generateLSTToken(pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['generateLSTToken(pay)void']
      returns: OrbitalLendingReturns['generateLSTToken(pay)void']
    }>
    & Record<'optInToLST(uint64,pay)void' | 'optInToLST', {
      argsObj: OrbitalLendingArgs['obj']['optInToLST(uint64,pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['optInToLST(uint64,pay)void']
      returns: OrbitalLendingReturns['optInToLST(uint64,pay)void']
    }>
    & Record<'configureLSTToken(axfer,uint64)void' | 'configureLSTToken', {
      argsObj: OrbitalLendingArgs['obj']['configureLSTToken(axfer,uint64)void']
      argsTuple: OrbitalLendingArgs['tuple']['configureLSTToken(axfer,uint64)void']
      returns: OrbitalLendingReturns['configureLSTToken(axfer,uint64)void']
    }>
    & Record<'getCirculatingLST()uint64' | 'getCirculatingLST', {
      argsObj: OrbitalLendingArgs['obj']['getCirculatingLST()uint64']
      argsTuple: OrbitalLendingArgs['tuple']['getCirculatingLST()uint64']
      returns: OrbitalLendingReturns['getCirculatingLST()uint64']
    }>
    & Record<'getTotalDeposits()uint64' | 'getTotalDeposits', {
      argsObj: OrbitalLendingArgs['obj']['getTotalDeposits()uint64']
      argsTuple: OrbitalLendingArgs['tuple']['getTotalDeposits()uint64']
      returns: OrbitalLendingReturns['getTotalDeposits()uint64']
    }>
    & Record<'getAcceptedCollateralsCount()uint64' | 'getAcceptedCollateralsCount', {
      argsObj: OrbitalLendingArgs['obj']['getAcceptedCollateralsCount()uint64']
      argsTuple: OrbitalLendingArgs['tuple']['getAcceptedCollateralsCount()uint64']
      returns: OrbitalLendingReturns['getAcceptedCollateralsCount()uint64']
    }>
    & Record<'getOraclePrice(uint64)uint64' | 'getOraclePrice', {
      argsObj: OrbitalLendingArgs['obj']['getOraclePrice(uint64)uint64']
      argsTuple: OrbitalLendingArgs['tuple']['getOraclePrice(uint64)uint64']
      returns: OrbitalLendingReturns['getOraclePrice(uint64)uint64']
    }>
    & Record<'addNewCollateralType(uint64,pay)void' | 'addNewCollateralType', {
      argsObj: OrbitalLendingArgs['obj']['addNewCollateralType(uint64,pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['addNewCollateralType(uint64,pay)void']
      returns: OrbitalLendingReturns['addNewCollateralType(uint64,pay)void']
    }>
    & Record<'depositASA(axfer,uint64,pay)void' | 'depositASA', {
      argsObj: OrbitalLendingArgs['obj']['depositASA(axfer,uint64,pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['depositASA(axfer,uint64,pay)void']
      returns: OrbitalLendingReturns['depositASA(axfer,uint64,pay)void']
    }>
    & Record<'depositAlgo(pay,uint64,pay)void' | 'depositAlgo', {
      argsObj: OrbitalLendingArgs['obj']['depositAlgo(pay,uint64,pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['depositAlgo(pay,uint64,pay)void']
      returns: OrbitalLendingReturns['depositAlgo(pay,uint64,pay)void']
    }>
    & Record<'withdrawDeposit(axfer,uint64,uint64,pay)void' | 'withdrawDeposit', {
      argsObj: OrbitalLendingArgs['obj']['withdrawDeposit(axfer,uint64,uint64,pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['withdrawDeposit(axfer,uint64,uint64,pay)void']
      returns: OrbitalLendingReturns['withdrawDeposit(axfer,uint64,uint64,pay)void']
    }>
    & Record<'borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void' | 'borrow', {
      argsObj: OrbitalLendingArgs['obj']['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void']
      returns: OrbitalLendingReturns['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void']
    }>
    & Record<'claimLoanRecordASA(account,asset)void' | 'claimLoanRecordASA', {
      argsObj: OrbitalLendingArgs['obj']['claimLoanRecordASA(account,asset)void']
      argsTuple: OrbitalLendingArgs['tuple']['claimLoanRecordASA(account,asset)void']
      returns: OrbitalLendingReturns['claimLoanRecordASA(account,asset)void']
    }>
    & Record<'getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getLoanRecord', {
      argsObj: OrbitalLendingArgs['obj']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: OrbitalLendingArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: OrbitalLendingReturns['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'getLoanRecordASAId(account)uint64' | 'getLoanRecordASAId', {
      argsObj: OrbitalLendingArgs['obj']['getLoanRecordASAId(account)uint64']
      argsTuple: OrbitalLendingArgs['tuple']['getLoanRecordASAId(account)uint64']
      returns: OrbitalLendingReturns['getLoanRecordASAId(account)uint64']
    }>
    & Record<'repayLoanASA(axfer,uint64,account)void' | 'repayLoanASA', {
      argsObj: OrbitalLendingArgs['obj']['repayLoanASA(axfer,uint64,account)void']
      argsTuple: OrbitalLendingArgs['tuple']['repayLoanASA(axfer,uint64,account)void']
      returns: OrbitalLendingReturns['repayLoanASA(axfer,uint64,account)void']
    }>
    & Record<'repayLoanAlgo(pay,uint64,account)void' | 'repayLoanAlgo', {
      argsObj: OrbitalLendingArgs['obj']['repayLoanAlgo(pay,uint64,account)void']
      argsTuple: OrbitalLendingArgs['tuple']['repayLoanAlgo(pay,uint64,account)void']
      returns: OrbitalLendingReturns['repayLoanAlgo(pay,uint64,account)void']
    }>
    & Record<'withdrawFees()void' | 'withdrawFees', {
      argsObj: OrbitalLendingArgs['obj']['withdrawFees()void']
      argsTuple: OrbitalLendingArgs['tuple']['withdrawFees()void']
      returns: OrbitalLendingReturns['withdrawFees()void']
    }>
    & Record<'accrueLoanInterest(account,account)void' | 'accrueLoanInterest', {
      argsObj: OrbitalLendingArgs['obj']['accrueLoanInterest(account,account)void']
      argsTuple: OrbitalLendingArgs['tuple']['accrueLoanInterest(account,account)void']
      returns: OrbitalLendingReturns['accrueLoanInterest(account,account)void']
    }>
    & Record<'buyoutASA(account,account,axfer)void' | 'buyoutASA', {
      argsObj: OrbitalLendingArgs['obj']['buyoutASA(account,account,axfer)void']
      argsTuple: OrbitalLendingArgs['tuple']['buyoutASA(account,account,axfer)void']
      returns: OrbitalLendingReturns['buyoutASA(account,account,axfer)void']
    }>
    & Record<'buyoutAlgo(account,account,pay)void' | 'buyoutAlgo', {
      argsObj: OrbitalLendingArgs['obj']['buyoutAlgo(account,account,pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['buyoutAlgo(account,account,pay)void']
      returns: OrbitalLendingReturns['buyoutAlgo(account,account,pay)void']
    }>
    & Record<'liquidateASA(account,axfer)void' | 'liquidateASA', {
      argsObj: OrbitalLendingArgs['obj']['liquidateASA(account,axfer)void']
      argsTuple: OrbitalLendingArgs['tuple']['liquidateASA(account,axfer)void']
      returns: OrbitalLendingReturns['liquidateASA(account,axfer)void']
    }>
    & Record<'liquidateAlgo(account,pay)void' | 'liquidateAlgo', {
      argsObj: OrbitalLendingArgs['obj']['liquidateAlgo(account,pay)void']
      argsTuple: OrbitalLendingArgs['tuple']['liquidateAlgo(account,pay)void']
      returns: OrbitalLendingReturns['liquidateAlgo(account,pay)void']
    }>
    & Record<'getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)' | 'getLoanStatus', {
      argsObj: OrbitalLendingArgs['obj']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']
      argsTuple: OrbitalLendingArgs['tuple']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']
      returns: OrbitalLendingReturns['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']
    }>
    & Record<'gas()void' | 'gas', {
      argsObj: OrbitalLendingArgs['obj']['gas()void']
      argsTuple: OrbitalLendingArgs['tuple']['gas()void']
      returns: OrbitalLendingReturns['gas()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        baseTokenId: bigint
        lstTokenId: bigint
        circulatingLst: bigint
        totalDeposits: bigint
        adminAccount: string
        ltvBps: bigint
        liqThresholdBps: bigint
        interestBps: bigint
        originationFeeBps: bigint
        protocolInterestFeeBps: bigint
        oracleApp: bigint
        activeLoanRecords: bigint
        acceptedCollateralsCount: bigint
        feePool: bigint
        lastScaledDownDisbursement: bigint
        lastMaxBorrow: bigint
        lastRequestedLoan: bigint
        debugDiff: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        acceptedCollaterals: Map<AcceptedCollateralKey, AcceptedCollateral>
        loanRecord: Map<string, LoanRecord>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type OrbitalLendingSignatures = keyof OrbitalLendingTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type OrbitalLendingNonVoidMethodSignatures = keyof OrbitalLendingTypes['methods'] extends infer T ? T extends keyof OrbitalLendingTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the OrbitalLending smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends OrbitalLendingSignatures> = OrbitalLendingTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the OrbitalLending smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OrbitalLendingSignatures> = OrbitalLendingTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = OrbitalLendingTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = OrbitalLendingTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type OrbitalLendingCreateCallParams =
  | Expand<CallParams<OrbitalLendingArgs['obj']['createApplication(account,uint64)void'] | OrbitalLendingArgs['tuple']['createApplication(account,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<OrbitalLendingArgs['obj']['createApplication(account,uint64)void'] | OrbitalLendingArgs['tuple']['createApplication(account,uint64)void']> & {method: 'createApplication(account,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type OrbitalLendingDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: OrbitalLendingCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the OrbitalLending smart contract
 */
export abstract class OrbitalLendingParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends OrbitalLendingCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(account,uint64)void':
            return OrbitalLendingParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the orbital-lending smart contract using the createApplication(account,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<OrbitalLendingArgs['obj']['createApplication(account,uint64)void'] | OrbitalLendingArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(account,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.admin, params.args.baseTokenId],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initApplication(params: CallParams<OrbitalLendingArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void'] | OrbitalLendingArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn, params.args.ltvBps, params.args.liqThresholdBps, params.args.interestBps, params.args.originationFeeBps, params.args.protocolInterestFeeBps, params.args.oracleAppId],
    }
  }
  /**
   * Constructs a no op call for the generateLSTToken(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static generateLstToken(params: CallParams<OrbitalLendingArgs['obj']['generateLSTToken(pay)void'] | OrbitalLendingArgs['tuple']['generateLSTToken(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'generateLSTToken(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the optInToLST(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToLst(params: CallParams<OrbitalLendingArgs['obj']['optInToLST(uint64,pay)void'] | OrbitalLendingArgs['tuple']['optInToLST(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToLST(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.lstAssetId, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the configureLSTToken(axfer,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static configureLstToken(params: CallParams<OrbitalLendingArgs['obj']['configureLSTToken(axfer,uint64)void'] | OrbitalLendingArgs['tuple']['configureLSTToken(axfer,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'configureLSTToken(axfer,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.axferTxn, params.args.circulatingLst],
    }
  }
  /**
   * Constructs a no op call for the getCirculatingLST()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCirculatingLst(params: CallParams<OrbitalLendingArgs['obj']['getCirculatingLST()uint64'] | OrbitalLendingArgs['tuple']['getCirculatingLST()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCirculatingLST()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTotalDeposits()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalDeposits(params: CallParams<OrbitalLendingArgs['obj']['getTotalDeposits()uint64'] | OrbitalLendingArgs['tuple']['getTotalDeposits()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTotalDeposits()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getAcceptedCollateralsCount()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAcceptedCollateralsCount(params: CallParams<OrbitalLendingArgs['obj']['getAcceptedCollateralsCount()uint64'] | OrbitalLendingArgs['tuple']['getAcceptedCollateralsCount()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getAcceptedCollateralsCount()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getOraclePrice(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getOraclePrice(params: CallParams<OrbitalLendingArgs['obj']['getOraclePrice(uint64)uint64'] | OrbitalLendingArgs['tuple']['getOraclePrice(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getOraclePrice(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId],
    }
  }
  /**
   * Constructs a no op call for the addNewCollateralType(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addNewCollateralType(params: CallParams<OrbitalLendingArgs['obj']['addNewCollateralType(uint64,pay)void'] | OrbitalLendingArgs['tuple']['addNewCollateralType(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addNewCollateralType(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.collateralTokenId, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the depositASA(axfer,uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static depositAsa(params: CallParams<OrbitalLendingArgs['obj']['depositASA(axfer,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositASA(axfer,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'depositASA(axfer,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetTransferTxn, params.args.amount, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the depositAlgo(pay,uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static depositAlgo(params: CallParams<OrbitalLendingArgs['obj']['depositAlgo(pay,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositAlgo(pay,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'depositAlgo(pay,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.depositTxn, params.args.amount, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the withdrawDeposit(axfer,uint64,uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawDeposit(params: CallParams<OrbitalLendingArgs['obj']['withdrawDeposit(axfer,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['withdrawDeposit(axfer,uint64,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawDeposit(axfer,uint64,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetTransferTxn, params.args.amount, params.args.lstAppId, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static borrow(params: CallParams<OrbitalLendingArgs['obj']['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void'] | OrbitalLendingArgs['tuple']['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetTransferTxn, params.args.requestedLoanAmount, params.args.collateralAmount, params.args.lstApp, params.args.collateralTokenId, params.args.templateReserveAddress, params.args.arc19MetaDataStr, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the claimLoanRecordASA(account,asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimLoanRecordAsa(params: CallParams<OrbitalLendingArgs['obj']['claimLoanRecordASA(account,asset)void'] | OrbitalLendingArgs['tuple']['claimLoanRecordASA(account,asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimLoanRecordASA(account,asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.debtor, params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLoanRecord(params: CallParams<OrbitalLendingArgs['obj']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.borrowerAddress],
    }
  }
  /**
   * Constructs a no op call for the getLoanRecordASAId(account)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLoanRecordAsaId(params: CallParams<OrbitalLendingArgs['obj']['getLoanRecordASAId(account)uint64'] | OrbitalLendingArgs['tuple']['getLoanRecordASAId(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLoanRecordASAId(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.borrowerAddress],
    }
  }
  /**
   * Constructs a no op call for the repayLoanASA(axfer,uint64,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static repayLoanAsa(params: CallParams<OrbitalLendingArgs['obj']['repayLoanASA(axfer,uint64,account)void'] | OrbitalLendingArgs['tuple']['repayLoanASA(axfer,uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'repayLoanASA(axfer,uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetTransferTxn, params.args.amount, params.args.templateReserveAddress],
    }
  }
  /**
   * Constructs a no op call for the repayLoanAlgo(pay,uint64,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static repayLoanAlgo(params: CallParams<OrbitalLendingArgs['obj']['repayLoanAlgo(pay,uint64,account)void'] | OrbitalLendingArgs['tuple']['repayLoanAlgo(pay,uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'repayLoanAlgo(pay,uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paymentTxn, params.args.amount, params.args.templateReserveAddress],
    }
  }
  /**
   * Constructs a no op call for the withdrawFees()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawFees(params: CallParams<OrbitalLendingArgs['obj']['withdrawFees()void'] | OrbitalLendingArgs['tuple']['withdrawFees()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawFees()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the accrueLoanInterest(account,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static accrueLoanInterest(params: CallParams<OrbitalLendingArgs['obj']['accrueLoanInterest(account,account)void'] | OrbitalLendingArgs['tuple']['accrueLoanInterest(account,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'accrueLoanInterest(account,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.debtor, params.args.templateReserveAddress],
    }
  }
  /**
   * Constructs a no op call for the buyoutASA(account,account,axfer)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyoutAsa(params: CallParams<OrbitalLendingArgs['obj']['buyoutASA(account,account,axfer)void'] | OrbitalLendingArgs['tuple']['buyoutASA(account,account,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buyoutASA(account,account,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.buyer, params.args.debtor, params.args.axferTxn],
    }
  }
  /**
   * Constructs a no op call for the buyoutAlgo(account,account,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyoutAlgo(params: CallParams<OrbitalLendingArgs['obj']['buyoutAlgo(account,account,pay)void'] | OrbitalLendingArgs['tuple']['buyoutAlgo(account,account,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buyoutAlgo(account,account,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.buyer, params.args.debtor, params.args.paymentTxn],
    }
  }
  /**
   * Constructs a no op call for the liquidateASA(account,axfer)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static liquidateAsa(params: CallParams<OrbitalLendingArgs['obj']['liquidateASA(account,axfer)void'] | OrbitalLendingArgs['tuple']['liquidateASA(account,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'liquidateASA(account,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.debtor, params.args.axferTxn],
    }
  }
  /**
   * Constructs a no op call for the liquidateAlgo(account,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static liquidateAlgo(params: CallParams<OrbitalLendingArgs['obj']['liquidateAlgo(account,pay)void'] | OrbitalLendingArgs['tuple']['liquidateAlgo(account,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'liquidateAlgo(account,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.debtor, params.args.paymentTxn],
    }
  }
  /**
   * Constructs a no op call for the getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLoanStatus(params: CallParams<OrbitalLendingArgs['obj']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'] | OrbitalLendingArgs['tuple']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.borrower],
    }
  }
  /**
   * Constructs a no op call for the gas()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static gas(params: CallParams<OrbitalLendingArgs['obj']['gas()void'] | OrbitalLendingArgs['tuple']['gas()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'gas()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the orbital-lending smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class OrbitalLendingFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `OrbitalLendingFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new OrbitalLendingClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new OrbitalLendingClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the orbital-lending smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: OrbitalLendingDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? OrbitalLendingParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (OrbitalLendingCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new OrbitalLendingClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the orbital-lending smart contract using the createApplication(account,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<OrbitalLendingArgs['obj']['createApplication(account,uint64)void'] | OrbitalLendingArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(OrbitalLendingParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the orbital-lending smart contract using the createApplication(account,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<OrbitalLendingArgs['obj']['createApplication(account,uint64)void'] | OrbitalLendingArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(OrbitalLendingParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the orbital-lending smart contract using an ABI method call using the createApplication(account,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<OrbitalLendingArgs['obj']['createApplication(account,uint64)void'] | OrbitalLendingArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(OrbitalLendingParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | OrbitalLendingReturns['createApplication(account,uint64)void']) }, appClient: new OrbitalLendingClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the orbital-lending smart contract
 */
export class OrbitalLendingClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `OrbitalLendingClient`
   *
   * @param appClient An `AppClient` instance which has been created with the OrbitalLending app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `OrbitalLendingClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends OrbitalLendingNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `OrbitalLendingClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<OrbitalLendingClient> {
    return new OrbitalLendingClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `OrbitalLendingClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<OrbitalLendingClient> {
    return new OrbitalLendingClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the orbital-lending smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initApplication: (params: CallParams<OrbitalLendingArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void'] | OrbitalLendingArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `generateLSTToken(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    generateLstToken: (params: CallParams<OrbitalLendingArgs['obj']['generateLSTToken(pay)void'] | OrbitalLendingArgs['tuple']['generateLSTToken(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.generateLstToken(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `optInToLST(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToLst: (params: CallParams<OrbitalLendingArgs['obj']['optInToLST(uint64,pay)void'] | OrbitalLendingArgs['tuple']['optInToLST(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.optInToLst(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `configureLSTToken(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    configureLstToken: (params: CallParams<OrbitalLendingArgs['obj']['configureLSTToken(axfer,uint64)void'] | OrbitalLendingArgs['tuple']['configureLSTToken(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.configureLstToken(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getCirculatingLST()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCirculatingLst: (params: CallParams<OrbitalLendingArgs['obj']['getCirculatingLST()uint64'] | OrbitalLendingArgs['tuple']['getCirculatingLST()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.getCirculatingLst(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getTotalDeposits()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalDeposits: (params: CallParams<OrbitalLendingArgs['obj']['getTotalDeposits()uint64'] | OrbitalLendingArgs['tuple']['getTotalDeposits()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.getTotalDeposits(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getAcceptedCollateralsCount()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAcceptedCollateralsCount: (params: CallParams<OrbitalLendingArgs['obj']['getAcceptedCollateralsCount()uint64'] | OrbitalLendingArgs['tuple']['getAcceptedCollateralsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.getAcceptedCollateralsCount(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getOraclePrice(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getOraclePrice: (params: CallParams<OrbitalLendingArgs['obj']['getOraclePrice(uint64)uint64'] | OrbitalLendingArgs['tuple']['getOraclePrice(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.getOraclePrice(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `addNewCollateralType(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addNewCollateralType: (params: CallParams<OrbitalLendingArgs['obj']['addNewCollateralType(uint64,pay)void'] | OrbitalLendingArgs['tuple']['addNewCollateralType(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.addNewCollateralType(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `depositASA(axfer,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    depositAsa: (params: CallParams<OrbitalLendingArgs['obj']['depositASA(axfer,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositASA(axfer,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.depositAsa(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `depositAlgo(pay,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    depositAlgo: (params: CallParams<OrbitalLendingArgs['obj']['depositAlgo(pay,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositAlgo(pay,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.depositAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawDeposit(axfer,uint64,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawDeposit: (params: CallParams<OrbitalLendingArgs['obj']['withdrawDeposit(axfer,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['withdrawDeposit(axfer,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.withdrawDeposit(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    borrow: (params: CallParams<OrbitalLendingArgs['obj']['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void'] | OrbitalLendingArgs['tuple']['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.borrow(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `claimLoanRecordASA(account,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimLoanRecordAsa: (params: CallParams<OrbitalLendingArgs['obj']['claimLoanRecordASA(account,asset)void'] | OrbitalLendingArgs['tuple']['claimLoanRecordASA(account,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.claimLoanRecordAsa(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLoanRecord: (params: CallParams<OrbitalLendingArgs['obj']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.getLoanRecord(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanRecordASAId(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLoanRecordAsaId: (params: CallParams<OrbitalLendingArgs['obj']['getLoanRecordASAId(account)uint64'] | OrbitalLendingArgs['tuple']['getLoanRecordASAId(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.getLoanRecordAsaId(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `repayLoanASA(axfer,uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    repayLoanAsa: (params: CallParams<OrbitalLendingArgs['obj']['repayLoanASA(axfer,uint64,account)void'] | OrbitalLendingArgs['tuple']['repayLoanASA(axfer,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.repayLoanAsa(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `repayLoanAlgo(pay,uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    repayLoanAlgo: (params: CallParams<OrbitalLendingArgs['obj']['repayLoanAlgo(pay,uint64,account)void'] | OrbitalLendingArgs['tuple']['repayLoanAlgo(pay,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.repayLoanAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawFees()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawFees: (params: CallParams<OrbitalLendingArgs['obj']['withdrawFees()void'] | OrbitalLendingArgs['tuple']['withdrawFees()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.withdrawFees(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `accrueLoanInterest(account,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    accrueLoanInterest: (params: CallParams<OrbitalLendingArgs['obj']['accrueLoanInterest(account,account)void'] | OrbitalLendingArgs['tuple']['accrueLoanInterest(account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.accrueLoanInterest(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `buyoutASA(account,account,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyoutAsa: (params: CallParams<OrbitalLendingArgs['obj']['buyoutASA(account,account,axfer)void'] | OrbitalLendingArgs['tuple']['buyoutASA(account,account,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.buyoutAsa(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `buyoutAlgo(account,account,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyoutAlgo: (params: CallParams<OrbitalLendingArgs['obj']['buyoutAlgo(account,account,pay)void'] | OrbitalLendingArgs['tuple']['buyoutAlgo(account,account,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.buyoutAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `liquidateASA(account,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    liquidateAsa: (params: CallParams<OrbitalLendingArgs['obj']['liquidateASA(account,axfer)void'] | OrbitalLendingArgs['tuple']['liquidateASA(account,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.liquidateAsa(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `liquidateAlgo(account,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    liquidateAlgo: (params: CallParams<OrbitalLendingArgs['obj']['liquidateAlgo(account,pay)void'] | OrbitalLendingArgs['tuple']['liquidateAlgo(account,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.liquidateAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLoanStatus: (params: CallParams<OrbitalLendingArgs['obj']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'] | OrbitalLendingArgs['tuple']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.getLoanStatus(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    gas: (params: CallParams<OrbitalLendingArgs['obj']['gas()void'] | OrbitalLendingArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OrbitalLendingParamsFactory.gas(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the orbital-lending smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initApplication: (params: CallParams<OrbitalLendingArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void'] | OrbitalLendingArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `generateLSTToken(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    generateLstToken: (params: CallParams<OrbitalLendingArgs['obj']['generateLSTToken(pay)void'] | OrbitalLendingArgs['tuple']['generateLSTToken(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.generateLstToken(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `optInToLST(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToLst: (params: CallParams<OrbitalLendingArgs['obj']['optInToLST(uint64,pay)void'] | OrbitalLendingArgs['tuple']['optInToLST(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.optInToLst(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `configureLSTToken(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    configureLstToken: (params: CallParams<OrbitalLendingArgs['obj']['configureLSTToken(axfer,uint64)void'] | OrbitalLendingArgs['tuple']['configureLSTToken(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.configureLstToken(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getCirculatingLST()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCirculatingLst: (params: CallParams<OrbitalLendingArgs['obj']['getCirculatingLST()uint64'] | OrbitalLendingArgs['tuple']['getCirculatingLST()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.getCirculatingLst(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getTotalDeposits()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalDeposits: (params: CallParams<OrbitalLendingArgs['obj']['getTotalDeposits()uint64'] | OrbitalLendingArgs['tuple']['getTotalDeposits()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.getTotalDeposits(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getAcceptedCollateralsCount()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAcceptedCollateralsCount: (params: CallParams<OrbitalLendingArgs['obj']['getAcceptedCollateralsCount()uint64'] | OrbitalLendingArgs['tuple']['getAcceptedCollateralsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.getAcceptedCollateralsCount(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getOraclePrice(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getOraclePrice: (params: CallParams<OrbitalLendingArgs['obj']['getOraclePrice(uint64)uint64'] | OrbitalLendingArgs['tuple']['getOraclePrice(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.getOraclePrice(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `addNewCollateralType(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addNewCollateralType: (params: CallParams<OrbitalLendingArgs['obj']['addNewCollateralType(uint64,pay)void'] | OrbitalLendingArgs['tuple']['addNewCollateralType(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.addNewCollateralType(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `depositASA(axfer,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    depositAsa: (params: CallParams<OrbitalLendingArgs['obj']['depositASA(axfer,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositASA(axfer,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.depositAsa(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `depositAlgo(pay,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    depositAlgo: (params: CallParams<OrbitalLendingArgs['obj']['depositAlgo(pay,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositAlgo(pay,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.depositAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawDeposit(axfer,uint64,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawDeposit: (params: CallParams<OrbitalLendingArgs['obj']['withdrawDeposit(axfer,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['withdrawDeposit(axfer,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.withdrawDeposit(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    borrow: (params: CallParams<OrbitalLendingArgs['obj']['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void'] | OrbitalLendingArgs['tuple']['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.borrow(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `claimLoanRecordASA(account,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimLoanRecordAsa: (params: CallParams<OrbitalLendingArgs['obj']['claimLoanRecordASA(account,asset)void'] | OrbitalLendingArgs['tuple']['claimLoanRecordASA(account,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.claimLoanRecordAsa(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLoanRecord: (params: CallParams<OrbitalLendingArgs['obj']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.getLoanRecord(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanRecordASAId(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLoanRecordAsaId: (params: CallParams<OrbitalLendingArgs['obj']['getLoanRecordASAId(account)uint64'] | OrbitalLendingArgs['tuple']['getLoanRecordASAId(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.getLoanRecordAsaId(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `repayLoanASA(axfer,uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    repayLoanAsa: (params: CallParams<OrbitalLendingArgs['obj']['repayLoanASA(axfer,uint64,account)void'] | OrbitalLendingArgs['tuple']['repayLoanASA(axfer,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.repayLoanAsa(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `repayLoanAlgo(pay,uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    repayLoanAlgo: (params: CallParams<OrbitalLendingArgs['obj']['repayLoanAlgo(pay,uint64,account)void'] | OrbitalLendingArgs['tuple']['repayLoanAlgo(pay,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.repayLoanAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawFees()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawFees: (params: CallParams<OrbitalLendingArgs['obj']['withdrawFees()void'] | OrbitalLendingArgs['tuple']['withdrawFees()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.withdrawFees(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `accrueLoanInterest(account,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    accrueLoanInterest: (params: CallParams<OrbitalLendingArgs['obj']['accrueLoanInterest(account,account)void'] | OrbitalLendingArgs['tuple']['accrueLoanInterest(account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.accrueLoanInterest(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `buyoutASA(account,account,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyoutAsa: (params: CallParams<OrbitalLendingArgs['obj']['buyoutASA(account,account,axfer)void'] | OrbitalLendingArgs['tuple']['buyoutASA(account,account,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.buyoutAsa(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `buyoutAlgo(account,account,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyoutAlgo: (params: CallParams<OrbitalLendingArgs['obj']['buyoutAlgo(account,account,pay)void'] | OrbitalLendingArgs['tuple']['buyoutAlgo(account,account,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.buyoutAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `liquidateASA(account,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    liquidateAsa: (params: CallParams<OrbitalLendingArgs['obj']['liquidateASA(account,axfer)void'] | OrbitalLendingArgs['tuple']['liquidateASA(account,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.liquidateAsa(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `liquidateAlgo(account,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    liquidateAlgo: (params: CallParams<OrbitalLendingArgs['obj']['liquidateAlgo(account,pay)void'] | OrbitalLendingArgs['tuple']['liquidateAlgo(account,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.liquidateAlgo(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLoanStatus: (params: CallParams<OrbitalLendingArgs['obj']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'] | OrbitalLendingArgs['tuple']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.getLoanStatus(params))
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    gas: (params: CallParams<OrbitalLendingArgs['obj']['gas()void'] | OrbitalLendingArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OrbitalLendingParamsFactory.gas(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the orbital-lending smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initApplication: async (params: CallParams<OrbitalLendingArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void'] | OrbitalLendingArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.initApplication(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `generateLSTToken(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    generateLstToken: async (params: CallParams<OrbitalLendingArgs['obj']['generateLSTToken(pay)void'] | OrbitalLendingArgs['tuple']['generateLSTToken(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.generateLstToken(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['generateLSTToken(pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `optInToLST(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToLst: async (params: CallParams<OrbitalLendingArgs['obj']['optInToLST(uint64,pay)void'] | OrbitalLendingArgs['tuple']['optInToLST(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.optInToLst(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['optInToLST(uint64,pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `configureLSTToken(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    configureLstToken: async (params: CallParams<OrbitalLendingArgs['obj']['configureLSTToken(axfer,uint64)void'] | OrbitalLendingArgs['tuple']['configureLSTToken(axfer,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.configureLstToken(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['configureLSTToken(axfer,uint64)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getCirculatingLST()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCirculatingLst: async (params: CallParams<OrbitalLendingArgs['obj']['getCirculatingLST()uint64'] | OrbitalLendingArgs['tuple']['getCirculatingLST()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.getCirculatingLst(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['getCirculatingLST()uint64'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getTotalDeposits()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalDeposits: async (params: CallParams<OrbitalLendingArgs['obj']['getTotalDeposits()uint64'] | OrbitalLendingArgs['tuple']['getTotalDeposits()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.getTotalDeposits(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['getTotalDeposits()uint64'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getAcceptedCollateralsCount()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAcceptedCollateralsCount: async (params: CallParams<OrbitalLendingArgs['obj']['getAcceptedCollateralsCount()uint64'] | OrbitalLendingArgs['tuple']['getAcceptedCollateralsCount()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.getAcceptedCollateralsCount(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['getAcceptedCollateralsCount()uint64'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getOraclePrice(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getOraclePrice: async (params: CallParams<OrbitalLendingArgs['obj']['getOraclePrice(uint64)uint64'] | OrbitalLendingArgs['tuple']['getOraclePrice(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.getOraclePrice(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['getOraclePrice(uint64)uint64'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `addNewCollateralType(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addNewCollateralType: async (params: CallParams<OrbitalLendingArgs['obj']['addNewCollateralType(uint64,pay)void'] | OrbitalLendingArgs['tuple']['addNewCollateralType(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.addNewCollateralType(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['addNewCollateralType(uint64,pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `depositASA(axfer,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    depositAsa: async (params: CallParams<OrbitalLendingArgs['obj']['depositASA(axfer,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositASA(axfer,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.depositAsa(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['depositASA(axfer,uint64,pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `depositAlgo(pay,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    depositAlgo: async (params: CallParams<OrbitalLendingArgs['obj']['depositAlgo(pay,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositAlgo(pay,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.depositAlgo(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['depositAlgo(pay,uint64,pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawDeposit(axfer,uint64,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawDeposit: async (params: CallParams<OrbitalLendingArgs['obj']['withdrawDeposit(axfer,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['withdrawDeposit(axfer,uint64,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.withdrawDeposit(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['withdrawDeposit(axfer,uint64,uint64,pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    borrow: async (params: CallParams<OrbitalLendingArgs['obj']['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void'] | OrbitalLendingArgs['tuple']['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.borrow(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `claimLoanRecordASA(account,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimLoanRecordAsa: async (params: CallParams<OrbitalLendingArgs['obj']['claimLoanRecordASA(account,asset)void'] | OrbitalLendingArgs['tuple']['claimLoanRecordASA(account,asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.claimLoanRecordAsa(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['claimLoanRecordASA(account,asset)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLoanRecord: async (params: CallParams<OrbitalLendingArgs['obj']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.getLoanRecord(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanRecordASAId(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLoanRecordAsaId: async (params: CallParams<OrbitalLendingArgs['obj']['getLoanRecordASAId(account)uint64'] | OrbitalLendingArgs['tuple']['getLoanRecordASAId(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.getLoanRecordAsaId(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['getLoanRecordASAId(account)uint64'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `repayLoanASA(axfer,uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    repayLoanAsa: async (params: CallParams<OrbitalLendingArgs['obj']['repayLoanASA(axfer,uint64,account)void'] | OrbitalLendingArgs['tuple']['repayLoanASA(axfer,uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.repayLoanAsa(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['repayLoanASA(axfer,uint64,account)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `repayLoanAlgo(pay,uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    repayLoanAlgo: async (params: CallParams<OrbitalLendingArgs['obj']['repayLoanAlgo(pay,uint64,account)void'] | OrbitalLendingArgs['tuple']['repayLoanAlgo(pay,uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.repayLoanAlgo(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['repayLoanAlgo(pay,uint64,account)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `withdrawFees()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawFees: async (params: CallParams<OrbitalLendingArgs['obj']['withdrawFees()void'] | OrbitalLendingArgs['tuple']['withdrawFees()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.withdrawFees(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['withdrawFees()void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `accrueLoanInterest(account,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    accrueLoanInterest: async (params: CallParams<OrbitalLendingArgs['obj']['accrueLoanInterest(account,account)void'] | OrbitalLendingArgs['tuple']['accrueLoanInterest(account,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.accrueLoanInterest(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['accrueLoanInterest(account,account)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `buyoutASA(account,account,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyoutAsa: async (params: CallParams<OrbitalLendingArgs['obj']['buyoutASA(account,account,axfer)void'] | OrbitalLendingArgs['tuple']['buyoutASA(account,account,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.buyoutAsa(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['buyoutASA(account,account,axfer)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `buyoutAlgo(account,account,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyoutAlgo: async (params: CallParams<OrbitalLendingArgs['obj']['buyoutAlgo(account,account,pay)void'] | OrbitalLendingArgs['tuple']['buyoutAlgo(account,account,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.buyoutAlgo(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['buyoutAlgo(account,account,pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `liquidateASA(account,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    liquidateAsa: async (params: CallParams<OrbitalLendingArgs['obj']['liquidateASA(account,axfer)void'] | OrbitalLendingArgs['tuple']['liquidateASA(account,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.liquidateAsa(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['liquidateASA(account,axfer)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `liquidateAlgo(account,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    liquidateAlgo: async (params: CallParams<OrbitalLendingArgs['obj']['liquidateAlgo(account,pay)void'] | OrbitalLendingArgs['tuple']['liquidateAlgo(account,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.liquidateAlgo(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['liquidateAlgo(account,pay)void'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLoanStatus: async (params: CallParams<OrbitalLendingArgs['obj']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'] | OrbitalLendingArgs['tuple']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.getLoanStatus(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'])}
    },

    /**
     * Makes a call to the orbital-lending smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    gas: async (params: CallParams<OrbitalLendingArgs['obj']['gas()void'] | OrbitalLendingArgs['tuple']['gas()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OrbitalLendingParamsFactory.gas(params))
      return {...result, return: result.return as unknown as (undefined | OrbitalLendingReturns['gas()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new OrbitalLendingClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current orbital-lending app
   */
  state = {
    /**
     * Methods to access global state for the current orbital-lending app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          baseTokenId: result.base_token_id,
          lstTokenId: result.lst_token_id,
          circulatingLst: result.circulating_lst,
          totalDeposits: result.total_deposits,
          adminAccount: result.admin_account,
          ltvBps: result.ltv_bps,
          liqThresholdBps: result.liq_threshold_bps,
          interestBps: result.interest_bps,
          originationFeeBps: result.origination_fee_bps,
          protocolInterestFeeBps: result.protocol_interest_fee_bps,
          oracleApp: result.oracle_app,
          activeLoanRecords: result.active_loan_records,
          acceptedCollateralsCount: result.accepted_collaterals_count,
          feePool: result.fee_pool,
          lastScaledDownDisbursement: result.last_scaled_down_disbursement,
          lastMaxBorrow: result.last_max_borrow,
          lastRequestedLoan: result.last_requested_loan,
          debugDiff: result.debug_diff,
        }
      },
      /**
       * Get the current value of the base_token_id key in global state
       */
      baseTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("base_token_id")) as bigint | undefined },
      /**
       * Get the current value of the lst_token_id key in global state
       */
      lstTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lst_token_id")) as bigint | undefined },
      /**
       * Get the current value of the circulating_lst key in global state
       */
      circulatingLst: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("circulating_lst")) as bigint | undefined },
      /**
       * Get the current value of the total_deposits key in global state
       */
      totalDeposits: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_deposits")) as bigint | undefined },
      /**
       * Get the current value of the admin_account key in global state
       */
      adminAccount: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin_account")) as string | undefined },
      /**
       * Get the current value of the ltv_bps key in global state
       */
      ltvBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ltv_bps")) as bigint | undefined },
      /**
       * Get the current value of the liq_threshold_bps key in global state
       */
      liqThresholdBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("liq_threshold_bps")) as bigint | undefined },
      /**
       * Get the current value of the interest_bps key in global state
       */
      interestBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("interest_bps")) as bigint | undefined },
      /**
       * Get the current value of the origination_fee_bps key in global state
       */
      originationFeeBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("origination_fee_bps")) as bigint | undefined },
      /**
       * Get the current value of the protocol_interest_fee_bps key in global state
       */
      protocolInterestFeeBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("protocol_interest_fee_bps")) as bigint | undefined },
      /**
       * Get the current value of the oracle_app key in global state
       */
      oracleApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("oracle_app")) as bigint | undefined },
      /**
       * Get the current value of the active_loan_records key in global state
       */
      activeLoanRecords: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("active_loan_records")) as bigint | undefined },
      /**
       * Get the current value of the accepted_collaterals_count key in global state
       */
      acceptedCollateralsCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("accepted_collaterals_count")) as bigint | undefined },
      /**
       * Get the current value of the fee_pool key in global state
       */
      feePool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fee_pool")) as bigint | undefined },
      /**
       * Get the current value of the last_scaled_down_disbursement key in global state
       */
      lastScaledDownDisbursement: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("last_scaled_down_disbursement")) as bigint | undefined },
      /**
       * Get the current value of the last_max_borrow key in global state
       */
      lastMaxBorrow: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("last_max_borrow")) as bigint | undefined },
      /**
       * Get the current value of the last_requested_loan key in global state
       */
      lastRequestedLoan: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("last_requested_loan")) as bigint | undefined },
      /**
       * Get the current value of the debug_diff key in global state
       */
      debugDiff: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("debug_diff")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current orbital-lending app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the accepted_collaterals map in box state
       */
      acceptedCollaterals: {
        /**
         * Get all current values of the accepted_collaterals map in box state
         */
        getMap: async (): Promise<Map<AcceptedCollateralKey, AcceptedCollateral>> => { return (await this.appClient.state.box.getMap("accepted_collaterals")) as Map<AcceptedCollateralKey, AcceptedCollateral> },
        /**
         * Get a current value of the accepted_collaterals map by key from box state
         */
        value: async (key: AcceptedCollateralKey): Promise<AcceptedCollateral | undefined> => { return await this.appClient.state.box.getMapValue("accepted_collaterals", key) as AcceptedCollateral | undefined },
      },
      /**
       * Get values from the loan_record map in box state
       */
      loanRecord: {
        /**
         * Get all current values of the loan_record map in box state
         */
        getMap: async (): Promise<Map<string, LoanRecord>> => { return (await this.appClient.state.box.getMap("loan_record")) as Map<string, LoanRecord> },
        /**
         * Get a current value of the loan_record map by key from box state
         */
        value: async (key: string): Promise<LoanRecord | undefined> => { return await this.appClient.state.box.getMapValue("loan_record", key) as LoanRecord | undefined },
      },
    },
  }

  public newGroup(): OrbitalLendingComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void method call against the orbital-lending contract
       */
      initApplication(params: CallParams<OrbitalLendingArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void'] | OrbitalLendingArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a generateLSTToken(pay)void method call against the orbital-lending contract
       */
      generateLstToken(params: CallParams<OrbitalLendingArgs['obj']['generateLSTToken(pay)void'] | OrbitalLendingArgs['tuple']['generateLSTToken(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.generateLstToken(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a optInToLST(uint64,pay)void method call against the orbital-lending contract
       */
      optInToLst(params: CallParams<OrbitalLendingArgs['obj']['optInToLST(uint64,pay)void'] | OrbitalLendingArgs['tuple']['optInToLST(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToLst(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a configureLSTToken(axfer,uint64)void method call against the orbital-lending contract
       */
      configureLstToken(params: CallParams<OrbitalLendingArgs['obj']['configureLSTToken(axfer,uint64)void'] | OrbitalLendingArgs['tuple']['configureLSTToken(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.configureLstToken(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getCirculatingLST()uint64 method call against the orbital-lending contract
       */
      getCirculatingLst(params: CallParams<OrbitalLendingArgs['obj']['getCirculatingLST()uint64'] | OrbitalLendingArgs['tuple']['getCirculatingLST()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCirculatingLst(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCirculatingLST()uint64', v))
        return this
      },
      /**
       * Add a getTotalDeposits()uint64 method call against the orbital-lending contract
       */
      getTotalDeposits(params: CallParams<OrbitalLendingArgs['obj']['getTotalDeposits()uint64'] | OrbitalLendingArgs['tuple']['getTotalDeposits()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalDeposits(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTotalDeposits()uint64', v))
        return this
      },
      /**
       * Add a getAcceptedCollateralsCount()uint64 method call against the orbital-lending contract
       */
      getAcceptedCollateralsCount(params: CallParams<OrbitalLendingArgs['obj']['getAcceptedCollateralsCount()uint64'] | OrbitalLendingArgs['tuple']['getAcceptedCollateralsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAcceptedCollateralsCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getAcceptedCollateralsCount()uint64', v))
        return this
      },
      /**
       * Add a getOraclePrice(uint64)uint64 method call against the orbital-lending contract
       */
      getOraclePrice(params: CallParams<OrbitalLendingArgs['obj']['getOraclePrice(uint64)uint64'] | OrbitalLendingArgs['tuple']['getOraclePrice(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getOraclePrice(params)))
        resultMappers.push((v) => client.decodeReturnValue('getOraclePrice(uint64)uint64', v))
        return this
      },
      /**
       * Add a addNewCollateralType(uint64,pay)void method call against the orbital-lending contract
       */
      addNewCollateralType(params: CallParams<OrbitalLendingArgs['obj']['addNewCollateralType(uint64,pay)void'] | OrbitalLendingArgs['tuple']['addNewCollateralType(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addNewCollateralType(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a depositASA(axfer,uint64,pay)void method call against the orbital-lending contract
       */
      depositAsa(params: CallParams<OrbitalLendingArgs['obj']['depositASA(axfer,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositASA(axfer,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.depositAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a depositAlgo(pay,uint64,pay)void method call against the orbital-lending contract
       */
      depositAlgo(params: CallParams<OrbitalLendingArgs['obj']['depositAlgo(pay,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositAlgo(pay,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.depositAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdrawDeposit(axfer,uint64,uint64,pay)void method call against the orbital-lending contract
       */
      withdrawDeposit(params: CallParams<OrbitalLendingArgs['obj']['withdrawDeposit(axfer,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['withdrawDeposit(axfer,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawDeposit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void method call against the orbital-lending contract
       */
      borrow(params: CallParams<OrbitalLendingArgs['obj']['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void'] | OrbitalLendingArgs['tuple']['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.borrow(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claimLoanRecordASA(account,asset)void method call against the orbital-lending contract
       */
      claimLoanRecordAsa(params: CallParams<OrbitalLendingArgs['obj']['claimLoanRecordASA(account,asset)void'] | OrbitalLendingArgs['tuple']['claimLoanRecordASA(account,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimLoanRecordAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the orbital-lending contract
       */
      getLoanRecord(params: CallParams<OrbitalLendingArgs['obj']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLoanRecord(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getLoanRecordASAId(account)uint64 method call against the orbital-lending contract
       */
      getLoanRecordAsaId(params: CallParams<OrbitalLendingArgs['obj']['getLoanRecordASAId(account)uint64'] | OrbitalLendingArgs['tuple']['getLoanRecordASAId(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLoanRecordAsaId(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLoanRecordASAId(account)uint64', v))
        return this
      },
      /**
       * Add a repayLoanASA(axfer,uint64,account)void method call against the orbital-lending contract
       */
      repayLoanAsa(params: CallParams<OrbitalLendingArgs['obj']['repayLoanASA(axfer,uint64,account)void'] | OrbitalLendingArgs['tuple']['repayLoanASA(axfer,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.repayLoanAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a repayLoanAlgo(pay,uint64,account)void method call against the orbital-lending contract
       */
      repayLoanAlgo(params: CallParams<OrbitalLendingArgs['obj']['repayLoanAlgo(pay,uint64,account)void'] | OrbitalLendingArgs['tuple']['repayLoanAlgo(pay,uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.repayLoanAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdrawFees()void method call against the orbital-lending contract
       */
      withdrawFees(params: CallParams<OrbitalLendingArgs['obj']['withdrawFees()void'] | OrbitalLendingArgs['tuple']['withdrawFees()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawFees(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a accrueLoanInterest(account,account)void method call against the orbital-lending contract
       */
      accrueLoanInterest(params: CallParams<OrbitalLendingArgs['obj']['accrueLoanInterest(account,account)void'] | OrbitalLendingArgs['tuple']['accrueLoanInterest(account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.accrueLoanInterest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a buyoutASA(account,account,axfer)void method call against the orbital-lending contract
       */
      buyoutAsa(params: CallParams<OrbitalLendingArgs['obj']['buyoutASA(account,account,axfer)void'] | OrbitalLendingArgs['tuple']['buyoutASA(account,account,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyoutAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a buyoutAlgo(account,account,pay)void method call against the orbital-lending contract
       */
      buyoutAlgo(params: CallParams<OrbitalLendingArgs['obj']['buyoutAlgo(account,account,pay)void'] | OrbitalLendingArgs['tuple']['buyoutAlgo(account,account,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyoutAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a liquidateASA(account,axfer)void method call against the orbital-lending contract
       */
      liquidateAsa(params: CallParams<OrbitalLendingArgs['obj']['liquidateASA(account,axfer)void'] | OrbitalLendingArgs['tuple']['liquidateASA(account,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.liquidateAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a liquidateAlgo(account,pay)void method call against the orbital-lending contract
       */
      liquidateAlgo(params: CallParams<OrbitalLendingArgs['obj']['liquidateAlgo(account,pay)void'] | OrbitalLendingArgs['tuple']['liquidateAlgo(account,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.liquidateAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool) method call against the orbital-lending contract
       */
      getLoanStatus(params: CallParams<OrbitalLendingArgs['obj']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'] | OrbitalLendingArgs['tuple']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLoanStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)', v))
        return this
      },
      /**
       * Add a gas()void method call against the orbital-lending contract
       */
      gas(params: CallParams<OrbitalLendingArgs['obj']['gas()void'] | OrbitalLendingArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.gas(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the orbital-lending contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as OrbitalLendingComposer
  }
}
export type OrbitalLendingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(params?: CallParams<OrbitalLendingArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void'] | OrbitalLendingArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void'] | undefined]>

  /**
   * Calls the generateLSTToken(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  generateLstToken(params?: CallParams<OrbitalLendingArgs['obj']['generateLSTToken(pay)void'] | OrbitalLendingArgs['tuple']['generateLSTToken(pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['generateLSTToken(pay)void'] | undefined]>

  /**
   * Calls the optInToLST(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToLst(params?: CallParams<OrbitalLendingArgs['obj']['optInToLST(uint64,pay)void'] | OrbitalLendingArgs['tuple']['optInToLST(uint64,pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['optInToLST(uint64,pay)void'] | undefined]>

  /**
   * Calls the configureLSTToken(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  configureLstToken(params?: CallParams<OrbitalLendingArgs['obj']['configureLSTToken(axfer,uint64)void'] | OrbitalLendingArgs['tuple']['configureLSTToken(axfer,uint64)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['configureLSTToken(axfer,uint64)void'] | undefined]>

  /**
   * Calls the getCirculatingLST()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCirculatingLst(params?: CallParams<OrbitalLendingArgs['obj']['getCirculatingLST()uint64'] | OrbitalLendingArgs['tuple']['getCirculatingLST()uint64']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['getCirculatingLST()uint64'] | undefined]>

  /**
   * Calls the getTotalDeposits()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalDeposits(params?: CallParams<OrbitalLendingArgs['obj']['getTotalDeposits()uint64'] | OrbitalLendingArgs['tuple']['getTotalDeposits()uint64']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['getTotalDeposits()uint64'] | undefined]>

  /**
   * Calls the getAcceptedCollateralsCount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAcceptedCollateralsCount(params?: CallParams<OrbitalLendingArgs['obj']['getAcceptedCollateralsCount()uint64'] | OrbitalLendingArgs['tuple']['getAcceptedCollateralsCount()uint64']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['getAcceptedCollateralsCount()uint64'] | undefined]>

  /**
   * Calls the getOraclePrice(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOraclePrice(params?: CallParams<OrbitalLendingArgs['obj']['getOraclePrice(uint64)uint64'] | OrbitalLendingArgs['tuple']['getOraclePrice(uint64)uint64']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['getOraclePrice(uint64)uint64'] | undefined]>

  /**
   * Calls the addNewCollateralType(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addNewCollateralType(params?: CallParams<OrbitalLendingArgs['obj']['addNewCollateralType(uint64,pay)void'] | OrbitalLendingArgs['tuple']['addNewCollateralType(uint64,pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['addNewCollateralType(uint64,pay)void'] | undefined]>

  /**
   * Calls the depositASA(axfer,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositAsa(params?: CallParams<OrbitalLendingArgs['obj']['depositASA(axfer,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositASA(axfer,uint64,pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['depositASA(axfer,uint64,pay)void'] | undefined]>

  /**
   * Calls the depositAlgo(pay,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositAlgo(params?: CallParams<OrbitalLendingArgs['obj']['depositAlgo(pay,uint64,pay)void'] | OrbitalLendingArgs['tuple']['depositAlgo(pay,uint64,pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['depositAlgo(pay,uint64,pay)void'] | undefined]>

  /**
   * Calls the withdrawDeposit(axfer,uint64,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawDeposit(params?: CallParams<OrbitalLendingArgs['obj']['withdrawDeposit(axfer,uint64,uint64,pay)void'] | OrbitalLendingArgs['tuple']['withdrawDeposit(axfer,uint64,uint64,pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['withdrawDeposit(axfer,uint64,uint64,pay)void'] | undefined]>

  /**
   * Calls the borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  borrow(params?: CallParams<OrbitalLendingArgs['obj']['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void'] | OrbitalLendingArgs['tuple']['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['borrow(axfer,uint64,uint64,uint64,uint64,account,string,pay)void'] | undefined]>

  /**
   * Calls the claimLoanRecordASA(account,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimLoanRecordAsa(params?: CallParams<OrbitalLendingArgs['obj']['claimLoanRecordASA(account,asset)void'] | OrbitalLendingArgs['tuple']['claimLoanRecordASA(account,asset)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['claimLoanRecordASA(account,asset)void'] | undefined]>

  /**
   * Calls the getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLoanRecord(params?: CallParams<OrbitalLendingArgs['obj']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | OrbitalLendingArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getLoanRecordASAId(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLoanRecordAsaId(params?: CallParams<OrbitalLendingArgs['obj']['getLoanRecordASAId(account)uint64'] | OrbitalLendingArgs['tuple']['getLoanRecordASAId(account)uint64']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['getLoanRecordASAId(account)uint64'] | undefined]>

  /**
   * Calls the repayLoanASA(axfer,uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  repayLoanAsa(params?: CallParams<OrbitalLendingArgs['obj']['repayLoanASA(axfer,uint64,account)void'] | OrbitalLendingArgs['tuple']['repayLoanASA(axfer,uint64,account)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['repayLoanASA(axfer,uint64,account)void'] | undefined]>

  /**
   * Calls the repayLoanAlgo(pay,uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  repayLoanAlgo(params?: CallParams<OrbitalLendingArgs['obj']['repayLoanAlgo(pay,uint64,account)void'] | OrbitalLendingArgs['tuple']['repayLoanAlgo(pay,uint64,account)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['repayLoanAlgo(pay,uint64,account)void'] | undefined]>

  /**
   * Calls the withdrawFees()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawFees(params?: CallParams<OrbitalLendingArgs['obj']['withdrawFees()void'] | OrbitalLendingArgs['tuple']['withdrawFees()void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['withdrawFees()void'] | undefined]>

  /**
   * Calls the accrueLoanInterest(account,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  accrueLoanInterest(params?: CallParams<OrbitalLendingArgs['obj']['accrueLoanInterest(account,account)void'] | OrbitalLendingArgs['tuple']['accrueLoanInterest(account,account)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['accrueLoanInterest(account,account)void'] | undefined]>

  /**
   * Calls the buyoutASA(account,account,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyoutAsa(params?: CallParams<OrbitalLendingArgs['obj']['buyoutASA(account,account,axfer)void'] | OrbitalLendingArgs['tuple']['buyoutASA(account,account,axfer)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['buyoutASA(account,account,axfer)void'] | undefined]>

  /**
   * Calls the buyoutAlgo(account,account,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyoutAlgo(params?: CallParams<OrbitalLendingArgs['obj']['buyoutAlgo(account,account,pay)void'] | OrbitalLendingArgs['tuple']['buyoutAlgo(account,account,pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['buyoutAlgo(account,account,pay)void'] | undefined]>

  /**
   * Calls the liquidateASA(account,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  liquidateAsa(params?: CallParams<OrbitalLendingArgs['obj']['liquidateASA(account,axfer)void'] | OrbitalLendingArgs['tuple']['liquidateASA(account,axfer)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['liquidateASA(account,axfer)void'] | undefined]>

  /**
   * Calls the liquidateAlgo(account,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  liquidateAlgo(params?: CallParams<OrbitalLendingArgs['obj']['liquidateAlgo(account,pay)void'] | OrbitalLendingArgs['tuple']['liquidateAlgo(account,pay)void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['liquidateAlgo(account,pay)void'] | undefined]>

  /**
   * Calls the getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLoanStatus(params?: CallParams<OrbitalLendingArgs['obj']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'] | OrbitalLendingArgs['tuple']['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)'] | undefined]>

  /**
   * Calls the gas()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gas(params?: CallParams<OrbitalLendingArgs['obj']['gas()void'] | OrbitalLendingArgs['tuple']['gas()void']>): OrbitalLendingComposer<[...TReturns, OrbitalLendingReturns['gas()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the orbital-lending smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): OrbitalLendingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): OrbitalLendingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<OrbitalLendingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<OrbitalLendingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<OrbitalLendingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<OrbitalLendingComposerResults<TReturns>>
}
export type OrbitalLendingComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

