{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts",
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/config.algo.ts"
  ],
  "mappingsiDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAq+DG;;AAAA;AAAA;AAAA;;AAAA;AAr+DH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAq+DG;;;AAAA;;AA7DA;;AAAA;AAAA;AAAA;;AAAA;AAx6DH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAw6DG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvBD;;AAAA;AAAA;AAAA;;AAAA;AAj5DF;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAi5DE;;;AAAA;;AA9BC;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AApJD;;AAAA;AAAA;AAAA;;AAAA;AA/tDF;;;AAAA;;;AAAA;AAAA;;;AAAA;AA+tDE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA1CC;;AAAA;AAAA;AAAA;;AAAA;AAppDH;;;AAAA;AAAA;;AAopDG;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArIA;;AAAA;AAAA;AAAA;;AAAA;AA/gDH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA+gDG;;;AAAA;;AAnGA;;AAAA;AAAA;AAAA;;AAAA;AA56CH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA46CG;;;AAAA;;AA9HA;;AAAA;AAAA;AAAA;;AAAA;AA9yCH;;;AAAA;AA8yCG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtJA;;AAAA;AAAA;AAAA;;AAAA;AAxpCH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAwpCG;;;AAAA;;AAlCA;;AAAA;AAAA;AAAA;;AAAA;AAtnCH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsnCG;;;AAAA;;AA1DA;;AAAA;AAAA;AAAA;;AAAA;AA5jCH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA4jCG;;;AAAA;;AAbD;;AAAA;AAAA;AAAA;;AAAA;AA/iCF;;;AAAA;AAAA;;AA+iCE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5JA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjEC;;AAAA;AAAA;AAAA;;AAAA;AAl1BH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAk1BG;;;AAAA;;AAjFA;;AAAA;AAAA;AAAA;;AAAA;AAjwBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiwBG;;;AAAA;;AAzDA;;AAAA;AAAA;AAAA;;AAAA;AAxsBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwsBG;;;AAAA;;AAjDA;;AAAA;AAAA;AAAA;;AAAA;AAvpBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAupBG;;;AAAA;;AA1EA;;AAAA;AAAA;AAAA;;AAAA;AA7kBH;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AA6kBG;;;AAAA;;AA3CA;;AAAA;AAAA;AAAA;;AAAA;AAliBH;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAkiBG;;;AAAA;;AAjFD;;AAAA;AAAA;AAAA;;AAAA;AAjdF;;;AAidE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAhcF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAgcE;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AAvaF;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuaE;;;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AAxYF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwYE;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATC;;AAAA;AAAA;AAAA;;AAAA;AAvWH;;;AAAA;AAAA;;AAuWG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA5VH;;;AAAA;AA4VG;;;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AA5SH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA4SG;;;AAAA;;AArGA;;AAAA;AAAA;AAAA;;AAAA;AAvMH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAuMG;;;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AApLH;;;AAAA;AAAA;;AAAA;;;AAAA;AAoLG;;;AAAA;;AAAD;;;AAtJA;AAwJE;;AAAA;AAC2B;;AAAA;AAhL7B;AAgLE;AAAA;AAtCF;;AAuCE;;AAAA;AAZF;;AAa8B;;AAA5B;;AAcF;;;AAYgB;;AArLhB;AAAA;AAAA;AAAA;AAqLS;AAAP;AAEA;;AAAA;;AAvLF;AAAA;AAAA;AAAA;AAuLE;AAAA;;;AAAA;;AAAA;;ACpQkC;;;;ADoQlC;AAAA;;;;AAAA;AAKO;;AAA4C;;AAA5C;AAAP;AAlLF;;AAoLE;;AAAA;AAjLF;;AAkLE;;AAAA;AA/KF;;AAgLE;;AAAA;AAxGF;;AAyG0C;AAAxC;AAxMF;;AAyMwB;AAAtB;AA/MF;;AAgN+B;AAA7B;AA7MF;AA8M8B;AAA5B;AA/GF;;AAgHmC;AAAjC;AAlLF;;AAmLE;;AAAA;AAnMF;;AAoME;;AAAA;AA3NF;;AA4N4B;;;;;;;;;;AAA1B;AAlLF;;AAmLwB;;AAAtB;AAhLF;;AAiL4B;;;AAA1B;AA9IF;;AA+I6B;AAA3B;AAxJF;;AAyJ+B;AAA7B;AAhLF;;AAiL6B;;;AAA3B;AA9KF;;AA+K0B;AAAxB;AA5KF;;AA6K0B;;;AAAxB;AA1KF;;AA2K2B;;;AAAzB;AAtFF;;AAuF6C;AAA3C;AA1KF;;AA2K6B;AAA3B;AArKF;;AAsK4B;;AAA1B;AAnKF;;;;;;;;;;;;;;AAoK4B;AAA1B;AA9JF;;AA+J+B;AAA7B;AA5JF;;AA6J8B;AAA5B;AAzFF;;AA0F+B;AAA7B;AAvFF;;AAwFmC;AAAjC;AArFF;;;;;;;;;;;;AAsF0B;AAAxB;AApFF;;AAqFwC;;AAAtC;AApFF;;AAqFmC;AAAjC;AA5JF;;ACpIiC;;ADiS/B;AA1JF;;AA2JsC;;AAApC;AAvMF;AAAA;;AAAA;AAAA;AA+CA;;AAyJE;AAAA;AAC6B;;AAAA;AApI/B;;AAoIE;AAAA;AAjIF;;AAkIE;;AAAA;AAxHF;;AAyHuC;AAArC;AA3HF;;AA4H8C;AAA5C;AA9HF;;AA+HE;;AAAA;AA3JF;;;;;;;;;;;;;;;;;;;;;;;;;AA4JuC;AAArC;AAxHF;;AAyH4B;AAA1B;AA3HF;;AA4HwC;AAAtC;AA7PF;AAAA;AAAA;AAAA;AA+P+B;AAA7B;;;AACE;AAE0B;;AAlQ9B;AAAA;AAAA;AAAA;AAmQ4C;AACvB;;;;;;;AAJjB;;;AClTkC;;;ADkTlC;AA9IJ;AAAA;;AAAA;AAAA;AAuJiC;AAA/B;;;AACE;AAE0B;;AA1J9B;AAAA;;AAAA;AAAA;AA2J8C;AACzB;;;;;;;AAJjB;;;AC5TkC;;;AD4TlC;;;;;;AA2BJ;;;AAegB;;AA7RhB;AAAA;AAAA;AAAA;AA6RS;AAAP;AAGO;;AAAA;;;AAAqB;;AAAgB;;AAAhB;AAArB;;;;AAAP;AACO;;AAAA;;;AAAsB;;AAAgB;;AAAhB;AAAtB;;;;AAAP;AAEA;;AAAA;;;AACS;;AAAA;;AAAA;AAAP;AAEK;;AAAiB;;AAAjB;AAAP;AAGO;;AAAA;;;AAAsC;;AAAoB;;;AAApB;AAAtC;;;;AAAP;AAnRF;;AAoRE;;AAAA;AAjRF;;AAkRE;;AAAA;AA/QF;;AAgRE;;AAAA;AA7QF;;AA8QE;;AAAA;AA3QF;;AA4QE;;AAAA;AAzQF;;AA0QE;;AAAA;AArQF;;;;;;;;;;;;;;;;;;AAsQE;;AAAA;AA7PF;;AA8PE;;AAAA;AAnNF;;AAoNE;;AAAA;AA5KF;AAAA;;AAAA;AAAA;AA6KoC;AAAlC;AA7KF;;AA6KE;AAAA;AA9KF;;AA+KwC;;AAAtC;AA7QF;;AA8QE;;AAAA;AA/PF;;AAgQE;;AAAA;AA7PF;;AA8PE;;AAAA;AAlRF;AAAA;;AAAA;AAAA;AAoRM;;;AA5QN;AAAA;;AAAA;AAAA;AARA;AAAA;;AAAA;AAAA;AAoRoC;AAA9B;;;AApRN;AAAA;;AAAA;AAAA;AAQA;;AA6QI;AAAA;;;;;;;;;;;;;;AAIJ;;;AAEgB;;AAhUhB;AAAA;AAAA;AAAA;AAgUS;AAAA;;;AAAqD;;AA7M9D;AAAA;;AAAA;AAAA;AA6MuD;AAA9C;;;;AAAP;AACO;;AAAS;;AAAT;AAAP;AAC4B;;AAAA;AApL9B;;AAoLE;AAAA;;;;;;AAOF;;;AAEgB;;AA3UhB;AAAA;AAAA;AAAA;AA2US;AAAP;AAxNF;;AAyNE;;AAAA;;AAzVF;AAAA;;AAAA;AAAA;AAgWE;AA7VF;AAAA;AAAA;AAAA;AAqWE;AAnQF;AAAA;;AAAA;AAAA;AA2QE;AAOF;;;AACgB;;AA3WhB;AAAA;AAAA;AAAA;AA2WS;AAAP;AACA;;AAAA;;AA5WF;AAAA;AAAA;AAAA;AA4WE;AAAA;;;AAAA;;AAAA;;ACxbgC;;;;ADwbhC;AAAA;;;;AAAA;AAnYF;AAAA;AAAA;AAAA;AA0YmD;AAClC;AAEI;;AACE;;AAAA;;AAAA;AACG;;AAAA;;AAAA;AAEJ;;AACiB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;AACwB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;;;;;;;AAHI;;;;;;;;;AALJ;;;;AC7bqB;;;AD6brB;;;AAYW;AApZ5B;;AAoZE;AAAA;;;;;;AASF;;;AACgB;;AA1YhB;AAAA;AAAA;AAAA;AA0YS;AAAP;AACA;;AAAA;;AA3YF;AAAA;AAAA;AAAA;AA2YE;AAAA;;;AAAA;;AAAA;;ACtdkC;;;ADsdlC;AAAA;;;;AAAA;AAI0B;;AAAA;AAna5B;;AAmaE;AAAA;AAGA;AAE0B;;AAET;;;;;;;;;AAJjB;;;AC3doC;;;AD2dpC;;;;;;AAgBF;;;AACgB;;AAnahB;AAAA;AAAA;AAAA;AAmaS;AAAP;AAvbF;AAAA;;AAAA;AAAA;AAwbiC;AAAoB;;AAAA;;AAA5C;AAAP;AAEA;;AAAA;;AAtaF;AAAA;AAAA;AAAA;AAsaE;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;;AAAA;AAnbF;;AAubE;;AAAA;;;;;;AASF;;;AAhbA;AAAA;;AAAA;AAAA;AAkbyB;AAAA;;AAAA;;AAAA;AAGR;AAAA;;;;;;;;;;;;;;AAAA;;;;ACjgBqB;;;ADigBrB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAMK;AAApB;AA4BF;;;AA3YsF;;AAAA;;AAAA;AA6YlC;AAAA;AAAA;AAEE;AAAhB;;AAAgB;AAA9C;;AAAmB;AAEH;;AAAA;;;AACI;;AAAA;;;AACM;;AAAA;;;AACb;;AAAA;AACY;;AAAA;;;AALQ;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AAeF;;;AA/ZsF;;AAAA;;AAAA;AAialC;AAAA;AAAA;AAEhB;AAAhB;;AAAgB;AAA3B;AAAA;;AAAA;AAAP;AACM;;AAAmB;AAEH;;AAAA;;;AACI;;AAAA;;;AACM;;AAAA;;;AACb;;AAAA;AACY;;AAAA;;;AALQ;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AAgBF;;;AA3hBA;AAAA;AAAA;AAAA;AAkiBmD;AACnC;;AA5gBhB;AAAA;AAAA;AAAA;AA4gBS;AAAP;AACyB;;AAAA;AAAA;AAAA;;AAAlB;AAAP;AA9boF;;AAAA;;AAAA;AAAA;AAyX9C;AAAA;;AAsE/B;AAAP;AACA;;AAAA;;AA/gBF;AAAA;AAAA;AAAA;AA+gBE;AAAA;;;AAAA;;AAAA;;ACzlBkC;;;;ADylBlC;AAAA;;;;AAAA;AAtiBF;AAAA;AAAA;AAAA;AA+iBoD;;AAAA;;AAAA;AAAA;AAAA;AAI/B;;AAJ+B;AAAA;;AAAA;AAQlD;;AAAA;AAAA;;AAAA;AAxcF;AAAA;;AAAA;AAAA;AAyckF;AAAxC;AAzc1C;;AAycE;AAAA;AACA;AAEmB;;AACO;AAET;;;;;;;;;;;AALjB;;;AC3mBoC;;;AD2mBpC;AA1FsC;AAAA;;AAoGtC;;;;;;AAGF;;;AAOgB;;AAtjBhB;AAAA;AAAA;AAAA;AAsjBS;AAAP;AACA;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;;AAAA;;AAAA;;;AA5fF;AAAA;;AAAA;AAAA;AA6f6B;;AAAA;AA7f7B;;AA6fE;AAAA;AAC0B;;;AArf5B;;AAqfE;AAAA;;AA+DF;;;AAhpBA;AAAA;AAAA;AAAA;AAkpBmD;AACjD;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAKA;;AAAA;;AC1sBoC;AD0sBpC;AAAA;AAnfF;AAAA;;AAAA;AAAA;AAsfmC;AAAW;AAArC;AAAP;AACA;;AAAA;;;AAEuB;;;AAAjB;AA9pBR;AAAA;AAAA;AAAA;;AAAA;AAaA;AAAA;AAAA;AAAA;AAwpBE;;;;;AAKA;AAE0B;;AAzqB5B;AAAA;;AAAA;AAAA;AA0qByC;;;;;;;;;AAHvC;;;AC5tBoC;;;AD4tBpC;AAhqBF;AAAA;;AAAA;AAAA;AAyqBE;AAzqBF;;AAyqBE;AAAA;AAtqBF;AAAA;AAAA;AAAA;AAuqBE;;AAAA;AAvqBF;AAuqBE;AAAA;AAC0B;;;AAzlB5B;;AAylBE;AAAA;;AA3qBF;AAAA;;AAAA;AAAA;AC1DkC;;AD0oBF;AA7kBhC;AAAA;AAAA;AAAA;AA+kBmB;AAEa;;AAAA;AC9oBE;;AD+oBzB;;;;;;;;AAkGT;;;AA9rBA;AAAA;;AAAA;AAAA;AAqsBiD;AAniBjD;AAAA;;AAAA;AAAA;AAoiBmC;AAAW;AAArC;AAAP;AACA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAMA;;AAAA;;AACU;;;AADV;AAAA;AAIuB;;;AAAjB;AAIF;;AAAoB;;AAApB;AAAJ;;;AA9sBF;AAAA;;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAunBmB;;AAAA;AACV;;AAAA;AAwFP;AAAA;;;AAE2C;;AA/tB7C;AAAA;AAAA;AAAA;AA+tBiG;AAAxF;;AAAA;AAAA;;AAAA;AAAP;AACA;AAE0B;;AAluB5B;AAAA;AAAA;AAAA;AAmuB0C;;;;;;;;;AAHxC;;;AClxBoC;;;ADkxBpC;AAttBF;AAAA;;AAAA;AAAA;AA+tBE;;AAAA;AA/tBF;;AA+tBE;AAAA;AA5tBF;AAAA;AAAA;AAAA;AA6tBE;AAAA;AA7tBF;AA6tBE;AAAA;AAC0B;;;AA/oB5B;;AA+oBE;AAAA;;AAhI+B;AAAA;;;;;;;;AAAA;;;;AC7pBK;;;AD6pBL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;ACjqBM;;;ADiqBN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAMb;;AAAA;AACV;;AAAA;;;;;;;;AAoIT;;;;;;AArlBA;AAAA;;AAAA;AAAA;AA8lBmC;AAAW;AAArC;AAAP;AA1pBqD;;AA4pBb;;AA5pBa;AA4pBL;AAAA;AAAA;;AAAA;AACzB;;;AAAjB;AAEN;;;AACuD;;AAA1B;;;AAAkC;;AACxB;AAArC;;AAAkB;AAAlB;;AA47BF;;AAAA;;ACvvDuC;;;ADuvDvC;AAAA;AAEA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAGqC;;AAAA;AAHrC;AAAA;;;;AAAA;AAlmDoF;;AAAA;;AAAA;AAyX9C;AAAA;;AA+uCtC;AA/7BM;;AAAA;;AAAA;;AAAgB;;;AA9uBxB;AAAA;;AAAA;AAAA;AA+uBgC;ACh0BE;;ADg0BH;AA5nB/B;;AA6nBE;;AAAA;AAjxBF;AAAA;AAAA;AAAA;AAkxBuC;;;AAg/BpB;;AAAA;ACjzDkB;;ADkzDV;AA5mD3B;;AA+mDE;;AAAA;AAEO;AAAP;AA3vDF;AAAA;AAAA;AAAA;AAmCA;AAAA;;AAAA;AAAA;AAouDiB;ACp0DiB;;ADq0DzB;AAlsDT;AAAA;;AAAA;AAAA;AAurDS;;AAAA;AAAA;AAAP;AAnuDF;AAAA;;AAAA;AAAA;AAuvDuB;;AAAA;AC90DW;;AD80DZ;AACd;;AAAA;;AAAuB;AAAvB;AAAA;;AAAA;;AA/wDR;AAAA;;AAAA;AAAA;AAixDE;AAjxDF;;AAixDE;AAAA;AAhpDF;;AAipDE;AAAA;AA5gCA;;AAAA;;;AAEW;;AAkiCL;AAAe;;;AAEf;;AAAmB;;;AAQnB;;AAAA;AAAA;;AAAkB;AAKU;;AAAA;;;AAC4B;;AAAjB;;AAAiB;AAA9B;;AAAA;AAAZ;AA10DtB;AAAA;AAAA;AAAA;AA60Dc;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;AAHE;AAAA;AAAA;AAKL;;AAAA;AA3vDf;AAAA;;AAAA;AAAA;AA4vDkB;AAXmB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9tDkB;;AAAA;;AAAA;AA8tDrD;AAAA;AAeA;;AAAA;;AAAA;;;AAjjC0B;;AAyjC1B;AA91DF;AAAA;AAAA;AAAA;AAi2D0C;;;;;;;;;;;;;AAHxC;;;ACh5DoC;;;ADg5DpC;AAxjCA;AAAA;;;AAntBF;AAAA;;AAAA;AAAA;AAotB6B;AAptB7B;;AAotBE;AAAA;AAC0B;;;AA5sB5B;;AA4sBE;AAAA;;AAP8D;;AAA5D;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;AAgBJ;;;AAWsB;;AAAA;AA7zBtB;AAAA;AAAA;AAAA;AAg0Bc;;AAAA;AACsB;;AAAnB;AAFG;;AAGF;;AAHE;AAAA;AAAA;AAzuBpB;AAAA;;AAAA;AAAA;AA+uBkB;AAX0B;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjtBW;;AAAA;;AAAA;AAitBrD;AAAA;AA9sBF;AAAA;;AAAA;AAAA;AA4tBoE;AAAjC;AA5tBnC;;AA4tBE;AAAA;;AAGF;;;AAluBuD;;AAAA;;AAAA;AAouBrB;AAAA;;AAAhC;AAxqBF;AAAA;;AAAA;AAAA;AAyqBmC;AAAW;AAArC;AAAP;AACA;;;;AAEA;;AAAA;;;;AAE0B;;;AAvvB5B;;AAuvBE;AAAA;;AAyDF;;;;;;;AA/3BA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAsEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAnCA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA+yBE;;;AAAoB;;;AArxBtB;AAAA;;AAAA;AAAA;AAy0Bc;;;AAt2Bd;AAAA;;AAAA;AAAA;AAMA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA+zBM;;AAAA;AAAJ;;;AACqB;;AAAA;;AAAA;AACF;;AAAA;AAAX;AAAN;;AA9zBJ;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AAu0BM;;;AAAc;;AAAA;AAAA;;AAAA;;;;AAAd;;;;;;;;;;;AA/zBN;;AA21BE;;AAAA;AAAA;;AAAA;AACA;;AAAA;AApCQ;;AAAA;;AAAA;AAAA;;AAAe;AC56BS;;AD66BxB;;AAAgB;AACH;;AAAA;;AAAA;AACb;;AAAA;;AAAA;AAAwB;;AAAA;;AAAA;AAAxB;AAAN;;;;;AAl1BJ;AAAA;;AAAA;AAAA;;;;;;AAqzByB;;AAAA;;AAAA;ACl5BS;;ADm5Bd;AAAZ;AAAA;;AACN;;;AAA4B;;;AA0CN;;;AAxCN;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;ACt5BgB;;ADu5Bb;AACZ;;AAAA;;;AAsCe;;;AA+CxB;;;AACQ;;AAAgB;;AAAU;AAA1B;AACN;;;AAAoB;AAAP;;AAAA;;AAAA;AAz2Bf;AAAA;;AAAA;AAAA;AA02BmB;;AAAA;AACoB;;AAAb;;AAAa;AAA9B;AAAP;;AAAA;;AAAA;AASF;;;AAj2BuD;;AAAA;;AAAA;AAk2Bd;AAAA;AAAA;AACd;;;AAGA;AAAA;;;AACD;;AAAA;;;AAh9B1B;AAAA;AAAA;AAAA;AAk9BwB;;AAAA;;;AACT;;AAAA;AA73Bf;AAAA;;AAAA;AAAA;AA83BkB;AAPD;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AASf;;AAAA;AAAA;AACA;AASF;;;;;;;AAC6B;;AAArB;AAx4BR;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA04BM;AAAJ;;;AAAwB;AAAP;;AAAA;AAEX;;AAAA;;AAAiB;AAAjB;AAAA;;AA1DN;;;AAAyB;;;AAxwB3B;;;;;;;;;;;;;;;;;;;;;;;AA40BE;;AAAA;AAAA;;AAAA;AACA;;;AAv5BF;;AAw5BI;;AAAA;AACO;AAAP;;AAAA;AA55BJ;AAAA;;AAAA;AAAA;AAk6BqB;AAAA;;AAAA;ACtiCY;;ADuiCL;AACD;AAp6B3B;;AAq6BE;AAAA;AAx6BF;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA86ByB;AAAnB;;AACJ;;;AACqB;;AAAA;;AAAA;ACjjCU;;ADkjClB;AAAX;;AA19BJ;AAAA;;AAAA;AAAA;AC1FkC;;ADyjC1B;AAAmB;AAGN;;AAAA;AAAA;;AAAA;AC5jCa;;AD6jCE;AAC5B;AAA2B;AAIN;;AAAA;;AAAA;AA/7B7B;;AA+7BE;AAAA;AAn3BF;;;;;;;;;;;;;;;;;;;;;;;AAo3BE;;AAAA;AAtgCF;AAAA;AAAA;AAAA;AAygCE;;AAAA;AAzgCF;AAygCE;AAAA;AAtgCF;AAAA;;AAAA;AAAA;AAygCE;AAzgCF;;AAygCE;AAAA;AAh8BF;;AAm8BE;;AAAA;AAIA;;AAAA;AAp8BF;AAAA;;AAAA;AAAA;AAk1BmB;;AAAA;AC19BmB;;;;;AD49Bf;AC99BU;;ADi+Bd;ACn+Be;;ADo+BN;AAApB;;AA0DoB;;;AA0D5B;;;AA/7BuD;;AAAA;;AAAA;AAg8BZ;AAAA;AAAzC;AAYF;;;;;AArjCA;AAAA;AAAA;AAAA;AAujCmD;AAl5BnD;AAAA;;AAAA;AAAA;AAm5BmC;AAAW;AAArC;AAAP;AACA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAKuB;;;AAAjB;AACuC;;AAA1B;;;AAAb;AAEgC;;AAA1B;;;AACa;;;AAAA;AAElB;;AAAA;;AAAA;AAAP;AAEM;;AAAwB;AAAxB;AAAA;;AAn/BR;AAAA;;AAAA;AAAA;AAs/BE;;AAAA;AAt/BF;;AAs/BE;AAAA;AACA;;AAAA;;;AAEA;;;AAn+BqD;;AAo+B3B;;AAp+B2B;AAo+BnB;;AAj+BpC;AAAA;;AAAA;AAAA;AAk+BsC;AAAlC;AAl+BJ;;AAk+BI;AAAA;AAEA;AAE0B;;AACW;AAAA;AAAlB;;AAAkB;AACC;AAAjB;;AAAiB;;;;;;;AAJtC;;;ACloCkC;;;ADkoClC;;AAWsC;;AACb;AAAA;AAAA;;;AACD;AAAA;;;AA7lC5B;AAAA;AAAA;AAAA;AAgmCgB;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKL;;AAAA;AA9gCjB;AAAA;;AAAA;AAAA;AA+gCoB;AAXwB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAj/BW;;AAi/B3B;;AAj/B2B;AAi/BnD;AAAA;;;;;;AAqBJ;;;;;AAEgB;;AA1lChB;AAAA;AAAA;AAAA;AA0lCS;AAAP;AA58BF;AAAA;;AAAA;AAAA;AA68BmC;AAAW;AAArC;AAAP;AACA;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;ACrqCoC;ADqqCpC;AAAA;;;;AAAA;AAnmCF;AAAA;;AAAA;AAAA;AA6GA;AAAA;;AAAA;AAAA;AA0/ByB;AAAjB;AAAA;;AACN;;;AACE;AAznCJ;AAAA;AAAA;AAAA;AA4nC4C;;;;;;;;;;;;;;AAHxC;;;AC3qCkC;;;AD2qClC;AASA;;;AAlnCJ;;AAmnC0B;AAAtB;AAtgCJ;;AAugCgD;AAA5C;;;;;;AAaJ;;;;;;;AAxiCuD;;AAAA;;AAAA;AAAA;;AAgjCrB;AAAA;;AAAhC;AAp/BF;AAAA;;AAAA;AAAA;AAq/BmC;AAAW;AAArC;AAAP;AAGA;;;;AAGqC;AAAA;AAAA;AAAA;;AAAA;AAC/B;AAA+B;;AAAiB;AAAhD;AAAA;;AACA;AAAiC;;;AAAjC;AAAA;;AAAA;;AAGmB;;;AAAA;AAAA;AAAA;;AACzB;AAAA;AAGM;AAAA;;AAAA;;AAAwB;;;AAAxB;AAAA;;AACmB;;;AACzB;AAAA;AAGmB;AC9tCa;;AD8tCb;AACb;;AAAiB;AAAjB;AAGuB;AAAzB;AA9oCN;AAAA;;AAAA;AAAA;AA+oCM;AAAJ;;;AACmB;;ACpuCa;;ADouCb;AAhpCrB;AAAA;;AAAA;AAAA;AAipC8B;ACruCI;;ADsuCb;AAAjB;;AAIe;;AAAA;;AAAA;AC1uCe;;AD2uCL;AAzkC7B;AAAA;;AAAA;AAAA;AA4kC2D;AAAnD;;AA5kCR;AAAA;;AAAA;AAAA;AA6kCmC;;;AAA3B;AAAA;;AAGa;ACjvCgB;;ADivChB;AAAA;;AAAA;;AACW;;;AAAyB;;;AAGvD;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAtsCF;AAAA;AAAA;AAAA;AA8sC+C;AAAvC;;AACN;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAQyB;;AAAA;;AA3mC3B;AAAA;;AAAA;AAAA;AA4mCoE;AAAjC;AA5mCnC;;AA4mCE;AAAA;AAEA;AAGiC;;AA3DM;;AA2DN;;;;;;;;;;;;;;AAHjC;;;AC5wCoC;;;AD4wCpC;AApnCoF;;AAAA;;AAAA;AA+nCrC;AAAA;AAAA;AACI;AAAhB;;AAAgB;AAA7C;;AAAuB;AAEZ;;AAAA;;;AACI;;AAAA;;;AACF;;AAAA;AACQ;;AAAA;;;AACD;;AAAA;;;AALe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAzC;AAppCF;AAAA;;AAAA;AAAA;AA6pC6B;;AAAA;AAAA;;AAAA;AA7pC7B;;AA6pCE;AAAA;AACA;;;AAiBM;;AAAA;AAAsC;;AAAhB;AAE5B;AA7uCF;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AA6uCE;;;ACtzCoC;;;ADszCpC;AASA;AAIiB;;AAAA;AAAA;;;;;;;;;AAJjB;;;AC/zCoC;;;AD+zCpC;AAtB0B;;;AA3pC5B;;AA2pCE;AAAA;;;;;;;;;;AApD2D;;AAAA;;AAAA;;AAAA;;;;;;AAyF7D;;;AA5xCA;AAAA;AAAA;AAAA;AA6xCiC;;;AAChB;;AAAA;AC70CoB;;AD80C5B;AAAP;AAQF;;;;;;;AA9rCuD;;AAgsCtB;;AAhsCsB;AAgsCd;AAAA;;AAAvC;AApoCF;AAAA;;AAAA;AAAA;AAqoCmC;AAAW;AAArC;AAAP;AACA;;;;AAlsCqD;;AAosCjB;;AApsCiB;AAosCT;AAAA;AACF;AAAA;;;AAxsC0C;;AAAA;AAAA;AAmY9C;AAAA;AAs0BpB;;AAAiB;AAA5B;;AAAA;AAAP;AAEyB;;;AAAA;AAAA;AAAA;;AACzB;;;AAA+B;;AAAiB;AAA5B;;AAAA;AAId;AAAA;;;AAAA;AAAA;;AAAA;;AACA;;AAAiB;AAFjB;;AAAwB;;;AAAxB;AAAA;;AAOA;;AAAmB;;;AC52CO;;AD82CX;AA7xCvB;AAAA;;AAAA;AAAA;AA8xCwC;AAAhC;AAAA;;AAGF;AAAJ;;;AAAmD;AAAP;;AAAA;AAGtC;;AAAA;;AAAuB;AAIN;AAAA;;;;;;;;AAAA;;;;AC33Ca;;;AD23Cb;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;AC/3Cc;;;AD+3Cd;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAvuC8D;;AAAA;;AAAA;AAmY9C;AAAA;AA22BG;;;AAAvB;;;AAGD;;ACt4CkB;;ADs4ClB;AACX;;AAA8B;AAGnB;;AAAA;AACX;;AAAuB;AAE7B;;AAAA;AAuEF;;;;;;;AAEE;;AAAA;AAlwCF;AAAA;;AAAA;AAAA;AAmwCmC;AAAW;AAArC;AAAP;AACwB;;AAh0C6B;;AAg0C/C;;AAh0C+C;AAAA;;AAi0CnB;AAAA;;AAAlC;AACA;;;;AACwC;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAE5B;AAAA;;;AAAA;;AAAA;;AAAkB;AAAvB;;AAAA;AAAP;AAEmD;;AAAA;AAAA;AAAA;;AA10CiC;;AAAA;AAAA;AA20C5C;AAAA;AAAA;;AAAxC;AAC+C;AAAA;AAClC;;AAAiB;AAAvB;;AAAA;AAAP;AA3EkC;AAAA;AAAA;;AAAlC;AAnsCF;AAAA;;AAAA;AAAA;AAosCmC;AAAW;AAArC;AAAP;AACA;;;;AAEuC;AAAA;AACG;AAAA;;;AAvwC0C;;AAAA;AAAA;AAmY9C;AAAA;AAq4BpB;;AAAiB;AAA5B;;AAAA;AAAP;AACyB;;;AAAA;AAAA;AAAA;;AACzB;;;AAA+B;;AAAiB;AAsEzC;;AAAA;AAAP;AACyC;;AAAA;AAAjB;;AAAiB;AAAlC;;AAAA;;AAAA;AAAP;AACM;;AAAoB;AAG1B;;;;;;;;;;;;;;;;AAAA;;;AC7+CoC;;;AD6+CpC;AAaoB;AAx8CtB;AAAA;AAAA;AAAA;AA28Cc;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKA;;AAAA;;;AACG;;AAAA;;;AAXN;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaf;;AAAA;AAAA;AAGA;;AAAA;;AAAA;;;AAG0B;;;AA53C5B;;AA43CE;AAAA;;AApGM;AAAA;;;AAAA;AAAA;;AAAA;;AACA;;AAAiB;AAFjB;;AAAwB;;;AAAxB;AAAA;;AAOA;;AAAmB;;;AC16CO;;AD46CX;AA31CvB;AAAA;;AAAA;AAAA;AA41CwC;AAAhC;AAAA;;AAGF;AAAJ;;;AAAmD;AAqDnC;;;AAlDV;;AAAA;;AAAuB;AAIN;AAAA;;;;;;;;AAAA;;;;ACz7Ca;;;ADy7Cb;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;AC77Cc;;;AD67Cd;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAryC8D;;AAAA;;AAAA;AAmY9C;AAAA;AAy6BG;;;AAAvB;;;AAGD;;ACp8CkB;;ADo8ClB;AACX;;AAA8B;AAGnB;;AAAA;AACX;;AAAuB;AA2Bb;;;AAmFlB;;;;;;;AA/5CuD;;AAAA;;AAAA;AAAA;;AAs6CrB;AAAA;;AAAhC;AA12CF;AAAA;;AAAA;AAAA;AA22CmC;AAAW;AAArC;AAAP;AACA;;;;AAEqC;AAAA;AAAA;AAAA;;AAAA;AAC/B;AAAuB;;;AAAvB;AACA;AAAyB;;AAAiB;AAA1C;AACmB;;;AAAA;AAAA;AACzB;AACO;;AAAA;;;AAAuB;;AAAA;;AAAA;AAAvB;;;;AAAP;AAGM;;AAAA;;AAAA;;AAAwB;;;AACxB;;AAAmB;;;AACzB;AAAA;AAGmB;AChlDa;;ADglDb;AACb;;AAAiB;AA7/CzB;AAAA;;AAAA;AAAA;AA8/CS;AAAP;AAliDF;AAAA;AAAA;AAAA;AAqiD+C;AAAvC;;AACN;;AAAA;;AACiB;;AADjB;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAtiDF;AAAA;AAAA;AAAA;AA8iDoB;;;AAAZ;;AACA;;AAAA;AAAqC;;AAAX;AACA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAGL;AAAvB;;AACA;;AAAA;;;;;AAAJ;;;AACE;;AAAA;;AAAA;AAAA;;AAAe;AAAf;;;;AAIiB;;AAAA;;AAAA;ACxmDgB;;ADymDV;AAr8C3B;AAAA;;AAAA;AAAA;ACrKkC;;AD6mDE;AAAf;AC7mDa;;AD8mDP;AAx9C2D;;AAAA;;AAAA;AAmY9C;AAAA;AAAA;AAggC4C;;;AAA1D;;;AACH;;ACzhDc;;ADyhDd;AACf;;AAA0B;AAlgCM;AAAA;AAAA;AAqgCpB;;AAAiB;AAA5B;;AAAA;AAAP;AAGa;AAAA;;;;;;;;AAAA;;;;ACniDuB;;;ADmiDvB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIC;AAAA;;;;;;;;AAAA;;;;ACviDsB;;;ADuiDtB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIG;;AAAA;AACb;;AAAmB;AAAnB;AAAA;;AAEA;;AAAA;AAAJ;;;;;;;AAsEA;;AAAA;AAAA;AAGA;AAE0B;;AACH;;AApDM;;AAoDN;AAAA;AAAA;;;;;;;;;;AAHvB;;;ACvnDoC;;;ADunDpC;AASM;;AAAA;;AAAuB;AAAvB;;AACA;;AAAA;;AAAA;AAAA;;AAAsB;AAAtB;;AAGN;;AAAA;AAAA;;;AA//CF;AAAA;;AAAA;AAAA;AAggD6B;;AAAA;AAhgD7B;;AAggDE;AAAA;AACA;;;AAEA;;AAAA;;;AACE;AAE0B;;;;;;;;;;;;;;;AAF1B;;;ACzoDkC;;;ADyoDlC;AAQA;;;AAGF;;AAAA;;;AAEE;;AAAA;;;AACE;;;;;;;;;;;;;;AAAA;;;ACvpDgC;;;ADupDhC;AAQA;;AAAA;AAAA;;;AAEuB;;AAAA;;AAngD7B;AAAA;;AAAA;AAAA;AAogDsE;AAAjC;AApgDrC;;AAogDI;AAAA;AAmBwB;;;AAviD5B;;AAuiDE;AAAA;;AAfyB;;AAAA;AAAA;;;AACE;AAAA;;;AACL;;AAAA;AAtnDxB;AAAA;AAAA;AAAA;AAwnDiB;;AAAA;AAliDjB;AAAA;;AAAA;AAAA;AAmiDoB;AAEJ;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAPH;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaf;;AAAA;AAAA;;;;;;;;;;;;AAaJ;;;AApiDuD;;AAAA;;AAAA;AA8iDnB;AAAA;AAAA;;AAAlC;AAC0C;AAAA;AACS;AAAA;;;AAnjDiC;;AAAA;AAAA;AAmY9C;AAAA;AAirCtC;;;;AACqB;AAAA;;;AACf;AAAkC;;AAAiB;AAxnD3D;AAAA;;AAAA;AAAA;AA4nDW;;AAAA;;;AAE2B;;AAAjB;;AAAiB;AAH9B;;AAAA;AAA6B;;;AAMf;ACrtDY;;ADqtDZ;AAAd;;AAAa;AACb;AAAA;;AAAyB;AACzB;;AAAA;;AAAoB;AAE1B;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AA+CF;;;AAlnDsF;;AAAA;;AAAA;AAyX9C;AAAA;AAAA;;AA2vCtC;AAjvCsC;AAAA;AAAA;AAmvChB;;AAAiB;AAAhC;;AAAA;AAAP;AAE+B;AAAA;;;;;;;;AAAA;;;;AChxDK;;;ADgxDL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAKD;AAAA;;;;;;;;AAAA;;;;ACrxDM;;;ADqxDN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAMb;;AAAA;AACX;;AAAuB;AAjwCS;AAAA;AAAA;AAqwCJ;;;AAEX;;;AAGN;AClyDkB;;ADmyDb;AAEtB;AAsHF;;;;;AAEgB;;AAv1DhB;AAAA;AAAA;AAAA;AAu1DS;AAAP;AAzsDF;AAAA;;AAAA;AAAA;AA0sDmC;AAAW;AAArC;AAAP;AA/2DF;AAAA;AAAA;AAAA;AAi3DmD;AACH;;AAAzB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA/uDvB;AAAA;;AAAA;AAAA;AAivDM;AAAJ;;;AACE;AAlvDJ;AAAA;;AAAA;AAAA;AAqvDQ;;AAAA;AAAoB;AAApB;AAAA;;ACn6DuC;;ADo6DzC;AAAJ;;;AACE;AAGF;;AAAA;AAAA;;;AAlwDF;AAAA;;AAAA;AAAA;AAowDmB;;AAAA;AACuB;;AAAb;AAnwD7B;AAAA;;AAAA;AAAA;AAqwDE;;AAAA;AArwDF;;AAqwDE;AAAA;AAnwDF;AAAA;;AAAA;AAAA;AAowDE;;AAAA;AApwDF;;AAowDE;AAAA;AAE0B;AApwD5B;AAAA;;AAAA;AAAA;AAqwDE;;AAAA;AArwDF;;AAqwDE;AAAA;AAz3DF;AAAA;AAAA;AAAA;AA03DE;AA13DF;AA03DE;AAAA;;AAGF;;;AACgB;;AAjwDhB;AAAA;;AAAA;AAAA;AAiwDS;AAAP;AAEmD;;AAAA;AAvyDiC;;AAAA;AAAA;AAwyD5C;AAAA;;AAAxC;AACkE;;AAAxC;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAC1B;;;AACE;AAvwDJ;AAAA;;AAAA;AAAA;;;;;;;;;;;AAuwDI;;;ACn8DkC;;;ADm8DlC;;AAgBJ;;;AAEgB;;AAzxDhB;AAAA;;AAAA;AAAA;AAyxDS;AAAP;AACsB;;AAAtB;;;AACA;;AAAA;;AC/8DiC;;;;AD+8DjC;AAAA;AAl6DF;AAAA;;AAAA;AAAA;AAq6DiD;AACJ;;AAAxB;AAAA;;AAAA;AAGnB;AAlyDF;AAAA;;AAAA;AAAA;AAvIA;AAAA;;AAAA;AAAA;AA46DyC;;;;;;;;;AAHvC;;;AC99DoC;;;AD89DpC;AA56DF;AAAA;AAAA;AAAA;AAq7DmD;AACH;;AAAzB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACrB;;;AACE;AA9yDJ;AAAA;;AAAA;AAAA;AA1IA;AAAA;AAAA;AAAA;AA27D4C;;;;;;;;;AAHxC;;;AC1+DkC;;;AD0+DlC;AAz0DJ;AAAA;;AAAA;AAAA;AAo1DgC;AAh0DhC;AAAA;;AAAA;AAAA;AAi0DkB;AA17DlB;AAAA;;AAAA;AAAA;AA27DqB;AAx7DrB;AAAA;AAAA;AAAA;AAy7DoB;AAn3DpB;AAAA;;AAAA;AAAA;AAo3DmB;AAt0DnB;AAAA;;AAAA;AAAA;AAu0D8B;AAz0D9B;AAAA;;AAAA;AAAA;AA00D6B;AA50D7B;AAAA;;AAAA;AAAA;AA60DoC;AA17DpC;AAAA;;AAAA;AAAA;AA27Dc;AAr3Dd;AAAA;;AAAA;AAAA;AAs3DoB;AA58DpB;AAAA;AAAA;AAAA;AA68DwD;AAArC;AA18DnB;AAAA;;AAAA;AAAA;AA28DsD;AAApC;AA51DlB;AAAA;;AAAA;AAAA;AA61D4D;AAAvC;AAp1DrB;AAAA;;AAAA;AAAA;AAq1D2B;AA31D3B;AAAA;;AAAA;AAAA;AA41DmB;AAr2DnB;AAAA;;AAAA;AAAA;AAs2DyB;AAhBhB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AAAA;AA4BF;;;AAQgB;;AA51DhB;AAAA;;AAAA;AAAA;AA41DS;AAAP;AACA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAp+DF;AAAA;;AAAA;AAAA;AAu+D6C;AAH3C;AAAA;;;;AAAA;AAKA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEmB;;AAFnB;AAAA;;;;AAAA;AAIA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAh/DF;AAAA;AAAA;AAAA;AAm/D8C;AAH5C;AAAA;;;;AAAA;AAOgD;;AAAb;;AAAa;AAp3DlD;;AAo3DE;AAAA;AACoD;;AAAf;AAAe;AA3+DtD;AA2+DE;AAAA;AACsD;;AAAhB;;AAAgB;AA/+DxD;;AA++DE;AAAA;AACkD;;AAAd;;AAAc;AAv6DpD;;AAu6DE;AAAA;AACwE;;AAAzB;;AAAyB;AA13D1E;;AA03DE;AAAA;AACsE;;AAAxB;;AAAwB;AA73DxE;;AA63DE;AAAA;AACoF;;AAA/B;;AAA+B;AAh4DtF;;AAg4DE;AAAA;AACwC;;AAAT;;AAAS;AA9+D1C;;AA8+DE;AAAA;AACsD;;AAAf;;AAAe;AAz6DxD;;AAy6DE;AAAA;AAC4E;;AAA3B;;AAA2B;AAj5D9E;;AAi5DE;AAAA;AAC8D;;AAAd;;AAAc;AAAnC;AAjgE7B;AAigEE;AAAA;AAC4D;;AAAb;;AAAa;AAAlC;AA//D5B;;AA+/DE;AAAA;AACkE;;AAAhB;;AAAgB;AAArC;AAj5D/B;;AAi5DE;AAAA;AACkE;;AAAtB;;AAAsB;AAz4DpE;;AAy4DE;AAAA;AACkD;;AAAd;;AAAc;AAh5DpD;;AAg5DE;AAAA;AAC8D;;AAApB;;AAAoB;AA15DhE;;AA05DE;AAAA;AAj2DF;;AAm2D8B;;;;;;;;;;AAA5B;;;;;;;;;;;;;;AAOF;;;AA54DA;AAAA;;AAAA;AAAA;AA64D4B;;AAAA;AA74D5B;;AA64DE;AAAA;;AAQF;;;AAr5DA;AAAA;;AAAA;AAAA;AAs5DS;;AAAA;AAAP;AAt5DF;AAAA;;AAAA;AAAA;AAu5D4B;;AAAA;AAv5D5B;;AAu5DE;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000 4 10000 1000000 1000000000000"
    },
    "19": {
      "op": "bytecblock \"base_token_id\" 0x151f7c75 \"admin_account\" \"total_deposits\" \"total_borrows\" \"contract_state\" \"accepted_collaterals\" \"loan_record\" \"circulating_lst\" \"active_loan_records\" \"lst_token_id\" \"borrow_index_wad\" \"last_apr_bps\" \"cash_on_hand\" \"migration_admin\" \"fee_pool\" \"buyout_token_id\" \"current_accumulated_commission\" 0x09ef525f 0xae859f3b \"accepted_collaterals_count\" \"max_apr_bps\" \"liq_threshold_bps\" \"base_bps\" \"liq_bonus_bps\" \"total_commission_earned\" \"total_additional_rewards\" 0x00 \"ltv_bps\" \"util_cap_bps\" \"prev_apr_bps\" \"last_accrual_ts\" \"commission_percentage\" \"rate_model_type\" \"kink_norm_bps\" \"slope1_bps\" \"slope2_bps\" \"params_update_nonce\" 0x0000000000000000 \"origination_fee_bps\" \"protocol_share_bps\" \"oracle_app\" \"last_scaled_down_disbursement\" \"ema_alpha_bps\" \"power_gamma_q16\" \"scarcity_K_bps\" \"last_max_borrow\" \"last_requested_loan\" \"params_updated_at\""
    },
    "768": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "770": {
      "op": "bz main_after_if_else@39",
      "stack_out": []
    },
    "773": {
      "op": "pushbytess 0x3b01665e 0x023f1033 0x6ca100cd 0x34b8343e 0xca7a1795 // method \"createApplication(account,uint64)void\", method \"initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void\", method \"setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void\", method \"setContractState(uint64)void\", method \"setMigrationAdmin(account)void\"",
      "defined_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)"
      ]
    },
    "800": {
      "op": "bytec 18 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "802": {
      "op": "bytec 19 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "804": {
      "op": "pushbytess 0x6c6337c0 0x17c33662 0x5efce39a 0x5cac25a9 0xe596ac73 0x86a6b1bb 0xc0799344 0x72c5c57b 0x3e41a49b 0x15a5b25e 0x8553cffa 0xb4a74766 0xae99f45b 0x3dea8a60 0xd217f842 0xf1f38ba6 0xd0e69812 0x5f0d6f03 0xc861aedf 0xdaa7f7f2 0x3172ca9d 0xef0bd27a 0x6e06c709 0x0ac83b5d 0xd0b8a7de 0xe8af118d // method \"getAcceptedCollateralsCount()uint64\", method \"generateLSTToken(pay)void\", method \"optInToLST(uint64,pay)void\", method \"configureLSTToken(axfer,uint64)void\", method \"getOraclePrice(uint64)uint64\", method \"addNewCollateralType(uint64,uint64,pay,uint64)void\", method \"addLoanRecordExternal(uint64,uint64,account,uint64)void\", method \"depositASA(axfer,uint64,pay)void\", method \"withdrawDeposit(axfer,uint64,uint64,pay)void\", method \"borrow(axfer,uint64,uint64,uint64,uint64,pay)void\", method \"accrueLoanInterest(account,account)void\", method \"current_apr_bps()uint64\", method \"getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)\", method \"repayLoanASA(axfer,uint64)void\", method \"withdrawPlatformFees(account,pay)void\", method \"buyoutSplitASA(account,account,axfer,axfer,uint64)void\", method \"maxWithdrawableCollateralLST(uint64)uint64\", method \"withdrawCollateral(uint64,uint64,uint64)void\", method \"liquidatePartialASA(account,axfer,uint64,uint64)void\", method \"getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)\", method \"gas()void\", method \"calculateCollateralValueUSD(uint64,uint64,uint64)uint64\", method \"pickupASARewards()void\", method \"migrateCollateralTokenId(uint64,pay)void\", method \"migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)\", method \"acceptMigrationASAContract(axfer,pay,axfer,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void\"",
      "defined_out": [
        "Method(acceptMigrationASAContract(axfer,pay,axfer,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64)void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(liquidatePartialASA(account,axfer,uint64,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(optInToLST(uint64,pay)void)",
        "Method(pickupASARewards()void)",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(liquidatePartialASA(account,axfer,uint64,uint64)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(pickupASARewards()void)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(acceptMigrationASAContract(axfer,pay,axfer,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)"
      ]
    },
    "936": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(acceptMigrationASAContract(axfer,pay,axfer,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64)void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(liquidatePartialASA(account,axfer,uint64,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(optInToLST(uint64,pay)void)",
        "Method(pickupASARewards()void)",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(liquidatePartialASA(account,axfer,uint64,uint64)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(pickupASARewards()void)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(acceptMigrationASAContract(axfer,pay,axfer,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)",
        "tmp%2#0"
      ]
    },
    "939": {
      "op": "match main_createApplication_route@3 main_initApplication_route@4 main_setRateParams_route@5 main_setContractState_route@6 main_setMigrationAdmin_route@7 main_getCirculatingLST_route@8 main_getTotalDeposits_route@9 main_getAcceptedCollateralsCount_route@10 main_generateLSTToken_route@11 main_optInToLST_route@12 main_configureLSTToken_route@13 main_getOraclePrice_route@14 main_addNewCollateralType_route@15 main_addLoanRecordExternal_route@16 main_depositASA_route@17 main_withdrawDeposit_route@18 main_borrow_route@19 main_accrueLoanInterest_route@20 main_current_apr_bps_route@21 main_getLoanRecord_route@22 main_repayLoanASA_route@23 main_withdrawPlatformFees_route@24 main_buyoutSplitASA_route@25 main_maxWithdrawableCollateralLST_route@26 main_withdrawCollateral_route@27 main_liquidatePartialASA_route@28 main_getLoanStatus_route@29 main_gas_route@30 main_calculateCollateralValueUSD_route@31 main_pickupASARewards_route@32 main_migrateCollateralTokenId_route@33 main_migrateContract_route@34 main_acceptMigrationASAContract_route@35",
      "stack_out": []
    },
    "1007": {
      "block": "main_after_if_else@39",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1008": {
      "op": "return",
      "stack_out": []
    },
    "1009": {
      "block": "main_acceptMigrationASAContract_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%227#0"
      ],
      "stack_out": [
        "tmp%227#0"
      ]
    },
    "1011": {
      "op": "!",
      "defined_out": [
        "tmp%228#0"
      ],
      "stack_out": [
        "tmp%228#0"
      ]
    },
    "1012": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1013": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%229#0"
      ],
      "stack_out": [
        "tmp%229#0"
      ]
    },
    "1015": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1016": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%231#0"
      ],
      "stack_out": [
        "tmp%231#0"
      ]
    },
    "1018": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%231#0"
      ],
      "stack_out": [
        "tmp%231#0",
        "3"
      ]
    },
    "1020": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%18#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0"
      ]
    },
    "1021": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)"
      ]
    },
    "1022": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ]
    },
    "1024": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "axfer"
      ]
    },
    "1025": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0"
      ]
    },
    "1026": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%18#0"
      ]
    },
    "1027": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%18#0",
        "tmp%232#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "tmp%232#0"
      ]
    },
    "1029": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "gtxn_idx%18#0",
        "tmp%232#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "tmp%232#0",
        "2"
      ]
    },
    "1031": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0"
      ]
    },
    "1032": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%19#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%19#0 (copy)"
      ]
    },
    "1033": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type%19#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type%19#0"
      ]
    },
    "1035": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type%19#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type%19#0",
        "pay"
      ]
    },
    "1036": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type_matches%19#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type_matches%19#0"
      ]
    },
    "1037": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0"
      ]
    },
    "1038": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "tmp%233#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "tmp%233#0"
      ]
    },
    "1040": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "tmp%233#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "tmp%233#0",
        "1"
      ]
    },
    "1041": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0"
      ]
    },
    "1042": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%20#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%20#0 (copy)"
      ]
    },
    "1043": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0"
      ]
    },
    "1045": {
      "op": "intc_3 // axfer",
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0",
        "axfer"
      ]
    },
    "1046": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type_matches%20#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type_matches%20#0"
      ]
    },
    "1047": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0"
      ]
    },
    "1048": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0"
      ]
    },
    "1051": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0",
        "reinterpret_bytes[1]%12#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0",
        "reinterpret_bytes[1]%12#0"
      ]
    },
    "1054": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%234#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%234#0"
      ]
    },
    "1055": {
      "op": "txnas Accounts",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%235#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%235#0"
      ]
    },
    "1057": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.acceptMigrationASAContract",
      "op": "callsub acceptMigrationASAContract",
      "stack_out": []
    },
    "1060": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1061": {
      "op": "return",
      "stack_out": []
    },
    "1062": {
      "block": "main_migrateContract_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%220#0"
      ],
      "stack_out": [
        "tmp%220#0"
      ]
    },
    "1064": {
      "op": "!",
      "defined_out": [
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0"
      ]
    },
    "1065": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1066": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%222#0"
      ],
      "stack_out": [
        "tmp%222#0"
      ]
    },
    "1068": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1069": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%224#0"
      ],
      "stack_out": [
        "tmp%224#0"
      ]
    },
    "1071": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%224#0"
      ],
      "stack_out": [
        "tmp%224#0",
        "1"
      ]
    },
    "1072": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%17#0"
      ],
      "stack_out": [
        "gtxn_idx%17#0"
      ]
    },
    "1073": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)"
      ]
    },
    "1074": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0"
      ],
      "stack_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0"
      ]
    },
    "1076": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "pay"
      ]
    },
    "1077": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0"
      ],
      "stack_out": [
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0"
      ]
    },
    "1078": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%17#0"
      ]
    },
    "1079": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.migrateContract",
      "op": "callsub migrateContract",
      "defined_out": [
        "tmp%225#0"
      ],
      "stack_out": [
        "tmp%225#0"
      ]
    },
    "1082": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%225#0"
      ],
      "stack_out": [
        "tmp%225#0",
        "0x151f7c75"
      ]
    },
    "1083": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%225#0"
      ]
    },
    "1084": {
      "op": "concat",
      "defined_out": [
        "tmp%226#0"
      ],
      "stack_out": [
        "tmp%226#0"
      ]
    },
    "1085": {
      "op": "log",
      "stack_out": []
    },
    "1086": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1087": {
      "op": "return",
      "stack_out": []
    },
    "1088": {
      "block": "main_migrateCollateralTokenId_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%214#0"
      ],
      "stack_out": [
        "tmp%214#0"
      ]
    },
    "1090": {
      "op": "!",
      "defined_out": [
        "tmp%215#0"
      ],
      "stack_out": [
        "tmp%215#0"
      ]
    },
    "1091": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1092": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%216#0"
      ],
      "stack_out": [
        "tmp%216#0"
      ]
    },
    "1094": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1095": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%48#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%48#0"
      ]
    },
    "1098": {
      "op": "btoi",
      "defined_out": [
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0"
      ]
    },
    "1099": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%218#0",
        "tmp%219#0"
      ],
      "stack_out": [
        "tmp%218#0",
        "tmp%219#0"
      ]
    },
    "1101": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%218#0",
        "tmp%219#0"
      ],
      "stack_out": [
        "tmp%218#0",
        "tmp%219#0",
        "1"
      ]
    },
    "1102": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%16#0",
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0",
        "gtxn_idx%16#0"
      ]
    },
    "1103": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)",
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0",
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)"
      ]
    },
    "1104": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0"
      ]
    },
    "1106": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "pay",
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "pay"
      ]
    },
    "1107": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0",
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0",
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0"
      ]
    },
    "1108": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%218#0",
        "gtxn_idx%16#0"
      ]
    },
    "1109": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.migrateCollateralTokenId",
      "op": "callsub migrateCollateralTokenId",
      "stack_out": []
    },
    "1112": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1113": {
      "op": "return",
      "stack_out": []
    },
    "1114": {
      "block": "main_pickupASARewards_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%210#0"
      ],
      "stack_out": [
        "tmp%210#0"
      ]
    },
    "1116": {
      "op": "!",
      "defined_out": [
        "tmp%211#0"
      ],
      "stack_out": [
        "tmp%211#0"
      ]
    },
    "1117": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1118": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%212#0"
      ],
      "stack_out": [
        "tmp%212#0"
      ]
    },
    "1120": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1121": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.pickupASARewards",
      "op": "callsub pickupASARewards"
    },
    "1124": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1125": {
      "op": "return",
      "stack_out": []
    },
    "1126": {
      "block": "main_calculateCollateralValueUSD_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%203#0"
      ]
    },
    "1128": {
      "op": "!",
      "defined_out": [
        "tmp%204#0"
      ],
      "stack_out": [
        "tmp%204#0"
      ]
    },
    "1129": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1130": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%205#0"
      ],
      "stack_out": [
        "tmp%205#0"
      ]
    },
    "1132": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1133": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%45#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0"
      ]
    },
    "1136": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "reinterpret_bytes[8]%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "reinterpret_bytes[8]%46#0"
      ]
    },
    "1139": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%207#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%207#0"
      ]
    },
    "1140": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "reinterpret_bytes[8]%47#0",
        "tmp%207#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%207#0",
        "reinterpret_bytes[8]%47#0"
      ]
    },
    "1143": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%207#0",
        "tmp%208#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%207#0",
        "tmp%208#0"
      ]
    },
    "1144": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "1147": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0"
      ]
    },
    "1148": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0",
        "0x151f7c75"
      ]
    },
    "1149": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ]
    },
    "1150": {
      "op": "concat",
      "defined_out": [
        "tmp%209#0"
      ],
      "stack_out": [
        "tmp%209#0"
      ]
    },
    "1151": {
      "op": "log",
      "stack_out": []
    },
    "1152": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1153": {
      "op": "return",
      "stack_out": []
    },
    "1154": {
      "block": "main_gas_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%199#0"
      ],
      "stack_out": [
        "tmp%199#0"
      ]
    },
    "1156": {
      "op": "!",
      "defined_out": [
        "tmp%200#0"
      ],
      "stack_out": [
        "tmp%200#0"
      ]
    },
    "1157": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1158": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%201#0"
      ],
      "stack_out": [
        "tmp%201#0"
      ]
    },
    "1160": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1161": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1162": {
      "op": "return",
      "stack_out": []
    },
    "1163": {
      "block": "main_getLoanStatus_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "1165": {
      "op": "!",
      "defined_out": [
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0"
      ]
    },
    "1166": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1167": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%194#0"
      ]
    },
    "1169": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1170": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%11#0"
      ]
    },
    "1173": {
      "op": "btoi",
      "defined_out": [
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0"
      ]
    },
    "1174": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%197#0"
      ],
      "stack_out": [
        "tmp%197#0"
      ]
    },
    "1176": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanStatus",
      "op": "callsub getLoanStatus",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ]
    },
    "1179": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%0#0"
      ]
    },
    "1181": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0"
      ]
    },
    "1182": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "elements_to_encode%1#0"
      ]
    },
    "1184": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "1185": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%2#0"
      ]
    },
    "1187": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "1188": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "elements_to_encode%3#0"
      ]
    },
    "1190": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "1191": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "elements_to_encode%4#0"
      ]
    },
    "1193": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "1194": {
      "op": "bytec 27 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00"
      ]
    },
    "1196": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00",
        "0"
      ]
    },
    "1197": {
      "op": "uncover 8",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00",
        "0",
        "elements_to_encode%5#0"
      ]
    },
    "1199": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%6#0",
        "encoded_bool%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0"
      ]
    },
    "1200": {
      "op": "bytec 27 // 0x00",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "1202": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00",
        "0"
      ]
    },
    "1203": {
      "op": "uncover 8",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00",
        "0",
        "elements_to_encode%6#0"
      ]
    },
    "1205": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "1206": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%6#0"
      ]
    },
    "1208": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "1210": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%10#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1211": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%8#0"
      ]
    },
    "1213": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%10#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1214": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%9#0"
      ]
    },
    "1216": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1217": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%10#0"
      ]
    },
    "1219": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1220": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_bool%0#0"
      ]
    },
    "1222": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1223": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0"
      ]
    },
    "1224": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "1225": {
      "op": "getbit",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ]
    },
    "1226": {
      "op": "pushint 321 // 321"
    },
    "1229": {
      "op": "swap",
      "defined_out": [
        "321",
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "321",
        "is_true%0#0"
      ]
    },
    "1230": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1231": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "0x151f7c75"
      ]
    },
    "1232": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1233": {
      "op": "concat",
      "defined_out": [
        "tmp%198#0"
      ],
      "stack_out": [
        "tmp%198#0"
      ]
    },
    "1234": {
      "op": "log",
      "stack_out": []
    },
    "1235": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1236": {
      "op": "return",
      "stack_out": []
    },
    "1237": {
      "block": "main_liquidatePartialASA_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%183#0"
      ]
    },
    "1239": {
      "op": "!",
      "defined_out": [
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%184#0"
      ]
    },
    "1240": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1241": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0"
      ]
    },
    "1243": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1244": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "1247": {
      "op": "btoi",
      "defined_out": [
        "tmp%187#0"
      ],
      "stack_out": [
        "tmp%187#0"
      ]
    },
    "1248": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "1250": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%188#0",
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "tmp%189#0"
      ]
    },
    "1252": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%188#0",
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "tmp%189#0",
        "1"
      ]
    },
    "1253": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%15#0",
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0"
      ]
    },
    "1254": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)",
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)"
      ]
    },
    "1255": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0"
      ]
    },
    "1257": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "axfer"
      ]
    },
    "1258": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0",
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0"
      ]
    },
    "1259": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0"
      ]
    },
    "1260": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%15#0",
        "reinterpret_bytes[8]%43#0",
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "reinterpret_bytes[8]%43#0"
      ]
    },
    "1263": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%15#0",
        "tmp%188#0",
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "tmp%190#0"
      ]
    },
    "1264": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%15#0",
        "reinterpret_bytes[8]%44#0",
        "tmp%188#0",
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "tmp%190#0",
        "reinterpret_bytes[8]%44#0"
      ]
    },
    "1267": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%15#0",
        "tmp%188#0",
        "tmp%190#0",
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "tmp%190#0",
        "tmp%191#0"
      ]
    },
    "1268": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.liquidatePartialASA",
      "op": "callsub liquidatePartialASA",
      "stack_out": []
    },
    "1271": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1272": {
      "op": "return",
      "stack_out": []
    },
    "1273": {
      "block": "main_withdrawCollateral_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%176#0"
      ]
    },
    "1275": {
      "op": "!",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "1276": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1277": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%178#0"
      ]
    },
    "1279": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1280": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%40#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%40#0"
      ]
    },
    "1283": {
      "op": "btoi",
      "defined_out": [
        "tmp%180#0"
      ],
      "stack_out": [
        "tmp%180#0"
      ]
    },
    "1284": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%41#0",
        "tmp%180#0"
      ],
      "stack_out": [
        "tmp%180#0",
        "reinterpret_bytes[8]%41#0"
      ]
    },
    "1287": {
      "op": "btoi",
      "defined_out": [
        "tmp%180#0",
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%180#0",
        "tmp%181#0"
      ]
    },
    "1288": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%42#0",
        "tmp%180#0",
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%180#0",
        "tmp%181#0",
        "reinterpret_bytes[8]%42#0"
      ]
    },
    "1291": {
      "op": "btoi",
      "defined_out": [
        "tmp%180#0",
        "tmp%181#0",
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%180#0",
        "tmp%181#0",
        "tmp%182#0"
      ]
    },
    "1292": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawCollateral",
      "op": "callsub withdrawCollateral",
      "stack_out": []
    },
    "1295": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1296": {
      "op": "return",
      "stack_out": []
    },
    "1297": {
      "block": "main_maxWithdrawableCollateralLST_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "1299": {
      "op": "!",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "1300": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1301": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "1303": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1304": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%39#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%39#0"
      ]
    },
    "1307": {
      "op": "btoi",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "1308": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.maxWithdrawableCollateralLST",
      "op": "callsub maxWithdrawableCollateralLST",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "1311": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "1312": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "1313": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "1314": {
      "op": "concat",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "1315": {
      "op": "log",
      "stack_out": []
    },
    "1316": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1317": {
      "op": "return",
      "stack_out": []
    },
    "1318": {
      "block": "main_buyoutSplitASA_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "1320": {
      "op": "!",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "1321": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1322": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "1324": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1325": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "1328": {
      "op": "btoi",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "1329": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "1331": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%9#0",
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "1334": {
      "op": "btoi",
      "defined_out": [
        "tmp%164#0",
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%165#0"
      ]
    },
    "1335": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%164#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0"
      ]
    },
    "1337": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%164#0",
        "tmp%166#0",
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "tmp%167#0"
      ]
    },
    "1339": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%164#0",
        "tmp%166#0",
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "tmp%167#0",
        "2"
      ]
    },
    "1341": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%164#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0"
      ]
    },
    "1342": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)",
        "tmp%164#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)"
      ]
    },
    "1343": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "tmp%164#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ]
    },
    "1345": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "tmp%164#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "axfer"
      ]
    },
    "1346": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0",
        "tmp%164#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0"
      ]
    },
    "1347": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0"
      ]
    },
    "1348": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%164#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0",
        "tmp%168#0"
      ]
    },
    "1350": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%13#0",
        "tmp%164#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0",
        "tmp%168#0",
        "1"
      ]
    },
    "1351": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%164#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0"
      ]
    },
    "1352": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)",
        "tmp%164#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)"
      ]
    },
    "1353": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "tmp%164#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type%14#0"
      ]
    },
    "1355": {
      "op": "intc_3 // axfer",
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "axfer"
      ]
    },
    "1356": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0",
        "tmp%164#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0"
      ]
    },
    "1357": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0"
      ]
    },
    "1358": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%38#0",
        "tmp%164#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%38#0"
      ]
    },
    "1361": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%164#0",
        "tmp%166#0",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%164#0",
        "tmp%166#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%169#0"
      ]
    },
    "1362": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.buyoutSplitASA",
      "op": "callsub buyoutSplitASA",
      "stack_out": []
    },
    "1365": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1366": {
      "op": "return",
      "stack_out": []
    },
    "1367": {
      "block": "main_withdrawPlatformFees_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "1369": {
      "op": "!",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "1370": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1371": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "1373": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1374": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "1377": {
      "op": "btoi",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "1378": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "1380": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%157#0",
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%158#0"
      ]
    },
    "1382": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%157#0",
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%158#0",
        "1"
      ]
    },
    "1383": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%12#0",
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "gtxn_idx%12#0"
      ]
    },
    "1384": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)",
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)"
      ]
    },
    "1385": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0"
      ]
    },
    "1387": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay",
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay"
      ]
    },
    "1388": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0",
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0"
      ]
    },
    "1389": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%157#0",
        "gtxn_idx%12#0"
      ]
    },
    "1390": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawPlatformFees",
      "op": "callsub withdrawPlatformFees",
      "stack_out": []
    },
    "1393": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1394": {
      "op": "return",
      "stack_out": []
    },
    "1395": {
      "block": "main_repayLoanASA_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "1397": {
      "op": "!",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "1398": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1399": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "1401": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1402": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "1404": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "1"
      ]
    },
    "1405": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1406": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ]
    },
    "1407": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ]
    },
    "1409": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0",
        "axfer"
      ]
    },
    "1410": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ]
    },
    "1411": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1412": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%37#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%37#0"
      ]
    },
    "1415": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%151#0"
      ]
    },
    "1416": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.repayLoanASA",
      "op": "callsub repayLoanASA",
      "stack_out": []
    },
    "1419": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1420": {
      "op": "return",
      "stack_out": []
    },
    "1421": {
      "block": "main_getLoanRecord_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "1423": {
      "op": "!",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "1424": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1425": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "1427": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1428": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "1431": {
      "op": "btoi",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "1432": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "1434": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "1437": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0",
        "0x151f7c75"
      ]
    },
    "1438": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%144#0"
      ]
    },
    "1439": {
      "op": "concat",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "1440": {
      "op": "log",
      "stack_out": []
    },
    "1441": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1442": {
      "op": "return",
      "stack_out": []
    },
    "1443": {
      "block": "main_current_apr_bps_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "1445": {
      "op": "!",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "1446": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1447": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "1449": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1450": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "1453": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "1454": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "1455": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "1456": {
      "op": "concat",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "1457": {
      "op": "log",
      "stack_out": []
    },
    "1458": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1459": {
      "op": "return",
      "stack_out": []
    },
    "1460": {
      "block": "main_accrueLoanInterest_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "1462": {
      "op": "!",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "1463": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1464": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "1466": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1467": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "1470": {
      "op": "btoi",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "1471": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "1473": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%5#0",
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0",
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "1476": {
      "op": "btoi",
      "defined_out": [
        "tmp%130#0",
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%130#0",
        "tmp%131#0"
      ]
    },
    "1477": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%130#0",
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%130#0",
        "tmp%132#0"
      ]
    },
    "1479": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueLoanInterest",
      "op": "callsub accrueLoanInterest",
      "stack_out": []
    },
    "1482": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1483": {
      "op": "return",
      "stack_out": []
    },
    "1484": {
      "block": "main_borrow_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "1486": {
      "op": "!",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "1487": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1488": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "1490": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1491": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "1493": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0",
        "2"
      ]
    },
    "1495": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1496": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ]
    },
    "1497": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ]
    },
    "1499": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0",
        "axfer"
      ]
    },
    "1500": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ]
    },
    "1501": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1502": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%33#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%33#0"
      ]
    },
    "1505": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%121#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%121#0"
      ]
    },
    "1506": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%34#0",
        "tmp%121#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "reinterpret_bytes[8]%34#0"
      ]
    },
    "1509": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "tmp%122#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "tmp%122#0"
      ]
    },
    "1510": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%121#0",
        "tmp%122#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "tmp%122#0",
        "reinterpret_bytes[8]%35#0"
      ]
    },
    "1513": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ]
    },
    "1514": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "reinterpret_bytes[8]%36#0"
      ]
    },
    "1517": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%124#0"
      ]
    },
    "1519": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%124#0",
        "1"
      ]
    },
    "1520": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "reinterpret_bytes[8]%36#0",
        "gtxn_idx%10#0"
      ]
    },
    "1521": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)",
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "reinterpret_bytes[8]%36#0",
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)"
      ]
    },
    "1522": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "reinterpret_bytes[8]%36#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0"
      ]
    },
    "1524": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "pay",
        "reinterpret_bytes[8]%36#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "reinterpret_bytes[8]%36#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0",
        "pay"
      ]
    },
    "1525": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type_matches%10#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "reinterpret_bytes[8]%36#0",
        "gtxn_idx%10#0",
        "gtxn_type_matches%10#0"
      ]
    },
    "1526": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "reinterpret_bytes[8]%36#0",
        "gtxn_idx%10#0"
      ]
    },
    "1527": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.borrow",
      "op": "callsub borrow",
      "stack_out": []
    },
    "1530": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1531": {
      "op": "return",
      "stack_out": []
    },
    "1532": {
      "block": "main_withdrawDeposit_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "1534": {
      "op": "!",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "1535": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1536": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "1538": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1539": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "1541": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0",
        "2"
      ]
    },
    "1543": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1544": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ]
    },
    "1545": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ]
    },
    "1547": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "axfer"
      ]
    },
    "1548": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ]
    },
    "1549": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1550": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%31#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%31#0"
      ]
    },
    "1553": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%113#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%113#0"
      ]
    },
    "1554": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%32#0",
        "tmp%113#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%113#0",
        "reinterpret_bytes[8]%32#0"
      ]
    },
    "1557": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%113#0",
        "tmp%114#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%113#0",
        "tmp%114#0"
      ]
    },
    "1558": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0"
      ]
    },
    "1560": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%7#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "1"
      ]
    },
    "1561": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "tmp%113#0",
        "tmp%114#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%113#0",
        "tmp%114#0",
        "gtxn_idx%8#0"
      ]
    },
    "1562": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)",
        "tmp%113#0",
        "tmp%114#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%113#0",
        "tmp%114#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)"
      ]
    },
    "1563": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "tmp%113#0",
        "tmp%114#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%113#0",
        "tmp%114#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0"
      ]
    },
    "1565": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "pay",
        "tmp%113#0",
        "tmp%114#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%113#0",
        "tmp%114#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "pay"
      ]
    },
    "1566": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0",
        "tmp%113#0",
        "tmp%114#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%113#0",
        "tmp%114#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0"
      ]
    },
    "1567": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%113#0",
        "tmp%114#0",
        "gtxn_idx%8#0"
      ]
    },
    "1568": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawDeposit",
      "op": "callsub withdrawDeposit",
      "stack_out": []
    },
    "1571": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1572": {
      "op": "return",
      "stack_out": []
    },
    "1573": {
      "block": "main_depositASA_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "1575": {
      "op": "!",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "1576": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1577": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "1579": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1580": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "1582": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "2"
      ]
    },
    "1584": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1585": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ]
    },
    "1586": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ]
    },
    "1588": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "axfer"
      ]
    },
    "1589": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ]
    },
    "1590": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1591": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%30#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%30#0"
      ]
    },
    "1594": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%106#0"
      ]
    },
    "1595": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%106#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%106#0",
        "tmp%107#0"
      ]
    },
    "1597": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%5#0",
        "tmp%106#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%106#0",
        "tmp%107#0",
        "1"
      ]
    },
    "1598": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%106#0",
        "gtxn_idx%6#0"
      ]
    },
    "1599": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)",
        "tmp%106#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%106#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)"
      ]
    },
    "1600": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%106#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0"
      ]
    },
    "1602": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay",
        "tmp%106#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%106#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay"
      ]
    },
    "1603": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%106#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0"
      ]
    },
    "1604": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%106#0",
        "gtxn_idx%6#0"
      ]
    },
    "1605": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.depositASA",
      "op": "callsub depositASA",
      "stack_out": []
    },
    "1608": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1609": {
      "op": "return",
      "stack_out": []
    },
    "1610": {
      "block": "main_addLoanRecordExternal_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "1612": {
      "op": "!",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "1613": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1614": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "1616": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1617": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%27#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%27#0"
      ]
    },
    "1620": {
      "op": "btoi",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "1621": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%28#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0",
        "reinterpret_bytes[8]%28#0"
      ]
    },
    "1624": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "1627": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%28#0",
        "tmp%97#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%97#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%98#0"
      ]
    },
    "1628": {
      "op": "txnas Accounts",
      "defined_out": [
        "reinterpret_bytes[8]%28#0",
        "tmp%97#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%97#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%99#0"
      ]
    },
    "1630": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%97#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%97#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%99#0",
        "reinterpret_bytes[8]%29#0"
      ]
    },
    "1633": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%28#0",
        "tmp%100#0",
        "tmp%97#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%97#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%99#0",
        "tmp%100#0"
      ]
    },
    "1634": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addLoanRecordExternal",
      "op": "callsub addLoanRecordExternal",
      "stack_out": []
    },
    "1637": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1638": {
      "op": "return",
      "stack_out": []
    },
    "1639": {
      "block": "main_addNewCollateralType_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "1641": {
      "op": "!",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "1642": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1643": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "1645": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1646": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0"
      ]
    },
    "1649": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ]
    },
    "1652": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%92#0"
      ]
    },
    "1654": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%92#0",
        "1"
      ]
    },
    "1655": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0"
      ]
    },
    "1656": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "1657": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "1659": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "1660": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "1661": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0"
      ]
    },
    "1662": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%26#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%26#0"
      ]
    },
    "1665": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addNewCollateralType",
      "op": "callsub addNewCollateralType",
      "stack_out": []
    },
    "1668": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1669": {
      "op": "return",
      "stack_out": []
    },
    "1670": {
      "block": "main_getOraclePrice_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "1672": {
      "op": "!",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "1673": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1674": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "1676": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1677": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0"
      ]
    },
    "1680": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "1683": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "1684": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "1685": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "1686": {
      "op": "concat",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "1687": {
      "op": "log",
      "stack_out": []
    },
    "1688": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1689": {
      "op": "return",
      "stack_out": []
    },
    "1690": {
      "block": "main_configureLSTToken_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "1692": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "1693": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1694": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "1696": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1697": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "1699": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "1"
      ]
    },
    "1700": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1701": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "1702": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "1704": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "1705": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "1706": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1707": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%22#0"
      ]
    },
    "1710": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%82#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%82#0"
      ]
    },
    "1711": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.configureLSTToken",
      "op": "callsub configureLSTToken",
      "stack_out": []
    },
    "1714": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1715": {
      "op": "return",
      "stack_out": []
    },
    "1716": {
      "block": "main_optInToLST_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1718": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "1719": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1720": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "1722": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1723": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0"
      ]
    },
    "1726": {
      "op": "btoi",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1727": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%75#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0"
      ]
    },
    "1729": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%75#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "1"
      ]
    },
    "1730": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "gtxn_idx%2#0"
      ]
    },
    "1731": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "1732": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "1734": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "1735": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "1736": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%75#0",
        "gtxn_idx%2#0"
      ]
    },
    "1737": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.optInToLST",
      "op": "callsub optInToLST",
      "stack_out": []
    },
    "1740": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1741": {
      "op": "return",
      "stack_out": []
    },
    "1742": {
      "block": "main_generateLSTToken_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1744": {
      "op": "!",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "1745": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1746": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1748": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1749": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1751": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "1"
      ]
    },
    "1752": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1753": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "1754": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "1756": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "1757": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "1758": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1759": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.generateLSTToken",
      "op": "callsub generateLSTToken",
      "stack_out": []
    },
    "1762": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1763": {
      "op": "return",
      "stack_out": []
    },
    "1764": {
      "block": "main_getAcceptedCollateralsCount_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1766": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1767": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1768": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1770": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1771": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "op": "callsub getAcceptedCollateralsCount",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "1774": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "1775": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "1776": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "1777": {
      "op": "concat",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1778": {
      "op": "log",
      "stack_out": []
    },
    "1779": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1780": {
      "op": "return",
      "stack_out": []
    },
    "1781": {
      "block": "main_getTotalDeposits_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1783": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1784": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1785": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1787": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1788": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getTotalDeposits",
      "op": "callsub getTotalDeposits",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1791": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "1792": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "1793": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "1794": {
      "op": "concat",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1795": {
      "op": "log",
      "stack_out": []
    },
    "1796": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1797": {
      "op": "return",
      "stack_out": []
    },
    "1798": {
      "block": "main_getCirculatingLST_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1800": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "1801": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1802": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1804": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1805": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getCirculatingLST",
      "op": "callsub getCirculatingLST",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1808": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1809": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1810": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1811": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1812": {
      "op": "log",
      "stack_out": []
    },
    "1813": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1814": {
      "op": "return",
      "stack_out": []
    },
    "1815": {
      "block": "main_setMigrationAdmin_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1817": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1818": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1819": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1821": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1822": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "1825": {
      "op": "btoi",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1826": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1828": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setMigrationAdmin",
      "op": "callsub setMigrationAdmin",
      "stack_out": []
    },
    "1831": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1832": {
      "op": "return",
      "stack_out": []
    },
    "1833": {
      "block": "main_setContractState_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1835": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1836": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1837": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1839": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1840": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%20#0"
      ]
    },
    "1843": {
      "op": "btoi",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1844": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setContractState",
      "op": "callsub setContractState",
      "stack_out": []
    },
    "1847": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1848": {
      "op": "return",
      "stack_out": []
    },
    "1849": {
      "block": "main_setRateParams_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1851": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1852": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1853": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1855": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1856": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "1859": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1860": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "1863": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "1864": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "1867": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "1868": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "1871": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1872": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%12#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "1875": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "1876": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%13#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "1879": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "1880": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%14#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "1883": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "1884": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%15#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "1887": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "1888": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "1891": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "1892": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[8]%17#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "1895": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "1896": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "1899": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "1900": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_bytes[8]%19#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "1903": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "1904": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setRateParams",
      "op": "callsub setRateParams",
      "stack_out": []
    },
    "1907": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1908": {
      "op": "return",
      "stack_out": []
    },
    "1909": {
      "block": "main_initApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1911": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1912": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1913": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1915": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1916": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1918": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1"
      ]
    },
    "1919": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1920": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "1921": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "1923": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "1924": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1925": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1926": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1929": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ]
    },
    "1930": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1933": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1934": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1937": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1938": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1941": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1942": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%5#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1945": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1946": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[1]%1#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "1949": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1950": {
      "op": "txnas Applications",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "1952": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%6#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1955": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "1956": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%7#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "1959": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "1960": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.initApplication",
      "op": "callsub initApplication",
      "stack_out": []
    },
    "1963": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1964": {
      "op": "return",
      "stack_out": []
    },
    "1965": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1967": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1968": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1969": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1971": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1972": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1973": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "1976": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1977": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1979": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1982": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1983": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "1986": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1987": {
      "op": "return",
      "stack_out": []
    },
    "1988": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.createApplication",
      "params": {
        "admin#0": "bytes",
        "baseTokenId#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1991": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\""
      ],
      "stack_out": [
        "\"admin_account\""
      ]
    },
    "1992": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ]
    },
    "1994": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1995": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseTokenId#0 (copy)"
      ]
    },
    "1997": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1998": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"base_token_id\""
      ]
    },
    "1999": {
      "op": "swap",
      "stack_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2000": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2001": {
      "op": "bytec 14 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\""
      ],
      "stack_out": [
        "\"migration_admin\""
      ]
    },
    "2003": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"migration_admin\"",
        "admin#0 (copy)"
      ]
    },
    "2005": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2006": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\""
      ],
      "stack_out": [
        "\"contract_state\""
      ]
    },
    "2008": {
      "op": "bytec 38 // 0x0000000000000000",
      "defined_out": [
        "\"contract_state\"",
        "0x0000000000000000"
      ],
      "stack_out": [
        "\"contract_state\"",
        "0x0000000000000000"
      ]
    },
    "2010": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2011": {
      "retsub": true,
      "op": "retsub"
    },
    "2012": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.initApplication",
      "params": {
        "mbrTxn#0": "uint64",
        "ltv_bps#0": "uint64",
        "liq_threshold_bps#0": "uint64",
        "liq_bonus_bps#0": "uint64",
        "origination_fee_bps#0": "uint64",
        "protocol_share_bps#0": "uint64",
        "oracle_app_id#0": "uint64",
        "buyout_token_id#0": "uint64",
        "additional_rewards_commission_percentage#0": "uint64"
      },
      "block": "initApplication",
      "stack_in": [],
      "op": "proto 9 0"
    },
    "2015": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2017": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2018": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2019": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2020": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2021": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2022": {
      "op": "assert",
      "stack_out": []
    },
    "2023": {
      "op": "frame_dig -9",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2025": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2027": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2028": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2029": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2030": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2031": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2032": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "2035": {
      "op": "frame_dig -9",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2037": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2039": {
      "op": "pushint 400000 // 400000",
      "defined_out": [
        "400000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "400000"
      ]
    },
    "2043": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2044": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "2047": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2048": {
      "block": "initApplication_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2049": {
      "op": "frame_dig -1",
      "defined_out": [
        "additional_rewards_commission_percentage#0 (copy)"
      ],
      "stack_out": [
        "additional_rewards_commission_percentage#0 (copy)"
      ]
    },
    "2051": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "additional_rewards_commission_percentage#0 (copy)"
      ],
      "stack_out": [
        "additional_rewards_commission_percentage#0 (copy)",
        "100"
      ]
    },
    "2053": {
      "op": "<=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2054": {
      "error": "COMMISSION_TOO_HIGH",
      "op": "assert // COMMISSION_TOO_HIGH",
      "stack_out": []
    },
    "2055": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\""
      ],
      "stack_out": [
        "\"ltv_bps\""
      ]
    },
    "2057": {
      "op": "frame_dig -8",
      "defined_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ]
    },
    "2059": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2060": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\""
      ],
      "stack_out": [
        "\"liq_threshold_bps\""
      ]
    },
    "2062": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ]
    },
    "2064": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2065": {
      "op": "bytec 39 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\""
      ],
      "stack_out": [
        "\"origination_fee_bps\""
      ]
    },
    "2067": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ],
      "stack_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ]
    },
    "2069": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2070": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\""
      ],
      "stack_out": [
        "\"accepted_collaterals_count\""
      ]
    },
    "2072": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ]
    },
    "2073": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2074": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\""
      ],
      "stack_out": [
        "\"fee_pool\""
      ]
    },
    "2076": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"fee_pool\"",
        "0"
      ]
    },
    "2077": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2078": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "2080": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"circulating_lst\"",
        "0"
      ]
    },
    "2081": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2082": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\""
      ],
      "stack_out": [
        "\"total_deposits\""
      ]
    },
    "2083": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_deposits\"",
        "0"
      ]
    },
    "2084": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2085": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\""
      ],
      "stack_out": [
        "\"active_loan_records\""
      ]
    },
    "2087": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"active_loan_records\"",
        "0"
      ]
    },
    "2088": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2089": {
      "op": "bytec 40 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\""
      ],
      "stack_out": [
        "\"protocol_share_bps\""
      ]
    },
    "2091": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ],
      "stack_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ]
    },
    "2093": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2094": {
      "op": "bytec 41 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\""
      ],
      "stack_out": [
        "\"oracle_app\""
      ]
    },
    "2096": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ],
      "stack_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ]
    },
    "2098": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2099": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\""
      ],
      "stack_out": [
        "\"lst_token_id\""
      ]
    },
    "2101": {
      "op": "pushbytes 0x0000000000000063",
      "defined_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ],
      "stack_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ]
    },
    "2111": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2112": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "2114": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "\"base_bps\"",
        "50"
      ],
      "stack_out": [
        "\"base_bps\"",
        "50"
      ]
    },
    "2116": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2117": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "2119": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "\"util_cap_bps\"",
        "8000"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "8000"
      ]
    },
    "2122": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2123": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\""
      ],
      "stack_out": [
        "\"total_borrows\""
      ]
    },
    "2125": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_borrows\"",
        "0"
      ]
    },
    "2126": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2127": {
      "op": "bytec 33 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "2129": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rate_model_type\"",
        "0"
      ]
    },
    "2130": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2131": {
      "op": "bytec 34 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "2133": {
      "op": "pushint 5000 // 5000",
      "defined_out": [
        "\"kink_norm_bps\"",
        "5000"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "5000"
      ]
    },
    "2136": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2137": {
      "op": "bytec 35 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "2139": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "\"slope1_bps\"",
        "1000"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "1000"
      ]
    },
    "2140": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2141": {
      "op": "bytec 36 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "2143": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "\"slope2_bps\"",
        "2000"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "2000"
      ]
    },
    "2146": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2147": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "2149": {
      "op": "pushint 6000 // 6000",
      "defined_out": [
        "\"max_apr_bps\"",
        "6000"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "6000"
      ]
    },
    "2152": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2153": {
      "op": "bytec 42 // \"last_scaled_down_disbursement\"",
      "defined_out": [
        "\"last_scaled_down_disbursement\""
      ],
      "stack_out": [
        "\"last_scaled_down_disbursement\""
      ]
    },
    "2155": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_scaled_down_disbursement\"",
        "0"
      ]
    },
    "2156": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2157": {
      "op": "bytec 43 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "2159": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"ema_alpha_bps\"",
        "0"
      ]
    },
    "2160": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2161": {
      "op": "bytec 30 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\""
      ],
      "stack_out": [
        "\"prev_apr_bps\""
      ]
    },
    "2163": {
      "op": "pushint 50 // 50",
      "stack_out": [
        "\"prev_apr_bps\"",
        "50"
      ]
    },
    "2165": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2166": {
      "op": "pushbytes \"util_ema_bps\"",
      "defined_out": [
        "\"util_ema_bps\""
      ],
      "stack_out": [
        "\"util_ema_bps\""
      ]
    },
    "2180": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"util_ema_bps\"",
        "0"
      ]
    },
    "2181": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2182": {
      "op": "bytec 44 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "2184": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"power_gamma_q16\"",
        "0"
      ]
    },
    "2185": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2186": {
      "op": "bytec 45 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "2188": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"scarcity_K_bps\"",
        "0"
      ]
    },
    "2189": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2190": {
      "op": "bytec 46 // \"last_max_borrow\"",
      "defined_out": [
        "\"last_max_borrow\""
      ],
      "stack_out": [
        "\"last_max_borrow\""
      ]
    },
    "2192": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_max_borrow\"",
        "0"
      ]
    },
    "2193": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2194": {
      "op": "bytec 47 // \"last_requested_loan\"",
      "defined_out": [
        "\"last_requested_loan\""
      ],
      "stack_out": [
        "\"last_requested_loan\""
      ]
    },
    "2196": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_requested_loan\"",
        "0"
      ]
    },
    "2197": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2198": {
      "op": "pushbytes \"debug_diff\"",
      "defined_out": [
        "\"debug_diff\""
      ],
      "stack_out": [
        "\"debug_diff\""
      ]
    },
    "2210": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"debug_diff\"",
        "0"
      ]
    },
    "2211": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2212": {
      "op": "bytec 48 // \"params_updated_at\"",
      "defined_out": [
        "\"params_updated_at\""
      ],
      "stack_out": [
        "\"params_updated_at\""
      ]
    },
    "2214": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"params_updated_at\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"params_updated_at\"",
        "new_state_value%0#0"
      ]
    },
    "2216": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2217": {
      "op": "bytec 37 // \"params_update_nonce\"",
      "defined_out": [
        "\"params_update_nonce\""
      ],
      "stack_out": [
        "\"params_update_nonce\""
      ]
    },
    "2219": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"params_update_nonce\"",
        "0"
      ]
    },
    "2220": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2221": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\""
      ],
      "stack_out": [
        "\"borrow_index_wad\""
      ]
    },
    "2223": {
      "op": "intc 6 // 1000000000000",
      "defined_out": [
        "\"borrow_index_wad\"",
        "1000000000000"
      ],
      "stack_out": [
        "\"borrow_index_wad\"",
        "1000000000000"
      ]
    },
    "2225": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2226": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\""
      ],
      "stack_out": [
        "\"last_accrual_ts\""
      ]
    },
    "2228": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"last_accrual_ts\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"last_accrual_ts\"",
        "new_state_value%1#0"
      ]
    },
    "2230": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2231": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2232": {
      "op": "bytec 23 // \"base_bps\"",
      "stack_out": [
        "0",
        "\"base_bps\""
      ]
    },
    "2234": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2235": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2236": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "2238": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "maybe_value%2#0"
      ]
    },
    "2239": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2240": {
      "op": "frame_dig -2",
      "defined_out": [
        "buyout_token_id#0 (copy)"
      ],
      "stack_out": [
        "buyout_token_id#0 (copy)"
      ]
    },
    "2242": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2243": {
      "op": "bytec 16 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"buyout_token_id\""
      ]
    },
    "2245": {
      "op": "swap",
      "stack_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2246": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2247": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\""
      ],
      "stack_out": [
        "\"liq_bonus_bps\""
      ]
    },
    "2249": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ]
    },
    "2251": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2252": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\""
      ],
      "stack_out": [
        "\"total_commission_earned\""
      ]
    },
    "2254": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_commission_earned\"",
        "0"
      ]
    },
    "2255": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2256": {
      "op": "bytec 17 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\""
      ],
      "stack_out": [
        "\"current_accumulated_commission\""
      ]
    },
    "2258": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"current_accumulated_commission\"",
        "0"
      ]
    },
    "2259": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2260": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\""
      ],
      "stack_out": [
        "\"commission_percentage\""
      ]
    },
    "2262": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"commission_percentage\"",
        "additional_rewards_commission_percentage#0 (copy)"
      ]
    },
    "2264": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2265": {
      "op": "pushbytes \"total_borrows_principal\"",
      "defined_out": [
        "\"total_borrows_principal\""
      ],
      "stack_out": [
        "\"total_borrows_principal\""
      ]
    },
    "2290": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_borrows_principal\"",
        "0"
      ]
    },
    "2291": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2292": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\""
      ],
      "stack_out": [
        "\"cash_on_hand\""
      ]
    },
    "2294": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"cash_on_hand\"",
        "0"
      ]
    },
    "2295": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2296": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\""
      ],
      "stack_out": [
        "\"total_additional_rewards\""
      ]
    },
    "2298": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_additional_rewards\"",
        "0"
      ]
    },
    "2299": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2300": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2301": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2302": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2303": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2304": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2305": {
      "op": "bz initApplication_after_if_else@7",
      "stack_out": []
    },
    "2308": {
      "op": "itxn_begin"
    },
    "2309": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2311": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2312": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2313": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2314": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0"
      ]
    },
    "2315": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2316": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "2317": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2319": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2321": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2323": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2324": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2326": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "2327": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2329": {
      "op": "itxn_submit"
    },
    "2330": {
      "block": "initApplication_after_if_else@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2331": {
      "op": "bytec 16 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"buyout_token_id\""
      ]
    },
    "2333": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2334": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "2335": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2336": {
      "op": "bz initApplication_after_if_else@10",
      "stack_out": []
    },
    "2339": {
      "op": "itxn_begin"
    },
    "2340": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2342": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2343": {
      "op": "bytec 16 // \"buyout_token_id\"",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "2345": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2346": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_value%6#0"
      ]
    },
    "2347": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "2348": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "2349": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "2351": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2353": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2355": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2356": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2358": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2359": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2361": {
      "op": "itxn_submit"
    },
    "2362": {
      "block": "initApplication_after_if_else@10",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2363": {
      "block": "initApplication_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2364": {
      "op": "b initApplication_bool_merge@4"
    },
    "2367": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setRateParams",
      "params": {
        "base_bps#0": "uint64",
        "util_cap_bps#0": "uint64",
        "kink_norm_bps#0": "uint64",
        "slope1_bps#0": "uint64",
        "slope2_bps#0": "uint64",
        "max_apr_bps#0": "uint64",
        "max_apr_step_bps#0": "uint64",
        "ema_alpha_bps#0": "uint64",
        "power_gamma_q16#0": "uint64",
        "scarcity_K_bps#0": "uint64",
        "rate_model_type#0": "uint64",
        "liq_bonus_bps#0": "uint64"
      },
      "block": "setRateParams",
      "stack_in": [],
      "op": "proto 12 0"
    },
    "2370": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2372": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2373": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2374": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2375": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2376": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2377": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "2378": {
      "op": "frame_dig -11",
      "defined_out": [
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "2380": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "2383": {
      "op": "frame_dig -11",
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "2385": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)",
        "10000"
      ]
    },
    "2387": {
      "op": "<=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2388": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "2391": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2392": {
      "block": "setRateParams_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "BAD_UTIL_CAP",
      "op": "assert // BAD_UTIL_CAP",
      "defined_out": [],
      "stack_out": []
    },
    "2393": {
      "op": "frame_dig -10",
      "defined_out": [
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2395": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "2398": {
      "op": "frame_dig -10",
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2400": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)",
        "10000"
      ]
    },
    "2402": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2403": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "2406": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2407": {
      "block": "setRateParams_bool_merge@8",
      "stack_in": [
        "and_result%1#0"
      ],
      "error": "BAD_KINK",
      "op": "assert // BAD_KINK",
      "defined_out": [],
      "stack_out": []
    },
    "2408": {
      "op": "frame_dig -7",
      "defined_out": [
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "2410": {
      "op": "bz setRateParams_after_if_else@14",
      "stack_out": []
    },
    "2413": {
      "op": "frame_dig -7",
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "2415": {
      "op": "frame_dig -12",
      "defined_out": [
        "base_bps#0 (copy)",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)",
        "base_bps#0 (copy)"
      ]
    },
    "2417": {
      "op": ">=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2418": {
      "error": "BAD_MAX_APR",
      "op": "assert // BAD_MAX_APR",
      "stack_out": []
    },
    "2419": {
      "block": "setRateParams_after_if_else@14",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "2421": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)",
        "10000"
      ]
    },
    "2423": {
      "op": "<=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2424": {
      "error": "BAD_EMA_ALPHA",
      "op": "assert // BAD_EMA_ALPHA",
      "stack_out": []
    },
    "2425": {
      "op": "frame_dig -2",
      "defined_out": [
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "2427": {
      "op": "bz setRateParams_bool_true@16",
      "stack_out": []
    },
    "2430": {
      "op": "frame_dig -2",
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "2432": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)",
        "255"
      ]
    },
    "2435": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "2436": {
      "op": "bz setRateParams_bool_false@17",
      "stack_out": []
    },
    "2439": {
      "block": "setRateParams_bool_true@16",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2440": {
      "block": "setRateParams_bool_merge@18",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "UNSUPPORTED_MODEL",
      "op": "assert // UNSUPPORTED_MODEL",
      "defined_out": [],
      "stack_out": []
    },
    "2441": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "2443": {
      "op": "frame_dig -12",
      "defined_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ],
      "stack_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ]
    },
    "2445": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2446": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "2448": {
      "op": "frame_dig -11",
      "defined_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ]
    },
    "2450": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2451": {
      "op": "bytec 34 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "2453": {
      "op": "frame_dig -10",
      "defined_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2455": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2456": {
      "op": "bytec 35 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "2458": {
      "op": "frame_dig -9",
      "defined_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ]
    },
    "2460": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2461": {
      "op": "bytec 36 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "2463": {
      "op": "frame_dig -8",
      "defined_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ]
    },
    "2465": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2466": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "2468": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ]
    },
    "2470": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2471": {
      "op": "pushbytes \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\""
      ],
      "stack_out": [
        "\"max_apr_step_bps\""
      ]
    },
    "2489": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ]
    },
    "2491": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2492": {
      "op": "bytec 33 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "2494": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ]
    },
    "2496": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2497": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\""
      ],
      "stack_out": [
        "\"liq_bonus_bps\""
      ]
    },
    "2499": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ]
    },
    "2501": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2502": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2503": {
      "op": "bytec 37 // \"params_update_nonce\"",
      "defined_out": [
        "\"params_update_nonce\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"params_update_nonce\""
      ]
    },
    "2505": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2506": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2507": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "2508": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2509": {
      "op": "bytec 37 // \"params_update_nonce\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"params_update_nonce\""
      ]
    },
    "2511": {
      "op": "swap",
      "stack_out": [
        "\"params_update_nonce\"",
        "new_state_value%0#0"
      ]
    },
    "2512": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2513": {
      "op": "bytec 48 // \"params_updated_at\"",
      "defined_out": [
        "\"params_updated_at\""
      ],
      "stack_out": [
        "\"params_updated_at\""
      ]
    },
    "2515": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"params_updated_at\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"params_updated_at\"",
        "new_state_value%1#0"
      ]
    },
    "2517": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2518": {
      "op": "bytec 43 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "2520": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "2522": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2523": {
      "op": "bytec 44 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "2525": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ],
      "stack_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ]
    },
    "2527": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2528": {
      "op": "bytec 45 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "2530": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ],
      "stack_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ]
    },
    "2532": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2533": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2534": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2536": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2537": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2538": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2541": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2542": {
      "op": "bytec 30 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "2544": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2545": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2546": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "0"
      ]
    },
    "2547": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "stack_out": [
        "maybe_value%3#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2549": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2550": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "2551": {
      "op": ">",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2552": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2555": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2556": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2558": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2559": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "2560": {
      "op": "bytec 30 // \"prev_apr_bps\"",
      "stack_out": [
        "maybe_value%5#0",
        "\"prev_apr_bps\""
      ]
    },
    "2562": {
      "op": "swap",
      "stack_out": [
        "\"prev_apr_bps\"",
        "maybe_value%5#0"
      ]
    },
    "2563": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2564": {
      "block": "setRateParams_after_if_else@21",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2565": {
      "block": "setRateParams_bool_false@17",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2566": {
      "op": "b setRateParams_bool_merge@18"
    },
    "2569": {
      "block": "setRateParams_bool_false@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2570": {
      "op": "b setRateParams_bool_merge@8"
    },
    "2573": {
      "block": "setRateParams_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2574": {
      "op": "b setRateParams_bool_merge@4"
    },
    "2577": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setContractState",
      "params": {
        "state#0": "uint64"
      },
      "block": "setContractState",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2580": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2582": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2583": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2584": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2585": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2586": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2587": {
      "op": "bnz setContractState_bool_true@2",
      "stack_out": []
    },
    "2590": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2592": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2593": {
      "op": "bytec 14 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "2595": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2596": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2597": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2598": {
      "op": "bz setContractState_bool_false@3",
      "stack_out": []
    },
    "2601": {
      "block": "setContractState_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2602": {
      "block": "setContractState_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "defined_out": [],
      "stack_out": []
    },
    "2603": {
      "op": "frame_dig -1",
      "defined_out": [
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)"
      ]
    },
    "2605": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)",
        "2"
      ]
    },
    "2607": {
      "op": "<=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2608": {
      "error": "INVALID_STATE",
      "op": "assert // INVALID_STATE",
      "stack_out": []
    },
    "2609": {
      "op": "frame_dig -1",
      "stack_out": [
        "state#0 (copy)"
      ]
    },
    "2611": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2612": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"contract_state\""
      ]
    },
    "2614": {
      "op": "swap",
      "stack_out": [
        "\"contract_state\"",
        "val_as_bytes%0#0"
      ]
    },
    "2615": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2616": {
      "retsub": true,
      "op": "retsub"
    },
    "2617": {
      "block": "setContractState_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2618": {
      "op": "b setContractState_bool_merge@4"
    },
    "2621": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setMigrationAdmin",
      "params": {
        "migrationAdmin#0": "bytes"
      },
      "block": "setMigrationAdmin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2624": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2626": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2627": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2628": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2629": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2630": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2631": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "2632": {
      "op": "bytec 14 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\""
      ],
      "stack_out": [
        "\"migration_admin\""
      ]
    },
    "2634": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"migration_admin\"",
        "migrationAdmin#0 (copy)"
      ],
      "stack_out": [
        "\"migration_admin\"",
        "migrationAdmin#0 (copy)"
      ]
    },
    "2636": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2637": {
      "retsub": true,
      "op": "retsub"
    },
    "2638": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getCirculatingLST",
      "params": {},
      "block": "getCirculatingLST",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2639": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "2641": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2642": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2643": {
      "retsub": true,
      "op": "retsub"
    },
    "2644": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getTotalDeposits",
      "params": {},
      "block": "getTotalDeposits",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2645": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "2646": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2647": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2648": {
      "retsub": true,
      "op": "retsub"
    },
    "2649": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "params": {},
      "block": "getAcceptedCollateralsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2650": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "2652": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2653": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2654": {
      "retsub": true,
      "op": "retsub"
    },
    "2655": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.generateLSTToken",
      "params": {
        "mbrTxn#0": "uint64"
      },
      "block": "generateLSTToken",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2658": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2660": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2661": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2662": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2663": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2664": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2665": {
      "op": "assert",
      "stack_out": []
    },
    "2666": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2668": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2670": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2671": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2672": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2673": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2674": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2675": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2678": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2680": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2682": {
      "op": "pushint 102000 // 102000",
      "defined_out": [
        "102000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "102000"
      ]
    },
    "2686": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2687": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2690": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2691": {
      "block": "generateLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2692": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2693": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2694": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2695": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2696": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2697": {
      "op": "itxn_begin"
    },
    "2698": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2700": {
      "op": "dig 1",
      "defined_out": [
        "baseToken#0",
        "baseToken#0 (copy)",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2702": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "baseToken#0",
        "check%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2704": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2705": {
      "op": "dig 2",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2707": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "baseToken#0",
        "check%1#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2709": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2710": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2712": {
      "op": "dig 4",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2714": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "baseToken#0",
        "check%2#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "2716": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0"
      ]
    },
    "2717": {
      "op": "pushbytes \"c\"",
      "defined_out": [
        "\"c\"",
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "\"c\""
      ]
    },
    "2720": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "\"c\"",
        "value%2#0"
      ]
    },
    "2721": {
      "op": "concat",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2722": {
      "op": "uncover 5",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "baseToken#0"
      ]
    },
    "2724": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%3#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0",
        "check%3#0"
      ]
    },
    "2726": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0"
      ]
    },
    "2727": {
      "op": "pushbytes \"c\"",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0",
        "\"c\""
      ]
    },
    "2730": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "\"c\"",
        "value%3#0"
      ]
    },
    "2731": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "2732": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2734": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2736": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2738": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "0"
      ]
    },
    "2739": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2741": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2743": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2745": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "2747": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "2749": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2751": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2752": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2754": {
      "op": "itxn_submit"
    },
    "2755": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "result.CreatedAssetID#0"
      ],
      "stack_out": [
        "result.CreatedAssetID#0"
      ]
    },
    "2757": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2758": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2760": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2761": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2762": {
      "retsub": true,
      "op": "retsub"
    },
    "2763": {
      "block": "generateLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2764": {
      "op": "b generateLSTToken_bool_merge@4"
    },
    "2767": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.optInToLST",
      "params": {
        "lstAssetId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "optInToLST",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2770": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2772": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2773": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2774": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2775": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2776": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2777": {
      "op": "assert",
      "stack_out": []
    },
    "2778": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2780": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2782": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2783": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2784": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2785": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2786": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2787": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2790": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2792": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2794": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "2000"
      ]
    },
    "2797": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2798": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2801": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2802": {
      "block": "optInToLST_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2803": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAssetId#0 (copy)"
      ],
      "stack_out": [
        "lstAssetId#0 (copy)"
      ]
    },
    "2805": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2806": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2808": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2809": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2810": {
      "op": "itxn_begin"
    },
    "2811": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2813": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2814": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2816": {
      "op": "frame_dig -2",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "lstAssetId#0 (copy)"
      ]
    },
    "2818": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2820": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2822": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2823": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2825": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2826": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2828": {
      "op": "itxn_submit"
    },
    "2829": {
      "retsub": true,
      "op": "retsub"
    },
    "2830": {
      "block": "optInToLST_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2831": {
      "op": "b optInToLST_bool_merge@4"
    },
    "2834": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.configureLSTToken",
      "params": {
        "axferTxn#0": "uint64",
        "circulating_lst#0": "uint64"
      },
      "block": "configureLSTToken",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2837": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2839": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2840": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2841": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2842": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2843": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2844": {
      "op": "assert",
      "stack_out": []
    },
    "2845": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2846": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "2848": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2849": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2850": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2851": {
      "op": "frame_dig -2",
      "defined_out": [
        "axferTxn#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "axferTxn#0 (copy)"
      ]
    },
    "2853": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2855": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2856": {
      "error": "LST token not set",
      "op": "assert // LST token not set",
      "stack_out": []
    },
    "2857": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2859": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2861": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "2862": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2863": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2864": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "2865": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2866": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2869": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2871": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2873": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2875": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2876": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2879": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2880": {
      "block": "configureLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2881": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "2883": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ],
      "stack_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ]
    },
    "2885": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2886": {
      "retsub": true,
      "op": "retsub"
    },
    "2887": {
      "block": "configureLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2888": {
      "op": "b configureLSTToken_bool_merge@4"
    },
    "2891": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "params": {
        "tokenId#0": "bytes"
      },
      "block": "getOraclePrice",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2894": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2895": {
      "op": "bytec 41 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"oracle_app\""
      ]
    },
    "2897": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "maybe_exists%0#0"
      ]
    },
    "2898": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2899": {
      "op": "dup",
      "defined_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ]
    },
    "2900": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "address#0",
        "check%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "check%0#0"
      ]
    },
    "2902": {
      "op": "bury 1",
      "stack_out": [
        "oracle#0",
        "check%0#0"
      ]
    },
    "2904": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2905": {
      "op": "itxn_begin"
    },
    "2906": {
      "op": "pushbytes 0xac13e004 // method \"getTokenPrice(uint64)(uint64,uint64,uint64)\"",
      "defined_out": [
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))"
      ]
    },
    "2912": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2914": {
      "op": "frame_dig -1",
      "defined_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ]
    },
    "2916": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2918": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2920": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2922": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2924": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2925": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2927": {
      "op": "itxn_submit"
    },
    "2928": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2930": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2931": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2934": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2935": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2936": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2937": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "12"
      ]
    },
    "2939": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2940": {
      "retsub": true,
      "op": "retsub"
    },
    "2941": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.updateCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "updateCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2944": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "2946": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2948": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2949": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2950": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "2951": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0"
      ]
    },
    "2952": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2953": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)",
        "24"
      ]
    },
    "2955": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "2956": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "2958": {
      "op": "+",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "2959": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "collateral#0 (copy)"
      ]
    },
    "2961": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0"
      ]
    },
    "2964": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "collateral#0 (copy)"
      ]
    },
    "2966": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2969": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0",
        "collateral#0 (copy)"
      ]
    },
    "2971": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2974": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "newTotal#0"
      ]
    },
    "2976": {
      "op": "itob",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2977": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "collateral#0"
      ]
    },
    "2979": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0"
      ]
    },
    "2982": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "tmp%3#0"
      ]
    },
    "2984": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2986": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2987": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%4#0",
        "tmp%5#0"
      ]
    },
    "2989": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2990": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2992": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2993": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%6#0"
      ]
    },
    "2994": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2995": {
      "op": "box_put",
      "stack_out": []
    },
    "2996": {
      "retsub": true,
      "op": "retsub"
    },
    "2997": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.reduceCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "reduceCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3000": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "3002": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3004": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3005": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3006": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "3007": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0"
      ]
    },
    "3008": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "3009": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)",
        "24"
      ]
    },
    "3011": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "3012": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3013": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "3015": {
      "op": ">=",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3016": {
      "error": "INSUFFICIENT_COLLATERAL",
      "op": "assert // INSUFFICIENT_COLLATERAL",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "3017": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "3019": {
      "op": "-",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "3020": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "collateral#0 (copy)"
      ]
    },
    "3022": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0"
      ]
    },
    "3025": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "collateral#0 (copy)"
      ]
    },
    "3027": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "3030": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0",
        "collateral#0 (copy)"
      ]
    },
    "3032": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "3035": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "newTotal#0"
      ]
    },
    "3037": {
      "op": "itob",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ]
    },
    "3038": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "collateral#0"
      ]
    },
    "3040": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0"
      ]
    },
    "3043": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "tmp%6#0"
      ]
    },
    "3045": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "3047": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3048": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%4#0",
        "tmp%8#0"
      ]
    },
    "3050": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3051": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "3053": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3054": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%9#0"
      ]
    },
    "3055": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3056": {
      "op": "box_put",
      "stack_out": []
    },
    "3057": {
      "retsub": true,
      "op": "retsub"
    },
    "3058": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addNewCollateralType",
      "params": {
        "collateralTokenId#0": "bytes",
        "collateralBaseTokenId#0": "bytes",
        "mbrTxn#0": "uint64",
        "originatingAppId#0": "bytes"
      },
      "block": "addNewCollateralType",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3061": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3062": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "3063": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3064": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3065": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3066": {
      "op": "txn Sender",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "3068": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0"
      ]
    },
    "3069": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "3070": {
      "op": "app_global_get_ex",
      "defined_out": [
        "baseToken#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3071": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "3072": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%1#0"
      ]
    },
    "3073": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3074": {
      "op": "frame_dig -4",
      "defined_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3076": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "3077": {
      "op": "dup"
    },
    "3078": {
      "op": "uncover 2",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0",
        "baseToken#0"
      ]
    },
    "3080": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3081": {
      "error": "CANNOT_USE_BASE_AS_COLLATERAL",
      "op": "assert // CANNOT_USE_BASE_AS_COLLATERAL",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3082": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\""
      ]
    },
    "3084": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3086": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3087": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3088": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3089": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3091": {
      "op": "!",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%5#0"
      ]
    },
    "3092": {
      "error": "COLLATERAL_ALREADY_EXISTS",
      "op": "assert // COLLATERAL_ALREADY_EXISTS",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3093": {
      "op": "frame_dig -2",
      "defined_out": [
        "mbrTxn#0 (copy)",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "3095": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0"
      ]
    },
    "3097": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0"
      ]
    },
    "3098": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0",
        "\"admin_account\""
      ]
    },
    "3099": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3100": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0"
      ]
    },
    "3101": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%7#0"
      ]
    },
    "3102": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3105": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "3107": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0"
      ]
    },
    "3109": {
      "op": "pushint 101000 // 101000",
      "defined_out": [
        "101000",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0",
        "101000"
      ]
    },
    "3113": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%9#0"
      ]
    },
    "3114": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3117": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "3118": {
      "block": "addNewCollateralType_bool_merge@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ],
      "error": "INSUFFICIENT_MBR",
      "op": "assert // INSUFFICIENT_MBR",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3119": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0"
      ]
    },
    "3120": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0",
        "\"base_token_id\""
      ]
    },
    "3121": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3122": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0"
      ]
    },
    "3123": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3125": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralBaseTokenId#0 (copy)",
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "collateralTokenId#0 (copy)",
        "collateralBaseTokenId#0 (copy)"
      ]
    },
    "3127": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3128": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0"
      ]
    },
    "3129": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3130": {
      "op": "bytec 38 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "3132": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3133": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "originatingAppId#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%4#0",
        "originatingAppId#0 (copy)"
      ]
    },
    "3135": {
      "op": "concat",
      "defined_out": [
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0"
      ]
    },
    "3136": {
      "op": "frame_dig 1",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ]
    },
    "3138": {
      "op": "dup"
    },
    "3139": {
      "op": "uncover 2",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "newAcceptedCollateral#0"
      ]
    },
    "3141": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3142": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0"
      ]
    },
    "3143": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "3145": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3146": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0"
      ]
    },
    "3147": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "1"
      ]
    },
    "3148": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0"
      ]
    },
    "3149": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "3151": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "\"accepted_collaterals_count\"",
        "new_state_value%0#0"
      ]
    },
    "3152": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3153": {
      "op": "itxn_begin"
    },
    "3154": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "3156": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3157": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3158": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3160": {
      "op": "frame_dig 0",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%2#0"
      ]
    },
    "3162": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3164": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "3166": {
      "op": "itxn_field Sender",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3168": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "4"
      ]
    },
    "3169": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3171": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "1000"
      ]
    },
    "3172": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3174": {
      "op": "itxn_submit"
    },
    "3175": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3176": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3178": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3179": {
      "retsub": true,
      "op": "retsub"
    },
    "3180": {
      "block": "addNewCollateralType_bool_false@3",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "3181": {
      "op": "b addNewCollateralType_bool_merge@4"
    },
    "3184": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addLoanRecordExternal",
      "params": {
        "disbursement#0": "uint64",
        "collateralTokenId#0": "bytes",
        "borrowerAddress#0": "bytes",
        "collateralAmount#0": "uint64"
      },
      "block": "addLoanRecordExternal",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3187": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3189": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "3190": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "3191": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3192": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3193": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3194": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "3195": {
      "op": "frame_dig -4",
      "defined_out": [
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)"
      ]
    },
    "3197": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3199": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)",
        "collateralTokenId#0 (copy)",
        "borrowerAddress#0 (copy)"
      ]
    },
    "3201": {
      "op": "frame_dig -1",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)",
        "collateralTokenId#0 (copy)",
        "borrowerAddress#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3203": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.mintLoanRecord",
      "op": "callsub mintLoanRecord",
      "stack_out": []
    },
    "3206": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#0 (copy)"
      ]
    },
    "3208": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3210": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": []
    },
    "3213": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3214": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_borrows\""
      ]
    },
    "3216": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3217": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3218": {
      "op": "frame_dig -4",
      "stack_out": [
        "maybe_value%1#0",
        "disbursement#0 (copy)"
      ]
    },
    "3220": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "3221": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "3223": {
      "op": "swap",
      "stack_out": [
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "3224": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3225": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "3228": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "3230": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "3231": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3232": {
      "retsub": true,
      "op": "retsub"
    },
    "3233": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.depositASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "depositASA",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "3236": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3237": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "3238": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3239": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3240": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3241": {
      "op": "frame_dig -3",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3243": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "3245": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3247": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "3248": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3251": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3253": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "3255": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseToken#0",
        "tmp%3#0",
        "baseToken#0"
      ]
    },
    "3257": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "3258": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3261": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3263": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "3265": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "3267": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "3268": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3271": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "3272": {
      "block": "depositASA_bool_merge@5",
      "stack_in": [
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3273": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3275": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "3277": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0",
        "1000"
      ]
    },
    "3278": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%8#0"
      ]
    },
    "3279": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3280": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "3281": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"contract_state\""
      ]
    },
    "3283": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3284": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%1#0"
      ]
    },
    "3285": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%9#0"
      ]
    },
    "3286": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%9#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%9#0",
        "1"
      ]
    },
    "3287": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%10#0"
      ]
    },
    "3288": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3289": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "amount#0 (copy)"
      ]
    },
    "3291": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3294": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "baseToken#0",
        "_interestSlice#0"
      ]
    },
    "3297": {
      "op": "pop",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3298": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "3299": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3300": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3301": {
      "op": "bury 1",
      "stack_out": [
        "baseToken#0",
        "maybe_exists%2#0"
      ]
    },
    "3303": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3304": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "3305": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3306": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3307": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%3#0"
      ]
    },
    "3308": {
      "op": "bnz depositASA_else_body@7",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3311": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3313": {
      "block": "depositASA_after_if_else@8",
      "stack_in": [
        "baseToken#0",
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "3314": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3316": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3317": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "3319": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3320": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0"
      ]
    },
    "3321": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3322": {
      "op": "dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2",
        "lstDue#2 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2 (copy)"
      ]
    },
    "3324": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3326": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3328": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3330": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "4"
      ]
    },
    "3331": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3333": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "1000"
      ]
    },
    "3334": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3336": {
      "op": "itxn_submit"
    },
    "3337": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "0"
      ]
    },
    "3338": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3340": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstDue#2",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3341": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "maybe_value%5#0"
      ]
    },
    "3342": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%0#0"
      ]
    },
    "3343": {
      "op": "bytec 8 // \"circulating_lst\"",
      "stack_out": [
        "baseToken#0",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "3345": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "3346": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3347": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "3348": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3349": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3350": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%6#0"
      ]
    },
    "3351": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%6#0",
        "amount#0 (copy)"
      ]
    },
    "3353": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%1#0"
      ]
    },
    "3354": {
      "op": "bytec_3 // \"total_deposits\"",
      "stack_out": [
        "baseToken#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "3355": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "3356": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3357": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%2#0"
      ]
    },
    "3360": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "3362": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "3363": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3364": {
      "retsub": true,
      "op": "retsub"
    },
    "3365": {
      "block": "depositASA_else_body@7",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "3366": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3368": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3369": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%0#1"
      ]
    },
    "3370": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%0#1",
        "10000"
      ]
    },
    "3372": {
      "op": "mulw",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0"
      ]
    },
    "3373": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "0"
      ]
    },
    "3374": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3375": {
      "op": "app_global_get_ex",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_exists%1#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "3376": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#1"
      ]
    },
    "3377": {
      "op": "divw",
      "defined_out": [
        "lstRatio#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstRatio#0"
      ]
    },
    "3378": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "lstRatio#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstRatio#0",
        "amount#0 (copy)"
      ]
    },
    "3380": {
      "op": "mulw",
      "defined_out": [
        "highBits2#0",
        "lowBits2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits2#0",
        "lowBits2#0"
      ]
    },
    "3381": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "baseToken#0",
        "highBits2#0",
        "lowBits2#0",
        "10000"
      ]
    },
    "3383": {
      "op": "divw",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3384": {
      "op": "b depositASA_after_if_else@8"
    },
    "3387": {
      "block": "depositASA_bool_false@4",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "3388": {
      "op": "b depositASA_bool_merge@5"
    },
    "3391": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawDeposit",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "lstAppId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "withdrawDeposit",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3394": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3395": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "3397": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3398": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3399": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3400": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "0"
      ]
    },
    "3401": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0",
        "\"contract_state\""
      ]
    },
    "3403": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstAsset#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3404": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "maybe_value%1#0"
      ]
    },
    "3405": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#0"
      ]
    },
    "3406": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "lstAsset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#0",
        "1"
      ]
    },
    "3407": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%1#0"
      ]
    },
    "3408": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3409": {
      "op": "frame_dig -4",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3411": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "lstAsset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%2#0"
      ]
    },
    "3413": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "lstAsset#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3415": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%4#0"
      ]
    },
    "3416": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3419": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3421": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "lstAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%5#0"
      ]
    },
    "3423": {
      "op": "frame_dig 0",
      "stack_out": [
        "lstAsset#0",
        "tmp%5#0",
        "lstAsset#0"
      ]
    },
    "3425": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%6#0"
      ]
    },
    "3426": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3429": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3431": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "lstAsset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%7#0"
      ]
    },
    "3433": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "lstAsset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%7#0",
        "amount#0 (copy)"
      ]
    },
    "3435": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%8#0"
      ]
    },
    "3436": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3439": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "3440": {
      "block": "withdrawDeposit_bool_merge@5",
      "stack_in": [
        "lstAsset#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3441": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3443": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%9#0"
      ]
    },
    "3445": {
      "op": "pushint 3000 // 3000",
      "defined_out": [
        "3000",
        "tmp%9#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%9#0",
        "3000"
      ]
    },
    "3448": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%10#0"
      ]
    },
    "3449": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3450": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "_interestSlice#0"
      ]
    },
    "3453": {
      "op": "pop",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3454": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3456": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "lstAppId#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)",
        "tmp%11#0"
      ]
    },
    "3458": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%12#0"
      ]
    },
    "3459": {
      "op": "bz withdrawDeposit_else_body@7",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3462": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0"
      ]
    },
    "3463": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3465": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ]
    },
    "3466": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3467": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0"
      ]
    },
    "3468": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3469": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%1#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "maybe_exists%1#0"
      ]
    },
    "3470": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3471": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "3473": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3474": {
      "op": "uncover 2",
      "stack_out": [
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "3476": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3477": {
      "block": "withdrawDeposit_after_if_else@8",
      "stack_in": [
        "lstAsset#0",
        "asaDue#1"
      ],
      "op": "dup",
      "defined_out": [
        "asaDue#1",
        "asaDue#1 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "asaDue#1 (copy)"
      ]
    },
    "3478": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3481": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asaDue#1",
        "tmp%13#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0"
      ]
    },
    "3483": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asaDue#1",
        "tmp%13#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "0"
      ]
    },
    "3484": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "asaDue#1",
        "tmp%13#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3485": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3486": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "maybe_value%2#0"
      ]
    },
    "3487": {
      "op": "btoi",
      "defined_out": [
        "asaDue#1",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "3488": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "asaDue#1",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "3490": {
      "op": "pop",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0"
      ]
    },
    "3491": {
      "op": "dig 1",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0",
        "asaDue#1 (copy)"
      ]
    },
    "3493": {
      "op": ">=",
      "defined_out": [
        "asaDue#1",
        "tmp%17#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%17#0"
      ]
    },
    "3494": {
      "op": "assert",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3495": {
      "op": "itxn_begin"
    },
    "3496": {
      "op": "txn Sender",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3498": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3499": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3500": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3501": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "3502": {
      "op": "btoi",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3503": {
      "op": "dig 2",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "asaDue#1 (copy)"
      ]
    },
    "3505": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3507": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3509": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3511": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "4"
      ]
    },
    "3512": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3514": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "1000"
      ]
    },
    "3515": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3517": {
      "op": "itxn_submit"
    },
    "3518": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "3519": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3521": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3522": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0"
      ]
    },
    "3523": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "asaDue#1",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "3525": {
      "op": "-",
      "defined_out": [
        "asaDue#1",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0"
      ]
    },
    "3526": {
      "op": "bytec 8 // \"circulating_lst\"",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "3528": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "3529": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3530": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "3531": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"total_deposits\""
      ]
    },
    "3532": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3533": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%5#0"
      ]
    },
    "3534": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "maybe_value%5#0",
        "asaDue#1"
      ]
    },
    "3535": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%1#0"
      ]
    },
    "3536": {
      "op": "bytec_3 // \"total_deposits\"",
      "stack_out": [
        "lstAsset#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "3537": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "3538": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3539": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%2#0"
      ]
    },
    "3542": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "3544": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "3545": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3546": {
      "retsub": true,
      "op": "retsub"
    },
    "3547": {
      "block": "withdrawDeposit_else_body@7",
      "stack_in": [
        "lstAsset#0"
      ],
      "op": "itxn_begin"
    },
    "3548": {
      "op": "bytec 18 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)"
      ],
      "stack_out": [
        "lstAsset#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "3550": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3552": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3554": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3556": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "lstAsset#0",
        "appl"
      ]
    },
    "3558": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3560": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "lstAsset#0",
        "1000"
      ]
    },
    "3561": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3563": {
      "op": "itxn_submit"
    },
    "3564": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "3566": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3567": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0",
        "tmp%0#1"
      ]
    },
    "3570": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "awst_tmp%0#0"
      ]
    },
    "3571": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "3574": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1",
        "0x151f7c75"
      ]
    },
    "3575": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%2#1"
      ]
    },
    "3576": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1"
      ]
    },
    "3577": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3578": {
      "op": "itxn_begin"
    },
    "3579": {
      "op": "bytec 19 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "3581": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3583": {
      "op": "frame_dig -2",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3585": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3587": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "3589": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3591": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "3592": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3594": {
      "op": "itxn_submit"
    },
    "3595": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "3597": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3598": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%4#1"
      ]
    },
    "3601": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "awst_tmp%1#0"
      ]
    },
    "3602": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ]
    },
    "3605": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1",
        "0x151f7c75"
      ]
    },
    "3606": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ]
    },
    "3607": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ]
    },
    "3608": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3609": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "3611": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3612": {
      "op": "uncover 2",
      "stack_out": [
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "3614": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3615": {
      "op": "b withdrawDeposit_after_if_else@8"
    },
    "3618": {
      "block": "withdrawDeposit_bool_false@4",
      "stack_in": [
        "lstAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "3619": {
      "op": "b withdrawDeposit_bool_merge@5"
    },
    "3622": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.borrow",
      "params": {
        "assetTransferTxn#0": "uint64",
        "requestedLoanAmount#0": "uint64",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64",
        "collateralTokenId#0": "bytes",
        "mbrTxn#0": "uint64"
      },
      "block": "borrow",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "3625": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralToUse#1"
      ]
    },
    "3627": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2"
      ]
    },
    "3628": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "0"
      ]
    },
    "3629": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "0",
        "\"contract_state\""
      ]
    },
    "3631": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3632": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "maybe_value%0#0"
      ]
    },
    "3633": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "tmp%0#0"
      ]
    },
    "3634": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "tmp%0#0",
        "1"
      ]
    },
    "3635": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "tmp%1#0"
      ]
    },
    "3636": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2"
      ]
    },
    "3637": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "\"loan_record\""
      ]
    },
    "3639": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "\"loan_record\"",
        "tmp%2#0"
      ]
    },
    "3641": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "tmp%3#0"
      ]
    },
    "3642": {
      "op": "box_len",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "maybe_value%1#0",
        "hasLoan#0"
      ]
    },
    "3643": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "maybe_value%1#0",
        "hasLoan#0",
        "hasLoan#0 (copy)"
      ]
    },
    "3644": {
      "op": "uncover 2",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "hasLoan#0",
        "maybe_value%1#0"
      ]
    },
    "3646": {
      "op": "pop",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3647": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "hasLoan#0",
        "_interestSlice#0"
      ]
    },
    "3650": {
      "op": "pop",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3651": {
      "op": "bz borrow_else_body@2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3654": {
      "op": "txn Sender",
      "defined_out": [
        "hasLoan#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%4#0"
      ]
    },
    "3656": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "hasLoan#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%5#0"
      ]
    },
    "3659": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "hasLoan#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%5#0",
        "40"
      ]
    },
    "3661": {
      "op": "extract_uint64",
      "defined_out": [
        "hasLoan#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%6#0"
      ]
    },
    "3662": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "hasLoan#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%6#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3664": {
      "op": "+",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "3665": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3667": {
      "block": "borrow_after_if_else@3",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3669": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%0#0"
      ]
    },
    "3671": {
      "op": "pushint 4000 // 4000",
      "defined_out": [
        "4000",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%0#0",
        "4000"
      ]
    },
    "3674": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%1#0"
      ]
    },
    "3675": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3676": {
      "op": "frame_dig -6",
      "defined_out": [
        "assetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3678": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%2#0"
      ]
    },
    "3680": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%2#0",
        "tmp%3#2"
      ]
    },
    "3682": {
      "op": "==",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%4#1"
      ]
    },
    "3683": {
      "op": "bz borrow_bool_false@16",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3686": {
      "op": "frame_dig -6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3688": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%5#1"
      ]
    },
    "3690": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "tmp%5#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%5#1",
        "collateralAmount#0 (copy)"
      ]
    },
    "3692": {
      "op": "==",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%6#1"
      ]
    },
    "3693": {
      "op": "bz borrow_bool_false@16",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3696": {
      "op": "frame_dig -6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3698": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%7#0"
      ]
    },
    "3700": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%7#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3702": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%7#0",
        "tmp%8#1"
      ]
    },
    "3703": {
      "op": "==",
      "defined_out": [
        "tmp%9#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%9#1"
      ]
    },
    "3704": {
      "op": "bz borrow_bool_false@16",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3707": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "3708": {
      "block": "borrow_bool_merge@17",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3709": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "\"accepted_collaterals\""
      ]
    },
    "3711": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3713": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%0#1"
      ]
    },
    "3714": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#3",
        "maybe_exists%0#0"
      ]
    },
    "3715": {
      "op": "bury 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_exists%0#0"
      ]
    },
    "3717": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3718": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3720": {
      "op": "frame_dig 0",
      "defined_out": [
        "collateralToUse#1",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralToUse#1"
      ]
    },
    "3722": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralToUse#1",
        "collateralTokenId#0 (copy)",
        "lstApp#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralToUse#1",
        "lstApp#0 (copy)"
      ]
    },
    "3724": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralUSD#0"
      ]
    },
    "3727": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralUSD#0",
        "0"
      ]
    },
    "3728": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralUSD#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "3730": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralUSD#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3731": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralUSD#0",
        "maybe_value%2#0"
      ]
    },
    "3732": {
      "op": "*",
      "defined_out": [
        "collateralToUse#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%7#0"
      ]
    },
    "3733": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralToUse#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%7#0",
        "10000"
      ]
    },
    "3735": {
      "op": "/",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3736": {
      "op": "bytec 46 // \"last_max_borrow\"",
      "defined_out": [
        "\"last_max_borrow\"",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "\"last_max_borrow\""
      ]
    },
    "3738": {
      "op": "dig 1",
      "defined_out": [
        "\"last_max_borrow\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maxBorrowUSD#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "\"last_max_borrow\"",
        "maxBorrowUSD#0 (copy)"
      ]
    },
    "3740": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3741": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0"
      ]
    },
    "3742": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3743": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3744": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%3#0"
      ]
    },
    "3745": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0"
      ]
    },
    "3748": {
      "op": "frame_dig -5",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3750": {
      "op": "mulw",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ]
    },
    "3751": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0",
        "1000000"
      ]
    },
    "3753": {
      "op": "divw",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3754": {
      "op": "bytec 47 // \"last_requested_loan\"",
      "defined_out": [
        "\"last_requested_loan\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"last_requested_loan\""
      ]
    },
    "3756": {
      "op": "dig 1",
      "defined_out": [
        "\"last_requested_loan\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "requestedLoanUSD#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"last_requested_loan\"",
        "requestedLoanUSD#0 (copy)"
      ]
    },
    "3758": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3759": {
      "op": ">=",
      "defined_out": [
        "collateralToUse#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%0#3"
      ]
    },
    "3760": {
      "error": "exceeds LTV limit",
      "op": "assert // exceeds LTV limit",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3761": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "0"
      ]
    },
    "3762": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3763": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#3",
        "maybe_exists%0#0"
      ]
    },
    "3764": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#3"
      ]
    },
    "3765": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#3",
        "0"
      ]
    },
    "3766": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\"",
        "0",
        "collateralToUse#1",
        "maybe_value%0#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#3",
        "0",
        "\"util_cap_bps\""
      ]
    },
    "3768": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maybe_exists%1#1",
        "maybe_value%0#3",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#3",
        "maybe_value%1#0",
        "maybe_exists%1#1"
      ]
    },
    "3769": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#3",
        "maybe_value%1#0"
      ]
    },
    "3770": {
      "op": "mulw",
      "defined_out": [
        "collateralToUse#1",
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "h#0",
        "l#0"
      ]
    },
    "3771": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "h#0",
        "l#0",
        "10000"
      ]
    },
    "3773": {
      "op": "divw",
      "defined_out": [
        "capBorrow#0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "capBorrow#0"
      ]
    },
    "3774": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "capBorrow#0",
        "0"
      ]
    },
    "3775": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "capBorrow#0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "capBorrow#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "3777": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#3",
        "maybe_exists%0#0"
      ]
    },
    "3778": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#3"
      ]
    },
    "3779": {
      "op": "frame_dig -5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#3",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3781": {
      "op": "+",
      "defined_out": [
        "capBorrow#0",
        "collateralToUse#1",
        "tmp%1#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "capBorrow#0",
        "tmp%1#3"
      ]
    },
    "3782": {
      "op": ">=",
      "defined_out": [
        "collateralToUse#1",
        "tmp%2#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%2#3"
      ]
    },
    "3783": {
      "error": "UTIL_CAP_EXCEEDED",
      "op": "assert // UTIL_CAP_EXCEEDED",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3784": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "0"
      ]
    },
    "3785": {
      "op": "bytec 39 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\"",
        "0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "0",
        "\"origination_fee_bps\""
      ]
    },
    "3787": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#3",
        "maybe_exists%0#0"
      ]
    },
    "3788": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#3"
      ]
    },
    "3789": {
      "op": "frame_dig -5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#3",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3791": {
      "op": "*",
      "defined_out": [
        "collateralToUse#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%0#0"
      ]
    },
    "3792": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%0#0",
        "10000"
      ]
    },
    "3794": {
      "op": "/",
      "defined_out": [
        "collateralToUse#1",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "fee#1"
      ]
    },
    "3795": {
      "op": "frame_dig -5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3797": {
      "op": "dig 1",
      "defined_out": [
        "collateralToUse#1",
        "fee#1",
        "fee#1 (copy)",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)",
        "fee#1 (copy)"
      ]
    },
    "3799": {
      "op": "-",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#2",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "fee#1",
        "disbursement#2"
      ]
    },
    "3800": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "fee#1",
        "disbursement#2",
        "disbursement#2 (copy)"
      ]
    },
    "3801": {
      "op": "cover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "fee#1",
        "disbursement#2"
      ]
    },
    "3803": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#2",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "fee#1"
      ]
    },
    "3805": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "fee#1",
        "0"
      ]
    },
    "3806": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "collateralToUse#1",
        "disbursement#2",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "fee#1",
        "0",
        "\"fee_pool\""
      ]
    },
    "3808": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "fee#1",
        "maybe_value%1#0",
        "maybe_exists%1#1"
      ]
    },
    "3809": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "fee#1",
        "maybe_value%1#0"
      ]
    },
    "3810": {
      "op": "+",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#2",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "new_state_value%0#0"
      ]
    },
    "3811": {
      "op": "bytec 15 // \"fee_pool\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "new_state_value%0#0",
        "\"fee_pool\""
      ]
    },
    "3813": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "\"fee_pool\"",
        "new_state_value%0#0"
      ]
    },
    "3814": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "3815": {
      "op": "bytec 42 // \"last_scaled_down_disbursement\"",
      "defined_out": [
        "\"last_scaled_down_disbursement\"",
        "collateralToUse#1",
        "disbursement#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "\"last_scaled_down_disbursement\""
      ]
    },
    "3817": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "\"last_scaled_down_disbursement\"",
        "disbursement#2"
      ]
    },
    "3818": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3819": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3821": {
      "op": "bz borrow_else_body@5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3824": {
      "op": "txn Sender",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3826": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "borrower#0 (copy)",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "borrower#0 (copy)"
      ]
    },
    "3827": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "existingLoan#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0"
      ]
    },
    "3830": {
      "op": "dig 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "borrower#0 (copy)"
      ]
    },
    "3832": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "op": "callsub syncBorrowerSnapshot",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "existingLoan#0",
        "hasLoan#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0"
      ]
    },
    "3835": {
      "op": "frame_dig 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#2"
      ]
    },
    "3837": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "disbursement#2 (copy)",
        "existingLoan#0",
        "hasLoan#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#2 (copy)",
        "disbursement#2 (copy)"
      ]
    },
    "3838": {
      "op": "cover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#2 (copy)"
      ]
    },
    "3840": {
      "op": "+",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "existingLoan#0",
        "hasLoan#0",
        "newDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "newDebt#0"
      ]
    },
    "3841": {
      "op": "dig 1",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "hasLoan#0",
        "newDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "newDebt#0",
        "existingLoan#0 (copy)"
      ]
    },
    "3843": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "newDebt#0",
        "tmp%0#1"
      ]
    },
    "3846": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "existingLoan#0"
      ]
    },
    "3848": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "existingLoan#0",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "existingLoan#0",
        "40"
      ]
    },
    "3850": {
      "op": "extract_uint64",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1"
      ]
    },
    "3851": {
      "op": "frame_dig -4",
      "defined_out": [
        "borrower#0",
        "collateralAmount#0 (copy)",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1",
        "collateralAmount#0 (copy)"
      ]
    },
    "3853": {
      "op": "+",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "to_encode%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "to_encode%0#0"
      ]
    },
    "3854": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ]
    },
    "3855": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3856": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3857": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3858": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0"
      ]
    },
    "3859": {
      "op": "uncover 4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "disbursement#2"
      ]
    },
    "3861": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3862": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "to_encode%1#0"
      ]
    },
    "3864": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3865": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "3866": {
      "op": "bytec 27 // 0x00",
      "defined_out": [
        "0x00",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0",
        "0x00"
      ]
    },
    "3868": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%2#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3869": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "3870": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3871": {
      "op": "uncover 4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "newDebt#0"
      ]
    },
    "3873": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ]
    },
    "3874": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "3875": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "3877": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#1"
      ]
    },
    "3878": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "maybe_value%1#0"
      ]
    },
    "3879": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "3880": {
      "op": "dig 6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "borrower#0 (copy)"
      ]
    },
    "3882": {
      "op": "uncover 6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "borrower#0 (copy)",
        "tmp%0#1"
      ]
    },
    "3884": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3885": {
      "op": "uncover 5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "3887": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3888": {
      "op": "uncover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3890": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%8#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3891": {
      "op": "uncover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0"
      ]
    },
    "3893": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%9#0",
        "hasLoan#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3894": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%3#0"
      ]
    },
    "3896": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%10#0",
        "hasLoan#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3897": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "3898": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3899": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "3901": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "borrower#0"
      ]
    },
    "3903": {
      "op": "concat",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "tmp%3#0"
      ]
    },
    "3904": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%3#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3905": {
      "op": "box_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3906": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3908": {
      "op": "frame_dig -4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3910": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3913": {
      "block": "borrow_after_if_else@6",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "borrower#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3915": {
      "op": "itxn_begin"
    },
    "3916": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "borrower#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "0"
      ]
    },
    "3917": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3918": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3919": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0"
      ]
    },
    "3920": {
      "op": "btoi",
      "defined_out": [
        "borrower#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3921": {
      "op": "frame_dig 1",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "disbursement#2"
      ]
    },
    "3923": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "disbursement#2 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "disbursement#2 (copy)",
        "disbursement#2 (copy)"
      ]
    },
    "3924": {
      "op": "cover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "disbursement#2 (copy)"
      ]
    },
    "3926": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3928": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2"
      ]
    },
    "3930": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "borrower#0"
      ]
    },
    "3931": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "3933": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "disbursement#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "4"
      ]
    },
    "3934": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "3936": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "disbursement#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "1000"
      ]
    },
    "3937": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "3939": {
      "op": "itxn_submit"
    },
    "3940": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "disbursement#2 (copy)"
      ]
    },
    "3941": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "3944": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "0"
      ]
    },
    "3945": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "disbursement#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "0",
        "\"total_borrows\""
      ]
    },
    "3947": {
      "op": "app_global_get_ex",
      "defined_out": [
        "disbursement#2",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3948": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "maybe_value%4#0"
      ]
    },
    "3949": {
      "op": "+",
      "defined_out": [
        "disbursement#2",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "3950": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "3952": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "3953": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3954": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "disbursement#2",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "new_state_value%1#0"
      ]
    },
    "3957": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "disbursement#2",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "3959": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "3960": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3961": {
      "retsub": true,
      "op": "retsub"
    },
    "3962": {
      "block": "borrow_else_body@5",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%9#0"
      ]
    },
    "3964": {
      "op": "frame_dig 1",
      "defined_out": [
        "disbursement#2",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%9#0",
        "disbursement#2"
      ]
    },
    "3966": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "disbursement#2",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%9#0",
        "disbursement#2",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3968": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "collateralTokenId#0 (copy)",
        "tmp%9#0"
      ]
    },
    "3970": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#2",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "collateralTokenId#0 (copy)",
        "tmp%9#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3972": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.mintLoanRecord",
      "op": "callsub mintLoanRecord",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3975": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3977": {
      "op": "frame_dig -4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3979": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3982": {
      "op": "b borrow_after_if_else@6"
    },
    "3985": {
      "block": "borrow_bool_false@16",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "3986": {
      "op": "b borrow_bool_merge@17"
    },
    "3989": {
      "block": "borrow_else_body@2",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "3991": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3993": {
      "op": "b borrow_after_if_else@3"
    },
    "3996": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.mintLoanRecord",
      "params": {
        "disbursement#0": "uint64",
        "collateralTokenId#0": "bytes",
        "borrowerAddress#0": "bytes",
        "collateralAmount#0": "uint64"
      },
      "block": "mintLoanRecord",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3999": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralAmount#0 (copy)"
      ]
    },
    "4001": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "4002": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "4003": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4004": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4005": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0"
      ]
    },
    "4006": {
      "op": "frame_dig -4",
      "defined_out": [
        "disbursement#0 (copy)",
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "disbursement#0 (copy)"
      ]
    },
    "4008": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4009": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%0#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "to_encode%0#0"
      ]
    },
    "4011": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "4012": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "4014": {
      "op": "bytec 27 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)",
        "0x00"
      ]
    },
    "4016": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4017": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "4018": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4019": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0"
      ]
    },
    "4020": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4022": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4023": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%1#0"
      ]
    },
    "4024": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "4025": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4027": {
      "op": "frame_dig -3",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4029": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4030": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "4032": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4033": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4035": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4036": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0"
      ]
    },
    "4038": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4039": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "4041": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4042": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "4043": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4044": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "4046": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4048": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%0#0"
      ]
    },
    "4049": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4050": {
      "op": "box_put",
      "stack_out": []
    },
    "4051": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4052": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"active_loan_records\""
      ]
    },
    "4054": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4055": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "4056": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "4057": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "4058": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "4060": {
      "op": "swap",
      "stack_out": [
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "4061": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4062": {
      "retsub": true,
      "op": "retsub"
    },
    "4063": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueLoanInterest",
      "params": {
        "debtor#0": "bytes",
        "templateReserveAddress#0": "bytes"
      },
      "block": "accrueLoanInterest",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4066": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4068": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "4070": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4071": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4072": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "4074": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": []
    },
    "4075": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4076": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contract_state\""
      ]
    },
    "4078": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4079": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4080": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4081": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "4082": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "4083": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": []
    },
    "4084": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "{accrueMarket}"
      ],
      "stack_out": [
        "{accrueMarket}"
      ]
    },
    "4087": {
      "op": "pop",
      "stack_out": []
    },
    "4088": {
      "op": "frame_dig -2",
      "stack_out": [
        "debtor#0 (copy)"
      ]
    },
    "4090": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "op": "callsub syncBorrowerSnapshot",
      "defined_out": [
        "{syncBorrowerSnapshot}"
      ],
      "stack_out": [
        "{syncBorrowerSnapshot}"
      ]
    },
    "4093": {
      "op": "pop",
      "stack_out": []
    },
    "4094": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "4097": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"last_apr_bps\""
      ]
    },
    "4099": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ]
    },
    "4100": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4101": {
      "retsub": true,
      "op": "retsub"
    },
    "4102": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "params": {},
      "block": "current_apr_bps",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4105": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "U_raw#0"
      ]
    },
    "4107": {
      "op": "dupn 6",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ]
    },
    "4109": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "0"
      ]
    },
    "4110": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "4111": {
      "op": "app_global_get_ex",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "4112": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "maybe_exists%0#0",
        "D#0"
      ]
    },
    "4113": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "maybe_exists%0#0",
        "D#0",
        "D#0 (copy)"
      ]
    },
    "4114": {
      "op": "uncover 2",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "4116": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0"
      ]
    },
    "4117": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "0"
      ]
    },
    "4118": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4120": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "B#0",
        "maybe_exists%1#0"
      ]
    },
    "4121": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "maybe_exists%1#0",
        "B#0"
      ]
    },
    "4122": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ]
    },
    "4124": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0"
      ]
    },
    "4125": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "0"
      ]
    },
    "4126": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\"",
        "0",
        "B#0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "0",
        "\"util_cap_bps\""
      ]
    },
    "4128": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "4129": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%2#0",
        "cap_bps#0"
      ]
    },
    "4130": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "maybe_exists%2#0"
      ]
    },
    "4132": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "4133": {
      "op": "bnz current_apr_bps_after_if_else@14",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4136": {
      "op": "intc_0 // 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4137": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4139": {
      "block": "current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.util_norm_bps@17",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4140": {
      "op": "bytec 33 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"rate_model_type\""
      ]
    },
    "4142": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4143": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%0#0"
      ]
    },
    "4144": {
      "op": "bnz current_apr_bps_ternary_false@2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4147": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4148": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "4150": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%0#0"
      ]
    },
    "4151": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0"
      ]
    },
    "4152": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0"
      ]
    },
    "4153": {
      "op": "bytec 34 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\"",
        "0",
        "base_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0",
        "\"kink_norm_bps\""
      ]
    },
    "4155": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "4156": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "4157": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4158": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "4160": {
      "op": "cover 3",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "4162": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "4163": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "4164": {
      "op": "bytec 35 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope1_bps\""
      ]
    },
    "4166": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "4167": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ]
    },
    "4168": {
      "op": "frame_bury 5",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "4170": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "4171": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "4172": {
      "op": "bytec 36 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope2_bps\""
      ]
    },
    "4174": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope2_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "4175": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope2_bps#0"
      ]
    },
    "4176": {
      "op": "frame_bury 6",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "4178": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "4179": {
      "op": "frame_dig 0",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_raw#0"
      ]
    },
    "4181": {
      "op": ">=",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "tmp%0#1"
      ]
    },
    "4182": {
      "op": "bz current_apr_bps_else_body@6",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ]
    },
    "4185": {
      "op": "frame_dig 5",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "4187": {
      "op": "frame_dig 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0",
        "U_raw#0"
      ]
    },
    "4189": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "hi1#0",
        "kink_norm_bps#0",
        "lo1#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0"
      ]
    },
    "4190": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0",
        "kink_norm_bps#0"
      ]
    },
    "4192": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "tmp%1#0"
      ]
    },
    "4193": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4194": {
      "op": "frame_bury 1",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4196": {
      "block": "current_apr_bps_after_if_else@7",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4197": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "4199": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "4200": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "4201": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0",
        "maxCap#0 (copy)"
      ]
    },
    "4202": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "4204": {
      "op": "frame_bury 4",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "4206": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "4207": {
      "op": "frame_dig 1",
      "defined_out": [
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "apr#11"
      ]
    },
    "4209": {
      "op": "frame_bury 2",
      "defined_out": [
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "4211": {
      "op": "bz current_apr_bps_after_if_else@10",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4214": {
      "op": "frame_dig 1",
      "defined_out": [
        "apr#0",
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4216": {
      "op": "dup",
      "defined_out": [
        "apr#0",
        "apr#0 (copy)",
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)"
      ]
    },
    "4217": {
      "op": "frame_dig 4",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)",
        "maxCap#0"
      ]
    },
    "4219": {
      "op": ">",
      "defined_out": [
        "apr#0",
        "apr#11",
        "maxCap#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "tmp%5#0"
      ]
    },
    "4220": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#0",
        "apr#11"
      ]
    },
    "4221": {
      "op": "frame_bury 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#0"
      ]
    },
    "4223": {
      "op": "bz current_apr_bps_after_if_else@10",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4226": {
      "op": "frame_dig 4",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#11"
      ]
    },
    "4228": {
      "op": "frame_bury 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4230": {
      "block": "current_apr_bps_after_if_else@10",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4232": {
      "op": "frame_bury 1",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4234": {
      "block": "current_apr_bps_ternary_merge@3",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "bytec 30 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\""
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"prev_apr_bps\""
      ]
    },
    "4236": {
      "op": "frame_dig 1",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"prev_apr_bps\"",
        "apr#0"
      ]
    },
    "4238": {
      "op": "dup",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0",
        "apr#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"prev_apr_bps\"",
        "apr#0 (copy)",
        "apr#0 (copy)"
      ]
    },
    "4239": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "\"prev_apr_bps\"",
        "apr#0 (copy)"
      ]
    },
    "4241": {
      "op": "app_global_put",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4242": {
      "op": "frame_bury 0"
    },
    "4244": {
      "retsub": true,
      "op": "retsub"
    },
    "4245": {
      "block": "current_apr_bps_else_body@6",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "U_raw#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "U_raw#0"
      ]
    },
    "4247": {
      "op": "uncover 2",
      "defined_out": [
        "U_raw#0",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_raw#0",
        "kink_norm_bps#0"
      ]
    },
    "4249": {
      "op": "dup",
      "defined_out": [
        "U_raw#0",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_raw#0",
        "kink_norm_bps#0 (copy)",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4250": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_raw#0",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4252": {
      "op": "-",
      "defined_out": [
        "U_raw#0",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0"
      ]
    },
    "4253": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "U_raw#0",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0",
        "10000"
      ]
    },
    "4255": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "10000",
        "kink_norm_bps#0"
      ]
    },
    "4257": {
      "op": "-",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0"
      ]
    },
    "4258": {
      "op": "frame_dig 6",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "over#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0",
        "slope2_bps#0"
      ]
    },
    "4260": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "slope2_bps#0",
        "over#0"
      ]
    },
    "4262": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "4263": {
      "op": "uncover 3",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0"
      ]
    },
    "4265": {
      "op": "frame_dig 5",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "4267": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "tmp%2#0"
      ]
    },
    "4268": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "4270": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0",
        "denom#0"
      ]
    },
    "4272": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "4273": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4274": {
      "op": "frame_bury 1",
      "defined_out": [
        "U_raw#0",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4276": {
      "op": "b current_apr_bps_after_if_else@7"
    },
    "4279": {
      "block": "current_apr_bps_ternary_false@2",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4280": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "4282": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4283": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4284": {
      "op": "frame_bury 1",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4286": {
      "op": "b current_apr_bps_ternary_merge@3"
    },
    "4289": {
      "block": "current_apr_bps_after_if_else@14",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "4291": {
      "op": "frame_dig 9",
      "defined_out": [
        "D#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "cap_bps#0"
      ]
    },
    "4293": {
      "op": "mulw",
      "defined_out": [
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ]
    },
    "4294": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0",
        "10000"
      ]
    },
    "4296": {
      "op": "divw",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "4297": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0"
      ]
    },
    "4298": {
      "op": "frame_bury 3",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "4300": {
      "op": "bnz current_apr_bps_after_if_else@16",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4303": {
      "op": "intc_0 // 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4304": {
      "op": "frame_bury 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4306": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.util_norm_bps@17"
    },
    "4309": {
      "block": "current_apr_bps_after_if_else@16",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "B#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0"
      ]
    },
    "4311": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)"
      ]
    },
    "4312": {
      "op": "frame_dig 3",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ]
    },
    "4314": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0",
        "capBorrow#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "4315": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "4317": {
      "op": "<=",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#1"
      ]
    },
    "4318": {
      "op": "dig 1",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#1",
        "capBorrow#0 (copy)"
      ]
    },
    "4320": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "tmp%2#1",
        "capBorrow#0 (copy)",
        "B#0"
      ]
    },
    "4322": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0 (copy)",
        "B#0",
        "tmp%2#1"
      ]
    },
    "4324": {
      "op": "select",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0"
      ]
    },
    "4325": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0",
        "10000"
      ]
    },
    "4327": {
      "op": "mulw",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ]
    },
    "4328": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiN#0",
        "loN#0",
        "capBorrow#0"
      ]
    },
    "4330": {
      "op": "divw",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4331": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4333": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.util_norm_bps@17"
    },
    "4336": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "params": {
        "rec#0": "bytes"
      },
      "block": "currentDebtFromSnapshot",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "4339": {
      "op": "frame_dig -1",
      "defined_out": [
        "rec#0 (copy)"
      ],
      "stack_out": [
        "rec#0 (copy)"
      ]
    },
    "4341": {
      "op": "pushint 73 // 73",
      "defined_out": [
        "73",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "rec#0 (copy)",
        "73"
      ]
    },
    "4343": {
      "op": "extract_uint64",
      "defined_out": [
        "p#0"
      ],
      "stack_out": [
        "p#0"
      ]
    },
    "4344": {
      "op": "dup",
      "defined_out": [
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "p#0"
      ]
    },
    "4345": {
      "op": "bnz currentDebtFromSnapshot_after_if_else@2",
      "stack_out": [
        "p#0"
      ]
    },
    "4348": {
      "op": "intc_0 // 0",
      "stack_out": [
        "p#0",
        "0"
      ]
    },
    "4349": {
      "op": "frame_dig -1",
      "stack_out": [
        "p#0",
        "0",
        "rec#0 (copy)"
      ]
    },
    "4351": {
      "op": "uncover 2"
    },
    "4353": {
      "retsub": true,
      "op": "retsub"
    },
    "4354": {
      "block": "currentDebtFromSnapshot_after_if_else@2",
      "stack_in": [
        "p#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "p#0",
        "0"
      ]
    },
    "4355": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0"
      ],
      "stack_out": [
        "p#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4357": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "p#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4358": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "p#0",
        "maybe_value%0#0"
      ]
    },
    "4359": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "maybe_value%0#0",
        "p#0"
      ]
    },
    "4361": {
      "op": "mulw",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0"
      ]
    },
    "4362": {
      "op": "frame_dig -1",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "rec#0 (copy)"
      ]
    },
    "4364": {
      "op": "pushint 81 // 81",
      "defined_out": [
        "81",
        "hi#0",
        "lo#0",
        "p#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "rec#0 (copy)",
        "81"
      ]
    },
    "4366": {
      "op": "extract_uint64",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "tmp%3#0"
      ]
    },
    "4367": {
      "op": "divw",
      "defined_out": [
        "p#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "p#0",
        "tmp%4#0"
      ]
    },
    "4368": {
      "op": "frame_dig -1",
      "stack_out": [
        "p#0",
        "tmp%4#0",
        "rec#0 (copy)"
      ]
    },
    "4370": {
      "op": "uncover 2"
    },
    "4372": {
      "retsub": true,
      "op": "retsub"
    },
    "4373": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "syncBorrowerSnapshot",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4376": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4378": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "4380": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4381": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4382": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "maybe_exists%0#0"
      ]
    },
    "4383": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "rec#0"
      ]
    },
    "4384": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4387": {
      "op": "dup",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4388": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0"
      ]
    },
    "4391": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "rec#0 (copy)"
      ]
    },
    "4393": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "4396": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "0"
      ]
    },
    "4397": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4398": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liveDebt#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4399": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "4400": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "rec#0"
      ]
    },
    "4402": {
      "error": "Index access is out of bounds",
      "op": "extract 48 17 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ]
    },
    "4405": {
      "op": "dig 4",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "liveDebt#0 (copy)"
      ]
    },
    "4407": {
      "op": "itob",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "4408": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "4409": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4411": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liveDebt#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4412": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0"
      ]
    },
    "4413": {
      "op": "itob",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4414": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "borrower#0 (copy)"
      ]
    },
    "4416": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "borrower#0 (copy)",
        "tmp%1#0"
      ]
    },
    "4418": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4419": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ]
    },
    "4421": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4422": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "tmp%3#0"
      ]
    },
    "4424": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "4425": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0",
        "maybe_value%1#0"
      ]
    },
    "4427": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "liveDebt#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "4428": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "4430": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "liveDebt#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4431": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%1#0"
      ]
    },
    "4432": {
      "op": "concat",
      "defined_out": [
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "newRec#0"
      ]
    },
    "4433": {
      "op": "uncover 2",
      "stack_out": [
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ]
    },
    "4435": {
      "op": "swap",
      "stack_out": [
        "liveDebt#0",
        "tmp%0#0",
        "newRec#0"
      ]
    },
    "4436": {
      "op": "box_put",
      "stack_out": [
        "liveDebt#0"
      ]
    },
    "4437": {
      "retsub": true,
      "op": "retsub"
    },
    "4438": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "params": {},
      "block": "accrueMarket",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4441": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "deltaT#0"
      ]
    },
    "4443": {
      "op": "dupn 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ]
    },
    "4445": {
      "op": "global LatestTimestamp"
    },
    "4447": {
      "op": "dup"
    },
    "4448": {
      "op": "intc_0 // 0"
    },
    "4449": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "0",
        "\"last_accrual_ts\""
      ]
    },
    "4451": {
      "op": "app_global_get_ex",
      "defined_out": [
        "last#0",
        "maybe_exists%0#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0"
      ]
    },
    "4452": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "maybe_exists%0#0",
        "last#0"
      ]
    },
    "4453": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "maybe_exists%0#0",
        "last#0",
        "last#0 (copy)"
      ]
    },
    "4454": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0",
        "last#0"
      ]
    },
    "4456": {
      "op": "cover 3",
      "defined_out": [
        "last#0",
        "maybe_exists%0#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0"
      ]
    },
    "4458": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4459": {
      "op": "<=",
      "defined_out": [
        "last#0",
        "now#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp%0#0"
      ]
    },
    "4460": {
      "op": "bz accrueMarket_after_if_else@2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4463": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4464": {
      "op": "frame_bury 0"
    },
    "4466": {
      "retsub": true,
      "op": "retsub"
    },
    "4467": {
      "block": "accrueMarket_after_if_else@2",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0"
      ]
    },
    "4469": {
      "op": "frame_dig 5",
      "defined_out": [
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4471": {
      "op": "-",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4472": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0",
        "deltaT#0"
      ]
    },
    "4473": {
      "op": "frame_bury 0",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4475": {
      "op": "bnz accrueMarket_after_if_else@9",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4478": {
      "op": "intc_0 // 0",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4479": {
      "op": "frame_bury 2",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4481": {
      "block": "accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.sliceFactorWad@10",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "pushbytes \"calculateledSimpleWad\"",
      "defined_out": [
        "\"calculateledSimpleWad\""
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"calculateledSimpleWad\""
      ]
    },
    "4504": {
      "op": "frame_dig 2",
      "defined_out": [
        "\"calculateledSimpleWad\"",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"calculateledSimpleWad\"",
        "simpleWad#0"
      ]
    },
    "4506": {
      "op": "dup",
      "defined_out": [
        "\"calculateledSimpleWad\"",
        "simpleWad#0",
        "simpleWad#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"calculateledSimpleWad\"",
        "simpleWad#0 (copy)",
        "simpleWad#0 (copy)"
      ]
    },
    "4507": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0",
        "\"calculateledSimpleWad\"",
        "simpleWad#0 (copy)"
      ]
    },
    "4509": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4510": {
      "op": "bnz accrueMarket_after_if_else@4",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4513": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"last_accrual_ts\""
      ]
    },
    "4515": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"last_accrual_ts\"",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"last_accrual_ts\"",
        "now#0"
      ]
    },
    "4517": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4518": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4519": {
      "op": "frame_bury 0"
    },
    "4521": {
      "retsub": true,
      "op": "retsub"
    },
    "4522": {
      "block": "accrueMarket_after_if_else@4",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4523": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4525": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "oldIndex#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "maybe_exists%1#0"
      ]
    },
    "4526": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0"
      ]
    },
    "4527": {
      "op": "dup",
      "defined_out": [
        "oldIndex#0",
        "oldIndex#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "oldIndex#0 (copy)"
      ]
    },
    "4528": {
      "op": "frame_dig 2",
      "defined_out": [
        "oldIndex#0",
        "oldIndex#0 (copy)",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "oldIndex#0 (copy)",
        "simpleWad#0"
      ]
    },
    "4530": {
      "op": "mulw",
      "defined_out": [
        "hiI#0",
        "loI#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "hiI#0",
        "loI#0"
      ]
    },
    "4531": {
      "op": "intc 6 // 1000000000000",
      "defined_out": [
        "1000000000000",
        "hiI#0",
        "loI#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "hiI#0",
        "loI#0",
        "1000000000000"
      ]
    },
    "4533": {
      "op": "divw",
      "defined_out": [
        "incrIndex#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "incrIndex#0"
      ]
    },
    "4534": {
      "op": "+",
      "defined_out": [
        "newIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "newIndex#0"
      ]
    },
    "4535": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "newIndex#0",
        "\"borrow_index_wad\""
      ]
    },
    "4537": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"borrow_index_wad\"",
        "newIndex#0"
      ]
    },
    "4538": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4539": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4540": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4542": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0"
      ]
    },
    "4543": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_exists%2#0",
        "totalBefore#0"
      ]
    },
    "4544": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_exists%2#0",
        "totalBefore#0",
        "totalBefore#0 (copy)"
      ]
    },
    "4545": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0",
        "totalBefore#0"
      ]
    },
    "4547": {
      "op": "frame_bury 3",
      "defined_out": [
        "maybe_exists%2#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0"
      ]
    },
    "4549": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4550": {
      "op": "intc_0 // 0",
      "defined_out": [
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "interest#0"
      ]
    },
    "4551": {
      "op": "frame_bury 1",
      "defined_out": [
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4553": {
      "op": "bz accrueMarket_after_if_else@6",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4556": {
      "op": "frame_dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4558": {
      "op": "frame_dig 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "simpleWad#0"
      ]
    },
    "4560": {
      "op": "mulw",
      "defined_out": [
        "hiB#0",
        "interest#0",
        "loB#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "4561": {
      "op": "intc 6 // 1000000000000",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "hiB#0",
        "loB#0",
        "1000000000000"
      ]
    },
    "4563": {
      "op": "divw",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4564": {
      "op": "frame_bury 1",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4566": {
      "block": "accrueMarket_after_if_else@6",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4567": {
      "op": "bytec 40 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"protocol_share_bps\""
      ]
    },
    "4569": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "protoBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0",
        "maybe_exists%3#0"
      ]
    },
    "4570": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0"
      ]
    },
    "4571": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "protoBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0",
        "10000"
      ]
    },
    "4573": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "10000",
        "protoBps#0"
      ]
    },
    "4574": {
      "op": "-",
      "defined_out": [
        "deposBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deposBps#0"
      ]
    },
    "4575": {
      "op": "frame_dig 1",
      "defined_out": [
        "deposBps#0",
        "interest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deposBps#0",
        "interest#0"
      ]
    },
    "4577": {
      "op": "dup"
    },
    "4578": {
      "op": "uncover 2",
      "defined_out": [
        "deposBps#0",
        "interest#0",
        "interest#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "interest#0 (copy)",
        "deposBps#0"
      ]
    },
    "4580": {
      "op": "mulw",
      "defined_out": [
        "hiD#0",
        "interest#0",
        "loD#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "hiD#0",
        "loD#0"
      ]
    },
    "4581": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "hiD#0",
        "loD#0",
        "10000"
      ]
    },
    "4583": {
      "op": "divw",
      "defined_out": [
        "depositorInterest#0",
        "interest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0"
      ]
    },
    "4584": {
      "op": "dup2",
      "defined_out": [
        "depositorInterest#0",
        "depositorInterest#0 (copy)",
        "interest#0",
        "interest#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "interest#0 (copy)",
        "depositorInterest#0 (copy)"
      ]
    },
    "4585": {
      "op": "-",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4586": {
      "op": "frame_dig 3",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ]
    },
    "4588": {
      "op": "dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "totalBefore#0",
        "interest#0 (copy)"
      ]
    },
    "4590": {
      "op": "+",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "new_state_value%0#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "new_state_value%0#0"
      ]
    },
    "4591": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "depositorInterest#0",
        "interest#0",
        "new_state_value%0#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4593": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4594": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4595": {
      "op": "pushbytes \"last_interest_applied\"",
      "defined_out": [
        "\"last_interest_applied\"",
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "\"last_interest_applied\""
      ]
    },
    "4618": {
      "op": "dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "\"last_interest_applied\"",
        "interest#0 (copy)"
      ]
    },
    "4620": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4621": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4622": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "4623": {
      "op": "app_global_get_ex",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4624": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%4#0"
      ]
    },
    "4625": {
      "op": "uncover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%4#0",
        "depositorInterest#0"
      ]
    },
    "4627": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "new_state_value%1#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%1#0"
      ]
    },
    "4628": {
      "op": "bytec_3 // \"total_deposits\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "4629": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "4630": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0"
      ]
    },
    "4631": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4632": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "4634": {
      "op": "app_global_get_ex",
      "defined_out": [
        "interest#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4635": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%5#0"
      ]
    },
    "4636": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "new_state_value%2#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "new_state_value%2#0"
      ]
    },
    "4637": {
      "op": "bytec 15 // \"fee_pool\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "new_state_value%2#0",
        "\"fee_pool\""
      ]
    },
    "4639": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"fee_pool\"",
        "new_state_value%2#0"
      ]
    },
    "4640": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4641": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "interest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"last_accrual_ts\""
      ]
    },
    "4643": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"last_accrual_ts\"",
        "interest#0",
        "now#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"last_accrual_ts\"",
        "now#0"
      ]
    },
    "4645": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4646": {
      "op": "frame_bury 0"
    },
    "4648": {
      "retsub": true,
      "op": "retsub"
    },
    "4649": {
      "block": "accrueMarket_after_if_else@9",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4650": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"last_apr_bps\""
      ]
    },
    "4652": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "4653": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1"
      ]
    },
    "4654": {
      "op": "frame_dig 0",
      "defined_out": [
        "deltaT#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1",
        "deltaT#0"
      ]
    },
    "4656": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "h1#0",
        "l1#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h1#0",
        "l1#0"
      ]
    },
    "4657": {
      "op": "pushint 31536000 // 31536000",
      "defined_out": [
        "31536000",
        "deltaT#0",
        "h1#0",
        "l1#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h1#0",
        "l1#0",
        "31536000"
      ]
    },
    "4662": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "tmp2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp2#0"
      ]
    },
    "4663": {
      "op": "intc 6 // 1000000000000",
      "defined_out": [
        "1000000000000",
        "deltaT#0",
        "tmp2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp2#0",
        "1000000000000"
      ]
    },
    "4665": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "h2#0",
        "l2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h2#0",
        "l2#0"
      ]
    },
    "4666": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "deltaT#0",
        "h2#0",
        "l2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h2#0",
        "l2#0",
        "10000"
      ]
    },
    "4668": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4669": {
      "op": "frame_bury 2",
      "defined_out": [
        "deltaT#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4671": {
      "op": "b accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.sliceFactorWad@10"
    },
    "4674": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanRecord",
      "params": {
        "borrowerAddress#0": "bytes"
      },
      "block": "getLoanRecord",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4677": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4679": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4681": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4682": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4683": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4684": {
      "retsub": true,
      "op": "retsub"
    },
    "4685": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.repayLoanASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "repaymentAmount#0": "uint64"
      },
      "block": "repayLoanASA",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4688": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4690": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4691": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4692": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4693": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0"
      ]
    },
    "4694": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4695": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "0"
      ]
    },
    "4696": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "0",
        "\"contract_state\""
      ]
    },
    "4698": {
      "op": "app_global_get_ex",
      "defined_out": [
        "baseToken#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4699": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%1#0"
      ]
    },
    "4700": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "4701": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%0#0",
        "1"
      ]
    },
    "4702": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%1#0"
      ]
    },
    "4703": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4704": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4706": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "4708": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "4710": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "4711": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4714": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4716": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "4718": {
      "op": "frame_dig 1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%5#0",
        "baseToken#0"
      ]
    },
    "4720": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "4721": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4724": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4726": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "4728": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseToken#0",
        "repaymentAmount#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%7#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4730": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%8#0"
      ]
    },
    "4731": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4734": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "4735": {
      "block": "repayLoanASA_bool_merge@5",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4736": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "_interestSlice#0"
      ]
    },
    "4739": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4740": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%9#0"
      ]
    },
    "4742": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ]
    },
    "4745": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4746": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%10#0"
      ]
    },
    "4748": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4751": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4754": {
      "op": "swap",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4755": {
      "op": "frame_dig -1",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4757": {
      "op": "dig 1",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)",
        "liveDebt#0 (copy)"
      ]
    },
    "4759": {
      "op": "<=",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "tmp%11#0"
      ]
    },
    "4760": {
      "op": "assert",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4761": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4763": {
      "op": "-",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4764": {
      "op": "dup",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "remainingDebt#0"
      ]
    },
    "4765": {
      "op": "frame_bury 0",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4767": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "0"
      ]
    },
    "4768": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4770": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4771": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%2#0"
      ]
    },
    "4772": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%2#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4774": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0"
      ]
    },
    "4775": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4777": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4778": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4779": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4781": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4784": {
      "op": "bnz repayLoanASA_else_body@8",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4787": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"loan_record\""
      ]
    },
    "4789": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"loan_record\"",
        "tmp%13#0"
      ]
    },
    "4791": {
      "op": "concat",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "tmp%14#0"
      ]
    },
    "4792": {
      "op": "box_del",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "{box_del}"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "{box_del}"
      ]
    },
    "4793": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4794": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "0"
      ]
    },
    "4795": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4797": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4798": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%3#0"
      ]
    },
    "4799": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "4800": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "new_state_value%1#0"
      ]
    },
    "4801": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "4803": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "4804": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4805": {
      "op": "itxn_begin"
    },
    "4806": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4808": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "4809": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4810": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "32"
      ]
    },
    "4812": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4813": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0"
      ]
    },
    "4814": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "40"
      ]
    },
    "4816": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "4817": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4819": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4821": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4823": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "4"
      ]
    },
    "4824": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4826": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "1000"
      ]
    },
    "4827": {
      "op": "itxn_field Fee",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4829": {
      "op": "itxn_submit"
    },
    "4830": {
      "retsub": true,
      "op": "retsub"
    },
    "4831": {
      "block": "repayLoanASA_else_body@8",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "tmp%17#0"
      ]
    },
    "4833": {
      "op": "swap",
      "defined_out": [
        "rec#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "rec#0"
      ]
    },
    "4834": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4835": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "rec#0",
        "tmp%18#0"
      ]
    },
    "4838": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "rec#0"
      ]
    },
    "4839": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "4842": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "0"
      ]
    },
    "4843": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4844": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4845": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0"
      ]
    },
    "4846": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%4#0",
        "repaymentAmount#0 (copy)",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4848": {
      "op": "itob",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "4849": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "4851": {
      "op": "itob",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4852": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "4853": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "4856": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4857": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "4858": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4859": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0"
      ]
    },
    "4861": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "4862": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "4863": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4865": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_exists%5#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "remainingDebt#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4866": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0"
      ]
    },
    "4867": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "4868": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%17#0"
      ]
    },
    "4870": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "4872": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%19#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4873": {
      "op": "uncover 5",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0",
        "tmp%19#0"
      ]
    },
    "4875": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4876": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4878": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4879": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%4#0"
      ]
    },
    "4881": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4882": {
      "op": "uncover 2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%2#0"
      ]
    },
    "4884": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "remainingDebt#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4885": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%3#0"
      ]
    },
    "4886": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4887": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "4889": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "tmp%20#0"
      ]
    },
    "4891": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "tmp%21#0"
      ]
    },
    "4892": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%21#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4893": {
      "op": "box_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4894": {
      "retsub": true,
      "op": "retsub"
    },
    "4895": {
      "block": "repayLoanASA_bool_false@4",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "4896": {
      "op": "b repayLoanASA_bool_merge@5"
    },
    "4899": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawPlatformFees",
      "params": {
        "paymentReceiver#0": "bytes",
        "feeTxn#0": "uint64"
      },
      "block": "withdrawPlatformFees",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4902": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "payout#0"
      ]
    },
    "4904": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0"
      ]
    },
    "4906": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "0"
      ]
    },
    "4907": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "4908": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4909": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4910": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%1#0"
      ]
    },
    "4911": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": [
        "payout#0"
      ]
    },
    "4912": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "0"
      ]
    },
    "4913": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "payout#0",
        "0",
        "\"contract_state\""
      ]
    },
    "4915": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4916": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "maybe_value%1#0"
      ]
    },
    "4917": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%2#0"
      ]
    },
    "4918": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%2#0",
        "1"
      ]
    },
    "4919": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%3#0"
      ]
    },
    "4920": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "payout#0"
      ]
    },
    "4921": {
      "op": "frame_dig -1",
      "defined_out": [
        "feeTxn#0 (copy)"
      ],
      "stack_out": [
        "payout#0",
        "feeTxn#0 (copy)"
      ]
    },
    "4923": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%4#0"
      ]
    },
    "4925": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "4927": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%6#0"
      ]
    },
    "4928": {
      "op": "bz withdrawPlatformFees_bool_false@3",
      "stack_out": [
        "payout#0"
      ]
    },
    "4931": {
      "op": "frame_dig -1",
      "stack_out": [
        "payout#0",
        "feeTxn#0 (copy)"
      ]
    },
    "4933": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%7#0"
      ]
    },
    "4935": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%7#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%7#0",
        "1000"
      ]
    },
    "4936": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%8#0"
      ]
    },
    "4937": {
      "op": "bz withdrawPlatformFees_bool_false@3",
      "stack_out": [
        "payout#0"
      ]
    },
    "4940": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "payout#0",
        "and_result%0#0"
      ]
    },
    "4941": {
      "block": "withdrawPlatformFees_bool_merge@4",
      "stack_in": [
        "payout#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "payout#0"
      ]
    },
    "4942": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "payout#0",
        "0"
      ]
    },
    "4943": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0"
      ],
      "stack_out": [
        "payout#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "4945": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4946": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "maybe_value%2#0"
      ]
    },
    "4947": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "4948": {
      "op": "bytec 17 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "0",
        "\"current_accumulated_commission\""
      ]
    },
    "4950": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4951": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "4952": {
      "op": "+",
      "defined_out": [
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "4953": {
      "op": "dup",
      "stack_out": [
        "payout#0",
        "payout#0",
        "payout#0"
      ]
    },
    "4954": {
      "op": "frame_bury 0",
      "defined_out": [
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "4956": {
      "op": "bz withdrawPlatformFees_after_if_else@7",
      "stack_out": [
        "payout#0"
      ]
    },
    "4959": {
      "op": "itxn_begin"
    },
    "4960": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "0"
      ]
    },
    "4961": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4962": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4963": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "maybe_value%4#0"
      ]
    },
    "4964": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4965": {
      "op": "frame_dig 0",
      "stack_out": [
        "payout#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "payout#0"
      ]
    },
    "4967": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "payout#0",
        "payout#0 (copy)"
      ],
      "stack_out": [
        "payout#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "payout#0 (copy)",
        "payout#0 (copy)"
      ]
    },
    "4968": {
      "op": "cover 2",
      "stack_out": [
        "payout#0",
        "payout#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "payout#0 (copy)"
      ]
    },
    "4970": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "payout#0",
        "payout#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4972": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "4974": {
      "op": "frame_dig -2",
      "defined_out": [
        "paymentReceiver#0 (copy)",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0",
        "paymentReceiver#0 (copy)"
      ]
    },
    "4976": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "4978": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0",
        "4"
      ]
    },
    "4979": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "4981": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0",
        "1000"
      ]
    },
    "4982": {
      "op": "itxn_field Fee",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "4984": {
      "op": "itxn_submit"
    },
    "4985": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "payout#0"
      ]
    },
    "4988": {
      "op": "bytec 15 // \"fee_pool\"",
      "stack_out": [
        "payout#0",
        "\"fee_pool\""
      ]
    },
    "4990": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "\"fee_pool\"",
        "0"
      ]
    },
    "4991": {
      "op": "app_global_put",
      "stack_out": [
        "payout#0"
      ]
    },
    "4992": {
      "op": "bytec 17 // \"current_accumulated_commission\"",
      "stack_out": [
        "payout#0",
        "\"current_accumulated_commission\""
      ]
    },
    "4994": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "\"current_accumulated_commission\"",
        "0"
      ]
    },
    "4995": {
      "op": "app_global_put",
      "stack_out": [
        "payout#0"
      ]
    },
    "4996": {
      "block": "withdrawPlatformFees_after_if_else@7",
      "stack_in": [
        "payout#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "4997": {
      "block": "withdrawPlatformFees_bool_false@3",
      "stack_in": [
        "payout#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "payout#0",
        "and_result%0#0"
      ]
    },
    "4998": {
      "op": "b withdrawPlatformFees_bool_merge@4"
    },
    "5001": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.buyoutSplitASA",
      "params": {
        "buyer#0": "bytes",
        "debtor#0": "bytes",
        "premiumAxferTxn#0": "uint64",
        "repayAxferTxn#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "buyoutSplitASA",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "5004": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "baseAssetId#0"
      ]
    },
    "5006": {
      "op": "dupn 5",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ]
    },
    "5008": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "\"loan_record\""
      ]
    },
    "5010": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "5012": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0"
      ]
    },
    "5013": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5015": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5016": {
      "op": "bury 1",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5018": {
      "error": "NO_LOAN_RECORD",
      "op": "assert // NO_LOAN_RECORD",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5019": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "5020": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5022": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5023": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "5024": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "5025": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "5026": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "5027": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5028": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "tmp%0#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "{accrueMarket}"
      ]
    },
    "5031": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5032": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "5033": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "maybe_exists%2#0",
        "rec#0"
      ]
    },
    "5034": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "maybe_exists%2#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5035": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "5037": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0"
      ]
    },
    "5038": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5039": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)",
        "40"
      ]
    },
    "5041": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0"
      ]
    },
    "5042": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5043": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0"
      ]
    },
    "5045": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5046": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5049": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5050": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5052": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0"
      ]
    },
    "5054": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#1"
      ]
    },
    "5057": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5058": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5059": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5061": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)"
      ]
    },
    "5062": {
      "error": "NO_DEBT",
      "op": "assert // NO_DEBT",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5063": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "debtBase#0",
        "collateralTokenId#0"
      ]
    },
    "5064": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "5066": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "lstAppId#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5068": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralUSD#0"
      ]
    },
    "5071": {
      "op": "dup"
    },
    "5072": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtBase#0"
      ]
    },
    "5074": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "5077": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)"
      ]
    },
    "5078": {
      "error": "BAD_DEBT_USD",
      "op": "assert // BAD_DEBT_USD",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "5079": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0"
      ]
    },
    "5080": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0",
        "10000"
      ]
    },
    "5082": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0"
      ]
    },
    "5083": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hCR#0",
        "lCR#0",
        "debtUSDv#0"
      ]
    },
    "5085": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0"
      ]
    },
    "5086": {
      "op": "dup",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "CR_bps#0"
      ]
    },
    "5087": {
      "op": "intc_0 // 0",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5088": {
      "op": "swap",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0"
      ]
    },
    "5089": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "0"
      ]
    },
    "5090": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5092": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5093": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "maybe_value%3#0"
      ]
    },
    "5094": {
      "op": ">",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%7#0"
      ]
    },
    "5095": {
      "op": "bz buyoutSplitASA_after_if_else@2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5098": {
      "op": "frame_dig 12",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0"
      ]
    },
    "5100": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "10000"
      ]
    },
    "5102": {
      "op": "mulw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0"
      ]
    },
    "5103": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "0"
      ]
    },
    "5104": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5106": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "5107": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "maybe_value%4#0"
      ]
    },
    "5108": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "ratio_bps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "ratio_bps#0"
      ]
    },
    "5109": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "ratio_bps#0",
        "10000"
      ]
    },
    "5111": {
      "op": "-",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumRateBps#0"
      ]
    },
    "5112": {
      "op": "frame_bury 13",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5114": {
      "block": "buyoutSplitASA_after_if_else@2",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig 11",
      "defined_out": [
        "collateralUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralUSD#0"
      ]
    },
    "5116": {
      "op": "frame_dig 13",
      "defined_out": [
        "collateralUSD#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralUSD#0",
        "premiumRateBps#0"
      ]
    },
    "5118": {
      "op": "mulw",
      "defined_out": [
        "collateralUSD#0",
        "hP#0",
        "lP#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hP#0",
        "lP#0"
      ]
    },
    "5119": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralUSD#0",
        "hP#0",
        "lP#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hP#0",
        "lP#0",
        "10000"
      ]
    },
    "5121": {
      "op": "divw",
      "defined_out": [
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ]
    },
    "5122": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "5123": {
      "op": "bytec 16 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "5125": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralUSD#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5126": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%5#0"
      ]
    },
    "5127": {
      "op": "btoi",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenId#0"
      ]
    },
    "5128": {
      "op": "frame_bury 1",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ]
    },
    "5130": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "5131": {
      "op": "bytec 16 // \"buyout_token_id\"",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "5133": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "5134": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%6#0"
      ]
    },
    "5135": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5138": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5139": {
      "op": "frame_bury 2",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5141": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0"
      ]
    },
    "5142": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0",
        "1000000"
      ]
    },
    "5144": {
      "op": "mulw",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0"
      ]
    },
    "5145": {
      "op": "frame_bury 4",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "hPT#0"
      ]
    },
    "5147": {
      "op": "frame_bury 3",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5149": {
      "op": "bnz buyoutSplitASA_ternary_false@4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5152": {
      "op": "intc_0 // 0",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5153": {
      "op": "frame_bury 5",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5155": {
      "block": "buyoutSplitASA_ternary_merge@5",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "premiumAxferTxn#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5157": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%9#0"
      ]
    },
    "5159": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%9#0",
        "buyer#0 (copy)"
      ]
    },
    "5161": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%10#0"
      ]
    },
    "5162": {
      "op": "bz buyoutSplitASA_bool_false@10",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5165": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5167": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%11#0"
      ]
    },
    "5169": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "5171": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%13#0"
      ]
    },
    "5172": {
      "op": "bz buyoutSplitASA_bool_false@10",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5175": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5177": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%14#0"
      ]
    },
    "5179": {
      "op": "frame_dig 1",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%14#0",
        "buyoutTokenId#0"
      ]
    },
    "5181": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%15#0"
      ]
    },
    "5182": {
      "op": "bz buyoutSplitASA_bool_false@10",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5185": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5187": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%16#0"
      ]
    },
    "5189": {
      "op": "frame_dig 5",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%16#0",
        "premiumTokens#0"
      ]
    },
    "5191": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%17#0"
      ]
    },
    "5192": {
      "op": "bz buyoutSplitASA_bool_false@10",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5195": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ]
    },
    "5196": {
      "block": "buyoutSplitASA_bool_merge@11",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5197": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0"
      ]
    },
    "5198": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "5199": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "5200": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%7#0"
      ]
    },
    "5201": {
      "op": "btoi",
      "defined_out": [
        "baseAssetId#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "baseAssetId#0"
      ]
    },
    "5202": {
      "op": "frame_bury 0",
      "defined_out": [
        "baseAssetId#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5204": {
      "op": "frame_dig -2",
      "defined_out": [
        "baseAssetId#0",
        "repayAxferTxn#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5206": {
      "op": "gtxns Sender",
      "defined_out": [
        "baseAssetId#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%18#0"
      ]
    },
    "5208": {
      "op": "frame_dig -5",
      "defined_out": [
        "baseAssetId#0",
        "buyer#0 (copy)",
        "tmp%18#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%18#0",
        "buyer#0 (copy)"
      ]
    },
    "5210": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%19#0"
      ]
    },
    "5211": {
      "op": "bz buyoutSplitASA_bool_false@16",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5214": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5216": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseAssetId#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%20#0"
      ]
    },
    "5218": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseAssetId#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "5220": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%22#0"
      ]
    },
    "5221": {
      "op": "bz buyoutSplitASA_bool_false@16",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5224": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5226": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseAssetId#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%23#0"
      ]
    },
    "5228": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%23#0",
        "baseAssetId#0"
      ]
    },
    "5230": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0"
      ]
    },
    "5231": {
      "op": "bz buyoutSplitASA_bool_false@16",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5234": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5236": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseAssetId#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%25#0"
      ]
    },
    "5238": {
      "op": "frame_dig 10",
      "defined_out": [
        "baseAssetId#0",
        "debtBase#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%25#0",
        "debtBase#0"
      ]
    },
    "5240": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "debtBase#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0"
      ]
    },
    "5241": {
      "op": "bz buyoutSplitASA_bool_false@16",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5244": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "baseAssetId#0",
        "debtBase#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%1#0"
      ]
    },
    "5245": {
      "block": "buyoutSplitASA_bool_merge@17",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5246": {
      "op": "frame_dig 6",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%0#0"
      ]
    },
    "5248": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "{box_del}"
      ]
    },
    "5249": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5250": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0"
      ]
    },
    "5251": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "5253": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "5254": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%8#0"
      ]
    },
    "5255": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%8#0",
        "1"
      ]
    },
    "5256": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%0#0"
      ]
    },
    "5257": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "5259": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "5260": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5261": {
      "op": "itxn_begin"
    },
    "5262": {
      "op": "frame_dig 7",
      "defined_out": [
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "rec#0"
      ]
    },
    "5264": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "rec#0",
        "32"
      ]
    },
    "5266": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5267": {
      "op": "frame_dig 8",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "5269": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "5270": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5272": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5274": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5276": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "buyer#0 (copy)"
      ]
    },
    "5278": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5280": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "5281": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5283": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "1000"
      ]
    },
    "5284": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5286": {
      "op": "itxn_submit"
    },
    "5287": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "\"accepted_collaterals\""
      ]
    },
    "5289": {
      "op": "frame_dig 9",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5291": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%28#0"
      ]
    },
    "5292": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "5293": {
      "op": "box_get",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%9#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%28#0",
        "acVal#0",
        "maybe_exists%9#0"
      ]
    },
    "5294": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%28#0",
        "acVal#0"
      ]
    },
    "5295": {
      "op": "dup",
      "defined_out": [
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%28#0",
        "acVal#0",
        "acVal#0 (copy)"
      ]
    },
    "5296": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%28#0",
        "acVal#0",
        "acVal#0 (copy)",
        "24"
      ]
    },
    "5298": {
      "op": "extract_uint64",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%28#0",
        "acVal#0",
        "tmp%30#0"
      ]
    },
    "5299": {
      "op": "uncover 3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "tmp%30#0",
        "collateralAmount#0"
      ]
    },
    "5301": {
      "op": "-",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "updatedTotal#0"
      ]
    },
    "5302": {
      "op": "dig 1",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "updatedTotal#0",
        "acVal#0 (copy)"
      ]
    },
    "5304": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%31#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%31#0"
      ]
    },
    "5307": {
      "op": "dig 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%31#0",
        "acVal#0 (copy)"
      ]
    },
    "5309": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%31#0",
        "tmp%32#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "5312": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "tmp%31#0",
        "tmp%32#0",
        "updatedTotal#0"
      ]
    },
    "5314": {
      "op": "itob",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0"
      ]
    },
    "5315": {
      "op": "dig 3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0",
        "acVal#0 (copy)"
      ]
    },
    "5317": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0",
        "tmp%33#0"
      ]
    },
    "5320": {
      "op": "uncover 4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0",
        "tmp%33#0",
        "acVal#0"
      ]
    },
    "5322": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "5325": {
      "op": "uncover 4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "tmp%32#0",
        "val_as_bytes%0#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%31#0"
      ]
    },
    "5327": {
      "op": "uncover 4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "val_as_bytes%0#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "5329": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%4#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%33#0",
        "tmp%34#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "val_as_bytes%0#0",
        "tmp%33#0",
        "tmp%34#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "5330": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "encoded_tuple_buffer%4#0",
        "tmp%33#0"
      ]
    },
    "5332": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%5#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%34#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "5333": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "tmp%34#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "5335": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%6#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "tmp%34#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "5336": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "encoded_tuple_buffer%6#0",
        "tmp%34#0"
      ]
    },
    "5337": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%7#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "5338": {
      "op": "box_put",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5339": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0"
      ]
    },
    "5340": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "5342": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "5343": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%10#0"
      ]
    },
    "5344": {
      "op": "frame_dig 10",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "maybe_value%10#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%10#0",
        "debtBase#0"
      ]
    },
    "5346": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)",
        "maybe_value%10#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%10#0",
        "debtBase#0 (copy)",
        "debtBase#0 (copy)"
      ]
    },
    "5347": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0",
        "maybe_value%10#0",
        "debtBase#0 (copy)"
      ]
    },
    "5349": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0",
        "new_state_value%1#0"
      ]
    },
    "5350": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0",
        "new_state_value%1#0",
        "\"total_borrows\""
      ]
    },
    "5352": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0",
        "\"total_borrows\"",
        "new_state_value%1#0"
      ]
    },
    "5353": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0"
      ]
    },
    "5354": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5357": {
      "op": "frame_dig 5",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5359": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)"
      ]
    },
    "5360": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)",
        "2"
      ]
    },
    "5362": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0"
      ]
    },
    "5363": {
      "op": "itxn_begin"
    },
    "5364": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "0"
      ]
    },
    "5365": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "0",
        "\"admin_account\""
      ]
    },
    "5366": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "5367": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1"
      ]
    },
    "5368": {
      "op": "dig 1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "halfPremium#0 (copy)",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "halfPremium#0 (copy)"
      ]
    },
    "5370": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1"
      ]
    },
    "5372": {
      "op": "frame_dig 1",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "buyoutTokenId#0"
      ]
    },
    "5374": {
      "op": "dup",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenId#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "buyoutTokenId#0 (copy)",
        "buyoutTokenId#0 (copy)"
      ]
    },
    "5375": {
      "op": "cover 3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "buyoutTokenId#0 (copy)"
      ]
    },
    "5377": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "maybe_value%0#1"
      ]
    },
    "5379": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0"
      ]
    },
    "5381": {
      "op": "intc_3 // 4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "4"
      ]
    },
    "5382": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0"
      ]
    },
    "5384": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "1000"
      ]
    },
    "5385": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0"
      ]
    },
    "5387": {
      "op": "itxn_submit"
    },
    "5388": {
      "op": "itxn_begin"
    },
    "5389": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "premiumTokens#0"
      ]
    },
    "5391": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "halfPremium#0"
      ]
    },
    "5392": {
      "op": "-",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "inner_txn_params%1%%param_AssetAmount_idx_0#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenId#0",
        "inner_txn_params%1%%param_AssetAmount_idx_0#0"
      ]
    },
    "5393": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenId#0"
      ]
    },
    "5395": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5397": {
      "op": "frame_dig -4",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtor#0 (copy)",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtor#0 (copy)"
      ]
    },
    "5399": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5401": {
      "op": "intc_3 // 4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "4"
      ]
    },
    "5402": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5404": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "1000"
      ]
    },
    "5405": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5407": {
      "op": "itxn_submit"
    },
    "5408": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%2#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%2#0"
      ]
    },
    "5411": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%2#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "5413": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "5414": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5415": {
      "retsub": true,
      "op": "retsub"
    },
    "5416": {
      "block": "buyoutSplitASA_bool_false@16",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%1#0"
      ]
    },
    "5417": {
      "op": "b buyoutSplitASA_bool_merge@17"
    },
    "5420": {
      "block": "buyoutSplitASA_bool_false@10",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ]
    },
    "5421": {
      "op": "b buyoutSplitASA_bool_merge@11"
    },
    "5424": {
      "block": "buyoutSplitASA_ternary_false@4",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "hPT#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0"
      ]
    },
    "5426": {
      "op": "frame_dig 4",
      "defined_out": [
        "hPT#0",
        "lPT#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0",
        "lPT#0"
      ]
    },
    "5428": {
      "op": "frame_dig 2",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0",
        "lPT#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5430": {
      "op": "divw",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5431": {
      "op": "frame_bury 5",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5433": {
      "op": "b buyoutSplitASA_ternary_merge@5"
    },
    "5436": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.debtUSD",
      "params": {
        "debtBaseUnits#0": "uint64"
      },
      "block": "debtUSD",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "5439": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5440": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "5441": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5442": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "5443": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenPrice#0"
      ],
      "stack_out": [
        "baseTokenPrice#0"
      ]
    },
    "5446": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenPrice#0",
        "debtBaseUnits#0 (copy)"
      ],
      "stack_out": [
        "baseTokenPrice#0",
        "debtBaseUnits#0 (copy)"
      ]
    },
    "5448": {
      "op": "mulw",
      "defined_out": [
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "h#0",
        "l#0"
      ]
    },
    "5449": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "h#0",
        "l#0",
        "1000000"
      ]
    },
    "5451": {
      "op": "divw",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5452": {
      "retsub": true,
      "op": "retsub"
    },
    "5453": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.maxWithdrawableCollateralLST",
      "params": {
        "lstAppId#0": "uint64"
      },
      "block": "maxWithdrawableCollateralLST",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "5456": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0"
      ]
    },
    "5457": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ]
    },
    "5459": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5460": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\""
      ]
    },
    "5462": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\"",
        "tmp%0#0"
      ]
    },
    "5464": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%1#0"
      ]
    },
    "5465": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5466": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_exists%0#0"
      ]
    },
    "5468": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5469": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0"
      ]
    },
    "5470": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5472": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5473": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%1#0"
      ]
    },
    "5474": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%2#0"
      ]
    },
    "5475": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%2#0",
        "1"
      ]
    },
    "5476": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%3#0"
      ]
    },
    "5477": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5478": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "{accrueMarket}"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "{accrueMarket}"
      ]
    },
    "5481": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5482": {
      "op": "bytec 7 // \"loan_record\"",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\""
      ]
    },
    "5484": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\"",
        "tmp%4#0"
      ]
    },
    "5486": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%5#0"
      ]
    },
    "5487": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "5488": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0"
      ]
    },
    "5489": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5490": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5493": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "5495": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5496": {
      "op": "concat",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%0#1"
      ]
    },
    "5497": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "collateralTokenId#0",
        "maybe_exists%0#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "5498": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0"
      ]
    },
    "5499": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateral#0",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0",
        "32"
      ]
    },
    "5501": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%8#0"
      ]
    },
    "5502": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#0",
        "lstAppId#0 (copy)",
        "rec#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%8#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5504": {
      "op": "==",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%9#0"
      ]
    },
    "5505": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0"
      ]
    },
    "5506": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5509": {
      "op": "swap",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5510": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5511": {
      "op": "cover 2",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5513": {
      "op": "bnz maxWithdrawableCollateralLST_after_if_else@2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5516": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "40"
      ]
    },
    "5518": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "tmp%12#0"
      ]
    },
    "5519": {
      "op": "frame_bury 0"
    },
    "5521": {
      "retsub": true,
      "op": "retsub"
    },
    "5522": {
      "block": "maxWithdrawableCollateralLST_after_if_else@2",
      "stack_in": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ],
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5523": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5526": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5527": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5529": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0"
      ]
    },
    "5531": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0",
        "40"
      ]
    },
    "5533": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "tmp%15#0"
      ]
    },
    "5534": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#0",
        "lstAppId#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "tmp%15#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5536": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5539": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "currCollatUSD#0"
      ]
    },
    "5540": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5542": {
      "op": "frame_dig 3",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtBase#0"
      ]
    },
    "5544": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0"
      ]
    },
    "5547": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0",
        "10000"
      ]
    },
    "5549": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0"
      ]
    },
    "5550": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0"
      ]
    },
    "5551": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "5553": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5554": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0"
      ]
    },
    "5555": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5556": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5557": {
      "op": "frame_bury 2",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5559": {
      "op": "<=",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "tmp%16#0"
      ]
    },
    "5560": {
      "op": "bz maxWithdrawableCollateralLST_after_if_else@4",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0"
      ]
    },
    "5563": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "0"
      ]
    },
    "5564": {
      "op": "frame_bury 0"
    },
    "5566": {
      "retsub": true,
      "op": "retsub"
    },
    "5567": {
      "block": "maxWithdrawableCollateralLST_after_if_else@4",
      "stack_in": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5569": {
      "op": "frame_dig 2",
      "defined_out": [
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5571": {
      "op": "-",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5572": {
      "op": "itxn_begin"
    },
    "5573": {
      "op": "bytec 18 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "5575": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5577": {
      "op": "frame_dig -1",
      "defined_out": [
        "currCollatUSD#0",
        "lstAppId#0 (copy)",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5579": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5581": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "appl"
      ]
    },
    "5583": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5585": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "1000"
      ]
    },
    "5586": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5588": {
      "op": "itxn_submit"
    },
    "5589": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0"
      ]
    },
    "5591": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5592": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "tmp%17#0"
      ]
    },
    "5595": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "awst_tmp%0#0"
      ]
    },
    "5596": {
      "op": "extract 0 4",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "5599": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "5600": {
      "op": "==",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "5601": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0"
      ]
    },
    "5602": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5603": {
      "op": "itxn_begin"
    },
    "5604": {
      "op": "bytec 19 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "5606": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5608": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5610": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5612": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "appl"
      ]
    },
    "5614": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5616": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "1000"
      ]
    },
    "5617": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5619": {
      "op": "itxn_submit"
    },
    "5620": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0"
      ]
    },
    "5622": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "5623": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "tmp%21#0"
      ]
    },
    "5626": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "awst_tmp%1#0"
      ]
    },
    "5627": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "5630": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "tmp%22#0",
        "0x151f7c75"
      ]
    },
    "5631": {
      "op": "==",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "5632": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0"
      ]
    },
    "5633": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0"
      ]
    },
    "5634": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\""
      ]
    },
    "5636": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5638": {
      "op": "concat",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%0#1",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%0#1"
      ]
    },
    "5639": {
      "op": "box_get",
      "defined_out": [
        "ac#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "maybe_exists%0#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0",
        "maybe_exists%0#0"
      ]
    },
    "5640": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0"
      ]
    },
    "5641": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%26#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%26#0"
      ]
    },
    "5644": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0"
      ]
    },
    "5647": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0"
      ]
    },
    "5649": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0",
        "1000000"
      ]
    },
    "5651": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "hU#0",
        "lU#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "hU#0",
        "lU#0"
      ]
    },
    "5652": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "hU#0",
        "lU#0",
        "basePrice#0"
      ]
    },
    "5654": {
      "op": "divw",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUnderlying#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "removableUnderlying#0"
      ]
    },
    "5655": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "totalDeposits#0",
        "removableUnderlying#0",
        "circulatingLST#0"
      ]
    },
    "5657": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "hL#0",
        "lL#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "totalDeposits#0",
        "hL#0",
        "lL#0"
      ]
    },
    "5658": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "hL#0",
        "lL#0",
        "totalDeposits#0"
      ]
    },
    "5660": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableLST#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableLST#0"
      ]
    },
    "5661": {
      "op": "frame_bury 0"
    },
    "5663": {
      "retsub": true,
      "op": "retsub"
    },
    "5664": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawCollateral",
      "params": {
        "amountLST#0": "uint64",
        "collateralTokenId#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "withdrawCollateral",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "5667": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1"
      ]
    },
    "5668": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ]
    },
    "5670": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5671": {
      "op": "frame_dig -3",
      "defined_out": [
        "amountLST#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "amountLST#0 (copy)"
      ]
    },
    "5673": {
      "error": "ZERO_AMOUNT",
      "op": "assert // ZERO_AMOUNT",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5674": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0"
      ]
    },
    "5675": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5677": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5678": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%0#0"
      ]
    },
    "5679": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%1#0"
      ]
    },
    "5680": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%1#0",
        "1"
      ]
    },
    "5681": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%2#0"
      ]
    },
    "5682": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5683": {
      "op": "txn Sender"
    },
    "5685": {
      "op": "bytec 7 // \"loan_record\""
    },
    "5687": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "\"loan_record\"",
        "borrower#0"
      ]
    },
    "5689": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0"
      ]
    },
    "5690": {
      "op": "dupn 2",
      "defined_out": [
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5692": {
      "op": "box_len",
      "defined_out": [
        "borrower#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5693": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_exists%1#0"
      ]
    },
    "5695": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "5696": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "borrower#0",
        "tmp%3#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "{accrueMarket}"
      ]
    },
    "5699": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "5700": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5701": {
      "op": "box_get",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "loan#0",
        "maybe_exists%2#0"
      ]
    },
    "5702": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_exists%2#0",
        "loan#0"
      ]
    },
    "5703": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_exists%2#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "5704": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "loan#0",
        "maybe_exists%2#0",
        "loan#0"
      ]
    },
    "5706": {
      "op": "cover 3",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0",
        "maybe_exists%2#0"
      ]
    },
    "5708": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0"
      ]
    },
    "5709": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "loan#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "5710": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0"
      ]
    },
    "5713": {
      "op": "cover 2",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "loan#0"
      ]
    },
    "5715": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "loan#0",
        "32"
      ]
    },
    "5717": {
      "op": "extract_uint64",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "5718": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrower#0",
        "collateralTokenId#0 (copy)",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "tmp%6#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5720": {
      "op": "==",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "tmp%7#0"
      ]
    },
    "5721": {
      "error": "WRONG_COLLATERAL",
      "op": "assert // WRONG_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0"
      ]
    },
    "5722": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5724": {
      "op": "itob",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "acKey#0"
      ]
    },
    "5725": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "acKey#0",
        "acKey#0"
      ]
    },
    "5726": {
      "op": "cover 2",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acKey#0"
      ]
    },
    "5728": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acKey#0",
        "\"accepted_collaterals\""
      ]
    },
    "5730": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "\"accepted_collaterals\"",
        "acKey#0"
      ]
    },
    "5731": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0"
      ]
    },
    "5732": {
      "op": "dup",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "5733": {
      "op": "box_len",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5734": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0",
        "maybe_exists%3#0"
      ]
    },
    "5736": {
      "error": "BAD_COLLATERAL",
      "op": "assert // BAD_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0"
      ]
    },
    "5737": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "acVal#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%4#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acVal#0",
        "maybe_exists%4#0"
      ]
    },
    "5738": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acVal#0"
      ]
    },
    "5739": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acVal#0",
        "32"
      ]
    },
    "5741": {
      "op": "extract_uint64",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%11#0"
      ]
    },
    "5742": {
      "op": "frame_dig -1",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "lstAppId#0 (copy)",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%11#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5744": {
      "op": "==",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%12#0"
      ]
    },
    "5745": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5746": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5747": {
      "op": "box_len",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "5748": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_exists%0#0"
      ]
    },
    "5750": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5751": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "0"
      ]
    },
    "5752": {
      "op": "bytec 5 // \"contract_state\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5754": {
      "op": "app_global_get_ex",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%1#0",
        "maybe_value%1#1",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "5755": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_value%1#1"
      ]
    },
    "5756": {
      "op": "btoi",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%1#0"
      ]
    },
    "5757": {
      "op": "intc_1 // 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%1#0",
        "1"
      ]
    },
    "5758": {
      "op": "==",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "5759": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5760": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "{accrueMarket}"
      ]
    },
    "5763": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5764": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%2#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "5765": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0"
      ]
    },
    "5766": {
      "op": "dup",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5767": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "5770": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateralTokenId#1",
        "\"accepted_collaterals\""
      ]
    },
    "5772": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#1"
      ]
    },
    "5773": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "loan#0",
        "rec#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%0#0"
      ]
    },
    "5774": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateral#0",
        "collateralTokenId#1",
        "loan#0",
        "maybe_exists%0#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "5775": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateral#0"
      ]
    },
    "5776": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateral#0",
        "32"
      ]
    },
    "5778": {
      "op": "extract_uint64",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%6#0"
      ]
    },
    "5779": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%6#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5781": {
      "op": "==",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%7#0"
      ]
    },
    "5782": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0"
      ]
    },
    "5783": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5786": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5787": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5788": {
      "op": "cover 2",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5790": {
      "op": "bnz withdrawCollateral_after_if_else@4",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5793": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "40"
      ]
    },
    "5795": {
      "op": "extract_uint64",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "maxSafe#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "5796": {
      "block": "withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "amountLST#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0",
        "amountLST#0 (copy)"
      ]
    },
    "5798": {
      "op": ">=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%13#0"
      ]
    },
    "5799": {
      "error": "EXCEEDS_LIMITS",
      "op": "assert // EXCEEDS_LIMITS",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "5800": {
      "op": "frame_dig 5",
      "defined_out": [
        "loan#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0"
      ]
    },
    "5802": {
      "op": "dup",
      "defined_out": [
        "loan#0",
        "loan#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "5803": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "loan#0",
        "loan#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "loan#0 (copy)",
        "40"
      ]
    },
    "5805": {
      "op": "extract_uint64",
      "defined_out": [
        "loan#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0"
      ]
    },
    "5806": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "amountLST#0 (copy)"
      ]
    },
    "5808": {
      "op": "dig 1",
      "defined_out": [
        "amountLST#0 (copy)",
        "loan#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "amountLST#0 (copy)",
        "tmp%15#0 (copy)"
      ]
    },
    "5810": {
      "op": "<",
      "defined_out": [
        "loan#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "5811": {
      "error": "INSUFFICIENT_COLLATERAL",
      "op": "assert // INSUFFICIENT_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0"
      ]
    },
    "5812": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "amountLST#0 (copy)"
      ]
    },
    "5814": {
      "op": "-",
      "defined_out": [
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5815": {
      "op": "itxn_begin"
    },
    "5816": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "amountLST#0 (copy)"
      ]
    },
    "5818": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5820": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5822": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5824": {
      "op": "frame_dig 3",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "borrower#0"
      ]
    },
    "5826": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "borrower#0 (copy)",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "borrower#0 (copy)",
        "borrower#0 (copy)"
      ]
    },
    "5827": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "borrower#0 (copy)"
      ]
    },
    "5829": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5831": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "4"
      ]
    },
    "5832": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5834": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "1000"
      ]
    },
    "5835": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5837": {
      "op": "itxn_submit"
    },
    "5838": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0"
      ]
    },
    "5839": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "5840": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "5841": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5842": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0"
      ]
    },
    "5843": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "amountLST#0 (copy)"
      ]
    },
    "5845": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%3#0"
      ]
    },
    "5846": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%3#0",
        "to_encode%0#0"
      ]
    },
    "5848": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "5849": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "5850": {
      "op": "pushbytes 0x03",
      "defined_out": [
        "0x03",
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0",
        "0x03"
      ]
    },
    "5853": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%4#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "5854": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%4#0"
      ]
    },
    "5855": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "5856": {
      "op": "dig 4",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "loan#0 (copy)"
      ]
    },
    "5858": {
      "error": "Index access is out of bounds",
      "op": "extract 73 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0"
      ]
    },
    "5861": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "loan#0"
      ]
    },
    "5863": {
      "error": "Index access is out of bounds",
      "op": "extract 81 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "5866": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "borrower#0"
      ]
    },
    "5868": {
      "op": "frame_dig 7",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "borrower#0",
        "acKey#0"
      ]
    },
    "5870": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "5871": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%2#0"
      ]
    },
    "5873": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "5874": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "5876": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%10#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "5877": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%10#0",
        "maybe_value%5#0"
      ]
    },
    "5879": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0",
        "loan#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "5880": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%20#0",
        "encoded_tuple_buffer%11#0",
        "tmp%19#0"
      ]
    },
    "5882": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%12#0",
        "loan#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%20#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "5883": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "encoded_tuple_buffer%12#0",
        "tmp%20#0"
      ]
    },
    "5884": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "newRec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "newRec#0"
      ]
    },
    "5885": {
      "op": "frame_dig 4",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "newRec#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "newRec#0",
        "tmp%3#0"
      ]
    },
    "5887": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%3#0",
        "newRec#0"
      ]
    },
    "5888": {
      "op": "box_put",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "5889": {
      "op": "frame_dig 6",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%5#0"
      ]
    },
    "5891": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%5#0",
        "amountLST#0 (copy)"
      ]
    },
    "5893": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "5896": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "new_state_value%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "new_state_value%0#0"
      ]
    },
    "5899": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "acKey#0",
        "borrower#0",
        "loan#0",
        "new_state_value%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "new_state_value%0#0",
        "\"last_apr_bps\""
      ]
    },
    "5901": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ]
    },
    "5902": {
      "op": "app_global_put",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "5903": {
      "retsub": true,
      "op": "retsub"
    },
    "5904": {
      "block": "withdrawCollateral_after_if_else@4",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ],
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5905": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "5908": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#1",
        "collateralTokenId#1 (copy)"
      ]
    },
    "5909": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "5911": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0"
      ]
    },
    "5913": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0",
        "40"
      ]
    },
    "5915": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#1",
        "tmp%13#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "tmp%13#1"
      ]
    },
    "5916": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#1",
        "lstAppId#0 (copy)",
        "tmp%13#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "tmp%13#1",
        "lstAppId#0 (copy)"
      ]
    },
    "5918": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5921": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "currCollatUSD#0"
      ]
    },
    "5922": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5924": {
      "op": "frame_dig 8",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtBase#0"
      ]
    },
    "5926": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0"
      ]
    },
    "5929": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0",
        "10000"
      ]
    },
    "5931": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0"
      ]
    },
    "5932": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0"
      ]
    },
    "5933": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "5935": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5936": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0"
      ]
    },
    "5937": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5938": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5939": {
      "op": "frame_bury 2",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5941": {
      "op": "<=",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0",
        "tmp%14#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%14#1"
      ]
    },
    "5942": {
      "op": "bz withdrawCollateral_after_if_else@6",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "5945": {
      "op": "intc_0 // 0",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "maxSafe#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "5946": {
      "op": "b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7"
    },
    "5949": {
      "block": "withdrawCollateral_after_if_else@6",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5951": {
      "op": "frame_dig 2",
      "defined_out": [
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5953": {
      "op": "-",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5954": {
      "op": "itxn_begin"
    },
    "5955": {
      "op": "bytec 18 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "5957": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5959": {
      "op": "frame_dig -1",
      "defined_out": [
        "currCollatUSD#0",
        "lstAppId#0 (copy)",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5961": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5963": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "appl"
      ]
    },
    "5965": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5967": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "1000"
      ]
    },
    "5968": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5970": {
      "op": "itxn_submit"
    },
    "5971": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0"
      ]
    },
    "5973": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5974": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "tmp%15#1"
      ]
    },
    "5977": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "awst_tmp%0#0"
      ]
    },
    "5978": {
      "op": "extract 0 4",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1",
        "tmp%16#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "tmp%16#1"
      ]
    },
    "5981": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1",
        "tmp%16#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "tmp%16#1",
        "0x151f7c75"
      ]
    },
    "5982": {
      "op": "==",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1",
        "tmp%17#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "tmp%17#1"
      ]
    },
    "5983": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1"
      ]
    },
    "5984": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5985": {
      "op": "itxn_begin"
    },
    "5986": {
      "op": "bytec 19 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "5988": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5990": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5992": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5994": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "appl"
      ]
    },
    "5996": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5998": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "1000"
      ]
    },
    "5999": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6001": {
      "op": "itxn_submit"
    },
    "6002": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0"
      ]
    },
    "6004": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6005": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ]
    },
    "6008": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "awst_tmp%1#0"
      ]
    },
    "6009": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "6012": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "6013": {
      "op": "==",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0",
        "tmp%21#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%21#1"
      ]
    },
    "6014": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0"
      ]
    },
    "6015": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0"
      ]
    },
    "6016": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\""
      ]
    },
    "6018": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#1"
      ]
    },
    "6020": {
      "op": "concat",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%0#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%0#0"
      ]
    },
    "6021": {
      "op": "box_get",
      "defined_out": [
        "ac#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "maybe_exists%0#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0",
        "maybe_exists%0#0"
      ]
    },
    "6022": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0"
      ]
    },
    "6023": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%24#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%24#0"
      ]
    },
    "6026": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0"
      ]
    },
    "6029": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0"
      ]
    },
    "6031": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0",
        "1000000"
      ]
    },
    "6033": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "hU#0",
        "lU#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "hU#0",
        "lU#0"
      ]
    },
    "6034": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "hU#0",
        "lU#0",
        "basePrice#0"
      ]
    },
    "6036": {
      "op": "divw",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUnderlying#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "removableUnderlying#0"
      ]
    },
    "6037": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "totalDeposits#0",
        "removableUnderlying#0",
        "circulatingLST#0"
      ]
    },
    "6039": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "hL#0",
        "lL#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "totalDeposits#0",
        "hL#0",
        "lL#0"
      ]
    },
    "6040": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "hL#0",
        "lL#0",
        "totalDeposits#0"
      ]
    },
    "6042": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "maxSafe#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "6043": {
      "op": "b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7"
    },
    "6046": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.liquidatePartialASA",
      "params": {
        "debtor#0": "bytes",
        "repayAxfer#0": "uint64",
        "repayBaseAmount#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "liquidatePartialASA",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "6049": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "baseAssetId#0"
      ]
    },
    "6051": {
      "op": "dupn 8",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ]
    },
    "6053": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "\"loan_record\""
      ]
    },
    "6055": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "6057": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0"
      ]
    },
    "6058": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "6060": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6061": {
      "op": "bury 1",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6063": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "6064": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "6065": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "tmp%0#0",
        "0",
        "\"contract_state\""
      ]
    },
    "6067": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6068": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "6069": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "6070": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "6071": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "6072": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "6073": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "tmp%0#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "tmp%0#0",
        "{accrueMarket}"
      ]
    },
    "6076": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "6077": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "6078": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "maybe_exists%2#0",
        "rec#0"
      ]
    },
    "6079": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "maybe_exists%2#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6080": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "6082": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "rec#0"
      ]
    },
    "6083": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6084": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collTok#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collTok#0"
      ]
    },
    "6087": {
      "op": "swap",
      "defined_out": [
        "collTok#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "rec#0"
      ]
    },
    "6088": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6089": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)",
        "40"
      ]
    },
    "6091": {
      "op": "extract_uint64",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "collLSTBal#0"
      ]
    },
    "6092": {
      "op": "swap",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#0"
      ]
    },
    "6093": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "liveDebt#0",
        "rec#1"
      ]
    },
    "6096": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6097": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "6098": {
      "error": "NO_DEBT",
      "op": "assert // NO_DEBT",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6099": {
      "op": "frame_dig -2",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "repayBaseAmount#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6101": {
      "op": "bz liquidatePartialASA_bool_false@3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6104": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6106": {
      "op": "frame_dig 14",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "liveDebt#0"
      ]
    },
    "6108": {
      "op": "<=",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%7#0"
      ]
    },
    "6109": {
      "op": "bz liquidatePartialASA_bool_false@3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6112": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ]
    },
    "6113": {
      "block": "liquidatePartialASA_bool_merge@4",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ],
      "error": "BAD_REPAY",
      "op": "assert // BAD_REPAY",
      "defined_out": [],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6114": {
      "op": "frame_dig 11",
      "defined_out": [
        "collTok#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0"
      ]
    },
    "6116": {
      "op": "frame_dig 12",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "collLSTBal#0"
      ]
    },
    "6118": {
      "op": "frame_dig -1",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "collLSTBal#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6120": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0"
      ]
    },
    "6123": {
      "op": "frame_dig 14",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "liveDebt#0"
      ]
    },
    "6125": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "6128": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)"
      ]
    },
    "6129": {
      "error": "BAD_DEBT_USD",
      "op": "assert // BAD_DEBT_USD",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "6130": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "collateralUSD#0"
      ]
    },
    "6131": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "collateralUSD#0",
        "10000"
      ]
    },
    "6133": {
      "op": "mulw",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0"
      ]
    },
    "6134": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hCR#0",
        "lCR#0",
        "debtUSDv#0"
      ]
    },
    "6136": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0"
      ]
    },
    "6137": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "0"
      ]
    },
    "6138": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "6140": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "6141": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "maybe_value%3#0"
      ]
    },
    "6142": {
      "op": "<=",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%9#0"
      ]
    },
    "6143": {
      "error": "NOT_LIQUIDATABLE",
      "op": "assert // NOT_LIQUIDATABLE",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6144": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "6145": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6146": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "6147": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%4#0"
      ]
    },
    "6148": {
      "op": "btoi",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "baseAssetId#0"
      ]
    },
    "6149": {
      "op": "frame_bury 0",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6151": {
      "op": "frame_dig -3",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ]
    },
    "6153": {
      "op": "gtxns Sender",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%10#0"
      ]
    },
    "6155": {
      "op": "txn Sender",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "6157": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%12#0"
      ]
    },
    "6158": {
      "op": "bz liquidatePartialASA_bool_false@9",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6161": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ]
    },
    "6163": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%13#0"
      ]
    },
    "6165": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "6167": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%15#0"
      ]
    },
    "6168": {
      "op": "bz liquidatePartialASA_bool_false@9",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6171": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ]
    },
    "6173": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%16#0"
      ]
    },
    "6175": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%16#0",
        "baseAssetId#0"
      ]
    },
    "6177": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%17#0"
      ]
    },
    "6178": {
      "op": "bz liquidatePartialASA_bool_false@9",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6181": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ]
    },
    "6183": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%18#0"
      ]
    },
    "6185": {
      "op": "frame_dig -2",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "tmp%18#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%18#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6187": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%19#0"
      ]
    },
    "6188": {
      "op": "bz liquidatePartialASA_bool_false@9",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6191": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ]
    },
    "6192": {
      "block": "liquidatePartialASA_bool_merge@10",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6193": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "6194": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6195": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "6196": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%5#0"
      ]
    },
    "6197": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "basePrice#0"
      ]
    },
    "6200": {
      "op": "frame_bury 1",
      "defined_out": [
        "basePrice#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6202": {
      "op": "frame_dig 14",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "6204": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ]
    },
    "6205": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "basePrice#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "2"
      ]
    },
    "6207": {
      "op": "/",
      "defined_out": [
        "basePrice#0",
        "closeFactorHalf#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "closeFactorHalf#0"
      ]
    },
    "6208": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "closeFactorHalf#0",
        "liveDebt#0"
      ]
    },
    "6209": {
      "op": "dig 1",
      "defined_out": [
        "basePrice#0",
        "closeFactorHalf#0",
        "closeFactorHalf#0 (copy)",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "closeFactorHalf#0",
        "liveDebt#0",
        "closeFactorHalf#0 (copy)"
      ]
    },
    "6211": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "closeFactorHalf#0 (copy)",
        "closeFactorHalf#0"
      ]
    },
    "6213": {
      "op": "select",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ]
    },
    "6214": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "maxRepayAllowed#0"
      ]
    },
    "6215": {
      "op": "frame_bury 3",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ]
    },
    "6217": {
      "op": "intc_0 // 0",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ]
    },
    "6218": {
      "op": "frame_bury 5",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ]
    },
    "6220": {
      "op": "frame_dig -2",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "repayBaseAmount#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6222": {
      "op": "<",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%21#0"
      ]
    },
    "6223": {
      "op": "frame_dig -2",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "repayUsed#2",
        "tmp%21#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%21#0",
        "repayUsed#2"
      ]
    },
    "6225": {
      "op": "frame_bury 7",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "repayUsed#2",
        "tmp%21#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%21#0"
      ]
    },
    "6227": {
      "op": "bz liquidatePartialASA_after_if_else@12",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6230": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6232": {
      "op": "frame_dig 3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "maxRepayAllowed#0"
      ]
    },
    "6234": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "maxRepayAllowed#0 (copy)",
        "refundAmount#0",
        "repayBaseAmount#0 (copy)",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "maxRepayAllowed#0 (copy)",
        "maxRepayAllowed#0 (copy)"
      ]
    },
    "6235": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayBaseAmount#0 (copy)",
        "maxRepayAllowed#0 (copy)"
      ]
    },
    "6237": {
      "op": "-",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ]
    },
    "6238": {
      "op": "frame_bury 5",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2"
      ]
    },
    "6240": {
      "op": "frame_bury 7",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6242": {
      "block": "liquidatePartialASA_after_if_else@12",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2"
      ]
    },
    "6244": {
      "op": "frame_dig 1",
      "defined_out": [
        "basePrice#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "basePrice#0"
      ]
    },
    "6246": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "hRU#0",
        "lRU#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRU#0",
        "lRU#0"
      ]
    },
    "6247": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "hRU#0",
        "lRU#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRU#0",
        "lRU#0",
        "1000000"
      ]
    },
    "6249": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0"
      ]
    },
    "6250": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "0"
      ]
    },
    "6251": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "0",
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "0",
        "\"liq_bonus_bps\""
      ]
    },
    "6253": {
      "op": "app_global_get_ex",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "maybe_exists%6#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "bonusBps#0",
        "maybe_exists%6#0"
      ]
    },
    "6254": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "bonusBps#0"
      ]
    },
    "6255": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "basePrice#0",
        "bonusBps#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "bonusBps#0",
        "10000"
      ]
    },
    "6257": {
      "op": "+",
      "defined_out": [
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2",
        "tmp%22#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "tmp%22#0"
      ]
    },
    "6258": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "hSZ#0",
        "lSZ#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSZ#0",
        "lSZ#0"
      ]
    },
    "6259": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSZ#0",
        "lSZ#0",
        "10000"
      ]
    },
    "6261": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0"
      ]
    },
    "6262": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "basePrice#0",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "\"accepted_collaterals\""
      ]
    },
    "6264": {
      "op": "frame_dig 11",
      "defined_out": [
        "\"accepted_collaterals\"",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "\"accepted_collaterals\"",
        "collTok#0"
      ]
    },
    "6266": {
      "op": "concat",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUSD#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#2"
      ]
    },
    "6267": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUSD#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "6268": {
      "op": "box_get",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "repayUsed#2",
        "seizeUSD#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "6269": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#2",
        "maybe_value%0#1"
      ]
    },
    "6270": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUSD#0",
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#2",
        "tmp%1#1"
      ]
    },
    "6273": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUSD#0",
        "tmp%0#2",
        "underlyingPrice#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#2",
        "underlyingPrice#0"
      ]
    },
    "6276": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#2",
        "underlyingPrice#0",
        "seizeUSD#0"
      ]
    },
    "6278": {
      "op": "intc 5 // 1000000",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#2",
        "underlyingPrice#0",
        "seizeUSD#0",
        "1000000"
      ]
    },
    "6280": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "hUnd#0",
        "lUnd#0",
        "repayUsed#2",
        "tmp%0#2",
        "underlyingPrice#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#2",
        "underlyingPrice#0",
        "hUnd#0",
        "lUnd#0"
      ]
    },
    "6281": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#2",
        "hUnd#0",
        "lUnd#0",
        "underlyingPrice#0"
      ]
    },
    "6283": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#2",
        "seizeUnderlying#0"
      ]
    },
    "6284": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%0#2"
      ]
    },
    "6285": {
      "op": "box_get",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "collateral#0",
        "maybe_exists%0#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "6286": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "collateral#0"
      ]
    },
    "6287": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "basePrice#0",
        "collTok#0",
        "collateral#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "collateral#0",
        "32"
      ]
    },
    "6289": {
      "op": "extract_uint64",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%3#1"
      ]
    },
    "6290": {
      "op": "frame_dig -1",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "lstAppId#0 (copy)",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%3#1",
        "lstAppId#0 (copy)"
      ]
    },
    "6292": {
      "op": "==",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%4#1"
      ]
    },
    "6293": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6294": {
      "op": "itxn_begin"
    },
    "6295": {
      "op": "bytec 18 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "6297": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6299": {
      "op": "frame_dig -1",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6301": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6303": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "appl"
      ]
    },
    "6305": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6307": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "1000"
      ]
    },
    "6308": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6310": {
      "op": "itxn_submit"
    },
    "6311": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "awst_tmp%0#0"
      ]
    },
    "6313": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6314": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "awst_tmp%0#0",
        "tmp%5#1"
      ]
    },
    "6317": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "awst_tmp%0#0"
      ]
    },
    "6318": {
      "op": "extract 0 4",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%6#1"
      ]
    },
    "6321": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%6#1",
        "0x151f7c75"
      ]
    },
    "6322": {
      "op": "==",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%7#0"
      ]
    },
    "6323": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1"
      ]
    },
    "6324": {
      "op": "btoi",
      "defined_out": [
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6325": {
      "op": "itxn_begin"
    },
    "6326": {
      "op": "bytec 19 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "6328": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6330": {
      "op": "frame_dig -1",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6332": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6334": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "appl"
      ]
    },
    "6336": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6338": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "1000"
      ]
    },
    "6339": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6341": {
      "op": "itxn_submit"
    },
    "6342": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0"
      ]
    },
    "6344": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6345": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0",
        "tmp%9#1"
      ]
    },
    "6348": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "awst_tmp%1#0"
      ]
    },
    "6349": {
      "op": "extract 0 4",
      "defined_out": [
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%10#1",
        "tmp%9#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "tmp%10#1"
      ]
    },
    "6352": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "tmp%10#1",
        "0x151f7c75"
      ]
    },
    "6353": {
      "op": "==",
      "defined_out": [
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%11#1",
        "tmp%9#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "tmp%11#1"
      ]
    },
    "6354": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1"
      ]
    },
    "6355": {
      "op": "btoi",
      "defined_out": [
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "total#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "total#0"
      ]
    },
    "6356": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "total#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6358": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "hL#0",
        "lL#0",
        "repayUsed#2",
        "total#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "total#0",
        "hL#0",
        "lL#0"
      ]
    },
    "6359": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hL#0",
        "lL#0",
        "total#0"
      ]
    },
    "6361": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6362": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "seizeLST#1"
      ]
    },
    "6363": {
      "op": "frame_bury 8",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6365": {
      "op": "frame_dig 12",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "collLSTBal#0"
      ]
    },
    "6367": {
      "op": ">",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%13#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%13#1"
      ]
    },
    "6368": {
      "op": "bz liquidatePartialASA_after_if_else@25",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6371": {
      "op": "frame_dig 12",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6373": {
      "op": "frame_bury 8",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6375": {
      "block": "liquidatePartialASA_after_if_else@25",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6377": {
      "op": "dup",
      "defined_out": [
        "seizeLST#1",
        "seizeLST#1 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "seizeLST#1 (copy)"
      ]
    },
    "6378": {
      "error": "NOTHING_TO_SEIZE",
      "op": "assert // NOTHING_TO_SEIZE",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6379": {
      "op": "itxn_begin"
    },
    "6380": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6382": {
      "op": "frame_dig 10",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "6384": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "32"
      ]
    },
    "6386": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6387": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6388": {
      "op": "frame_bury 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6390": {
      "op": "dig 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "seizeLST#1 (copy)"
      ]
    },
    "6392": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6394": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6396": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6398": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "4"
      ]
    },
    "6399": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6401": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "1000"
      ]
    },
    "6402": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6404": {
      "op": "itxn_submit"
    },
    "6405": {
      "op": "frame_dig 12",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "collLSTBal#0"
      ]
    },
    "6407": {
      "op": "dig 1",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "collLSTBal#0",
        "seizeLST#1 (copy)"
      ]
    },
    "6409": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingLST#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "remainingLST#0"
      ]
    },
    "6410": {
      "op": "frame_bury 6",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingLST#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6412": {
      "op": "frame_dig 14",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "rec#0",
        "remainingLST#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "liveDebt#0"
      ]
    },
    "6414": {
      "op": "frame_dig 7",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "liveDebt#0",
        "repayUsed#2"
      ]
    },
    "6416": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2",
        "repayUsed#2 (copy)",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "liveDebt#0",
        "repayUsed#2 (copy)",
        "repayUsed#2 (copy)"
      ]
    },
    "6417": {
      "op": "cover 3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "seizeLST#1",
        "liveDebt#0",
        "repayUsed#2 (copy)"
      ]
    },
    "6419": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "seizeLST#1",
        "newDebtBase#0"
      ]
    },
    "6420": {
      "op": "frame_bury 4",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "seizeLST#1"
      ]
    },
    "6422": {
      "op": "frame_dig 11",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "seizeLST#1",
        "collTok#0"
      ]
    },
    "6424": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "seizeLST#1"
      ]
    },
    "6425": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2"
      ]
    },
    "6428": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "0"
      ]
    },
    "6429": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "0",
        "\"total_borrows\""
      ]
    },
    "6431": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "newDebtBase#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "6432": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "maybe_value%7#0"
      ]
    },
    "6433": {
      "op": "dig 1",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "maybe_value%7#0",
        "repayUsed#2 (copy)"
      ]
    },
    "6435": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "new_state_value%0#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "new_state_value%0#0"
      ]
    },
    "6436": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "6438": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "6439": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2"
      ]
    },
    "6440": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6443": {
      "op": "frame_dig 5",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6445": {
      "op": "bz liquidatePartialASA_after_if_else@16",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6448": {
      "op": "itxn_begin"
    },
    "6449": {
      "op": "txn Sender",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6451": {
      "op": "frame_dig 5",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "refundAmount#0"
      ]
    },
    "6453": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "refundAmount#0",
        "refundAmount#0 (copy)",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "refundAmount#0 (copy)",
        "refundAmount#0 (copy)"
      ]
    },
    "6454": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "refundAmount#0 (copy)"
      ]
    },
    "6456": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6458": {
      "op": "frame_dig 0",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "baseAssetId#0"
      ]
    },
    "6460": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6462": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6464": {
      "op": "intc_3 // 4",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "4"
      ]
    },
    "6465": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6467": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "1000"
      ]
    },
    "6468": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6470": {
      "op": "itxn_submit"
    },
    "6471": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6474": {
      "block": "liquidatePartialASA_after_if_else@16",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "newDebtBase#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0"
      ]
    },
    "6476": {
      "op": "bnz liquidatePartialASA_else_body@21",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6479": {
      "op": "frame_dig 6",
      "defined_out": [
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6481": {
      "op": "bz liquidatePartialASA_after_if_else@20",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6484": {
      "op": "itxn_begin"
    },
    "6485": {
      "op": "frame_dig 6",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6487": {
      "op": "dup",
      "defined_out": [
        "newDebtBase#0",
        "remainingLST#0",
        "remainingLST#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "remainingLST#0 (copy)"
      ]
    },
    "6488": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6490": {
      "op": "frame_dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6492": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6494": {
      "op": "frame_dig -4",
      "defined_out": [
        "debtor#0 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "debtor#0 (copy)"
      ]
    },
    "6496": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6498": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "4"
      ]
    },
    "6499": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6501": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "1000"
      ]
    },
    "6502": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6504": {
      "op": "itxn_submit"
    },
    "6505": {
      "op": "frame_dig 11",
      "defined_out": [
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "collTok#0"
      ]
    },
    "6507": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "remainingLST#0"
      ]
    },
    "6508": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6511": {
      "block": "liquidatePartialASA_after_if_else@20",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#0"
      ]
    },
    "6513": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "{box_del}"
      ]
    },
    "6514": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6515": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "6516": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "6518": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "6519": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0"
      ]
    },
    "6520": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "1"
      ]
    },
    "6521": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%1#0"
      ]
    },
    "6522": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "6524": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "6525": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6526": {
      "block": "liquidatePartialASA_after_if_else@22",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%2#0"
      ]
    },
    "6529": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "6531": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "6532": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6533": {
      "retsub": true,
      "op": "retsub"
    },
    "6534": {
      "block": "liquidatePartialASA_else_body@21",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 13",
      "defined_out": [
        "rec#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1"
      ]
    },
    "6536": {
      "op": "dup",
      "defined_out": [
        "rec#1",
        "rec#1 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1",
        "rec#1 (copy)"
      ]
    },
    "6537": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#1",
        "tmp%28#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1",
        "tmp%28#0"
      ]
    },
    "6540": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "rec#1"
      ]
    },
    "6541": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#1",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "6544": {
      "op": "frame_dig 6",
      "defined_out": [
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "remainingLST#0"
      ]
    },
    "6546": {
      "op": "itob",
      "defined_out": [
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ]
    },
    "6547": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "6548": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6549": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "6550": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0"
      ]
    },
    "6551": {
      "op": "frame_dig 4",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "newDebtBase#0"
      ]
    },
    "6553": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "6554": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "6555": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "6557": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "6558": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "maybe_value%10#0"
      ]
    },
    "6559": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "6560": {
      "op": "frame_dig 7",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "repayUsed#2"
      ]
    },
    "6562": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "6563": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%28#0",
        "tmp%29#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "to_encode%0#0"
      ]
    },
    "6565": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "6566": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "6567": {
      "op": "pushbytes 0x04",
      "defined_out": [
        "0x04",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0",
        "0x04"
      ]
    },
    "6570": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "6571": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%4#0"
      ]
    },
    "6572": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "6573": {
      "op": "uncover 6",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%28#0"
      ]
    },
    "6575": {
      "op": "uncover 6",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "6577": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "6578": {
      "op": "uncover 5",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "6580": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "6581": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "6582": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "6583": {
      "op": "uncover 3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%9#0"
      ]
    },
    "6585": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "6586": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "6588": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "6589": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%2#0"
      ]
    },
    "6590": {
      "op": "concat",
      "defined_out": [
        "newDebtBase#0",
        "newRec#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newRec#0"
      ]
    },
    "6591": {
      "op": "frame_dig 9",
      "defined_out": [
        "newDebtBase#0",
        "newRec#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ]
    },
    "6593": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#0",
        "newRec#0"
      ]
    },
    "6594": {
      "op": "box_put",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6595": {
      "op": "b liquidatePartialASA_after_if_else@22"
    },
    "6598": {
      "block": "liquidatePartialASA_bool_false@9",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ]
    },
    "6599": {
      "op": "b liquidatePartialASA_bool_merge@10"
    },
    "6602": {
      "block": "liquidatePartialASA_bool_false@3",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ]
    },
    "6603": {
      "op": "b liquidatePartialASA_bool_merge@4"
    },
    "6606": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanStatus",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "getLoanStatus",
      "stack_in": [],
      "op": "proto 1 7"
    },
    "6609": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "6611": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "6613": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6614": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "6615": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6616": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6618": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6619": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "6620": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0"
      ]
    },
    "6621": {
      "op": "dup",
      "defined_out": [
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "record#0",
        "record#0 (copy)"
      ]
    },
    "6622": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralTokenId#0"
      ]
    },
    "6625": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "6627": {
      "op": "swap",
      "stack_out": [
        "record#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "6628": {
      "op": "concat",
      "stack_out": [
        "record#0",
        "tmp%0#0"
      ]
    },
    "6629": {
      "op": "box_get",
      "defined_out": [
        "collateralRecord#0",
        "maybe_exists%0#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralRecord#0",
        "maybe_exists%0#0"
      ]
    },
    "6630": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0",
        "collateralRecord#0"
      ]
    },
    "6631": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "collateralRecord#0",
        "record#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "record#0",
        "collateralRecord#0",
        "{accrueMarket}"
      ]
    },
    "6634": {
      "op": "pop",
      "stack_out": [
        "record#0",
        "collateralRecord#0"
      ]
    },
    "6635": {
      "op": "swap",
      "stack_out": [
        "collateralRecord#0",
        "record#0"
      ]
    },
    "6636": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ]
    },
    "6639": {
      "op": "dup",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "6640": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "6642": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "6643": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "6644": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "6646": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "maybe_exists%2#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "liqBps#0",
        "maybe_exists%2#0"
      ]
    },
    "6647": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "liqBps#0"
      ]
    },
    "6648": {
      "op": "uncover 2",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "record#0"
      ]
    },
    "6650": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0"
      ]
    },
    "6653": {
      "op": "uncover 4",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralRecord#0"
      ]
    },
    "6655": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralRecord#0",
        "32"
      ]
    },
    "6657": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "6658": {
      "op": "dig 3"
    },
    "6660": {
      "op": "swap",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "debt#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralAmount#0 (copy)",
        "tmp%6#0"
      ]
    },
    "6661": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0"
      ]
    },
    "6664": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)"
      ]
    },
    "6665": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "10000"
      ]
    },
    "6667": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%7#0"
      ]
    },
    "6668": {
      "op": "dig 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "debt#0 (copy)",
        "liqBps#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%7#0",
        "debt#0 (copy)"
      ]
    },
    "6670": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0"
      ]
    },
    "6671": {
      "op": "dup",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)"
      ]
    },
    "6672": {
      "op": "dig 3",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "liqBps#0 (copy)"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "6674": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0"
      ]
    },
    "6675": {
      "op": "dig 1",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)"
      ]
    },
    "6677": {
      "op": "dig 4",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "6679": {
      "op": ">",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForBuyout#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "6680": {
      "op": "uncover 6",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0"
      ]
    },
    "6682": {
      "op": "uncover 4",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0"
      ]
    },
    "6684": {
      "op": "uncover 6",
      "stack_out": [
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0"
      ]
    },
    "6686": {
      "op": "uncover 5",
      "stack_out": [
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0"
      ]
    },
    "6688": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0"
      ]
    },
    "6690": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0"
      ]
    },
    "6692": {
      "op": "uncover 6",
      "stack_out": [
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "6694": {
      "retsub": true,
      "op": "retsub"
    },
    "6695": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "params": {
        "collateralTokenId#0": "bytes",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64"
      },
      "block": "calculateCollateralValueUSD",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "6698": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "6700": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "6702": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6703": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "6704": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6705": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "6707": {
      "error": "unknown collateral",
      "op": "assert // unknown collateral",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6708": {
      "op": "dup",
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "6709": {
      "op": "box_get",
      "defined_out": [
        "collateralInfo#0",
        "maybe_exists%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0",
        "maybe_exists%0#0"
      ]
    },
    "6710": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0"
      ]
    },
    "6711": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralInfo#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0",
        "32"
      ]
    },
    "6713": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "6714": {
      "op": "frame_dig -1",
      "defined_out": [
        "lstApp#0 (copy)",
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%2#0",
        "lstApp#0 (copy)"
      ]
    },
    "6716": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%3#0"
      ]
    },
    "6717": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6718": {
      "op": "itxn_begin"
    },
    "6719": {
      "op": "bytec 18 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "6721": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6723": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#1",
        "lstApp#0 (copy)"
      ]
    },
    "6725": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6727": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "appl"
      ]
    },
    "6729": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6731": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "1000"
      ]
    },
    "6732": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6734": {
      "op": "itxn_submit"
    },
    "6735": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0"
      ]
    },
    "6737": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6738": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "6741": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "6742": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "6745": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "6746": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "6747": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0"
      ]
    },
    "6748": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "6749": {
      "op": "itxn_begin"
    },
    "6750": {
      "op": "bytec 19 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "6752": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "6754": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "lstApp#0 (copy)"
      ]
    },
    "6756": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "6758": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "6760": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "6762": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "6763": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "6765": {
      "op": "itxn_submit"
    },
    "6766": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "6768": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6769": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "6772": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "awst_tmp%1#0"
      ]
    },
    "6773": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "6776": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "6777": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "6778": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0"
      ]
    },
    "6779": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "6780": {
      "op": "frame_dig -2",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateralAmount#0 (copy)",
        "tmp%0#1",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "6782": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0"
      ]
    },
    "6783": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "hC#0",
        "lC#0",
        "circulatingExternalLST#0"
      ]
    },
    "6785": {
      "op": "divw",
      "defined_out": [
        "tmp%0#1",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "underlyingCollateral#0"
      ]
    },
    "6786": {
      "op": "swap",
      "stack_out": [
        "underlyingCollateral#0",
        "tmp%0#1"
      ]
    },
    "6787": {
      "op": "box_get",
      "defined_out": [
        "lstCollateral#0",
        "maybe_exists%0#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "lstCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "6788": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "underlyingCollateral#0",
        "lstCollateral#0"
      ]
    },
    "6789": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "baseTokenId#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "baseTokenId#0"
      ]
    },
    "6792": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenPrice#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "baseTokenPrice#0"
      ]
    },
    "6795": {
      "op": "mulw",
      "defined_out": [
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "hU#0",
        "lU#0"
      ]
    },
    "6796": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "hU#0",
        "lU#0",
        "1000000"
      ]
    },
    "6798": {
      "op": "divw",
      "defined_out": [
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralUSD#0"
      ]
    },
    "6799": {
      "retsub": true,
      "op": "retsub"
    },
    "6800": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.pickupASARewards",
      "params": {},
      "block": "pickupASARewards",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "6803": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "rawReward#0"
      ]
    },
    "6805": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0"
      ]
    },
    "6807": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "0"
      ]
    },
    "6808": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "6809": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6810": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "6811": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%1#0"
      ]
    },
    "6812": {
      "error": "Only admin can pickup rewards",
      "op": "assert // Only admin can pickup rewards",
      "stack_out": [
        "rawReward#0"
      ]
    },
    "6813": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "0"
      ]
    },
    "6814": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "rawReward#0",
        "0",
        "\"contract_state\""
      ]
    },
    "6816": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "rawReward#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6817": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "maybe_value%1#0"
      ]
    },
    "6818": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%2#0"
      ]
    },
    "6819": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%2#0",
        "1"
      ]
    },
    "6820": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%3#0"
      ]
    },
    "6821": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "rawReward#0"
      ]
    },
    "6822": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "0"
      ]
    },
    "6823": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "rawReward#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6824": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "rawReward#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6825": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "maybe_value%2#0"
      ]
    },
    "6826": {
      "op": "btoi",
      "defined_out": [
        "baseAsset#0"
      ],
      "stack_out": [
        "rawReward#0",
        "baseAsset#0"
      ]
    },
    "6827": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "rawReward#0",
        "baseAsset#0",
        "tmp%4#0"
      ]
    },
    "6829": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "tmp%4#0",
        "baseAsset#0"
      ]
    },
    "6830": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "assetBalance#0",
        "check%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "check%0#0"
      ]
    },
    "6832": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "check%0#0",
        "assetBalance#0"
      ]
    },
    "6833": {
      "op": "dup",
      "stack_out": [
        "rawReward#0",
        "check%0#0",
        "assetBalance#0",
        "assetBalance#0 (copy)"
      ]
    },
    "6834": {
      "op": "uncover 2",
      "defined_out": [
        "assetBalance#0",
        "check%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "assetBalance#0",
        "check%0#0"
      ]
    },
    "6836": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "assetBalance#0"
      ]
    },
    "6837": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "assetBalance#0",
        "0"
      ]
    },
    "6838": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0",
        "assetBalance#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "assetBalance#0",
        "0",
        "\"cash_on_hand\""
      ]
    },
    "6840": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetBalance#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "assetBalance#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "6841": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "assetBalance#0",
        "maybe_value%3#0"
      ]
    },
    "6842": {
      "op": "<=",
      "defined_out": [
        "assetBalance#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "tmp%5#0"
      ]
    },
    "6843": {
      "op": "bz pickupASARewards_after_if_else@2",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0"
      ]
    },
    "6846": {
      "retsub": true,
      "op": "retsub"
    },
    "6847": {
      "block": "pickupASARewards_after_if_else@2",
      "stack_in": [
        "rawReward#0",
        "assetBalance#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "0"
      ]
    },
    "6848": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "0",
        "\"cash_on_hand\""
      ]
    },
    "6850": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "6851": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "maybe_value%4#0"
      ]
    },
    "6852": {
      "op": "frame_dig 1",
      "defined_out": [
        "assetBalance#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "maybe_value%4#0",
        "assetBalance#0"
      ]
    },
    "6854": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "assetBalance#0",
        "maybe_value%4#0"
      ]
    },
    "6855": {
      "op": "-",
      "defined_out": [
        "assetBalance#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0"
      ]
    },
    "6856": {
      "op": "dup",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "rawReward#0"
      ]
    },
    "6857": {
      "op": "frame_bury 0",
      "defined_out": [
        "assetBalance#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0"
      ]
    },
    "6859": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "assetBalance#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "10000"
      ]
    },
    "6861": {
      "op": "<=",
      "defined_out": [
        "assetBalance#0",
        "rawReward#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "tmp%6#0"
      ]
    },
    "6862": {
      "op": "bz pickupASARewards_after_if_else@4",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0"
      ]
    },
    "6865": {
      "retsub": true,
      "op": "retsub"
    },
    "6866": {
      "block": "pickupASARewards_after_if_else@4",
      "stack_in": [
        "rawReward#0",
        "assetBalance#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0"
      ]
    },
    "6868": {
      "op": "dup",
      "defined_out": [
        "rawReward#0",
        "rawReward#0 (copy)"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "rawReward#0 (copy)"
      ]
    },
    "6869": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0"
      ]
    },
    "6872": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "0"
      ]
    },
    "6873": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\"",
        "0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "0",
        "\"commission_percentage\""
      ]
    },
    "6875": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "6876": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "maybe_value%5#0"
      ]
    },
    "6877": {
      "op": "dig 1",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "maybe_value%5#0",
        "rawReward#0 (copy)"
      ]
    },
    "6879": {
      "op": "mulw",
      "defined_out": [
        "hi#0",
        "lo#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "hi#0",
        "lo#0"
      ]
    },
    "6880": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "hi#0",
        "lo#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "hi#0",
        "lo#0",
        "100"
      ]
    },
    "6882": {
      "op": "divw",
      "defined_out": [
        "commission#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0"
      ]
    },
    "6883": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "0"
      ]
    },
    "6884": {
      "op": "bytec 17 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "0",
        "commission#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "0",
        "\"current_accumulated_commission\""
      ]
    },
    "6886": {
      "op": "app_global_get_ex",
      "defined_out": [
        "commission#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "6887": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%6#0"
      ]
    },
    "6888": {
      "op": "dig 1",
      "defined_out": [
        "commission#0",
        "commission#0 (copy)",
        "maybe_value%6#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%6#0",
        "commission#0 (copy)"
      ]
    },
    "6890": {
      "op": "+",
      "defined_out": [
        "commission#0",
        "new_state_value%0#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%0#0"
      ]
    },
    "6891": {
      "op": "bytec 17 // \"current_accumulated_commission\"",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%0#0",
        "\"current_accumulated_commission\""
      ]
    },
    "6893": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "\"current_accumulated_commission\"",
        "new_state_value%0#0"
      ]
    },
    "6894": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0"
      ]
    },
    "6895": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "0"
      ]
    },
    "6896": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\"",
        "0",
        "commission#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "0",
        "\"total_commission_earned\""
      ]
    },
    "6898": {
      "op": "app_global_get_ex",
      "defined_out": [
        "commission#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "6899": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%7#0"
      ]
    },
    "6900": {
      "op": "dig 1",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%7#0",
        "commission#0 (copy)"
      ]
    },
    "6902": {
      "op": "+",
      "defined_out": [
        "commission#0",
        "new_state_value%1#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%1#0"
      ]
    },
    "6903": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%1#0",
        "\"total_commission_earned\""
      ]
    },
    "6905": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "\"total_commission_earned\"",
        "new_state_value%1#0"
      ]
    },
    "6906": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0"
      ]
    },
    "6907": {
      "op": "-",
      "defined_out": [
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0"
      ]
    },
    "6908": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "0"
      ]
    },
    "6909": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\"",
        "0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "0",
        "\"total_additional_rewards\""
      ]
    },
    "6911": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "6912": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "maybe_value%8#0"
      ]
    },
    "6913": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%8#0",
        "netReward#0",
        "netReward#0 (copy)",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "maybe_value%8#0",
        "netReward#0 (copy)"
      ]
    },
    "6915": {
      "op": "+",
      "defined_out": [
        "netReward#0",
        "new_state_value%2#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "new_state_value%2#0"
      ]
    },
    "6916": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "new_state_value%2#0",
        "\"total_additional_rewards\""
      ]
    },
    "6918": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "\"total_additional_rewards\"",
        "new_state_value%2#0"
      ]
    },
    "6919": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0"
      ]
    },
    "6920": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "0"
      ]
    },
    "6921": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "6922": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "6923": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "maybe_value%9#0"
      ]
    },
    "6924": {
      "op": "+",
      "defined_out": [
        "new_state_value%3#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "new_state_value%3#0"
      ]
    },
    "6925": {
      "op": "bytec_3 // \"total_deposits\"",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "new_state_value%3#0",
        "\"total_deposits\""
      ]
    },
    "6926": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "\"total_deposits\"",
        "new_state_value%3#0"
      ]
    },
    "6927": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0"
      ]
    },
    "6928": {
      "retsub": true,
      "op": "retsub"
    },
    "6929": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.migrateCollateralTokenId",
      "params": {
        "collateralTokenId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "migrateCollateralTokenId",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "6932": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6934": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "6935": {
      "op": "bytec 14 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "6937": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6938": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "6939": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "6940": {
      "error": "Only migration admin can migrate collateral",
      "op": "assert // Only migration admin can migrate collateral",
      "stack_out": []
    },
    "6941": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#0 (copy)"
      ]
    },
    "6943": {
      "op": "itob",
      "defined_out": [
        "acKey#0"
      ],
      "stack_out": [
        "acKey#0"
      ]
    },
    "6944": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "acKey#0"
      ],
      "stack_out": [
        "acKey#0",
        "\"accepted_collaterals\""
      ]
    },
    "6946": {
      "op": "swap",
      "stack_out": [
        "\"accepted_collaterals\"",
        "acKey#0"
      ]
    },
    "6947": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "6948": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6949": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "6951": {
      "error": "collateral not found",
      "op": "assert // collateral not found",
      "stack_out": []
    },
    "6952": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "6954": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%3#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "6956": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "check%0#0"
      ]
    },
    "6958": {
      "op": "swap",
      "stack_out": [
        "check%0#0",
        "collateralBalance#0"
      ]
    },
    "6959": {
      "op": "dup",
      "stack_out": [
        "check%0#0",
        "collateralBalance#0",
        "collateralBalance#0 (copy)"
      ]
    },
    "6960": {
      "op": "uncover 2",
      "defined_out": [
        "check%0#0",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "collateralBalance#0",
        "check%0#0"
      ]
    },
    "6962": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "collateralBalance#0",
        "collateralBalance#0"
      ]
    },
    "6963": {
      "op": "bz migrateCollateralTokenId_after_if_else@3",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "6966": {
      "op": "itxn_begin"
    },
    "6967": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralBalance#0",
        "0"
      ]
    },
    "6968": {
      "op": "bytec 14 // \"migration_admin\"",
      "stack_out": [
        "collateralBalance#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "6970": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralBalance#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6971": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%2#0"
      ]
    },
    "6972": {
      "op": "frame_dig 0",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%2#0",
        "collateralBalance#0"
      ]
    },
    "6974": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%2#0"
      ]
    },
    "6976": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%2#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "6978": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%2#0"
      ]
    },
    "6980": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "6982": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "4"
      ]
    },
    "6983": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "6985": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "1000"
      ]
    },
    "6986": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "6988": {
      "op": "itxn_submit"
    },
    "6989": {
      "block": "migrateCollateralTokenId_after_if_else@3",
      "stack_in": [
        "collateralBalance#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "6990": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.migrateContract",
      "params": {
        "feeTxn#0": "uint64"
      },
      "block": "migrateContract",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "6993": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6995": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "6996": {
      "op": "bytec 14 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "6998": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6999": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "7000": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "7001": {
      "error": "Only migration admin can migrate",
      "op": "assert // Only migration admin can migrate",
      "stack_out": []
    },
    "7002": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "7004": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setContractState",
      "op": "callsub setContractState",
      "stack_out": []
    },
    "7007": {
      "op": "frame_dig -1",
      "defined_out": [
        "feeTxn#0 (copy)"
      ],
      "stack_out": [
        "feeTxn#0 (copy)"
      ]
    },
    "7009": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "7011": {
      "op": "pushint 500000 // 500000",
      "defined_out": [
        "500000",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "500000"
      ]
    },
    "7015": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "7016": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "7017": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "7018": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "7020": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "7021": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "7022": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "7023": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "lstAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%4#0"
      ]
    },
    "7025": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "lstAsset#0"
      ]
    },
    "7026": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "lstBalance#0"
      ],
      "stack_out": [
        "lstBalance#0",
        "check%0#0"
      ]
    },
    "7028": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "lstBalance#0"
      ]
    },
    "7029": {
      "op": "itxn_begin"
    },
    "7030": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstBalance#0",
        "0"
      ]
    },
    "7031": {
      "op": "bytec 14 // \"migration_admin\"",
      "stack_out": [
        "lstBalance#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7033": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstBalance#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstBalance#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "7034": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstBalance#0",
        "maybe_value%2#0"
      ]
    },
    "7035": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstBalance#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "7036": {
      "op": "bytec 10 // \"lst_token_id\"",
      "stack_out": [
        "lstBalance#0",
        "maybe_value%2#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "7038": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstBalance#0",
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstBalance#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "7039": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstBalance#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "7040": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstBalance#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstBalance#0",
        "maybe_value%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "7041": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstBalance#0"
      ]
    },
    "7043": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "7045": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "7047": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "7049": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "7050": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "7052": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "7053": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "7055": {
      "op": "itxn_submit"
    },
    "7056": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "7057": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "7058": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "7059": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "7060": {
      "op": "btoi",
      "defined_out": [
        "baseAsset#0"
      ],
      "stack_out": [
        "baseAsset#0"
      ]
    },
    "7061": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseAsset#0",
        "tmp%5#0"
      ]
    },
    "7063": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "baseAsset#0"
      ]
    },
    "7064": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "assetBalance#0",
        "check%1#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "check%1#0"
      ]
    },
    "7066": {
      "op": "swap",
      "stack_out": [
        "check%1#0",
        "assetBalance#0"
      ]
    },
    "7067": {
      "op": "dup",
      "stack_out": [
        "check%1#0",
        "assetBalance#0",
        "assetBalance#0 (copy)"
      ]
    },
    "7068": {
      "op": "uncover 2",
      "defined_out": [
        "assetBalance#0",
        "check%1#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "assetBalance#0",
        "check%1#0"
      ]
    },
    "7070": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "assetBalance#0",
        "assetBalance#0"
      ]
    },
    "7071": {
      "op": "bz migrateContract_after_if_else@4",
      "stack_out": [
        "assetBalance#0"
      ]
    },
    "7074": {
      "op": "itxn_begin"
    },
    "7075": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "0"
      ]
    },
    "7076": {
      "op": "bytec 14 // \"migration_admin\"",
      "stack_out": [
        "assetBalance#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7078": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetBalance#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "7079": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0"
      ]
    },
    "7080": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "7081": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7082": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetBalance#0",
        "maybe_exists%6#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "7083": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "7084": {
      "op": "btoi",
      "defined_out": [
        "assetBalance#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "7085": {
      "op": "frame_dig 0",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "assetBalance#0"
      ]
    },
    "7087": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "7089": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0"
      ]
    },
    "7091": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "assetBalance#0"
      ]
    },
    "7093": {
      "op": "intc_3 // 4",
      "stack_out": [
        "assetBalance#0",
        "4"
      ]
    },
    "7094": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "assetBalance#0"
      ]
    },
    "7096": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "assetBalance#0",
        "1000"
      ]
    },
    "7097": {
      "op": "itxn_field Fee",
      "stack_out": [
        "assetBalance#0"
      ]
    },
    "7099": {
      "op": "itxn_submit"
    },
    "7100": {
      "block": "migrateContract_after_if_else@4",
      "stack_in": [
        "assetBalance#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "assetBalance#0",
        "0"
      ]
    },
    "7101": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "assetBalance#0",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "7103": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "7104": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%7#0"
      ]
    },
    "7105": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0"
      ]
    },
    "7106": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "7107": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7109": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "7110": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0"
      ]
    },
    "7111": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "7112": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "7113": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "7115": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "7116": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%9#0"
      ]
    },
    "7117": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "7118": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "7119": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "7120": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "7121": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%10#0"
      ]
    },
    "7122": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "7123": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "7124": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "7126": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "7127": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%11#0"
      ]
    },
    "7128": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "7129": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0"
      ]
    },
    "7130": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0",
        "\"total_additional_rewards\""
      ]
    },
    "7132": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%12#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "7133": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "maybe_value%12#0"
      ]
    },
    "7134": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "7135": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0"
      ]
    },
    "7136": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0",
        "\"total_commission_earned\""
      ]
    },
    "7138": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%13#0",
        "maybe_value%13#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "7139": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%13#0"
      ]
    },
    "7140": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "7141": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0"
      ]
    },
    "7142": {
      "op": "bytec 17 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0",
        "\"current_accumulated_commission\""
      ]
    },
    "7144": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%14#0",
        "maybe_value%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%14#0",
        "maybe_exists%14#0"
      ]
    },
    "7145": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%14#0"
      ]
    },
    "7146": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "7147": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0"
      ]
    },
    "7148": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "7150": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%15#0",
        "maybe_value%15#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%15#0",
        "maybe_exists%15#0"
      ]
    },
    "7151": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%15#0"
      ]
    },
    "7152": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "7153": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0"
      ]
    },
    "7154": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "7156": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%16#0",
        "maybe_value%16#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%16#0",
        "maybe_exists%16#0"
      ]
    },
    "7157": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%16#0"
      ]
    },
    "7158": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "7159": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0"
      ]
    },
    "7160": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7161": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%17#0",
        "maybe_value%17#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%17#0",
        "maybe_exists%17#0"
      ]
    },
    "7162": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%17#0"
      ]
    },
    "7163": {
      "op": "btoi",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "to_encode%0#0"
      ]
    },
    "7164": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "7165": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0"
      ]
    },
    "7166": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "7168": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%18#0",
        "maybe_value%18#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%18#0",
        "maybe_exists%18#0"
      ]
    },
    "7169": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%18#0"
      ]
    },
    "7170": {
      "op": "btoi",
      "defined_out": [
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "to_encode%1#0"
      ]
    },
    "7171": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ]
    },
    "7172": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0"
      ]
    },
    "7173": {
      "op": "bytec 16 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "7175": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%19#0",
        "maybe_value%19#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%19#0",
        "maybe_exists%19#0"
      ]
    },
    "7176": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%19#0"
      ]
    },
    "7177": {
      "op": "btoi",
      "defined_out": [
        "to_encode%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "to_encode%2#0"
      ]
    },
    "7178": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ]
    },
    "7179": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0"
      ]
    },
    "7180": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0",
        "\"commission_percentage\""
      ]
    },
    "7182": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%20#0",
        "maybe_value%20#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%20#0",
        "maybe_exists%20#0"
      ]
    },
    "7183": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%20#0"
      ]
    },
    "7184": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0"
      ]
    },
    "7185": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "0"
      ]
    },
    "7186": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "0",
        "\"liq_bonus_bps\""
      ]
    },
    "7188": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%21#0",
        "maybe_value%21#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "maybe_value%21#0",
        "maybe_exists%21#0"
      ]
    },
    "7189": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "maybe_value%21#0"
      ]
    },
    "7190": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ]
    },
    "7191": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "0"
      ]
    },
    "7192": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "7194": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%22#0",
        "maybe_value%22#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "maybe_value%22#0",
        "maybe_exists%22#0"
      ]
    },
    "7195": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "maybe_value%22#0"
      ]
    },
    "7196": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ]
    },
    "7197": {
      "op": "uncover 12",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%3#0"
      ]
    },
    "7199": {
      "op": "uncover 12",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "7201": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "7202": {
      "op": "uncover 12",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "7204": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "7205": {
      "op": "uncover 12",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "7207": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "7208": {
      "op": "uncover 7",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%9#0"
      ]
    },
    "7210": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "7211": {
      "op": "uncover 6",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%10#0"
      ]
    },
    "7213": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "7214": {
      "op": "uncover 3",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%13#0"
      ]
    },
    "7216": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%0#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "7217": {
      "op": "uncover 4",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%11#0"
      ]
    },
    "7219": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "7220": {
      "op": "uncover 4",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%8#0"
      ]
    },
    "7222": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "7223": {
      "op": "uncover 7",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%0#0"
      ]
    },
    "7225": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "7226": {
      "op": "uncover 3",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%12#0"
      ]
    },
    "7228": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "7229": {
      "op": "uncover 2",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%14#0"
      ]
    },
    "7231": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "7232": {
      "op": "uncover 2",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%7#0"
      ]
    },
    "7234": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "7235": {
      "op": "uncover 2",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%6#0"
      ]
    },
    "7237": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "7238": {
      "op": "uncover 2",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%5#0"
      ]
    },
    "7240": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0",
        "val_as_bytes%15#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "7241": {
      "op": "swap",
      "stack_out": [
        "assetBalance#0",
        "encoded_tuple_buffer%15#0",
        "val_as_bytes%15#0"
      ]
    },
    "7242": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "7243": {
      "op": "swap"
    },
    "7244": {
      "retsub": true,
      "op": "retsub"
    },
    "7245": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.acceptMigrationASAContract",
      "params": {
        "lstTransferTxn#0": "uint64",
        "algoTxn#0": "uint64",
        "baseAssetTransferTxn#0": "uint64",
        "snapshot#0": "bytes",
        "migrationAdmin#0": "bytes"
      },
      "block": "acceptMigrationASAContract",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "7248": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7250": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "7251": {
      "op": "bytec 14 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7253": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7254": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "7255": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "7256": {
      "error": "Only migration admin can accept migration",
      "op": "assert // Only migration admin can accept migration",
      "stack_out": []
    },
    "7257": {
      "op": "frame_dig -5",
      "defined_out": [
        "lstTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "lstTransferTxn#0 (copy)"
      ]
    },
    "7259": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "7261": {
      "op": "frame_dig -1",
      "defined_out": [
        "migrationAdmin#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "migrationAdmin#0 (copy)"
      ]
    },
    "7263": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "7264": {
      "op": "bz acceptMigrationASAContract_bool_false@4",
      "stack_out": []
    },
    "7267": {
      "op": "frame_dig -5",
      "stack_out": [
        "lstTransferTxn#0 (copy)"
      ]
    },
    "7269": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "7271": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "7273": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "7274": {
      "op": "bz acceptMigrationASAContract_bool_false@4",
      "stack_out": []
    },
    "7277": {
      "op": "frame_dig -5",
      "stack_out": [
        "lstTransferTxn#0 (copy)"
      ]
    },
    "7279": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "7281": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "7282": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "7284": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "7285": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0"
      ]
    },
    "7286": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "7287": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "7288": {
      "op": "bz acceptMigrationASAContract_bool_false@4",
      "stack_out": []
    },
    "7291": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "7292": {
      "block": "acceptMigrationASAContract_bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "7293": {
      "op": "frame_dig -4",
      "defined_out": [
        "algoTxn#0 (copy)"
      ],
      "stack_out": [
        "algoTxn#0 (copy)"
      ]
    },
    "7295": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "7297": {
      "op": "frame_dig -1",
      "defined_out": [
        "migrationAdmin#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "migrationAdmin#0 (copy)"
      ]
    },
    "7299": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "7300": {
      "op": "bz acceptMigrationASAContract_bool_false@8",
      "stack_out": []
    },
    "7303": {
      "op": "frame_dig -4",
      "stack_out": [
        "algoTxn#0 (copy)"
      ]
    },
    "7305": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "7307": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "7309": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "7310": {
      "op": "bz acceptMigrationASAContract_bool_false@8",
      "stack_out": []
    },
    "7313": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "7314": {
      "block": "acceptMigrationASAContract_bool_merge@9",
      "stack_in": [
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "7315": {
      "op": "frame_dig -3",
      "defined_out": [
        "baseAssetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "baseAssetTransferTxn#0 (copy)"
      ]
    },
    "7317": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "7319": {
      "op": "frame_dig -1",
      "defined_out": [
        "migrationAdmin#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "migrationAdmin#0 (copy)"
      ]
    },
    "7321": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "7322": {
      "op": "bz acceptMigrationASAContract_bool_false@13",
      "stack_out": []
    },
    "7325": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetTransferTxn#0 (copy)"
      ]
    },
    "7327": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "7329": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "7331": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "7332": {
      "op": "bz acceptMigrationASAContract_bool_false@13",
      "stack_out": []
    },
    "7335": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetTransferTxn#0 (copy)"
      ]
    },
    "7337": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "7339": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "7340": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7341": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "7342": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%20#0",
        "maybe_value%2#0"
      ]
    },
    "7343": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "7344": {
      "op": "==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "7345": {
      "op": "bz acceptMigrationASAContract_bool_false@13",
      "stack_out": []
    },
    "7348": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%2#0"
      ],
      "stack_out": [
        "and_result%2#0"
      ]
    },
    "7349": {
      "block": "acceptMigrationASAContract_bool_merge@14",
      "stack_in": [
        "and_result%2#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "7350": {
      "op": "frame_dig -2",
      "defined_out": [
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7352": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "24"
      ]
    },
    "7354": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "7355": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"cash_on_hand\""
      ]
    },
    "7357": {
      "op": "swap",
      "stack_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ]
    },
    "7358": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7359": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7361": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "0"
      ]
    },
    "7362": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "7363": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "7364": {
      "op": "swap",
      "stack_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "7365": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7366": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7368": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "16"
      ]
    },
    "7370": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "7371": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"circulating_lst\""
      ]
    },
    "7373": {
      "op": "swap",
      "stack_out": [
        "\"circulating_lst\"",
        "new_state_value%2#0"
      ]
    },
    "7374": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7375": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7377": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "8"
      ]
    },
    "7379": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "7380": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0",
        "\"total_borrows\""
      ]
    },
    "7382": {
      "op": "swap",
      "stack_out": [
        "\"total_borrows\"",
        "new_state_value%3#0"
      ]
    },
    "7383": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7384": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7386": {
      "op": "pushint 112 // 112",
      "defined_out": [
        "112",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "112"
      ]
    },
    "7388": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0"
      ]
    },
    "7389": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\"",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0",
        "\"total_additional_rewards\""
      ]
    },
    "7391": {
      "op": "swap",
      "stack_out": [
        "\"total_additional_rewards\"",
        "new_state_value%4#0"
      ]
    },
    "7392": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7393": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7395": {
      "op": "pushint 104 // 104",
      "defined_out": [
        "104",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "104"
      ]
    },
    "7397": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0"
      ]
    },
    "7398": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\"",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0",
        "\"total_commission_earned\""
      ]
    },
    "7400": {
      "op": "swap",
      "stack_out": [
        "\"total_commission_earned\"",
        "new_state_value%5#0"
      ]
    },
    "7401": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7402": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7404": {
      "op": "pushint 96 // 96",
      "defined_out": [
        "96",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "96"
      ]
    },
    "7406": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%6#0"
      ],
      "stack_out": [
        "new_state_value%6#0"
      ]
    },
    "7407": {
      "op": "bytec 17 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "new_state_value%6#0"
      ],
      "stack_out": [
        "new_state_value%6#0",
        "\"current_accumulated_commission\""
      ]
    },
    "7409": {
      "op": "swap",
      "stack_out": [
        "\"current_accumulated_commission\"",
        "new_state_value%6#0"
      ]
    },
    "7410": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7411": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7413": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "64"
      ]
    },
    "7415": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%7#0"
      ],
      "stack_out": [
        "new_state_value%7#0"
      ]
    },
    "7416": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "new_state_value%7#0"
      ],
      "stack_out": [
        "new_state_value%7#0",
        "\"fee_pool\""
      ]
    },
    "7418": {
      "op": "swap",
      "stack_out": [
        "\"fee_pool\"",
        "new_state_value%7#0"
      ]
    },
    "7419": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7420": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7422": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "32"
      ]
    },
    "7424": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%8#0"
      ],
      "stack_out": [
        "new_state_value%8#0"
      ]
    },
    "7425": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "new_state_value%8#0"
      ],
      "stack_out": [
        "new_state_value%8#0",
        "\"borrow_index_wad\""
      ]
    },
    "7427": {
      "op": "swap",
      "stack_out": [
        "\"borrow_index_wad\"",
        "new_state_value%8#0"
      ]
    },
    "7428": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7429": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7431": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "72"
      ]
    },
    "7433": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%9#0"
      ],
      "stack_out": [
        "new_state_value%9#0"
      ]
    },
    "7434": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "new_state_value%9#0"
      ],
      "stack_out": [
        "new_state_value%9#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "7436": {
      "op": "swap",
      "stack_out": [
        "\"accepted_collaterals_count\"",
        "new_state_value%9#0"
      ]
    },
    "7437": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7438": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7440": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "40"
      ]
    },
    "7442": {
      "op": "extract_uint64",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "7443": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "7444": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"base_token_id\""
      ]
    },
    "7445": {
      "op": "swap",
      "stack_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "7446": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7447": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7449": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "56"
      ]
    },
    "7451": {
      "op": "extract_uint64",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "7452": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "7453": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "\"lst_token_id\""
      ]
    },
    "7455": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%1#0"
      ]
    },
    "7456": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7457": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7459": {
      "op": "pushint 80 // 80",
      "defined_out": [
        "80",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "80"
      ]
    },
    "7461": {
      "op": "extract_uint64",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "7462": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "7463": {
      "op": "bytec 16 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "\"buyout_token_id\""
      ]
    },
    "7465": {
      "op": "swap",
      "stack_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%2#0"
      ]
    },
    "7466": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7467": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7469": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "48"
      ]
    },
    "7471": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%10#0"
      ],
      "stack_out": [
        "new_state_value%10#0"
      ]
    },
    "7472": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\"",
        "new_state_value%10#0"
      ],
      "stack_out": [
        "new_state_value%10#0",
        "\"commission_percentage\""
      ]
    },
    "7474": {
      "op": "swap",
      "stack_out": [
        "\"commission_percentage\"",
        "new_state_value%10#0"
      ]
    },
    "7475": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7476": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7478": {
      "op": "pushint 88 // 88",
      "defined_out": [
        "88",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "88"
      ]
    },
    "7480": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%11#0"
      ],
      "stack_out": [
        "new_state_value%11#0"
      ]
    },
    "7481": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "new_state_value%11#0"
      ],
      "stack_out": [
        "new_state_value%11#0",
        "\"liq_bonus_bps\""
      ]
    },
    "7483": {
      "op": "swap",
      "stack_out": [
        "\"liq_bonus_bps\"",
        "new_state_value%11#0"
      ]
    },
    "7484": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7485": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7487": {
      "op": "pushint 120 // 120",
      "defined_out": [
        "120",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "120"
      ]
    },
    "7489": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%12#0"
      ],
      "stack_out": [
        "new_state_value%12#0"
      ]
    },
    "7490": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "new_state_value%12#0"
      ],
      "stack_out": [
        "new_state_value%12#0",
        "\"active_loan_records\""
      ]
    },
    "7492": {
      "op": "swap",
      "stack_out": [
        "\"active_loan_records\"",
        "new_state_value%12#0"
      ]
    },
    "7493": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7494": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\""
      ],
      "stack_out": [
        "\"contract_state\""
      ]
    },
    "7496": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "\"contract_state\"",
        "0x0000000000000001"
      ],
      "stack_out": [
        "\"contract_state\"",
        "0x0000000000000001"
      ]
    },
    "7506": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7507": {
      "retsub": true,
      "op": "retsub"
    },
    "7508": {
      "block": "acceptMigrationASAContract_bool_false@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%2#0"
      ],
      "stack_out": [
        "and_result%2#0"
      ]
    },
    "7509": {
      "op": "b acceptMigrationASAContract_bool_merge@14"
    },
    "7512": {
      "block": "acceptMigrationASAContract_bool_false@8",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "7513": {
      "op": "b acceptMigrationASAContract_bool_merge@9"
    },
    "7516": {
      "block": "acceptMigrationASAContract_bool_false@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "7517": {
      "op": "b acceptMigrationASAContract_bool_merge@5"
    },
    "7520": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addCash",
      "params": {
        "amount#0": "uint64"
      },
      "block": "addCash",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "7523": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "7524": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7526": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7527": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "7528": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "7530": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "7531": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"cash_on_hand\""
      ]
    },
    "7533": {
      "op": "swap",
      "stack_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ]
    },
    "7534": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7535": {
      "retsub": true,
      "op": "retsub"
    },
    "7536": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.removeCash",
      "params": {
        "amount#0": "uint64"
      },
      "block": "removeCash",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "7539": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "7540": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7542": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7543": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "7544": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "7546": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7547": {
      "error": "INSUFFICIENT_CASH",
      "op": "assert // INSUFFICIENT_CASH",
      "stack_out": []
    },
    "7548": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "7549": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "stack_out": [
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7551": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "7552": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "7553": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "7555": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "7556": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"cash_on_hand\""
      ]
    },
    "7558": {
      "op": "swap",
      "stack_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ]
    },
    "7559": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7560": {
      "retsub": true,
      "op": "retsub"
    }
  }
}