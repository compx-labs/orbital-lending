{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts",
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/config.algo.ts"
  ],
  "mappingsiDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA8mEG;;AAAA;AAAA;AAAA;;AAAA;AA9mEH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AA8mEG;;;AAAA;;AA7DA;;AAAA;AAAA;AAAA;;AAAA;AAjjEH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAijEG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvBD;;AAAA;AAAA;AAAA;;AAAA;AA1hEF;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0hEE;;;AAAA;;AA9BC;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhJD;;AAAA;AAAA;AAAA;;AAAA;AA52DF;;;AAAA;;;AAAA;AAAA;;;AAAA;AA42DE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA1CC;;AAAA;AAAA;AAAA;;AAAA;AAjyDH;;;AAAA;AAAA;;AAiyDG;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/KA;;AAAA;AAAA;AAAA;;AAAA;AAlnDH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAknDG;;;AAAA;;AAvIA;;AAAA;AAAA;AAAA;;AAAA;AA3+CH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA2+CG;;;AAAA;;AA9HA;;AAAA;AAAA;AAAA;;AAAA;AA72CH;;;AAAA;AA62CG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArKA;;AAAA;AAAA;AAAA;;AAAA;AAxsCH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwsCG;;;AAAA;;AAlCA;;AAAA;AAAA;AAAA;;AAAA;AAtqCH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsqCG;;;AAAA;;AA1DA;;AAAA;AAAA;AAAA;;AAAA;AA5mCH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA4mCG;;;AAAA;;AAbD;;AAAA;AAAA;AAAA;;AAAA;AA/lCF;;;AAAA;AAAA;;AA+lCE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxFC;;AAAA;AAAA;AAAA;;AAAA;AA92BH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AA82BG;;;AAAA;;AA/FA;;AAAA;AAAA;AAAA;;AAAA;AA/wBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+wBG;;;AAAA;;AAzEA;;AAAA;AAAA;AAAA;;AAAA;AAtsBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAssBG;;;AAAA;;AAlEA;;AAAA;AAAA;AAAA;;AAAA;AApoBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAooBG;;;AAAA;;AA1EA;;AAAA;AAAA;AAAA;;AAAA;AA1jBH;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AA0jBG;;;AAAA;;AA3CA;;AAAA;AAAA;AAAA;;AAAA;AA/gBH;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AA+gBG;;;AAAA;;AAjFD;;AAAA;AAAA;AAAA;;AAAA;AA9bF;;;AA8bE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AA7aF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA6aE;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AApZF;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoZE;;;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AArXF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqXE;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATC;;AAAA;AAAA;AAAA;;AAAA;AApVH;;;AAAA;AAAA;;AAoVG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAzUH;;;AAAA;AAyUG;;;AAAA;;AA9CA;;AAAA;AAAA;AAAA;;AAAA;AA3RH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA2RG;;;AAAA;;AAjGA;;AAAA;AAAA;AAAA;;AAAA;AA1LH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AA0LG;;;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAtKH;;;AAAA;AAAA;;AAAA;;;AAAA;AAsKG;;;AAAA;;AAAD;;;AAxIA;AA0IE;;AAAA;AAC2B;;AAAA;AAlK7B;AAkKE;AAAA;AAnBF;;AAoBE;;AAAA;AAdF;;AAe8B;;AAA5B;AAbF;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcE;;AAcF;;;AAagB;;AAzKhB;AAAA;AAAA;AAAA;AAyKS;AAAP;AAEA;;AAAA;;AA3KF;AAAA;AAAA;AAAA;AA2KE;AAAA;;;AAAA;;AAAA;;ACxPkC;;;;ADwPlC;AAAA;;;;AAAA;AAKO;;AAA4C;;AAA5C;AAAP;AAnKF;;AAqKE;;AAAA;AAlKF;;AAmKE;;AAAA;AAhKF;;AAiKE;;AAAA;AAzFF;;AA0F0C;AAAxC;AA5LF;;AA6LwB;AAAtB;AAnMF;;AAoM+B;AAA7B;AAjMF;AAkM8B;AAA5B;AAhGF;;AAiGmC;AAAjC;AAnKF;;AAoKE;;AAAA;AAvLF;;AAwLE;;AAAA;AA/MF;;AAgN4B;;;;;;;;;;AAA1B;AAnKF;;AAoKwB;;AAAtB;AAjKF;;AAkK4B;;;AAA1B;AA/HF;;AAgI6B;AAA3B;AAzIF;;AA0I+B;AAA7B;AAjKF;;AAkK6B;;;AAA3B;AA/JF;;AAgK0B;AAAxB;AA7JF;;AA8J0B;;;AAAxB;AA3JF;;AA4J2B;;;AAAzB;AA1JF;;AA2J6B;AAA3B;AArJF;;AAsJ4B;;AAA1B;AAnJF;;;;;;;;;;;;;;AAoJ4B;AAA1B;AA9IF;;AA+I+B;AAA7B;AA5IF;;AA6I8B;AAA5B;AAvIF;;ACvIiC;;AD+Q/B;AArIF;;AAsIsC;;AAApC;AAlLF;AAAA;;AAAA;AAAA;AA+CA;;AAoIE;AAAA;AAC6B;;AAAA;AA/G/B;;AA+GE;AAAA;AA5GF;;AA6GE;;AAAA;AAjGF;;AAkGuC;AAArC;AApGF;;AAqG8C;AAA5C;AAvGF;;AAwGE;;AAAA;AAtIF;;;;;;;;;;;;;;;;;;;;;;;;;AAuIuC;AAArC;AAjGF;;AAkG4B;AAA1B;AApGF;;AAqGwC;AAAtC;AA9MF;;AA+ME;;AAAA;AA5OF;AAAA;AAAA;AAAA;AA8O+B;AAA7B;;;AACE;AAE0B;;AAjP9B;AAAA;AAAA;AAAA;AAkP4C;AACvB;;;;;;;AAJjB;;;ACjSkC;;;ADiSlC;AA1HJ;AAAA;;AAAA;AAAA;AAmIiC;AAA/B;;;AACE;AAE0B;;AAtI9B;AAAA;;AAAA;AAAA;AAuI8C;AACzB;;;;;;;AAJjB;;;AC3SkC;;;AD2SlC;;;;;;AA2BJ;;;AAegB;;AA5QhB;AAAA;AAAA;AAAA;AA4QS;AAAP;AAGO;;AAAA;;;AAAqB;;AAAgB;;AAAhB;AAArB;;;;AAAP;AACO;;AAAA;;;AAAsB;;AAAgB;;AAAhB;AAAtB;;;;AAAP;AAEA;;AAAA;;;AACS;;AAAA;;AAAA;AAAP;AAEK;;AAAiB;;AAAjB;AAAP;AAGO;;AAAA;;;AAAsC;;AAAoB;;;AAApB;AAAtC;;;;AAAP;AA/PF;;AAgQE;;AAAA;AA7PF;;AA8PE;;AAAA;AA3PF;;AA4PE;;AAAA;AAzPF;;AA0PE;;AAAA;AAvPF;;AAwPE;;AAAA;AArPF;;AAsPE;;AAAA;AAjPF;;;;;;;;;;;;;;;;;;AAkPE;;AAAA;AAzOF;;AA0OE;;AAAA;AA/LF;;AAgME;;AAAA;AAvPF;;AAwPE;;AAAA;AAzOF;;AA0OE;;AAAA;AAvOF;;AAwOE;;AAAA;AA5PF;AAAA;;AAAA;AAAA;AA8PM;;;AAtPN;AAAA;;AAAA;AAAA;AARA;AAAA;;AAAA;AAAA;AA8PoC;AAA9B;;;AA9PN;AAAA;;AAAA;AAAA;AAQA;;AAuPI;AAAA;;;;;;;;;;;;;;AAIJ;;;AAEgB;;AA7ShB;AAAA;AAAA;AAAA;AA6SS;AAAA;;;AAAqD;;AArL9D;AAAA;;AAAA;AAAA;AAqLuD;AAA9C;;;;AAAP;AACO;;AAAS;;AAAT;AAAP;AAC4B;;AAAA;AAjL9B;;AAiLE;AAAA;;;;;;AAOF;;;AAEgB;;AAxThB;AAAA;AAAA;AAAA;AAwTS;AAAP;AAhMF;;AAiME;;AAAA;;AAtUF;AAAA;;AAAA;AAAA;AA6UE;AA1UF;AAAA;AAAA;AAAA;AAkVE;AA7OF;AAAA;;AAAA;AAAA;AAqPE;AAOF;;;AACgB;;AAxVhB;AAAA;AAAA;AAAA;AAwVS;AAAP;AACA;;AAAA;;AAzVF;AAAA;AAAA;AAAA;AAyVE;AAAA;;;AAAA;;AAAA;;ACragC;;;;ADqahC;AAAA;;;;AAAA;AAhXF;AAAA;AAAA;AAAA;AAuXmD;AAClC;AAEI;;AACE;;AAAA;;AAAA;AACG;;AAAA;;AAAA;AAEJ;;AACiB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;AACwB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;;;;;;;AAHI;;;;;;;;;AALJ;;;;AC1aqB;;;AD0arB;;;AAYW;AAjY5B;;AAiYE;AAAA;;;;;;AASF;;;AACgB;;AAvXhB;AAAA;AAAA;AAAA;AAuXS;AAAP;AACA;;AAAA;;AAxXF;AAAA;AAAA;AAAA;AAwXE;AAAA;;;AAAA;;AAAA;;ACnckC;;;ADmclC;AAAA;;;;AAAA;AAI0B;;AAAA;AAhZ5B;;AAgZE;AAAA;AAGA;AAE0B;;AAET;;;;;;;;;AAJjB;;;ACxcoC;;;ADwcpC;;;;;;AAgBF;;;AACgB;;AAhZhB;AAAA;AAAA;AAAA;AAgZS;AAAP;AApaF;AAAA;;AAAA;AAAA;AAqaiC;AAAoB;;AAAA;;AAA5C;AAAP;AAEA;;AAAA;;AAnZF;AAAA;AAAA;AAAA;AAmZE;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;;AAAA;AAhaF;;AAoaE;;AAAA;;;;;;AASF;;;AA7ZA;AAAA;;AAAA;AAAA;AA+ZyB;AAAA;;AAAA;;AAAA;AAGR;AAAA;;;;;;;;;;;;;;AAAA;;;;AC9eqB;;;AD8erB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAMK;AAApB;AA4BF;;;AArXsF;;AAAA;;AAAA;AAuXlC;AAAA;AAAA;AAEE;AAAhB;;AAAgB;AAA9C;;AAAmB;AAEH;;AAAA;;;AACI;;AAAA;;;AACM;;AAAA;;;AACb;;AAAA;AACY;;AAAA;;;AALQ;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AAeF;;;AAzYsF;;AAAA;;AAAA;AA2YlC;AAAA;AAAA;AAEhB;AAAhB;;AAAgB;AAA3B;AAAA;;AAAA;AAAP;AACM;;AAAmB;AAEH;;AAAA;;;AACI;;AAAA;;;AACM;;AAAA;;;AACb;;AAAA;AACY;;AAAA;;;AALQ;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AAgBF;;;AAxgBA;AAAA;AAAA;AAAA;AA+gBmD;AACnC;;AAzfhB;AAAA;AAAA;AAAA;AAyfS;AAAP;AACyB;;AAAA;AAAA;AAAA;;AAAlB;AAAP;AAxaoF;;AAAA;;AAAA;AAAA;AAmW9C;AAAA;;AAsE/B;AAAP;AACA;;AAAA;;AA5fF;AAAA;AAAA;AAAA;AA4fE;AAAA;;;AAAA;;AAAA;;ACtkBkC;;;;ADskBlC;AAAA;;;;AAAA;AAnhBF;AAAA;AAAA;AAAA;AA4hBoD;;AAAA;;AAAA;AAAA;AAAA;AAI/B;;AAJ+B;AAAA;;AAAA;AAQlD;;AAAA;AAAA;;AAAA;AAlbF;AAAA;;AAAA;AAAA;AAmbkF;AAAxC;AAnb1C;;AAmbE;AAAA;AACA;AAEmB;;AACO;AAET;;;;;;;;;;;AALjB;;;ACxlBoC;;;ADwlBpC;AA1FsC;AAAA;;AAoGtC;;;;;;AAGF;;;AAOgB;;AAniBhB;AAAA;AAAA;AAAA;AAmiBS;AAAP;AACA;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;;AAAA;;AAAA;;;AAteF;AAAA;;AAAA;AAAA;AAue6B;;AAAA;AAve7B;;AAueE;AAAA;AAC0B;;;AA/d5B;;AA+dE;AAAA;;AA+DF;;;AA7nBA;AAAA;AAAA;AAAA;AA+nBmD;AACjD;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAKA;;AAAA;;AC7qB+B;;AD6qB/B;AAAA;AAhfF;AAAA;;AAAA;AAAA;AAmfmC;AAAW;AAArC;AAAP;AACA;;AAAA;;;AAEuB;;;AAAjB;AA3oBR;AAAA;AAAA;AAAA;;AAAA;AAaA;AAAA;AAAA;AAAA;AAqoBE;;;;;AAKA;AAE0B;;AAtpB5B;AAAA;;AAAA;AAAA;AAupByC;;;;;;;;;AAHvC;;;ACzsBoC;;;ADysBpC;AA7oBF;AAAA;;AAAA;AAAA;AAspBE;AAtpBF;;AAspBE;AAAA;AAnpBF;AAAA;AAAA;AAAA;AAopBE;;AAAA;AAppBF;AAopBE;AAAA;AAC0B;;;AAnkB5B;;AAmkBE;AAAA;AAlqBF;AAAA;AAAA;AAAA;AAoqBkD;AAArC;AACuB;;AAFf;AAAA;AAziBiD;;AAAA;AAAA;AAAA;AA6iBhC;AAAA;;AAApC;;;AACyD;AAAA;AAAA;AACA;AAAd;AAAc;AAAjD;;AAAoB;AAEA;AAAA;;;AACT;AAAA;AAFuB;AAAA;AAAxC;;AA1qBJ;AAAA;AAAA;AAAA;AAgrBoD;AAArC;AACM;;AAAA;AAFuB;AAAA;AAAxC;;AArqBJ;AAAA;;AAAA;AAAA;AC1DkC;;ADunBF;AA1jBhC;AAAA;AAAA;AAAA;AA4jBmB;AAEa;;AAAA;AC3nBE;;AD4nBzB;;;;;;;;AAmHT;;;;;;;AA5rBA;AAAA;;AAAA;AAAA;AAmsBiD;AAjjBjD;AAAA;;AAAA;AAAA;AAkjBmC;AAAW;AAArC;AAAP;AACA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAMA;;AAAA;;AACU;;;AADV;AAAA;AAIuB;;;AAAjB;AAIF;;AAAoB;;AAApB;AAAJ;;;AA5sBF;AAAA;;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAomBmB;;AAAA;AACV;;AAAA;AAyGP;AAAA;;;AAE2C;;AA7tB7C;AAAA;AAAA;AAAA;AA6tBiG;AAAxF;;AAAA;AAAA;;AAAA;AAAP;AACA;AAE0B;;AAhuB5B;AAAA;AAAA;AAAA;AAiuB0C;;;;;;;;;AAHxC;;;AChxBoC;;;ADgxBpC;AAptBF;AAAA;;AAAA;AAAA;AA6tBE;;AAAA;AA7tBF;;AA6tBE;AAAA;AA1tBF;AAAA;AAAA;AAAA;AA2tBE;AAAA;AA3tBF;AA2tBE;AAAA;AAC0B;;;AA1oB5B;;AA0oBE;AAAA;AAzuBF;AAAA;AAAA;AAAA;AA2uBkD;AAArC;AACuB;;AAFf;AAAA;AAhnBiD;;AAAA;AAAA;AAAA;AAAA;;AAonBhC;AAAA;;AAApC;;;AACyD;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACd;AAAc;AAAjD;;AAAoB;AAApB;AAAA;;AACN;;;AACkC;;AAAA;;;AAGN;;AAAA;;;AACT;;AAAA;AAFuB;AAAA;AAAxC;;AAAA;AAAA;;AA5J2B;AAAA;;;;;;;;AAAA;;;;AC1oBK;;;AD0oBL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;AC9oBM;;;AD8oBN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAMb;;AAAA;AACV;;AAAA;;;;;;;;AAqKT;;;;;;;;AAnnBA;AAAA;;AAAA;AAAA;AA4nBmC;AAAW;AAArC;AAAP;AArqBqD;;AAuqBb;;AAvqBa;AAuqBL;AAAA;AAAA;;AAAA;AACzB;;;AAAjB;AAEN;;;AACuD;;AAA1B;;;AAAkC;;AACxB;AAArC;;AAAkB;AAAlB;;AA2jCF;;AAAA;;ACp4DuC;;;ADo4DvC;AAAA;AAEA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAGqC;;AAAA;AAHrC;AAAA;;;;AAAA;AA5uDoF;;AAAA;;AAAA;AAmW9C;AAAA;;AA+4CtC;AA9jCM;;AAAA;;AAAA;;AAAgB;;;AAzvBxB;AAAA;;AAAA;AAAA;AA0vBgC;AC90BE;;AD80BH;AA9xB/B;AAAA;AAAA;AAAA;AA+xBuC;;;AAgnCpB;;AAAA;AC97DkB;;AD+7DV;AAElB;AAAP;AAr4DF;AAAA;AAAA;AAAA;AAsCA;AAAA;;AAAA;AAAA;AA22DiB;AC98DiB;;AD+8DzB;AAz0DT;AAAA;;AAAA;AAAA;AA8zDS;;AAAA;AAAA;AAAP;AAjnCwB;;AAApB;;AAtwBN;AAAA;;AAAA;AAAA;AAuwBE;;;AACa;AAxwBf;AAAA;;AAAA;AAAA;AA2wBqB;;AA3wBrB;AAAA;;AAAA;AAAA;AA8wBwB;;AAJQ;AAFjB;;;;;;;;;;;;;;;;;;AAAA;;;;ACv1BuB;;;ADu1BvB;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AASwD;;AAAA;AAAA;AAAA;;AApwBvE;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA63BmB;AAAb;AAAJ;;;AACmB;;AAAiB;;AAAjB;AACc;;AAAb;AAAlB;;AAYqB;;AAAA;;AAAA;AACgB;;AAAnB;AAm/Bd;;AAAA;;AAAuB;AAAvB;;AAz5DR;AAAA;;AAAA;AAAA;AA25DE;AA35DF;;AA25DE;AAAA;AAznCA;;AAAA;;;AAEW;;AA+oCL;AAAe;;;AAEf;;AAAmB;;;AAQnB;;AAAA;AAAA;;AAAkB;AAKU;;AAAA;;;AAC4B;;AAAjB;;AAAiB;AAA9B;;AAAA;AAAZ;AAn9DtB;AAAA;AAAA;AAAA;AAs9Dc;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;AAHE;AAAA;AAAA;AAKL;;AAAA;AAj4Df;AAAA;;AAAA;AAAA;AAk4DkB;AAXmB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAp2DkB;;AAAA;;AAAA;AAo2DrD;AAAA;AAeA;;AAAA;;AAAA;;;AA9pC0B;;AAsqC1B;AAv+DF;AAAA;AAAA;AAAA;AA0+D0C;;;;;;;;;;;;;AAHxC;;;ACzhEoC;;;ADyhEpC;AArqCA;AAAA;;;AA5uBF;AAAA;;AAAA;AAAA;AA6uB6B;AA7uB7B;;AA6uBE;AAAA;AAC0B;;;AAruB5B;;AAquBE;AAAA;;AAP8D;;AAA5D;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;;AAAA;;AAAA;;;;;;AA4GS;;AAAa;;AAAb;AAAJ;;;AACY;;AAAiB;;AAAjB;AACc;;AAAb;AAAlB;;;;;AACS;;AAAa;;AAAb;AAAJ;;;AACY;;AAAiB;;AAAjB;AACc;;AAAb;AAAlB;;;;;AACS;;AAAY;AAAZ;;;;;AAAJ;;;AACY;;AAAiB;;AAAjB;AACc;;AAAb;AAAlB;;;;;;;;;;;;;;;;AApGJ;;;AAWsB;;AAAA;AAz1BtB;AAAA;AAAA;AAAA;AA41Bc;;AAAA;AACsB;;AAAnB;AAFG;;AAGF;;AAHE;AAAA;AAAA;AAlwBpB;AAAA;;AAAA;AAAA;AAwwBkB;AAX0B;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AA1uBW;;AAAA;;AAAA;AA0uBrD;AAAA;AAvuBF;AAAA;;AAAA;AAAA;AAqvBoE;AAAjC;AArvBnC;;AAqvBE;AAAA;;AAGF;;;AA3vBuD;;AAAA;;AAAA;AA6vBrB;AAAA;;AAAhC;AAptBF;AAAA;;AAAA;AAAA;AAqtBmC;AAAW;AAArC;AAAP;AACA;;;;AAEA;;AAAA;;;;AAE0B;;;AAhxB5B;;AAgxBE;AAAA;;AAgFF;;;;;;;AAl7BA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAyEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAnCA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAw0BE;;;AAAoB;;;AA9yBtB;AAAA;;AAAA;AAAA;AAy3Bc;;;AAt5Bd;AAAA;;AAAA;AAAA;AAMA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAw1BM;;AAAA;AAAJ;;;AACqB;;AAAA;;AAAA;AACF;;AAAA;AAAX;AAAN;;AAv1BJ;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AAg2BM;;;AAAc;;AAAA;AAAA;;AAAA;;;;AAAd;;;;;;;;;;;AAx1BN;;AA24BE;;AAAA;AAAA;;AAAA;AACA;;AAAA;AA3DQ;;AAAA;;AAAA;AAAA;;AAAe;ACx8BS;;ADy8BxB;;AAAgB;AACH;;AAAA;;AAAA;AACb;;AAAA;;AAAA;AAAwB;;AAAA;;AAAA;AAAxB;AAAN;;;;;AA32BJ;AAAA;;AAAA;AAAA;;;;;;AA80ByB;;AAAA;;AAAA;AC96BS;;AD+6Bd;AAAZ;AAAA;;AACN;;;AAA4B;;;AAiEN;;;AA/DN;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;ACl7BgB;;ADm7Bb;AACZ;;AAAA;;;AA6De;;;AA+CxB;;;AACQ;;AAAgB;;AAAU;AAA1B;AACN;;;AAAoB;AAAP;;AAAA;;AAAA;AAz5Bf;AAAA;;AAAA;AAAA;AA05BmB;;AAAA;AACoB;;AAAb;;AAAa;AAA9B;AAAP;;AAAA;;AAAA;AASF;;;AAj5BuD;;AAAA;;AAAA;AAk5Bd;AAAA;AAAA;AACd;;;AAGA;AAAA;;;AACD;;AAAA;;;AAngC1B;AAAA;AAAA;AAAA;AAqgCwB;;AAAA;;;AACT;;AAAA;AA76Bf;AAAA;;AAAA;AAAA;AA86BkB;AAPD;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AASf;;AAAA;AAAA;AACA;AASF;;;;;;;AAC6B;;AAArB;AAx7BR;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA07BM;AAAJ;;;AAAwB;AAAP;;AAAA;AAEX;;AAAA;;AAAiB;AAAjB;AAAA;;AA1DN;;;AAAyB;;;AAmEzB;;AAAA;;;AAr8BF;;AAs8BI;;AAAA;AACO;AAAP;;AAAA;AA18BJ;AAAA;;AAAA;AAAA;AAg9BqB;AAAA;;AAAA;ACvlCY;;ADwlCL;AACD;AAl9B3B;;AAm9BE;AAAA;AAt9BF;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA49ByB;AAAnB;;AACJ;;;AACqB;;AAAA;;AAAA;AClmCU;;ADmmClB;AAAX;;AAxgCJ;AAAA;;AAAA;AAAA;AC7FkC;;AD0mC1B;AAAmB;AAGN;;AAAA;AAAA;;AAAA;AC7mCa;;AD8mCE;AAC5B;AAA2B;AAIN;;AAAA;;AAAA;AA7+B7B;;AA6+BE;AAAA;AAtjCF;AAAA;AAAA;AAAA;AAyjCE;;AAAA;AAzjCF;AAyjCE;AAAA;AAtjCF;AAAA;;AAAA;AAAA;AAyjCE;AAzjCF;;AAyjCE;AAAA;AA7+BF;;AAg/BE;;AAAA;AAIA;;AAAA;AAj/BF;AAAA;;AAAA;AAAA;AAk4BmB;;AAAA;AC7gCmB;;;;;AD+gCf;ACjhCU;;ADohCd;ACthCe;;ADuhCN;AAApB;;AAyDoB;;;AAwD5B;;;AA5+BuD;;AAAA;;AAAA;AA6+BZ;AAAA;AAAzC;AAYF;;;;;AArmCA;AAAA;AAAA;AAAA;AAumCmD;AAl9BnD;AAAA;;AAAA;AAAA;AAm9BmC;AAAW;AAArC;AAAP;AACA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAKuB;;;AAAjB;AACuC;;AAA1B;;;AAAb;AAEgC;;AAA1B;;;AACa;;;AAAA;AAElB;;AAAA;;AAAA;AAAP;AAEM;;AAAwB;AAAxB;AAAA;;AAhiCR;AAAA;;AAAA;AAAA;AAmiCE;;AAAA;AAniCF;;AAmiCE;AAAA;AACA;;AAAA;;;AAEA;;;AAhhCqD;;AAihC3B;;AAjhC2B;AAihCnB;;AA9gCpC;AAAA;;AAAA;AAAA;AA+gCsC;AAAlC;AA/gCJ;;AA+gCI;AAAA;AAEA;AAE0B;;AACW;AAAA;AAAlB;;AAAkB;AACC;AAAjB;;AAAiB;;;;;;;AAJtC;;;AClrCkC;;;ADkrClC;;AAWsC;;AACb;AAAA;AAAA;;;AACD;AAAA;;;AA7oC5B;AAAA;AAAA;AAAA;AAgpCgB;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKL;;AAAA;AA3jCjB;AAAA;;AAAA;AAAA;AA4jCoB;AAXwB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9hCW;;AA8hC3B;;AA9hC2B;AA8hCnD;AAAA;;;;;;AAqBJ;;;;;AAEgB;;AA1oChB;AAAA;AAAA;AAAA;AA0oCS;AAAP;AA5gCF;AAAA;;AAAA;AAAA;AA6gCmC;AAAW;AAArC;AAAP;AACA;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;ACrtCoC;ADqtCpC;AAAA;;;;AAAA;AAnpCF;AAAA;;AAAA;AAAA;AAkHA;AAAA;;AAAA;AAAA;AAqiCyB;AAAjB;AAAA;;AACN;;;AACE;AAzqCJ;AAAA;AAAA;AAAA;AA4qC4C;;;;;;;;;;;;;;AAHxC;;;AC3tCkC;;;AD2tClC;AASA;;;AAlqCJ;;AAmqC0B;AAAtB;AAjjCJ;;AAkjCgD;AAA5C;;;;;;AAaJ;;;;;;;AArlCuD;;AAAA;;AAAA;AAAA;;AA8lCrB;AAAA;;AAAhC;AArjCF;AAAA;;AAAA;AAAA;AAsjCmC;AAAW;AAArC;AAAP;AAEA;;AAAA;;ACtvC8B;;ADsvC9B;AAAA;AAKA;;;;AAGqC;AAAA;AAAA;AAAA;;AAAA;AAC/B;AAA+B;;AAAiB;AAAhD;AAAA;;AACA;AAAiC;;;AAAjC;AAAA;;AAAA;;AAGmB;;;AAAA;AAAA;AAAA;;AACzB;AAAA;AAGM;AAAA;;AAAA;;AAAwB;;;AAAxB;AAAA;;AACmB;;;AACzB;AAAA;AAGmB;ACnxCa;;ADmxCb;AACb;;AAAiB;AAAjB;AAGuB;AAAzB;AAhsCN;AAAA;;AAAA;AAAA;AAisCM;AAAJ;;;AACmB;;ACzxCa;;ADyxCb;AAlsCrB;AAAA;;AAAA;AAAA;AAmsC8B;AC1xCI;;AD2xCb;AAAjB;;AAIe;;AAAA;;AAAA;AC/xCe;;ADgyCL;AA3nC7B;AAAA;;AAAA;AAAA;AA8nC2D;AAAnD;;AA9nCR;AAAA;;AAAA;AAAA;AA+nCmC;;;AAA3B;AAAA;;AAGa;ACtyCgB;;ADsyChB;AAAA;;AAAA;;AACW;;;AAAyB;;;AAEhC;;AAAA;;AAAyB;;AAAzC;AAAP;AACuB;;AAAA;;AAAhB;;AAAA;AAAP;AACuB;;AAAA;;AAAhB;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAGM;AAAiB;AAAjB;;AA/vCR;AAAA;AAAA;AAAA;AAkwC+C;AAAvC;;AACN;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAQyB;;AAAA;;AA5pC3B;AAAA;;AAAA;AAAA;AA6pCoE;AAAjC;AA7pCnC;;AA6pCE;AAAA;AAEA;AAGiC;;AA1DM;;AA0DN;;;;;;;;;;;;;;AAHjC;;;ACh0CoC;;;ADg0CpC;AArqCoF;;AAAA;;AAAA;AAgrCrC;AAAA;AAAA;AACI;AAAhB;;AAAgB;AAA7C;;AAAuB;AAEZ;;AAAA;;;AACI;;AAAA;;;AACF;;AAAA;AACQ;;AAAA;;;AACD;;AAAA;;;AALe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAzC;AArsCF;AAAA;;AAAA;AAAA;AA8sC6B;;AAAA;AAAA;;AAAA;AA9sC7B;;AA8sCE;AAAA;AACA;;;AA4BM;;AAAA;AAAsC;;AAAhB;AAE5B;AA5yCF;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AA4yCE;;;ACr3CoC;;;ADq3CpC;AASA;AAIiB;;AAAA;AAAA;;;;;;;;;AAJjB;;;AC93CoC;;;AD83CpC;AAlCA;;AAAA;;;AACE;;;;;;;;;;;;;AAAA;;;AC71CkC;;;AD61ClC;AAWwB;;;AAvtC5B;;AAutCE;AAAA;;;;;;AA9D2D;;AAAA;;AAAA;;AAAA;;;;;;AAmG7D;;;AA31CA;AAAA;AAAA;AAAA;AA41CiC;;;AAChB;;AAAA;AC54CoB;;AD64C5B;AAAP;AAQF;;;;;;;AA1vCuD;;AA4vCtB;;AA5vCsB;AA4vCd;AAAA;;AAAvC;AAntCF;AAAA;;AAAA;AAAA;AAotCmC;AAAW;AAArC;AAAP;AACA;;;;AA9vCqD;;AAgwCjB;;AAhwCiB;AAgwCT;AAAA;AACF;AAAA;;;AApwC0C;;AAAA;AAAA;AA6W9C;AAAA;AAw5BpB;;AAAiB;AAA5B;;AAAA;AAAP;AAEyB;;;AAAA;AAAA;AAAA;;AACzB;;;AAA+B;;AAAiB;AAA5B;;AAAA;AAId;AAAA;;;AAAA;AAAA;;AAAA;;AACA;;AAAiB;AAFjB;;AAAwB;;;AAAxB;AAAA;;AAOA;;AAAmB;;;AC36CO;;AD66CX;AAz1CvB;AAAA;;AAAA;AAAA;AA01CwC;AAAhC;AAAA;;AAGF;AAAJ;;;AAAmD;AAAP;;AAAA;AAGtC;;AAAA;;AAAuB;AAIN;AAAA;;;;;;;;AAAA;;;;AC17Ca;;;AD07Cb;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;AC97Cc;;;AD87Cd;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAnyC8D;;AAAA;;AAAA;AA6W9C;AAAA;AA67BG;;;AAAvB;;;AAGD;;ACr8CkB;;ADq8ClB;AACX;;AAA8B;AAGnB;;AAAA;AACX;;AAAuB;AAE7B;;AAAA;AAuEF;;;;;;;AAEE;;AAAA;AAj1CF;AAAA;;AAAA;AAAA;AAk1CmC;AAAW;AAArC;AAAP;AACwB;;AA53C6B;;AA43C/C;;AA53C+C;AAAA;;AA63CnB;AAAA;;AAAlC;AACA;;;;AACwC;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAE5B;AAAA;;;AAAA;;AAAA;;AAAkB;AAAvB;;AAAA;AAAP;AAEmD;;AAAA;AAAA;AAAA;;AAt4CiC;;AAAA;AAAA;AAu4C5C;AAAA;AAAA;;AAAxC;AAC+C;AAAA;AAClC;;AAAiB;AAAvB;;AAAA;AAAP;AA3EkC;AAAA;AAAA;;AAAlC;AAlxCF;AAAA;;AAAA;AAAA;AAmxCmC;AAAW;AAArC;AAAP;AACA;;;;AAEuC;AAAA;AACG;AAAA;;;AAn0C0C;;AAAA;AAAA;AA6W9C;AAAA;AAu9BpB;;AAAiB;AAA5B;;AAAA;AAAP;AACyB;;;AAAA;AAAA;AAAA;;AACzB;;;AAA+B;;AAAiB;AAsEzC;;AAAA;AAAP;AACyC;;AAAA;AAAjB;;AAAiB;AAAlC;;AAAA;;AAAA;AAAP;AACM;;AAAoB;AAG1B;;;;;;;;;;;;;;;;AAAA;;;AC5iDoC;;;AD4iDpC;AAaoB;AAvgDtB;AAAA;AAAA;AAAA;AA0gDc;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKA;;AAAA;;;AACG;;AAAA;;;AAXN;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaf;;AAAA;AAAA;AAGA;;AAAA;;AAAA;;;AAG0B;;;AAx7C5B;;AAw7CE;AAAA;;AApGM;AAAA;;;AAAA;AAAA;;AAAA;;AACA;;AAAiB;AAFjB;;AAAwB;;;AAAxB;AAAA;;AAOA;;AAAmB;;;ACz+CO;;AD2+CX;AAv5CvB;AAAA;;AAAA;AAAA;AAw5CwC;AAAhC;AAAA;;AAGF;AAAJ;;;AAAmD;AAqDnC;;;AAlDV;;AAAA;;AAAuB;AAIN;AAAA;;;;;;;;AAAA;;;;ACx/Ca;;;ADw/Cb;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;AC5/Cc;;;AD4/Cd;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAj2C8D;;AAAA;;AAAA;AA6W9C;AAAA;AA2/BG;;;AAAvB;;;AAGD;;ACngDkB;;ADmgDlB;AACX;;AAA8B;AAGnB;;AAAA;AACX;;AAAuB;AA2Bb;;;AAuHlB;;;;;;;;AA//CuD;;AAAA;;AAAA;AAAA;;AAsgDrB;AAAA;;AAAhC;AA79CF;AAAA;;AAAA;AAAA;AA89CmC;AAAW;AAArC;AAAP;AACA;;;;AAEqC;AAAA;AAAA;AAAA;;AAAA;AAC/B;AAAuB;;;AAAvB;AACA;AAAyB;;AAAiB;AAA1C;AACmB;;;AAAA;AAAA;AACzB;AACO;;AAAA;;;AAAuB;;AAAA;;AAAA;AAAvB;;;;AAAP;AAGM;;AAAA;;AAAA;;AAAwB;;;AAAxB;AAAA;;AACA;;AAAmB;;;AAAnB;AAAA;;AACN;AAAA;AAGmB;ACnrDa;;ADmrDb;AACb;;AAAiB;AA7lDzB;AAAA;;AAAA;AAAA;AA8lDS;AAAP;AAroDF;AAAA;AAAA;AAAA;AAwoD+C;AAAvC;;AACN;;AAAA;;AACiB;;AADjB;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAzoDF;AAAA;AAAA;AAAA;AAipDoB;;;AAAZ;;AACA;;AAAA;AAAqC;;AAAX;AACA;AAAA;;AAAA;AAAA;;AA3hDlC;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA8hDQ;;AAAqB;AAArB;AAAA;;;;;;AAGF;;;AAAuB;;AAAA;;AAAA;;;;;AAAvB;;;;;;;AAIe;;AAAA;;AAAA;AC5sDgB;;AD6sDV;AC9sDO;;ADgtDE;;AAAA;AAAA;AAAA;;AAAf;AChtDa;;ADitDP;AAxjD2D;;AAAA;;AAAA;AAAA;AAAA;;AA6W9C;AAAA;AAAA;AAklC4C;;;AAA1D;;;AACH;;ACxlDc;;ADwlDd;AACf;;AAA0B;AAplCM;AAAA;AAAA;AAulCpB;;AAAiB;AAA5B;;AAAA;AAAP;AAGa;AAAA;;;;;;;;AAAA;;;;AClmDuB;;;ADkmDvB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIC;AAAA;;;;;;;;AAAA;;;;ACtmDsB;;;ADsmDtB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIG;;AAAA;AACb;;AAAmB;AAAnB;AAAA;;AAEA;;AAAA;AAAJ;;;;;;;AA0GA;;AAAA;AAAA;AA/FA;;;AAA2B;;;AAkGvB;;AAAA;;AAAA;AAAJ;;;;;;;AAII;;AAAA;;AAAA;AAAJ;;;;;;;AAKkC;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAE9B;;AAAA;;;AACI;;AAAA;;AAA4B;AAClC;;;AACyC;;AAAA;;AAAA;ACruDR;;ADsuDF;AAAvB;AAAA;;AAEyB;AAA3B;;AACA;;AAAA;AAAJ;;;AACE;;AAAA;;AAAmB;AAAnB;;AAG2C;;AAAA;;AAAA;AC9uDjB;;AD+uDI;AAA1B;AAAA;;AAE+B;AAAjC;;AACA;;AAAA;AAAJ;;;AACE;;AAAA;;AAAyB;AAAzB;;AAGqB;;ACtvDK;;ADsvDL;AAAA;;AAAA;AAAA;;AACE;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AACR;AAAA;;;AAAmB;;AAAA;;AAAA;AAAA;;;AAAoB;;AAAA;;AAAA;AAApB;;;;AACpC;AAIsB;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAC1B;AAC6B;;;AAAqB;;;AAGlD;AAE0B;;AACH;;AA9FM;;AA8FN;AAAA;AAAA;;;;;;;;;;;;;AAHvB;;;ACpwDoC;;;ADowDpC;AASM;;AAAA;;AAAuB;AAAvB;;AACA;;AAAA;;AAAA;AAAA;;AAAsB;AAAtB;;AAGN;;AAAA;AAAA;;;AAzoDF;AAAA;;AAAA;AAAA;AA0oD6B;;AAAA;AA1oD7B;;AA0oDE;AAAA;AACA;;;AAEA;;AAAA;;;AACE;AAE0B;;;;;;;;;;;;;;;AAF1B;;;ACtxDkC;;;ADsxDlC;AAQA;;;AAGF;;AAAA;;;AAEE;;AAAA;;;AACE;;;;;;;;;;;;;;AAAA;;;ACpyDgC;;;ADoyDhC;AAQA;;AAAA;AAAA;;;AAEuB;;AAAA;;AA7oD7B;AAAA;;AAAA;AAAA;AA8oDsE;AAAjC;AA9oDrC;;AA8oDI;AAAA;AAmBwB;;;AAjrD5B;;AAirDE;AAAA;;AAfyB;;AAAA;AAAA;;;AACE;AAAA;;;AACL;;AAAA;AAnwDxB;AAAA;AAAA;AAAA;AAqwDiB;;AAAA;AA5qDjB;AAAA;;AAAA;AAAA;AA6qDoB;AAEJ;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAPH;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaf;;AAAA;AAAA;;;;AA9DoD;;AAAA;;AAAA;;;;;;;;;;AAzvChB;;AAAA;AAAA;AAmnCH;AAAjB;;AAAiB;AAA5B;;AAAA;AAAP;AAEa;AAAA;;;;;;;;AAAA;;;;AC7nDuB;;;AD6nDvB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIC;AAAA;;;;;;;;AAAA;;;;ACjoDsB;;;ADioDtB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIqB;;AAAA;AAC7B;;AAA2B;AAEsB;AAAA;;;AAA/B;;;AACO;ACtoDI;;ADuoDJ;ACxoDC;;AD0oDD;AACzB;;AAAmB;AC1oDU;;AD4oDF;AAC3B;;AAAoB;;;AAyEG;;;;;;;;;;;AAmH/B;;;AA9qDuD;;AAAA;;AAAA;AAwrDnB;AAAA;AAAA;;AAAlC;AAC0C;AAAA;AACS;AAAA;;;AA7rDiC;;AAAA;AAAA;AA6W9C;AAAA;AAi1CtC;;;;AACqB;AAAA;;;AACf;AAAkC;;AAAiB;AAlwD3D;AAAA;;AAAA;AAAA;AAswDW;;AAAA;;;AAE2B;;AAAjB;;AAAiB;AAH9B;;AAAA;AAA6B;;;AAMf;ACl2DY;;ADk2DZ;AAAd;;AAAa;AACb;AAAA;;AAAyB;AACzB;;AAAA;;AAAoB;AAE1B;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AA+CF;;;AA5vDsF;;AAAA;;AAAA;AAmW9C;AAAA;AAAA;;AA25CtC;AAj5CsC;AAAA;AAAA;AAm5ChB;;AAAiB;AAAhC;;AAAA;AAAP;AAE+B;AAAA;;;;;;;;AAAA;;;;AC75DK;;;AD65DL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAKD;AAAA;;;;;;;;AAAA;;;;ACl6DM;;;ADk6DN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAMb;;AAAA;AACX;;AAAuB;AAj6CS;AAAA;AAAA;AAq6CJ;;;AAEX;;;AAGN;AC/6DkB;;ADg7Db;AAEtB;AAkHF;;;;;AAEgB;;AAh+DhB;AAAA;AAAA;AAAA;AAg+DS;AAAP;AAl2DF;AAAA;;AAAA;AAAA;AAm2DmC;AAAW;AAArC;AAAP;AAx/DF;AAAA;AAAA;AAAA;AA0/DmD;AACH;;AAAzB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAn3DvB;AAAA;;AAAA;AAAA;AAq3DM;AAAJ;;;AACE;AAt3DJ;AAAA;;AAAA;AAAA;AAy3DQ;;AAAA;AAAoB;AAApB;AAAA;;AC5iEuC;;AD6iEzC;AAAJ;;;AACE;AAGF;;AAAA;AAAA;;;AAt4DF;AAAA;;AAAA;AAAA;AAw4DmB;;AAAA;AACuB;;AAAb;AAv4D7B;AAAA;;AAAA;AAAA;AAy4DE;;AAAA;AAz4DF;;AAy4DE;AAAA;AAv4DF;AAAA;;AAAA;AAAA;AAw4DE;;AAAA;AAx4DF;;AAw4DE;AAAA;AAE0B;AAx4D5B;AAAA;;AAAA;AAAA;AAy4DE;;AAAA;AAz4DF;;AAy4DE;AAAA;AAlgEF;AAAA;AAAA;AAAA;AAmgEE;AAngEF;AAmgEE;AAAA;;AAGF;;;AACgB;;AAr4DhB;AAAA;;AAAA;AAAA;AAq4DS;AAAP;AAEmD;;AAAA;AA76DiC;;AAAA;AAAA;AA86D5C;AAAA;;AAAxC;AACkE;;AAAxC;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAC1B;;;AACE;AA34DJ;AAAA;;AAAA;AAAA;;;;;;;;;;;AA24DI;;;AC5kEkC;;;AD4kElC;;AAgBJ;;;AAEgB;;AA75DhB;AAAA;;AAAA;AAAA;AA65DS;AAAP;AACsB;;AAAtB;;;AACA;;AAAA;;ACxlEiC;;;;ADwlEjC;AAAA;AA3iEF;AAAA;;AAAA;AAAA;AA8iEiD;AACJ;;AAAxB;AAAA;;AAAA;AAGnB;AAt6DF;AAAA;;AAAA;AAAA;AA5IA;AAAA;;AAAA;AAAA;AAqjEyC;;;;;;;;;AAHvC;;;ACvmEoC;;;ADumEpC;AArjEF;AAAA;AAAA;AAAA;AA8jEmD;AACH;;AAAzB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACrB;;;AACE;AAl7DJ;AAAA;;AAAA;AAAA;AA/IA;AAAA;AAAA;AAAA;AAokE4C;;;;;;;;;AAHxC;;;ACnnEkC;;;ADmnElC;AA/8DJ;AAAA;;AAAA;AAAA;AA09DgC;AAp8DhC;AAAA;;AAAA;AAAA;AAq8DkB;AAnkElB;AAAA;;AAAA;AAAA;AAokEqB;AAjkErB;AAAA;AAAA;AAAA;AAkkEoB;AAz/DpB;AAAA;;AAAA;AAAA;AA0/DmB;AA18DnB;AAAA;;AAAA;AAAA;AA28D8B;AA78D9B;AAAA;;AAAA;AAAA;AA88D6B;AAh9D7B;AAAA;;AAAA;AAAA;AAi9DoC;AAnkEpC;AAAA;;AAAA;AAAA;AAokEc;AA3/Dd;AAAA;;AAAA;AAAA;AA4/DoB;AArlEpB;AAAA;AAAA;AAAA;AAslEwD;AAArC;AAnlEnB;AAAA;;AAAA;AAAA;AAolEsD;AAApC;AAl+DlB;AAAA;;AAAA;AAAA;AAm+D4D;AAAvC;AAx9DrB;AAAA;;AAAA;AAAA;AAy9D2B;AAj+D3B;AAAA;;AAAA;AAAA;AAk+DmB;AA3+DnB;AAAA;;AAAA;AAAA;AA4+DyB;AAhBhB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AAAA;AA4BF;;;AAQgB;;AAh+DhB;AAAA;;AAAA;AAAA;AAg+DS;AAAP;AACA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AA7mEF;AAAA;;AAAA;AAAA;AAgnE6C;AAH3C;AAAA;;;;AAAA;AAKA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEmB;;AAFnB;AAAA;;;;AAAA;AAIA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAznEF;AAAA;AAAA;AAAA;AA4nE8C;AAH5C;AAAA;;;;AAAA;AAOgD;;AAAb;;AAAa;AAx/DlD;;AAw/DE;AAAA;AACoD;;AAAf;AAAe;AApnEtD;AAonEE;AAAA;AACsD;;AAAhB;;AAAgB;AAxnExD;;AAwnEE;AAAA;AACkD;;AAAd;;AAAc;AA7iEpD;;AA6iEE;AAAA;AACwE;;AAAzB;;AAAyB;AA9/D1E;;AA8/DE;AAAA;AACsE;;AAAxB;;AAAwB;AAjgExE;;AAigEE;AAAA;AACoF;;AAA/B;;AAA+B;AApgEtF;;AAogEE;AAAA;AACwC;;AAAT;;AAAS;AAvnE1C;;AAunEE;AAAA;AACsD;;AAAf;;AAAe;AA/iExD;;AA+iEE;AAAA;AAC4E;;AAA3B;;AAA2B;AAvhE9E;;AAuhEE;AAAA;AAC8D;;AAAd;;AAAc;AAAnC;AA1oE7B;AA0oEE;AAAA;AAC4D;;AAAb;;AAAa;AAAlC;AAxoE5B;;AAwoEE;AAAA;AACkE;;AAAhB;;AAAgB;AAArC;AAvhE/B;;AAuhEE;AAAA;AACkE;;AAAtB;;AAAsB;AA7gEpE;;AA6gEE;AAAA;AACkD;;AAAd;;AAAc;AAthEpD;;AAshEE;AAAA;AAC8D;;AAApB;;AAAoB;AAhiEhE;;AAgiEE;AAAA;AA1/DF;;AA4/D8B;;;;;;;;;;AAA5B;;;;;;;;;;;;;;AAOF;;;AAhhEA;AAAA;;AAAA;AAAA;AAihE4B;;AAAA;AAjhE5B;;AAihEE;AAAA;;AAQF;;;AAzhEA;AAAA;;AAAA;AAAA;AA0hES;;AAAA;AAAP;AA1hEF;AAAA;;AAAA;AAAA;AA2hE4B;;AAAA;AA3hE5B;;AA2hEE;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000 4 10000 1000000 1000000000000"
    },
    "19": {
      "op": "bytecblock \"base_token_id\" 0x151f7c75 \"admin_account\" \"total_deposits\" \"total_borrows\" \"contract_state\" \"accepted_collaterals\" \"loan_record\" \"circulating_lst\" \"active_loan_records\" \"lst_token_id\" \"borrow_index_wad\" \"last_apr_bps\" \"cash_on_hand\" \"migration_admin\" \"fee_pool\" 0x09ef525f 0xae859f3b \"buyout_token_id\" \"current_accumulated_commission\" \"accepted_collaterals_count\" \"max_apr_bps\" \"liq_threshold_bps\" \"base_bps\" \"liq_bonus_bps\" \"total_commission_earned\" \"total_additional_rewards\" 0x00 \"ltv_bps\" \"util_cap_bps\" \"prev_apr_bps\" \"last_accrual_ts\" \"commission_percentage\" \"flux_oracle_app\" 0x0000000000000000 \"rate_model_type\" \"kink_norm_bps\" \"slope1_bps\" \"slope2_bps\" \"origination_fee_bps\" \"protocol_share_bps\" \"oracle_app\" \"ema_alpha_bps\" \"power_gamma_q16\" \"scarcity_K_bps\" \"deposit_record\""
    },
    "695": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "697": {
      "op": "bz main_after_if_else@39",
      "stack_out": []
    },
    "700": {
      "op": "pushbytess 0x3b01665e 0xd2600ca9 0x6ca100cd 0x34b8343e 0xca7a1795 // method \"createApplication(account,uint64)void\", method \"initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void\", method \"setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void\", method \"setContractState(uint64)void\", method \"setMigrationAdmin(account)void\"",
      "defined_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)"
      ]
    },
    "727": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "729": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "731": {
      "op": "pushbytess 0x6c6337c0 0x17c33662 0x5efce39a 0x5cac25a9 0xe596ac73 0x86a6b1bb 0xc0799344 0x72c5c57b 0x3e41a49b 0x15a5b25e 0x8553cffa 0xb4a74766 0xae99f45b 0x3dea8a60 0xd217f842 0xc5089c7e 0xd0e69812 0x5f0d6f03 0xc861aedf 0xdaa7f7f2 0x3172ca9d 0xef0bd27a 0x6e06c709 0x0ac83b5d 0xd0b8a7de 0xe8af118d // method \"getAcceptedCollateralsCount()uint64\", method \"generateLSTToken(pay)void\", method \"optInToLST(uint64,pay)void\", method \"configureLSTToken(axfer,uint64)void\", method \"getOraclePrice(uint64)uint64\", method \"addNewCollateralType(uint64,uint64,pay,uint64)void\", method \"addLoanRecordExternal(uint64,uint64,account,uint64)void\", method \"depositASA(axfer,uint64,pay)void\", method \"withdrawDeposit(axfer,uint64,uint64,pay)void\", method \"borrow(axfer,uint64,uint64,uint64,uint64,pay)void\", method \"accrueLoanInterest(account,account)void\", method \"current_apr_bps()uint64\", method \"getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)\", method \"repayLoanASA(axfer,uint64)void\", method \"withdrawPlatformFees(account,pay)void\", method \"buyoutSplitASA(account,account,axfer,axfer,uint64,pay)void\", method \"maxWithdrawableCollateralLST(uint64)uint64\", method \"withdrawCollateral(uint64,uint64,uint64)void\", method \"liquidatePartialASA(account,axfer,uint64,uint64)void\", method \"getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)\", method \"gas()void\", method \"calculateCollateralValueUSD(uint64,uint64,uint64)uint64\", method \"pickupASARewards()void\", method \"migrateCollateralTokenId(uint64,pay)void\", method \"migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)\", method \"acceptMigrationASAContract(axfer,pay,axfer,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void\"",
      "defined_out": [
        "Method(acceptMigrationASAContract(axfer,pay,axfer,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64,pay)void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(liquidatePartialASA(account,axfer,uint64,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(optInToLST(uint64,pay)void)",
        "Method(pickupASARewards()void)",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64,pay)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(liquidatePartialASA(account,axfer,uint64,uint64)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(pickupASARewards()void)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(acceptMigrationASAContract(axfer,pay,axfer,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)"
      ]
    },
    "863": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(acceptMigrationASAContract(axfer,pay,axfer,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64,pay)void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(liquidatePartialASA(account,axfer,uint64,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(optInToLST(uint64,pay)void)",
        "Method(pickupASARewards()void)",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64,pay)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(liquidatePartialASA(account,axfer,uint64,uint64)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(pickupASARewards()void)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(acceptMigrationASAContract(axfer,pay,axfer,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)",
        "tmp%2#0"
      ]
    },
    "866": {
      "op": "match main_createApplication_route@3 main_initApplication_route@4 main_setRateParams_route@5 main_setContractState_route@6 main_setMigrationAdmin_route@7 main_getCirculatingLST_route@8 main_getTotalDeposits_route@9 main_getAcceptedCollateralsCount_route@10 main_generateLSTToken_route@11 main_optInToLST_route@12 main_configureLSTToken_route@13 main_getOraclePrice_route@14 main_addNewCollateralType_route@15 main_addLoanRecordExternal_route@16 main_depositASA_route@17 main_withdrawDeposit_route@18 main_borrow_route@19 main_accrueLoanInterest_route@20 main_current_apr_bps_route@21 main_getLoanRecord_route@22 main_repayLoanASA_route@23 main_withdrawPlatformFees_route@24 main_buyoutSplitASA_route@25 main_maxWithdrawableCollateralLST_route@26 main_withdrawCollateral_route@27 main_liquidatePartialASA_route@28 main_getLoanStatus_route@29 main_gas_route@30 main_calculateCollateralValueUSD_route@31 main_pickupASARewards_route@32 main_migrateCollateralTokenId_route@33 main_migrateContract_route@34 main_acceptMigrationASAContract_route@35",
      "stack_out": []
    },
    "934": {
      "block": "main_after_if_else@39",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "935": {
      "op": "return",
      "stack_out": []
    },
    "936": {
      "block": "main_acceptMigrationASAContract_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%230#0"
      ],
      "stack_out": [
        "tmp%230#0"
      ]
    },
    "938": {
      "op": "!",
      "defined_out": [
        "tmp%231#0"
      ],
      "stack_out": [
        "tmp%231#0"
      ]
    },
    "939": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "940": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%232#0"
      ],
      "stack_out": [
        "tmp%232#0"
      ]
    },
    "942": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "943": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%234#0"
      ],
      "stack_out": [
        "tmp%234#0"
      ]
    },
    "945": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%234#0"
      ],
      "stack_out": [
        "tmp%234#0",
        "3"
      ]
    },
    "947": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%19#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0"
      ]
    },
    "948": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%19#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%19#0 (copy)"
      ]
    },
    "949": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_type%19#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_type%19#0"
      ]
    },
    "951": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%19#0",
        "gtxn_type%19#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_type%19#0",
        "axfer"
      ]
    },
    "952": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_type_matches%19#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_type_matches%19#0"
      ]
    },
    "953": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%19#0"
      ]
    },
    "954": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%19#0",
        "tmp%235#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "tmp%235#0"
      ]
    },
    "956": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "gtxn_idx%19#0",
        "tmp%235#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "tmp%235#0",
        "2"
      ]
    },
    "958": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0"
      ]
    },
    "959": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%20#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%20#0 (copy)"
      ]
    },
    "960": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0"
      ]
    },
    "962": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0",
        "pay"
      ]
    },
    "963": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type_matches%20#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_type_matches%20#0"
      ]
    },
    "964": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0"
      ]
    },
    "965": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "tmp%236#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "tmp%236#0"
      ]
    },
    "967": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "tmp%236#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "tmp%236#0",
        "1"
      ]
    },
    "968": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0"
      ]
    },
    "969": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "gtxn_idx%21#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "gtxn_idx%21#0 (copy)"
      ]
    },
    "970": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "gtxn_type%21#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "gtxn_type%21#0"
      ]
    },
    "972": {
      "op": "intc_3 // axfer",
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "gtxn_type%21#0",
        "axfer"
      ]
    },
    "973": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "gtxn_type_matches%21#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "gtxn_type_matches%21#0"
      ]
    },
    "974": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0"
      ]
    },
    "975": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "reinterpret_bytes[128]%0#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "reinterpret_bytes[128]%0#0"
      ]
    },
    "978": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "reinterpret_bytes[128]%0#0",
        "reinterpret_bytes[1]%13#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "reinterpret_bytes[128]%0#0",
        "reinterpret_bytes[1]%13#0"
      ]
    },
    "981": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%237#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%237#0"
      ]
    },
    "982": {
      "op": "txnas Accounts",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%238#0"
      ],
      "stack_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%20#0",
        "gtxn_idx%21#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%238#0"
      ]
    },
    "984": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.acceptMigrationASAContract",
      "op": "callsub acceptMigrationASAContract",
      "stack_out": []
    },
    "987": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "988": {
      "op": "return",
      "stack_out": []
    },
    "989": {
      "block": "main_migrateContract_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%223#0"
      ],
      "stack_out": [
        "tmp%223#0"
      ]
    },
    "991": {
      "op": "!",
      "defined_out": [
        "tmp%224#0"
      ],
      "stack_out": [
        "tmp%224#0"
      ]
    },
    "992": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "993": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%225#0"
      ],
      "stack_out": [
        "tmp%225#0"
      ]
    },
    "995": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "996": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%227#0"
      ],
      "stack_out": [
        "tmp%227#0"
      ]
    },
    "998": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%227#0"
      ],
      "stack_out": [
        "tmp%227#0",
        "1"
      ]
    },
    "999": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%18#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0"
      ]
    },
    "1000": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)"
      ]
    },
    "1001": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ]
    },
    "1003": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "pay"
      ]
    },
    "1004": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0"
      ]
    },
    "1005": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%18#0"
      ]
    },
    "1006": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.migrateContract",
      "op": "callsub migrateContract",
      "defined_out": [
        "tmp%228#0"
      ],
      "stack_out": [
        "tmp%228#0"
      ]
    },
    "1009": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%228#0"
      ],
      "stack_out": [
        "tmp%228#0",
        "0x151f7c75"
      ]
    },
    "1010": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%228#0"
      ]
    },
    "1011": {
      "op": "concat",
      "defined_out": [
        "tmp%229#0"
      ],
      "stack_out": [
        "tmp%229#0"
      ]
    },
    "1012": {
      "op": "log",
      "stack_out": []
    },
    "1013": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1014": {
      "op": "return",
      "stack_out": []
    },
    "1015": {
      "block": "main_migrateCollateralTokenId_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%217#0"
      ],
      "stack_out": [
        "tmp%217#0"
      ]
    },
    "1017": {
      "op": "!",
      "defined_out": [
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0"
      ]
    },
    "1018": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1019": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%219#0"
      ],
      "stack_out": [
        "tmp%219#0"
      ]
    },
    "1021": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1022": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%48#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%48#0"
      ]
    },
    "1025": {
      "op": "btoi",
      "defined_out": [
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0"
      ]
    },
    "1026": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%221#0",
        "tmp%222#0"
      ],
      "stack_out": [
        "tmp%221#0",
        "tmp%222#0"
      ]
    },
    "1028": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%221#0",
        "tmp%222#0"
      ],
      "stack_out": [
        "tmp%221#0",
        "tmp%222#0",
        "1"
      ]
    },
    "1029": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%17#0",
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0",
        "gtxn_idx%17#0"
      ]
    },
    "1030": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)",
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0",
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)"
      ]
    },
    "1031": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0"
      ]
    },
    "1033": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "pay",
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "pay"
      ]
    },
    "1034": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0",
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0",
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0"
      ]
    },
    "1035": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%221#0",
        "gtxn_idx%17#0"
      ]
    },
    "1036": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.migrateCollateralTokenId",
      "op": "callsub migrateCollateralTokenId",
      "stack_out": []
    },
    "1039": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1040": {
      "op": "return",
      "stack_out": []
    },
    "1041": {
      "block": "main_pickupASARewards_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%213#0"
      ],
      "stack_out": [
        "tmp%213#0"
      ]
    },
    "1043": {
      "op": "!",
      "defined_out": [
        "tmp%214#0"
      ],
      "stack_out": [
        "tmp%214#0"
      ]
    },
    "1044": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1045": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%215#0"
      ],
      "stack_out": [
        "tmp%215#0"
      ]
    },
    "1047": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1048": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.pickupASARewards",
      "op": "callsub pickupASARewards"
    },
    "1051": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1052": {
      "op": "return",
      "stack_out": []
    },
    "1053": {
      "block": "main_calculateCollateralValueUSD_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%206#0"
      ],
      "stack_out": [
        "tmp%206#0"
      ]
    },
    "1055": {
      "op": "!",
      "defined_out": [
        "tmp%207#0"
      ],
      "stack_out": [
        "tmp%207#0"
      ]
    },
    "1056": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1057": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%208#0"
      ],
      "stack_out": [
        "tmp%208#0"
      ]
    },
    "1059": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1060": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%45#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0"
      ]
    },
    "1063": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "reinterpret_bytes[8]%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "reinterpret_bytes[8]%46#0"
      ]
    },
    "1066": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%210#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%210#0"
      ]
    },
    "1067": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "reinterpret_bytes[8]%47#0",
        "tmp%210#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%210#0",
        "reinterpret_bytes[8]%47#0"
      ]
    },
    "1070": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%210#0",
        "tmp%211#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%210#0",
        "tmp%211#0"
      ]
    },
    "1071": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "1074": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0"
      ]
    },
    "1075": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0",
        "0x151f7c75"
      ]
    },
    "1076": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ]
    },
    "1077": {
      "op": "concat",
      "defined_out": [
        "tmp%212#0"
      ],
      "stack_out": [
        "tmp%212#0"
      ]
    },
    "1078": {
      "op": "log",
      "stack_out": []
    },
    "1079": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1080": {
      "op": "return",
      "stack_out": []
    },
    "1081": {
      "block": "main_gas_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0"
      ]
    },
    "1083": {
      "op": "!",
      "defined_out": [
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%203#0"
      ]
    },
    "1084": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1085": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%204#0"
      ],
      "stack_out": [
        "tmp%204#0"
      ]
    },
    "1087": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1088": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1089": {
      "op": "return",
      "stack_out": []
    },
    "1090": {
      "block": "main_getLoanStatus_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%195#0"
      ]
    },
    "1092": {
      "op": "!",
      "defined_out": [
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0"
      ]
    },
    "1093": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1094": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%197#0"
      ],
      "stack_out": [
        "tmp%197#0"
      ]
    },
    "1096": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1097": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%12#0"
      ]
    },
    "1100": {
      "op": "btoi",
      "defined_out": [
        "tmp%199#0"
      ],
      "stack_out": [
        "tmp%199#0"
      ]
    },
    "1101": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%200#0"
      ],
      "stack_out": [
        "tmp%200#0"
      ]
    },
    "1103": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanStatus",
      "op": "callsub getLoanStatus",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ]
    },
    "1106": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%0#0"
      ]
    },
    "1108": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0"
      ]
    },
    "1109": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "elements_to_encode%1#0"
      ]
    },
    "1111": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "1112": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%2#0"
      ]
    },
    "1114": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "1115": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "elements_to_encode%3#0"
      ]
    },
    "1117": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "1118": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "elements_to_encode%4#0"
      ]
    },
    "1120": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "1121": {
      "op": "bytec 27 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00"
      ]
    },
    "1123": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00",
        "0"
      ]
    },
    "1124": {
      "op": "uncover 8",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00",
        "0",
        "elements_to_encode%5#0"
      ]
    },
    "1126": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%6#0",
        "encoded_bool%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0"
      ]
    },
    "1127": {
      "op": "bytec 27 // 0x00",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "1129": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00",
        "0"
      ]
    },
    "1130": {
      "op": "uncover 8",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00",
        "0",
        "elements_to_encode%6#0"
      ]
    },
    "1132": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "1133": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%6#0"
      ]
    },
    "1135": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "1137": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%10#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1138": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%8#0"
      ]
    },
    "1140": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%10#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1141": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%9#0"
      ]
    },
    "1143": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1144": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%10#0"
      ]
    },
    "1146": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1147": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_bool%0#0"
      ]
    },
    "1149": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1150": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0"
      ]
    },
    "1151": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "1152": {
      "op": "getbit",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ]
    },
    "1153": {
      "op": "pushint 321 // 321"
    },
    "1156": {
      "op": "swap",
      "defined_out": [
        "321",
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "321",
        "is_true%0#0"
      ]
    },
    "1157": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1158": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "0x151f7c75"
      ]
    },
    "1159": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1160": {
      "op": "concat",
      "defined_out": [
        "tmp%201#0"
      ],
      "stack_out": [
        "tmp%201#0"
      ]
    },
    "1161": {
      "op": "log",
      "stack_out": []
    },
    "1162": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1163": {
      "op": "return",
      "stack_out": []
    },
    "1164": {
      "block": "main_liquidatePartialASA_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%186#0"
      ],
      "stack_out": [
        "tmp%186#0"
      ]
    },
    "1166": {
      "op": "!",
      "defined_out": [
        "tmp%187#0"
      ],
      "stack_out": [
        "tmp%187#0"
      ]
    },
    "1167": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1168": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "1170": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1171": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%11#0"
      ]
    },
    "1174": {
      "op": "btoi",
      "defined_out": [
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%190#0"
      ]
    },
    "1175": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0"
      ]
    },
    "1177": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%191#0",
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "tmp%192#0"
      ]
    },
    "1179": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%191#0",
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "tmp%192#0",
        "1"
      ]
    },
    "1180": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%16#0",
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0"
      ]
    },
    "1181": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)",
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)"
      ]
    },
    "1182": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0"
      ]
    },
    "1184": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "axfer"
      ]
    },
    "1185": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0",
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0"
      ]
    },
    "1186": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0"
      ]
    },
    "1187": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%16#0",
        "reinterpret_bytes[8]%43#0",
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "reinterpret_bytes[8]%43#0"
      ]
    },
    "1190": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%16#0",
        "tmp%191#0",
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "tmp%193#0"
      ]
    },
    "1191": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%16#0",
        "reinterpret_bytes[8]%44#0",
        "tmp%191#0",
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "tmp%193#0",
        "reinterpret_bytes[8]%44#0"
      ]
    },
    "1194": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%16#0",
        "tmp%191#0",
        "tmp%193#0",
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%191#0",
        "gtxn_idx%16#0",
        "tmp%193#0",
        "tmp%194#0"
      ]
    },
    "1195": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.liquidatePartialASA",
      "op": "callsub liquidatePartialASA",
      "stack_out": []
    },
    "1198": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1199": {
      "op": "return",
      "stack_out": []
    },
    "1200": {
      "block": "main_withdrawCollateral_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%179#0"
      ]
    },
    "1202": {
      "op": "!",
      "defined_out": [
        "tmp%180#0"
      ],
      "stack_out": [
        "tmp%180#0"
      ]
    },
    "1203": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1204": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "1206": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1207": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%40#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%40#0"
      ]
    },
    "1210": {
      "op": "btoi",
      "defined_out": [
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%183#0"
      ]
    },
    "1211": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%41#0",
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%183#0",
        "reinterpret_bytes[8]%41#0"
      ]
    },
    "1214": {
      "op": "btoi",
      "defined_out": [
        "tmp%183#0",
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%183#0",
        "tmp%184#0"
      ]
    },
    "1215": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%42#0",
        "tmp%183#0",
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%183#0",
        "tmp%184#0",
        "reinterpret_bytes[8]%42#0"
      ]
    },
    "1218": {
      "op": "btoi",
      "defined_out": [
        "tmp%183#0",
        "tmp%184#0",
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%183#0",
        "tmp%184#0",
        "tmp%185#0"
      ]
    },
    "1219": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawCollateral",
      "op": "callsub withdrawCollateral",
      "stack_out": []
    },
    "1222": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1223": {
      "op": "return",
      "stack_out": []
    },
    "1224": {
      "block": "main_maxWithdrawableCollateralLST_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "1226": {
      "op": "!",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "1227": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1228": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "1230": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1231": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%39#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%39#0"
      ]
    },
    "1234": {
      "op": "btoi",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "1235": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.maxWithdrawableCollateralLST",
      "op": "callsub maxWithdrawableCollateralLST",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "1238": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "1239": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "1240": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "1241": {
      "op": "concat",
      "defined_out": [
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%178#0"
      ]
    },
    "1242": {
      "op": "log",
      "stack_out": []
    },
    "1243": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1244": {
      "op": "return",
      "stack_out": []
    },
    "1245": {
      "block": "main_buyoutSplitASA_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "1247": {
      "op": "!",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "1248": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1249": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "1251": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1252": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "1255": {
      "op": "btoi",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "1256": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "1258": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%10#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "1261": {
      "op": "btoi",
      "defined_out": [
        "tmp%166#0",
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%167#0"
      ]
    },
    "1262": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0"
      ]
    },
    "1264": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%166#0",
        "tmp%168#0",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "tmp%169#0"
      ]
    },
    "1266": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%166#0",
        "tmp%168#0",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "tmp%169#0",
        "3"
      ]
    },
    "1268": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0"
      ]
    },
    "1269": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)"
      ]
    },
    "1270": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ]
    },
    "1272": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "axfer"
      ]
    },
    "1273": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0"
      ]
    },
    "1274": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0"
      ]
    },
    "1275": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%166#0",
        "tmp%168#0",
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "tmp%170#0"
      ]
    },
    "1277": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "gtxn_idx%13#0",
        "tmp%166#0",
        "tmp%168#0",
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "tmp%170#0",
        "2"
      ]
    },
    "1279": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0"
      ]
    },
    "1280": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)"
      ]
    },
    "1281": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type%14#0"
      ]
    },
    "1283": {
      "op": "intc_3 // axfer",
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "axfer"
      ]
    },
    "1284": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0"
      ]
    },
    "1285": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0"
      ]
    },
    "1286": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%38#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%38#0"
      ]
    },
    "1289": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%166#0",
        "tmp%168#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%171#0"
      ]
    },
    "1290": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%166#0",
        "tmp%168#0",
        "tmp%171#0",
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%171#0",
        "tmp%172#0"
      ]
    },
    "1292": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%166#0",
        "tmp%168#0",
        "tmp%171#0",
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%171#0",
        "tmp%172#0",
        "1"
      ]
    },
    "1293": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%15#0",
        "tmp%166#0",
        "tmp%168#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%171#0",
        "gtxn_idx%15#0"
      ]
    },
    "1294": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)",
        "tmp%166#0",
        "tmp%168#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%171#0",
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)"
      ]
    },
    "1295": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "tmp%166#0",
        "tmp%168#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%171#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0"
      ]
    },
    "1297": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "pay",
        "tmp%166#0",
        "tmp%168#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%171#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "pay"
      ]
    },
    "1298": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0",
        "tmp%166#0",
        "tmp%168#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%171#0",
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0"
      ]
    },
    "1299": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%171#0",
        "gtxn_idx%15#0"
      ]
    },
    "1300": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.buyoutSplitASA",
      "op": "callsub buyoutSplitASA",
      "stack_out": []
    },
    "1303": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1304": {
      "op": "return",
      "stack_out": []
    },
    "1305": {
      "block": "main_withdrawPlatformFees_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "1307": {
      "op": "!",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "1308": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1309": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "1311": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1312": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "1315": {
      "op": "btoi",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "1316": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "1318": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%159#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%159#0",
        "tmp%160#0"
      ]
    },
    "1320": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%159#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%159#0",
        "tmp%160#0",
        "1"
      ]
    },
    "1321": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%12#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0",
        "gtxn_idx%12#0"
      ]
    },
    "1322": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0",
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)"
      ]
    },
    "1323": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0"
      ]
    },
    "1325": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay"
      ]
    },
    "1326": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0",
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0"
      ]
    },
    "1327": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%159#0",
        "gtxn_idx%12#0"
      ]
    },
    "1328": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawPlatformFees",
      "op": "callsub withdrawPlatformFees",
      "stack_out": []
    },
    "1331": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1332": {
      "op": "return",
      "stack_out": []
    },
    "1333": {
      "block": "main_repayLoanASA_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "1335": {
      "op": "!",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "1336": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1337": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "1339": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1340": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "1342": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0",
        "1"
      ]
    },
    "1343": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1344": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ]
    },
    "1345": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ]
    },
    "1347": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0",
        "axfer"
      ]
    },
    "1348": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ]
    },
    "1349": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1350": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%37#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%37#0"
      ]
    },
    "1353": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%153#0"
      ]
    },
    "1354": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.repayLoanASA",
      "op": "callsub repayLoanASA",
      "stack_out": []
    },
    "1357": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1358": {
      "op": "return",
      "stack_out": []
    },
    "1359": {
      "block": "main_getLoanRecord_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "1361": {
      "op": "!",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "1362": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1363": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "1365": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1366": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "1369": {
      "op": "btoi",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "1370": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "1372": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "1375": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0",
        "0x151f7c75"
      ]
    },
    "1376": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%146#0"
      ]
    },
    "1377": {
      "op": "concat",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "1378": {
      "op": "log",
      "stack_out": []
    },
    "1379": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1380": {
      "op": "return",
      "stack_out": []
    },
    "1381": {
      "block": "main_current_apr_bps_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "1383": {
      "op": "!",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "1384": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1385": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "1387": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1388": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "1391": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "1392": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "1393": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "1394": {
      "op": "concat",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "1395": {
      "op": "log",
      "stack_out": []
    },
    "1396": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1397": {
      "op": "return",
      "stack_out": []
    },
    "1398": {
      "block": "main_accrueLoanInterest_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "1400": {
      "op": "!",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "1401": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1402": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "1404": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1405": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "1408": {
      "op": "btoi",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "1409": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "1411": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%6#0",
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0",
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "1414": {
      "op": "btoi",
      "defined_out": [
        "tmp%132#0",
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%132#0",
        "tmp%133#0"
      ]
    },
    "1415": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%132#0",
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%132#0",
        "tmp%134#0"
      ]
    },
    "1417": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueLoanInterest",
      "op": "callsub accrueLoanInterest",
      "stack_out": []
    },
    "1420": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1421": {
      "op": "return",
      "stack_out": []
    },
    "1422": {
      "block": "main_borrow_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "1424": {
      "op": "!",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "1425": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1426": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "1428": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1429": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "1431": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0",
        "2"
      ]
    },
    "1433": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1434": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ]
    },
    "1435": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ]
    },
    "1437": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0",
        "axfer"
      ]
    },
    "1438": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ]
    },
    "1439": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1440": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%33#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%33#0"
      ]
    },
    "1443": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%123#0"
      ]
    },
    "1444": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%34#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "reinterpret_bytes[8]%34#0"
      ]
    },
    "1447": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "tmp%124#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "tmp%124#0"
      ]
    },
    "1448": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%123#0",
        "tmp%124#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "tmp%124#0",
        "reinterpret_bytes[8]%35#0"
      ]
    },
    "1451": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0"
      ]
    },
    "1452": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0",
        "reinterpret_bytes[8]%36#0"
      ]
    },
    "1455": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0",
        "tmp%126#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%126#0"
      ]
    },
    "1457": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0",
        "tmp%126#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%126#0",
        "1"
      ]
    },
    "1458": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0",
        "reinterpret_bytes[8]%36#0",
        "gtxn_idx%10#0"
      ]
    },
    "1459": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)",
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0",
        "reinterpret_bytes[8]%36#0",
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)"
      ]
    },
    "1460": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0",
        "reinterpret_bytes[8]%36#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0"
      ]
    },
    "1462": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "pay",
        "reinterpret_bytes[8]%36#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0",
        "reinterpret_bytes[8]%36#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0",
        "pay"
      ]
    },
    "1463": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type_matches%10#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0",
        "reinterpret_bytes[8]%36#0",
        "gtxn_idx%10#0",
        "gtxn_type_matches%10#0"
      ]
    },
    "1464": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0",
        "reinterpret_bytes[8]%36#0",
        "gtxn_idx%10#0"
      ]
    },
    "1465": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.borrow",
      "op": "callsub borrow",
      "stack_out": []
    },
    "1468": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1469": {
      "op": "return",
      "stack_out": []
    },
    "1470": {
      "block": "main_withdrawDeposit_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "1472": {
      "op": "!",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "1473": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1474": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "1476": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1477": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "1479": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0",
        "2"
      ]
    },
    "1481": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1482": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ]
    },
    "1483": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ]
    },
    "1485": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "axfer"
      ]
    },
    "1486": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ]
    },
    "1487": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1488": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%31#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%31#0"
      ]
    },
    "1491": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%115#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%115#0"
      ]
    },
    "1492": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%32#0",
        "tmp%115#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%115#0",
        "reinterpret_bytes[8]%32#0"
      ]
    },
    "1495": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%115#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%115#0",
        "tmp%116#0"
      ]
    },
    "1496": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0"
      ]
    },
    "1498": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%7#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "1"
      ]
    },
    "1499": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "tmp%115#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%115#0",
        "tmp%116#0",
        "gtxn_idx%8#0"
      ]
    },
    "1500": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)",
        "tmp%115#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%115#0",
        "tmp%116#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)"
      ]
    },
    "1501": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "tmp%115#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%115#0",
        "tmp%116#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0"
      ]
    },
    "1503": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "pay",
        "tmp%115#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%115#0",
        "tmp%116#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "pay"
      ]
    },
    "1504": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0",
        "tmp%115#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%115#0",
        "tmp%116#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0"
      ]
    },
    "1505": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%115#0",
        "tmp%116#0",
        "gtxn_idx%8#0"
      ]
    },
    "1506": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawDeposit",
      "op": "callsub withdrawDeposit",
      "stack_out": []
    },
    "1509": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1510": {
      "op": "return",
      "stack_out": []
    },
    "1511": {
      "block": "main_depositASA_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "1513": {
      "op": "!",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "1514": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1515": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "1517": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1518": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "1520": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0",
        "2"
      ]
    },
    "1522": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1523": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ]
    },
    "1524": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ]
    },
    "1526": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "axfer"
      ]
    },
    "1527": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ]
    },
    "1528": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1529": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%30#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%30#0"
      ]
    },
    "1532": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%108#0"
      ]
    },
    "1533": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%108#0",
        "tmp%109#0"
      ]
    },
    "1535": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%5#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%108#0",
        "tmp%109#0",
        "1"
      ]
    },
    "1536": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%108#0",
        "gtxn_idx%6#0"
      ]
    },
    "1537": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)",
        "tmp%108#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%108#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)"
      ]
    },
    "1538": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%108#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0"
      ]
    },
    "1540": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay",
        "tmp%108#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%108#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay"
      ]
    },
    "1541": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%108#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0"
      ]
    },
    "1542": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%108#0",
        "gtxn_idx%6#0"
      ]
    },
    "1543": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.depositASA",
      "op": "callsub depositASA",
      "stack_out": []
    },
    "1546": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1547": {
      "op": "return",
      "stack_out": []
    },
    "1548": {
      "block": "main_addLoanRecordExternal_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "1550": {
      "op": "!",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "1551": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1552": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "1554": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1555": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%27#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%27#0"
      ]
    },
    "1558": {
      "op": "btoi",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "1559": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%28#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "reinterpret_bytes[8]%28#0"
      ]
    },
    "1562": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%4#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "1565": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%28#0",
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%100#0"
      ]
    },
    "1566": {
      "op": "txnas Accounts",
      "defined_out": [
        "reinterpret_bytes[8]%28#0",
        "tmp%101#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%101#0"
      ]
    },
    "1568": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%28#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%101#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%101#0",
        "reinterpret_bytes[8]%29#0"
      ]
    },
    "1571": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%28#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%101#0",
        "tmp%102#0"
      ]
    },
    "1572": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addLoanRecordExternal",
      "op": "callsub addLoanRecordExternal",
      "stack_out": []
    },
    "1575": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1576": {
      "op": "return",
      "stack_out": []
    },
    "1577": {
      "block": "main_addNewCollateralType_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "1579": {
      "op": "!",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "1580": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1581": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "1583": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1584": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0"
      ]
    },
    "1587": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ]
    },
    "1590": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%94#0"
      ]
    },
    "1592": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%94#0",
        "1"
      ]
    },
    "1593": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0"
      ]
    },
    "1594": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "1595": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "1597": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "1598": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "1599": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0"
      ]
    },
    "1600": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%26#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%26#0"
      ]
    },
    "1603": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addNewCollateralType",
      "op": "callsub addNewCollateralType",
      "stack_out": []
    },
    "1606": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1607": {
      "op": "return",
      "stack_out": []
    },
    "1608": {
      "block": "main_getOraclePrice_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "1610": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "1611": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1612": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "1614": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1615": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0"
      ]
    },
    "1618": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "1621": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "1622": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "1623": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "1624": {
      "op": "concat",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "1625": {
      "op": "log",
      "stack_out": []
    },
    "1626": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1627": {
      "op": "return",
      "stack_out": []
    },
    "1628": {
      "block": "main_configureLSTToken_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "1630": {
      "op": "!",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "1631": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1632": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "1634": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1635": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "1637": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0",
        "1"
      ]
    },
    "1638": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1639": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "1640": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "1642": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "1643": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "1644": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1645": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%22#0"
      ]
    },
    "1648": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%84#0"
      ]
    },
    "1649": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.configureLSTToken",
      "op": "callsub configureLSTToken",
      "stack_out": []
    },
    "1652": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1653": {
      "op": "return",
      "stack_out": []
    },
    "1654": {
      "block": "main_optInToLST_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "1656": {
      "op": "!",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1657": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1658": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1660": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1661": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0"
      ]
    },
    "1664": {
      "op": "btoi",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "1665": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%77#0",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "tmp%78#0"
      ]
    },
    "1667": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%77#0",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "tmp%78#0",
        "1"
      ]
    },
    "1668": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "gtxn_idx%2#0"
      ]
    },
    "1669": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "1670": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "1672": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "1673": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "1674": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%77#0",
        "gtxn_idx%2#0"
      ]
    },
    "1675": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.optInToLST",
      "op": "callsub optInToLST",
      "stack_out": []
    },
    "1678": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1679": {
      "op": "return",
      "stack_out": []
    },
    "1680": {
      "block": "main_generateLSTToken_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1682": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "1683": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1684": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1686": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1687": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "1689": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "1"
      ]
    },
    "1690": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1691": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "1692": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "1694": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "1695": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "1696": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1697": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.generateLSTToken",
      "op": "callsub generateLSTToken",
      "stack_out": []
    },
    "1700": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1701": {
      "op": "return",
      "stack_out": []
    },
    "1702": {
      "block": "main_getAcceptedCollateralsCount_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1704": {
      "op": "!",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1705": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1706": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1708": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1709": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "op": "callsub getAcceptedCollateralsCount",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "1712": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "1713": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "1714": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "1715": {
      "op": "concat",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "1716": {
      "op": "log",
      "stack_out": []
    },
    "1717": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1718": {
      "op": "return",
      "stack_out": []
    },
    "1719": {
      "block": "main_getTotalDeposits_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1721": {
      "op": "!",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "1722": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1723": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1725": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1726": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getTotalDeposits",
      "op": "callsub getTotalDeposits",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1729": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "1730": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "1731": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "1732": {
      "op": "concat",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1733": {
      "op": "log",
      "stack_out": []
    },
    "1734": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1735": {
      "op": "return",
      "stack_out": []
    },
    "1736": {
      "block": "main_getCirculatingLST_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1738": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "1739": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1740": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1742": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1743": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getCirculatingLST",
      "op": "callsub getCirculatingLST",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1746": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1747": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1748": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1749": {
      "op": "concat",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1750": {
      "op": "log",
      "stack_out": []
    },
    "1751": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1752": {
      "op": "return",
      "stack_out": []
    },
    "1753": {
      "block": "main_setMigrationAdmin_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1755": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1756": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1757": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1759": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1760": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "1763": {
      "op": "btoi",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1764": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "1766": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setMigrationAdmin",
      "op": "callsub setMigrationAdmin",
      "stack_out": []
    },
    "1769": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1770": {
      "op": "return",
      "stack_out": []
    },
    "1771": {
      "block": "main_setContractState_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1773": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1774": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1775": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1777": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1778": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%20#0"
      ]
    },
    "1781": {
      "op": "btoi",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1782": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setContractState",
      "op": "callsub setContractState",
      "stack_out": []
    },
    "1785": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1786": {
      "op": "return",
      "stack_out": []
    },
    "1787": {
      "block": "main_setRateParams_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1789": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1790": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1791": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1793": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1794": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "1797": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1798": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "1801": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1802": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "1805": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "1806": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "1809": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "1810": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%12#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "1813": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "1814": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%13#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "1817": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "1818": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%14#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "1821": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "1822": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%15#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "1825": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "1826": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "1829": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "1830": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[8]%17#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "1833": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "1834": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "1837": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "1838": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_bytes[8]%19#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "1841": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "1842": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setRateParams",
      "op": "callsub setRateParams",
      "stack_out": []
    },
    "1845": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1846": {
      "op": "return",
      "stack_out": []
    },
    "1847": {
      "block": "main_initApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1849": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1850": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1851": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1853": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1854": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1856": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1"
      ]
    },
    "1857": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1858": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "1859": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "1861": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "1862": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1863": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1864": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1867": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ]
    },
    "1868": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1871": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1872": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1875": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1876": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1879": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1880": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%5#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1883": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1884": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[1]%1#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "1887": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1888": {
      "op": "txnas Applications",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "1890": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%6#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1893": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "1894": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%7#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "1897": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "1898": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[1]%2#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "1901": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "1902": {
      "op": "txnas Applications",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "1904": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.initApplication",
      "op": "callsub initApplication",
      "stack_out": []
    },
    "1907": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1908": {
      "op": "return",
      "stack_out": []
    },
    "1909": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1911": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1912": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1913": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1915": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1916": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1917": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "1920": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1921": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1923": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1926": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1927": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "1930": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1931": {
      "op": "return",
      "stack_out": []
    },
    "1932": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.createApplication",
      "params": {
        "admin#0": "bytes",
        "baseTokenId#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1935": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\""
      ],
      "stack_out": [
        "\"admin_account\""
      ]
    },
    "1936": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ]
    },
    "1938": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1939": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseTokenId#0 (copy)"
      ]
    },
    "1941": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1942": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"base_token_id\""
      ]
    },
    "1943": {
      "op": "swap",
      "stack_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "1944": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1945": {
      "op": "bytec 14 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\""
      ],
      "stack_out": [
        "\"migration_admin\""
      ]
    },
    "1947": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"migration_admin\"",
        "admin#0 (copy)"
      ]
    },
    "1949": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1950": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\""
      ],
      "stack_out": [
        "\"contract_state\""
      ]
    },
    "1952": {
      "op": "bytec 34 // 0x0000000000000000",
      "defined_out": [
        "\"contract_state\"",
        "0x0000000000000000"
      ],
      "stack_out": [
        "\"contract_state\"",
        "0x0000000000000000"
      ]
    },
    "1954": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1955": {
      "op": "pushbytess \"contract_version\" 0x000000000000076c // \"contract_version\", 0x000000000000076c",
      "defined_out": [
        "\"contract_version\"",
        "0x000000000000076c"
      ],
      "stack_out": [
        "\"contract_version\"",
        "0x000000000000076c"
      ]
    },
    "1983": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1984": {
      "retsub": true,
      "op": "retsub"
    },
    "1985": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.initApplication",
      "params": {
        "mbrTxn#0": "uint64",
        "ltv_bps#0": "uint64",
        "liq_threshold_bps#0": "uint64",
        "liq_bonus_bps#0": "uint64",
        "origination_fee_bps#0": "uint64",
        "protocol_share_bps#0": "uint64",
        "oracle_app_id#0": "uint64",
        "buyout_token_id#0": "uint64",
        "additional_rewards_commission_percentage#0": "uint64",
        "flux_oracle_app_id#0": "uint64"
      },
      "block": "initApplication",
      "stack_in": [],
      "op": "proto 10 0"
    },
    "1988": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1990": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1991": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1992": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1993": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1994": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1995": {
      "op": "assert",
      "stack_out": []
    },
    "1996": {
      "op": "frame_dig -10",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1998": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2000": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2001": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2002": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2003": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2004": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2005": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "2008": {
      "op": "frame_dig -10",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2010": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2012": {
      "op": "pushint 400000 // 400000",
      "defined_out": [
        "400000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "400000"
      ]
    },
    "2016": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2017": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "2020": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2021": {
      "block": "initApplication_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2022": {
      "op": "frame_dig -2",
      "defined_out": [
        "additional_rewards_commission_percentage#0 (copy)"
      ],
      "stack_out": [
        "additional_rewards_commission_percentage#0 (copy)"
      ]
    },
    "2024": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "additional_rewards_commission_percentage#0 (copy)"
      ],
      "stack_out": [
        "additional_rewards_commission_percentage#0 (copy)",
        "100"
      ]
    },
    "2026": {
      "op": "<=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2027": {
      "error": "COMMISSION_TOO_HIGH",
      "op": "assert // COMMISSION_TOO_HIGH",
      "stack_out": []
    },
    "2028": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\""
      ],
      "stack_out": [
        "\"ltv_bps\""
      ]
    },
    "2030": {
      "op": "frame_dig -9",
      "defined_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ]
    },
    "2032": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2033": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\""
      ],
      "stack_out": [
        "\"liq_threshold_bps\""
      ]
    },
    "2035": {
      "op": "frame_dig -8",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ]
    },
    "2037": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2038": {
      "op": "bytec 39 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\""
      ],
      "stack_out": [
        "\"origination_fee_bps\""
      ]
    },
    "2040": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ],
      "stack_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ]
    },
    "2042": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2043": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\""
      ],
      "stack_out": [
        "\"accepted_collaterals_count\""
      ]
    },
    "2045": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ]
    },
    "2046": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2047": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\""
      ],
      "stack_out": [
        "\"fee_pool\""
      ]
    },
    "2049": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"fee_pool\"",
        "0"
      ]
    },
    "2050": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2051": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "2053": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"circulating_lst\"",
        "0"
      ]
    },
    "2054": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2055": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\""
      ],
      "stack_out": [
        "\"total_deposits\""
      ]
    },
    "2056": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_deposits\"",
        "0"
      ]
    },
    "2057": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2058": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\""
      ],
      "stack_out": [
        "\"active_loan_records\""
      ]
    },
    "2060": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"active_loan_records\"",
        "0"
      ]
    },
    "2061": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2062": {
      "op": "bytec 40 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\""
      ],
      "stack_out": [
        "\"protocol_share_bps\""
      ]
    },
    "2064": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ],
      "stack_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ]
    },
    "2066": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2067": {
      "op": "bytec 41 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\""
      ],
      "stack_out": [
        "\"oracle_app\""
      ]
    },
    "2069": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ],
      "stack_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ]
    },
    "2071": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2072": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\""
      ],
      "stack_out": [
        "\"lst_token_id\""
      ]
    },
    "2074": {
      "op": "pushbytes 0x0000000000000063",
      "defined_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ],
      "stack_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ]
    },
    "2084": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2085": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "2087": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "\"base_bps\"",
        "50"
      ],
      "stack_out": [
        "\"base_bps\"",
        "50"
      ]
    },
    "2089": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2090": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "2092": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "\"util_cap_bps\"",
        "8000"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "8000"
      ]
    },
    "2095": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2096": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\""
      ],
      "stack_out": [
        "\"total_borrows\""
      ]
    },
    "2098": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_borrows\"",
        "0"
      ]
    },
    "2099": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2100": {
      "op": "bytec 35 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "2102": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rate_model_type\"",
        "0"
      ]
    },
    "2103": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2104": {
      "op": "bytec 36 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "2106": {
      "op": "pushint 5000 // 5000",
      "defined_out": [
        "\"kink_norm_bps\"",
        "5000"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "5000"
      ]
    },
    "2109": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2110": {
      "op": "bytec 37 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "2112": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "\"slope1_bps\"",
        "1000"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "1000"
      ]
    },
    "2113": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2114": {
      "op": "bytec 38 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "2116": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "\"slope2_bps\"",
        "2000"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "2000"
      ]
    },
    "2119": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2120": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "2122": {
      "op": "pushint 6000 // 6000",
      "defined_out": [
        "\"max_apr_bps\"",
        "6000"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "6000"
      ]
    },
    "2125": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2126": {
      "op": "bytec 42 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "2128": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"ema_alpha_bps\"",
        "0"
      ]
    },
    "2129": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2130": {
      "op": "bytec 30 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\""
      ],
      "stack_out": [
        "\"prev_apr_bps\""
      ]
    },
    "2132": {
      "op": "pushint 50 // 50",
      "stack_out": [
        "\"prev_apr_bps\"",
        "50"
      ]
    },
    "2134": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2135": {
      "op": "pushbytes \"util_ema_bps\"",
      "defined_out": [
        "\"util_ema_bps\""
      ],
      "stack_out": [
        "\"util_ema_bps\""
      ]
    },
    "2149": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"util_ema_bps\"",
        "0"
      ]
    },
    "2150": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2151": {
      "op": "bytec 43 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "2153": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"power_gamma_q16\"",
        "0"
      ]
    },
    "2154": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2155": {
      "op": "bytec 44 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "2157": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"scarcity_K_bps\"",
        "0"
      ]
    },
    "2158": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2159": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\""
      ],
      "stack_out": [
        "\"borrow_index_wad\""
      ]
    },
    "2161": {
      "op": "intc 6 // 1000000000000",
      "defined_out": [
        "\"borrow_index_wad\"",
        "1000000000000"
      ],
      "stack_out": [
        "\"borrow_index_wad\"",
        "1000000000000"
      ]
    },
    "2163": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2164": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\""
      ],
      "stack_out": [
        "\"last_accrual_ts\""
      ]
    },
    "2166": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"last_accrual_ts\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"last_accrual_ts\"",
        "new_state_value%0#0"
      ]
    },
    "2168": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2169": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2170": {
      "op": "bytec 23 // \"base_bps\"",
      "stack_out": [
        "0",
        "\"base_bps\""
      ]
    },
    "2172": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2173": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2174": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "2176": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "maybe_value%2#0"
      ]
    },
    "2177": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2178": {
      "op": "frame_dig -3",
      "defined_out": [
        "buyout_token_id#0 (copy)"
      ],
      "stack_out": [
        "buyout_token_id#0 (copy)"
      ]
    },
    "2180": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2181": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"buyout_token_id\""
      ]
    },
    "2183": {
      "op": "swap",
      "stack_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2184": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2185": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\""
      ],
      "stack_out": [
        "\"liq_bonus_bps\""
      ]
    },
    "2187": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ]
    },
    "2189": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2190": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\""
      ],
      "stack_out": [
        "\"total_commission_earned\""
      ]
    },
    "2192": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_commission_earned\"",
        "0"
      ]
    },
    "2193": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2194": {
      "op": "bytec 19 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\""
      ],
      "stack_out": [
        "\"current_accumulated_commission\""
      ]
    },
    "2196": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"current_accumulated_commission\"",
        "0"
      ]
    },
    "2197": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2198": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\""
      ],
      "stack_out": [
        "\"commission_percentage\""
      ]
    },
    "2200": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"commission_percentage\"",
        "additional_rewards_commission_percentage#0 (copy)"
      ]
    },
    "2202": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2203": {
      "op": "pushbytes \"total_borrows_principal\"",
      "defined_out": [
        "\"total_borrows_principal\""
      ],
      "stack_out": [
        "\"total_borrows_principal\""
      ]
    },
    "2228": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_borrows_principal\"",
        "0"
      ]
    },
    "2229": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2230": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\""
      ],
      "stack_out": [
        "\"cash_on_hand\""
      ]
    },
    "2232": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"cash_on_hand\"",
        "0"
      ]
    },
    "2233": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2234": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\""
      ],
      "stack_out": [
        "\"total_additional_rewards\""
      ]
    },
    "2236": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_additional_rewards\"",
        "0"
      ]
    },
    "2237": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2238": {
      "op": "bytec 33 // \"flux_oracle_app\"",
      "defined_out": [
        "\"flux_oracle_app\""
      ],
      "stack_out": [
        "\"flux_oracle_app\""
      ]
    },
    "2240": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"flux_oracle_app\"",
        "flux_oracle_app_id#0 (copy)"
      ],
      "stack_out": [
        "\"flux_oracle_app\"",
        "flux_oracle_app_id#0 (copy)"
      ]
    },
    "2242": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2243": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2244": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2245": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2246": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2247": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2248": {
      "op": "bz initApplication_after_if_else@7",
      "stack_out": []
    },
    "2251": {
      "op": "itxn_begin"
    },
    "2252": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2254": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2255": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2256": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2257": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0"
      ]
    },
    "2258": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2259": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "2260": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2262": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2264": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2266": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2267": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2269": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "2270": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2272": {
      "op": "itxn_submit"
    },
    "2273": {
      "block": "initApplication_after_if_else@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2274": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"buyout_token_id\""
      ]
    },
    "2276": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2277": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "2278": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2279": {
      "op": "bz initApplication_after_if_else@10",
      "stack_out": []
    },
    "2282": {
      "op": "itxn_begin"
    },
    "2283": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2285": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2286": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "2288": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2289": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_value%6#0"
      ]
    },
    "2290": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "2291": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "2292": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "2294": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2296": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2298": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2299": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2301": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2302": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2304": {
      "op": "itxn_submit"
    },
    "2305": {
      "block": "initApplication_after_if_else@10",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2306": {
      "block": "initApplication_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2307": {
      "op": "b initApplication_bool_merge@4"
    },
    "2310": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setRateParams",
      "params": {
        "base_bps#0": "uint64",
        "util_cap_bps#0": "uint64",
        "kink_norm_bps#0": "uint64",
        "slope1_bps#0": "uint64",
        "slope2_bps#0": "uint64",
        "max_apr_bps#0": "uint64",
        "max_apr_step_bps#0": "uint64",
        "ema_alpha_bps#0": "uint64",
        "power_gamma_q16#0": "uint64",
        "scarcity_K_bps#0": "uint64",
        "rate_model_type#0": "uint64",
        "liq_bonus_bps#0": "uint64"
      },
      "block": "setRateParams",
      "stack_in": [],
      "op": "proto 12 0"
    },
    "2313": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2315": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2316": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2317": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2318": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2319": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2320": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "2321": {
      "op": "frame_dig -11",
      "defined_out": [
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "2323": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "2326": {
      "op": "frame_dig -11",
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "2328": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)",
        "10000"
      ]
    },
    "2330": {
      "op": "<=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2331": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "2334": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2335": {
      "block": "setRateParams_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "BAD_UTIL_CAP",
      "op": "assert // BAD_UTIL_CAP",
      "defined_out": [],
      "stack_out": []
    },
    "2336": {
      "op": "frame_dig -10",
      "defined_out": [
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2338": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "2341": {
      "op": "frame_dig -10",
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2343": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)",
        "10000"
      ]
    },
    "2345": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2346": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "2349": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2350": {
      "block": "setRateParams_bool_merge@8",
      "stack_in": [
        "and_result%1#0"
      ],
      "error": "BAD_KINK",
      "op": "assert // BAD_KINK",
      "defined_out": [],
      "stack_out": []
    },
    "2351": {
      "op": "frame_dig -7",
      "defined_out": [
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "2353": {
      "op": "bz setRateParams_after_if_else@14",
      "stack_out": []
    },
    "2356": {
      "op": "frame_dig -7",
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "2358": {
      "op": "frame_dig -12",
      "defined_out": [
        "base_bps#0 (copy)",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)",
        "base_bps#0 (copy)"
      ]
    },
    "2360": {
      "op": ">=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2361": {
      "error": "BAD_MAX_APR",
      "op": "assert // BAD_MAX_APR",
      "stack_out": []
    },
    "2362": {
      "block": "setRateParams_after_if_else@14",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "2364": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)",
        "10000"
      ]
    },
    "2366": {
      "op": "<=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2367": {
      "error": "BAD_EMA_ALPHA",
      "op": "assert // BAD_EMA_ALPHA",
      "stack_out": []
    },
    "2368": {
      "op": "frame_dig -2",
      "defined_out": [
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "2370": {
      "op": "bz setRateParams_bool_true@16",
      "stack_out": []
    },
    "2373": {
      "op": "frame_dig -2",
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "2375": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)",
        "255"
      ]
    },
    "2378": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "2379": {
      "op": "bz setRateParams_bool_false@17",
      "stack_out": []
    },
    "2382": {
      "block": "setRateParams_bool_true@16",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2383": {
      "block": "setRateParams_bool_merge@18",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "UNSUPPORTED_MODEL",
      "op": "assert // UNSUPPORTED_MODEL",
      "defined_out": [],
      "stack_out": []
    },
    "2384": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "2386": {
      "op": "frame_dig -12",
      "defined_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ],
      "stack_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ]
    },
    "2388": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2389": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "2391": {
      "op": "frame_dig -11",
      "defined_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ]
    },
    "2393": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2394": {
      "op": "bytec 36 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "2396": {
      "op": "frame_dig -10",
      "defined_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2398": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2399": {
      "op": "bytec 37 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "2401": {
      "op": "frame_dig -9",
      "defined_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ]
    },
    "2403": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2404": {
      "op": "bytec 38 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "2406": {
      "op": "frame_dig -8",
      "defined_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ]
    },
    "2408": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2409": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "2411": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ]
    },
    "2413": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2414": {
      "op": "pushbytes \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\""
      ],
      "stack_out": [
        "\"max_apr_step_bps\""
      ]
    },
    "2432": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ]
    },
    "2434": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2435": {
      "op": "bytec 35 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "2437": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ]
    },
    "2439": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2440": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\""
      ],
      "stack_out": [
        "\"liq_bonus_bps\""
      ]
    },
    "2442": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ]
    },
    "2444": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2445": {
      "op": "bytec 42 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "2447": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "2449": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2450": {
      "op": "bytec 43 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "2452": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ],
      "stack_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ]
    },
    "2454": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2455": {
      "op": "bytec 44 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "2457": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ],
      "stack_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ]
    },
    "2459": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2460": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2461": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2463": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2464": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2465": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2468": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2469": {
      "op": "bytec 30 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "2471": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2472": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2473": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "2474": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2476": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2477": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "2478": {
      "op": ">",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2479": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2482": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2483": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2485": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2486": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "2487": {
      "op": "bytec 30 // \"prev_apr_bps\"",
      "stack_out": [
        "maybe_value%4#0",
        "\"prev_apr_bps\""
      ]
    },
    "2489": {
      "op": "swap",
      "stack_out": [
        "\"prev_apr_bps\"",
        "maybe_value%4#0"
      ]
    },
    "2490": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2491": {
      "block": "setRateParams_after_if_else@21",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2492": {
      "block": "setRateParams_bool_false@17",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2493": {
      "op": "b setRateParams_bool_merge@18"
    },
    "2496": {
      "block": "setRateParams_bool_false@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2497": {
      "op": "b setRateParams_bool_merge@8"
    },
    "2500": {
      "block": "setRateParams_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2501": {
      "op": "b setRateParams_bool_merge@4"
    },
    "2504": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setContractState",
      "params": {
        "state#0": "uint64"
      },
      "block": "setContractState",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2507": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2509": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2510": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2511": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2512": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2513": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2514": {
      "op": "bnz setContractState_bool_true@2",
      "stack_out": []
    },
    "2517": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2519": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2520": {
      "op": "bytec 14 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "2522": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2523": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2524": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2525": {
      "op": "bz setContractState_bool_false@3",
      "stack_out": []
    },
    "2528": {
      "block": "setContractState_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2529": {
      "block": "setContractState_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "defined_out": [],
      "stack_out": []
    },
    "2530": {
      "op": "frame_dig -1",
      "defined_out": [
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)"
      ]
    },
    "2532": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)",
        "2"
      ]
    },
    "2534": {
      "op": "<=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2535": {
      "error": "INVALID_STATE",
      "op": "assert // INVALID_STATE",
      "stack_out": []
    },
    "2536": {
      "op": "frame_dig -1",
      "stack_out": [
        "state#0 (copy)"
      ]
    },
    "2538": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2539": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"contract_state\""
      ]
    },
    "2541": {
      "op": "swap",
      "stack_out": [
        "\"contract_state\"",
        "val_as_bytes%0#0"
      ]
    },
    "2542": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2543": {
      "retsub": true,
      "op": "retsub"
    },
    "2544": {
      "block": "setContractState_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2545": {
      "op": "b setContractState_bool_merge@4"
    },
    "2548": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setMigrationAdmin",
      "params": {
        "migrationAdmin#0": "bytes"
      },
      "block": "setMigrationAdmin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2551": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2553": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2554": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2555": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2556": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2557": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2558": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "2559": {
      "op": "bytec 14 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\""
      ],
      "stack_out": [
        "\"migration_admin\""
      ]
    },
    "2561": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"migration_admin\"",
        "migrationAdmin#0 (copy)"
      ],
      "stack_out": [
        "\"migration_admin\"",
        "migrationAdmin#0 (copy)"
      ]
    },
    "2563": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2564": {
      "retsub": true,
      "op": "retsub"
    },
    "2565": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getCirculatingLST",
      "params": {},
      "block": "getCirculatingLST",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2566": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "2568": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2569": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2570": {
      "retsub": true,
      "op": "retsub"
    },
    "2571": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getTotalDeposits",
      "params": {},
      "block": "getTotalDeposits",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2572": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "2573": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2574": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2575": {
      "retsub": true,
      "op": "retsub"
    },
    "2576": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "params": {},
      "block": "getAcceptedCollateralsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2577": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "2579": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2580": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2581": {
      "retsub": true,
      "op": "retsub"
    },
    "2582": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.generateLSTToken",
      "params": {
        "mbrTxn#0": "uint64"
      },
      "block": "generateLSTToken",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2585": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2587": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2588": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2589": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2590": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2591": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2592": {
      "op": "assert",
      "stack_out": []
    },
    "2593": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2595": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2597": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2598": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2599": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2600": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2601": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2602": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2605": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2607": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2609": {
      "op": "pushint 102000 // 102000",
      "defined_out": [
        "102000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "102000"
      ]
    },
    "2613": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2614": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2617": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2618": {
      "block": "generateLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2619": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2620": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2621": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2622": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2623": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2624": {
      "op": "itxn_begin"
    },
    "2625": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2627": {
      "op": "dig 1",
      "defined_out": [
        "baseToken#0",
        "baseToken#0 (copy)",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2629": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "baseToken#0",
        "check%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2631": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2632": {
      "op": "dig 2",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2634": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "baseToken#0",
        "check%1#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2636": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2637": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2639": {
      "op": "dig 4",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2641": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "baseToken#0",
        "check%2#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "2643": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0"
      ]
    },
    "2644": {
      "op": "pushbytes \"c\"",
      "defined_out": [
        "\"c\"",
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "\"c\""
      ]
    },
    "2647": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "\"c\"",
        "value%2#0"
      ]
    },
    "2648": {
      "op": "concat",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2649": {
      "op": "uncover 5",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "baseToken#0"
      ]
    },
    "2651": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%3#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0",
        "check%3#0"
      ]
    },
    "2653": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0"
      ]
    },
    "2654": {
      "op": "pushbytes \"c\"",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0",
        "\"c\""
      ]
    },
    "2657": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "\"c\"",
        "value%3#0"
      ]
    },
    "2658": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "2659": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2661": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2663": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2665": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "0"
      ]
    },
    "2666": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2668": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2670": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2672": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "2674": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "2676": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2678": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2679": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2681": {
      "op": "itxn_submit"
    },
    "2682": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "result.CreatedAssetID#0"
      ],
      "stack_out": [
        "result.CreatedAssetID#0"
      ]
    },
    "2684": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2685": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2687": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2688": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2689": {
      "retsub": true,
      "op": "retsub"
    },
    "2690": {
      "block": "generateLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2691": {
      "op": "b generateLSTToken_bool_merge@4"
    },
    "2694": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.optInToLST",
      "params": {
        "lstAssetId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "optInToLST",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2697": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2699": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2700": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2701": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2702": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2703": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2704": {
      "op": "assert",
      "stack_out": []
    },
    "2705": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2707": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2709": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2710": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2711": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2712": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2713": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2714": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2717": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2719": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2721": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "2000"
      ]
    },
    "2724": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2725": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2728": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2729": {
      "block": "optInToLST_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2730": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAssetId#0 (copy)"
      ],
      "stack_out": [
        "lstAssetId#0 (copy)"
      ]
    },
    "2732": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2733": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2735": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2736": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2737": {
      "op": "itxn_begin"
    },
    "2738": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2740": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2741": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2743": {
      "op": "frame_dig -2",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "lstAssetId#0 (copy)"
      ]
    },
    "2745": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2747": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2749": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2750": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2752": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2753": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2755": {
      "op": "itxn_submit"
    },
    "2756": {
      "retsub": true,
      "op": "retsub"
    },
    "2757": {
      "block": "optInToLST_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2758": {
      "op": "b optInToLST_bool_merge@4"
    },
    "2761": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.configureLSTToken",
      "params": {
        "axferTxn#0": "uint64",
        "circulating_lst#0": "uint64"
      },
      "block": "configureLSTToken",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2764": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2766": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2767": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2768": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2769": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2770": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2771": {
      "op": "assert",
      "stack_out": []
    },
    "2772": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2773": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "2775": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2776": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2777": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2778": {
      "op": "frame_dig -2",
      "defined_out": [
        "axferTxn#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "axferTxn#0 (copy)"
      ]
    },
    "2780": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2782": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2783": {
      "error": "LST token not set",
      "op": "assert // LST token not set",
      "stack_out": []
    },
    "2784": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2786": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2788": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "2789": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2790": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2791": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "2792": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2793": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2796": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2798": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2800": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2802": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2803": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2806": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2807": {
      "block": "configureLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2808": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "2810": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ],
      "stack_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ]
    },
    "2812": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2813": {
      "retsub": true,
      "op": "retsub"
    },
    "2814": {
      "block": "configureLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2815": {
      "op": "b configureLSTToken_bool_merge@4"
    },
    "2818": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "params": {
        "tokenId#0": "bytes"
      },
      "block": "getOraclePrice",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2821": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2822": {
      "op": "bytec 41 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"oracle_app\""
      ]
    },
    "2824": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "maybe_exists%0#0"
      ]
    },
    "2825": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2826": {
      "op": "dup",
      "defined_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ]
    },
    "2827": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "address#0",
        "check%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "check%0#0"
      ]
    },
    "2829": {
      "op": "bury 1",
      "stack_out": [
        "oracle#0",
        "check%0#0"
      ]
    },
    "2831": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2832": {
      "op": "itxn_begin"
    },
    "2833": {
      "op": "pushbytes 0xac13e004 // method \"getTokenPrice(uint64)(uint64,uint64,uint64)\"",
      "defined_out": [
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))"
      ]
    },
    "2839": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2841": {
      "op": "frame_dig -1",
      "defined_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ]
    },
    "2843": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2845": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2847": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2849": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2851": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2852": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2854": {
      "op": "itxn_submit"
    },
    "2855": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2857": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2858": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2861": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2862": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2863": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2864": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "12"
      ]
    },
    "2866": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2867": {
      "retsub": true,
      "op": "retsub"
    },
    "2868": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.updateCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "updateCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2871": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "2873": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2875": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2876": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2877": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "2878": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0"
      ]
    },
    "2879": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2880": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)",
        "24"
      ]
    },
    "2882": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "2883": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "2885": {
      "op": "+",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "2886": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "collateral#0 (copy)"
      ]
    },
    "2888": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0"
      ]
    },
    "2891": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "collateral#0 (copy)"
      ]
    },
    "2893": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2896": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0",
        "collateral#0 (copy)"
      ]
    },
    "2898": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2901": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "newTotal#0"
      ]
    },
    "2903": {
      "op": "itob",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2904": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "collateral#0"
      ]
    },
    "2906": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0"
      ]
    },
    "2909": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "tmp%3#0"
      ]
    },
    "2911": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2913": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2914": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%4#0",
        "tmp%5#0"
      ]
    },
    "2916": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2917": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2919": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2920": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%6#0"
      ]
    },
    "2921": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2922": {
      "op": "box_put",
      "stack_out": []
    },
    "2923": {
      "retsub": true,
      "op": "retsub"
    },
    "2924": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.reduceCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "reduceCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2927": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "2929": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2931": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2932": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2933": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "2934": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0"
      ]
    },
    "2935": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2936": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)",
        "24"
      ]
    },
    "2938": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "2939": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2940": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2942": {
      "op": ">=",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2943": {
      "error": "INSUFFICIENT_COLLATERAL",
      "op": "assert // INSUFFICIENT_COLLATERAL",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "2944": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "2946": {
      "op": "-",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "2947": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "collateral#0 (copy)"
      ]
    },
    "2949": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0"
      ]
    },
    "2952": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "collateral#0 (copy)"
      ]
    },
    "2954": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2957": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0",
        "collateral#0 (copy)"
      ]
    },
    "2959": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2962": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "newTotal#0"
      ]
    },
    "2964": {
      "op": "itob",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ]
    },
    "2965": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "collateral#0"
      ]
    },
    "2967": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0"
      ]
    },
    "2970": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "tmp%6#0"
      ]
    },
    "2972": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2974": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2975": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%4#0",
        "tmp%8#0"
      ]
    },
    "2977": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2978": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2980": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2981": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%9#0"
      ]
    },
    "2982": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2983": {
      "op": "box_put",
      "stack_out": []
    },
    "2984": {
      "retsub": true,
      "op": "retsub"
    },
    "2985": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addNewCollateralType",
      "params": {
        "collateralTokenId#0": "bytes",
        "collateralBaseTokenId#0": "bytes",
        "mbrTxn#0": "uint64",
        "originatingAppId#0": "bytes"
      },
      "block": "addNewCollateralType",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "2988": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2989": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2990": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2991": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2992": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2993": {
      "op": "txn Sender",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "2995": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0"
      ]
    },
    "2996": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2997": {
      "op": "app_global_get_ex",
      "defined_out": [
        "baseToken#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2998": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "2999": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%1#0"
      ]
    },
    "3000": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3001": {
      "op": "frame_dig -4",
      "defined_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3003": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "3004": {
      "op": "dup"
    },
    "3005": {
      "op": "uncover 2",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0",
        "baseToken#0"
      ]
    },
    "3007": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3008": {
      "error": "CANNOT_USE_BASE_AS_COLLATERAL",
      "op": "assert // CANNOT_USE_BASE_AS_COLLATERAL",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3009": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\""
      ]
    },
    "3011": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3013": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3014": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3015": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3016": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3018": {
      "op": "!",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%5#0"
      ]
    },
    "3019": {
      "error": "COLLATERAL_ALREADY_EXISTS",
      "op": "assert // COLLATERAL_ALREADY_EXISTS",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3020": {
      "op": "frame_dig -2",
      "defined_out": [
        "mbrTxn#0 (copy)",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "3022": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0"
      ]
    },
    "3024": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0"
      ]
    },
    "3025": {
      "op": "bytec_2 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0",
        "\"admin_account\""
      ]
    },
    "3026": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3027": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0"
      ]
    },
    "3028": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%7#0"
      ]
    },
    "3029": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3032": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "3034": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0"
      ]
    },
    "3036": {
      "op": "pushint 101000 // 101000",
      "defined_out": [
        "101000",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0",
        "101000"
      ]
    },
    "3040": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%9#0"
      ]
    },
    "3041": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3044": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "3045": {
      "block": "addNewCollateralType_bool_merge@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ],
      "error": "INSUFFICIENT_MBR",
      "op": "assert // INSUFFICIENT_MBR",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3046": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0"
      ]
    },
    "3047": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0",
        "\"base_token_id\""
      ]
    },
    "3048": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3049": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0"
      ]
    },
    "3050": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3052": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralBaseTokenId#0 (copy)",
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "collateralTokenId#0 (copy)",
        "collateralBaseTokenId#0 (copy)"
      ]
    },
    "3054": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3055": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0"
      ]
    },
    "3056": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3057": {
      "op": "bytec 34 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "3059": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3060": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "originatingAppId#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%4#0",
        "originatingAppId#0 (copy)"
      ]
    },
    "3062": {
      "op": "concat",
      "defined_out": [
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0"
      ]
    },
    "3063": {
      "op": "frame_dig 1",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ]
    },
    "3065": {
      "op": "dup"
    },
    "3066": {
      "op": "uncover 2",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "newAcceptedCollateral#0"
      ]
    },
    "3068": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3069": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0"
      ]
    },
    "3070": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "3072": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3073": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0"
      ]
    },
    "3074": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "1"
      ]
    },
    "3075": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0"
      ]
    },
    "3076": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "3078": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "\"accepted_collaterals_count\"",
        "new_state_value%0#0"
      ]
    },
    "3079": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3080": {
      "op": "itxn_begin"
    },
    "3081": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "3083": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3084": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3085": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3087": {
      "op": "frame_dig 0",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%2#0"
      ]
    },
    "3089": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3091": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "3093": {
      "op": "itxn_field Sender",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3095": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "4"
      ]
    },
    "3096": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3098": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "1000"
      ]
    },
    "3099": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "3101": {
      "op": "itxn_submit"
    },
    "3102": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3103": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3105": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "3106": {
      "retsub": true,
      "op": "retsub"
    },
    "3107": {
      "block": "addNewCollateralType_bool_false@3",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "3108": {
      "op": "b addNewCollateralType_bool_merge@4"
    },
    "3111": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addLoanRecordExternal",
      "params": {
        "disbursement#0": "uint64",
        "collateralTokenId#0": "bytes",
        "borrowerAddress#0": "bytes",
        "collateralAmount#0": "uint64"
      },
      "block": "addLoanRecordExternal",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3114": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3116": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "3117": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "3118": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3119": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "3120": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3121": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "3122": {
      "op": "frame_dig -4",
      "defined_out": [
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)"
      ]
    },
    "3124": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3126": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)",
        "collateralTokenId#0 (copy)",
        "borrowerAddress#0 (copy)"
      ]
    },
    "3128": {
      "op": "frame_dig -1",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)",
        "collateralTokenId#0 (copy)",
        "borrowerAddress#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3130": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.mintLoanRecord",
      "op": "callsub mintLoanRecord",
      "stack_out": []
    },
    "3133": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#0 (copy)"
      ]
    },
    "3135": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3137": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": []
    },
    "3140": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3141": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_borrows\""
      ]
    },
    "3143": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3144": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3145": {
      "op": "frame_dig -4",
      "stack_out": [
        "maybe_value%1#0",
        "disbursement#0 (copy)"
      ]
    },
    "3147": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "3148": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "3150": {
      "op": "swap",
      "stack_out": [
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "3151": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3152": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "3155": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "3157": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "3158": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3159": {
      "retsub": true,
      "op": "retsub"
    },
    "3160": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.depositASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "depositASA",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "3163": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3164": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "3165": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3166": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3167": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3168": {
      "op": "frame_dig -3",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3170": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "3172": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3174": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "3175": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3178": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3180": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "3182": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseToken#0",
        "tmp%3#0",
        "baseToken#0"
      ]
    },
    "3184": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "3185": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3188": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3190": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "3192": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "3194": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "3195": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3198": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "3199": {
      "block": "depositASA_bool_merge@5",
      "stack_in": [
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3200": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3202": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "3204": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0",
        "10000"
      ]
    },
    "3206": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%8#0"
      ]
    },
    "3207": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3208": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "3209": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"contract_state\""
      ]
    },
    "3211": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3212": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%1#0"
      ]
    },
    "3213": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%9#0"
      ]
    },
    "3214": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%9#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%9#0",
        "1"
      ]
    },
    "3215": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%10#0"
      ]
    },
    "3216": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3217": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "amount#0 (copy)"
      ]
    },
    "3219": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3222": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "baseToken#0",
        "_interestSlice#0"
      ]
    },
    "3225": {
      "op": "pop",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3226": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "3227": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3228": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3229": {
      "op": "bury 1",
      "stack_out": [
        "baseToken#0",
        "maybe_exists%2#0"
      ]
    },
    "3231": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3232": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "3233": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3234": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3235": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%3#0"
      ]
    },
    "3236": {
      "op": "bnz depositASA_else_body@7",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3239": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3241": {
      "block": "depositASA_after_if_else@8",
      "stack_in": [
        "baseToken#0",
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "3242": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3244": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3245": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "3247": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3248": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0"
      ]
    },
    "3249": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3250": {
      "op": "dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2",
        "lstDue#2 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2 (copy)"
      ]
    },
    "3252": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3254": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3256": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3258": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "4"
      ]
    },
    "3259": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3261": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "1000"
      ]
    },
    "3262": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3264": {
      "op": "itxn_submit"
    },
    "3265": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "0"
      ]
    },
    "3266": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3268": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstDue#2",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3269": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "maybe_value%5#0"
      ]
    },
    "3270": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%0#0"
      ]
    },
    "3271": {
      "op": "bytec 8 // \"circulating_lst\"",
      "stack_out": [
        "baseToken#0",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "3273": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "3274": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3275": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "3276": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3277": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3278": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%6#0"
      ]
    },
    "3279": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%6#0",
        "amount#0 (copy)"
      ]
    },
    "3281": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%1#0"
      ]
    },
    "3282": {
      "op": "bytec_3 // \"total_deposits\"",
      "stack_out": [
        "baseToken#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "3283": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "3284": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3285": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%2#0"
      ]
    },
    "3288": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "3290": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "3291": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3292": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "3293": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3294": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "3295": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%7#0"
      ]
    },
    "3296": {
      "op": "btoi",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "to_encode%0#0"
      ]
    },
    "3297": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "val_as_bytes%0#0"
      ]
    },
    "3298": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%14#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "val_as_bytes%0#0",
        "tmp%14#0"
      ]
    },
    "3300": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "tmp%14#0",
        "val_as_bytes%0#0"
      ]
    },
    "3301": {
      "op": "concat",
      "defined_out": [
        "depositKey#0"
      ],
      "stack_out": [
        "baseToken#0",
        "depositKey#0"
      ]
    },
    "3302": {
      "op": "bytec 45 // \"deposit_record\"",
      "defined_out": [
        "\"deposit_record\"",
        "depositKey#0"
      ],
      "stack_out": [
        "baseToken#0",
        "depositKey#0",
        "\"deposit_record\""
      ]
    },
    "3304": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"deposit_record\"",
        "depositKey#0"
      ]
    },
    "3305": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0"
      ]
    },
    "3306": {
      "op": "dup",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "tmp%15#0"
      ]
    },
    "3307": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "3308": {
      "op": "bury 1",
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "maybe_exists%8#0"
      ]
    },
    "3310": {
      "op": "bz depositASA_else_body@11",
      "stack_out": [
        "baseToken#0",
        "tmp%15#0"
      ]
    },
    "3313": {
      "op": "dup",
      "defined_out": [
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ]
    },
    "3314": {
      "op": "box_get",
      "defined_out": [
        "existingRecord#0",
        "maybe_exists%9#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "existingRecord#0",
        "maybe_exists%9#0"
      ]
    },
    "3315": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "existingRecord#0"
      ]
    },
    "3316": {
      "op": "dup",
      "defined_out": [
        "existingRecord#0",
        "existingRecord#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "existingRecord#0",
        "existingRecord#0 (copy)"
      ]
    },
    "3317": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "existingRecord#0",
        "existingRecord#0 (copy)",
        "0"
      ]
    },
    "3318": {
      "op": "extract_uint64",
      "defined_out": [
        "existingRecord#0",
        "tmp%15#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "existingRecord#0",
        "tmp%18#0"
      ]
    },
    "3319": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "existingRecord#0",
        "tmp%18#0",
        "amount#0 (copy)"
      ]
    },
    "3321": {
      "op": "+",
      "defined_out": [
        "existingRecord#0",
        "newAmount#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "existingRecord#0",
        "newAmount#0"
      ]
    },
    "3322": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "newAmount#0",
        "existingRecord#0"
      ]
    },
    "3323": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "newAmount#0",
        "tmp%15#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "newAmount#0",
        "tmp%19#0"
      ]
    },
    "3326": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "tmp%19#0",
        "newAmount#0"
      ]
    },
    "3327": {
      "op": "itob",
      "defined_out": [
        "tmp%15#0",
        "tmp%19#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "tmp%19#0",
        "val_as_bytes%1#0"
      ]
    },
    "3328": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "val_as_bytes%1#0",
        "tmp%19#0"
      ]
    },
    "3329": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3330": {
      "op": "box_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3331": {
      "retsub": true,
      "op": "retsub"
    },
    "3332": {
      "block": "depositASA_else_body@11",
      "stack_in": [
        "baseToken#0",
        "tmp%15#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "0"
      ]
    },
    "3333": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3334": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "3335": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "maybe_value%10#0"
      ]
    },
    "3336": {
      "op": "btoi",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "to_encode%1#0"
      ]
    },
    "3337": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "val_as_bytes%2#0"
      ]
    },
    "3338": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "val_as_bytes%2#0",
        "amount#0 (copy)"
      ]
    },
    "3340": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "3341": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "val_as_bytes%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "3342": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%15#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3343": {
      "op": "box_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3344": {
      "retsub": true,
      "op": "retsub"
    },
    "3345": {
      "block": "depositASA_else_body@7",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "3346": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3348": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3349": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%0#1"
      ]
    },
    "3350": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%0#1",
        "10000"
      ]
    },
    "3352": {
      "op": "mulw",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0"
      ]
    },
    "3353": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "0"
      ]
    },
    "3354": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3355": {
      "op": "app_global_get_ex",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_exists%1#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "3356": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#1"
      ]
    },
    "3357": {
      "op": "divw",
      "defined_out": [
        "lstRatio#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstRatio#0"
      ]
    },
    "3358": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "lstRatio#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstRatio#0",
        "amount#0 (copy)"
      ]
    },
    "3360": {
      "op": "mulw",
      "defined_out": [
        "highBits2#0",
        "lowBits2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits2#0",
        "lowBits2#0"
      ]
    },
    "3361": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "baseToken#0",
        "highBits2#0",
        "lowBits2#0",
        "10000"
      ]
    },
    "3363": {
      "op": "divw",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3364": {
      "op": "b depositASA_after_if_else@8"
    },
    "3367": {
      "block": "depositASA_bool_false@4",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "3368": {
      "op": "b depositASA_bool_merge@5"
    },
    "3371": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawDeposit",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "lstAppId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "withdrawDeposit",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3374": {
      "op": "intc_0 // 0",
      "stack_out": [
        "existingRecord#0"
      ]
    },
    "3375": {
      "op": "dup",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0"
      ]
    },
    "3376": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0"
      ]
    },
    "3378": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "0"
      ]
    },
    "3379": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "3381": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3382": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "maybe_value%0#0"
      ]
    },
    "3383": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3384": {
      "op": "intc_0 // 0",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "0"
      ]
    },
    "3385": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0",
        "lstAsset#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "0",
        "\"contract_state\""
      ]
    },
    "3387": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstAsset#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3388": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_value%1#0"
      ]
    },
    "3389": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%0#0"
      ]
    },
    "3390": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "lstAsset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%0#0",
        "1"
      ]
    },
    "3391": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%1#0"
      ]
    },
    "3392": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3393": {
      "op": "frame_dig -4",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "lstAsset#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3395": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "lstAsset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%2#0"
      ]
    },
    "3397": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "lstAsset#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3399": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%4#0"
      ]
    },
    "3400": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3403": {
      "op": "frame_dig -4",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3405": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "lstAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%5#0"
      ]
    },
    "3407": {
      "op": "frame_dig 3",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%5#0",
        "lstAsset#0"
      ]
    },
    "3409": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%6#0"
      ]
    },
    "3410": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3413": {
      "op": "frame_dig -4",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3415": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "lstAsset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%7#0"
      ]
    },
    "3417": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "lstAsset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%7#0",
        "amount#0 (copy)"
      ]
    },
    "3419": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%8#0"
      ]
    },
    "3420": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3423": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "lstAsset#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "3424": {
      "block": "withdrawDeposit_bool_merge@5",
      "stack_in": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3425": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3427": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%9#0"
      ]
    },
    "3429": {
      "op": "pushint 3000 // 3000",
      "defined_out": [
        "3000",
        "tmp%9#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%9#0",
        "3000"
      ]
    },
    "3432": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%10#0"
      ]
    },
    "3433": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3434": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "_interestSlice#0"
      ]
    },
    "3437": {
      "op": "pop",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3438": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3440": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "lstAppId#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "lstAppId#0 (copy)",
        "tmp%11#0"
      ]
    },
    "3442": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%12#0"
      ]
    },
    "3443": {
      "op": "bz withdrawDeposit_else_body@7",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3446": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "0"
      ]
    },
    "3447": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3449": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ]
    },
    "3450": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3451": {
      "op": "intc_0 // 0",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0"
      ]
    },
    "3452": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3453": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%1#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "maybe_exists%1#0"
      ]
    },
    "3454": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3455": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "3457": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3458": {
      "op": "uncover 2",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "3460": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3461": {
      "block": "withdrawDeposit_after_if_else@8",
      "stack_in": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ],
      "op": "dup",
      "defined_out": [
        "asaDue#1",
        "asaDue#1 (copy)"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "asaDue#1 (copy)"
      ]
    },
    "3462": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3465": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asaDue#1",
        "tmp%13#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0"
      ]
    },
    "3467": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asaDue#1",
        "tmp%13#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "0"
      ]
    },
    "3468": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "asaDue#1",
        "tmp%13#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3469": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3470": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "maybe_value%2#0"
      ]
    },
    "3471": {
      "op": "btoi",
      "defined_out": [
        "asaDue#1",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "3472": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "asaDue#1",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "3474": {
      "op": "pop",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0"
      ]
    },
    "3475": {
      "op": "dig 1",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0",
        "asaDue#1 (copy)"
      ]
    },
    "3477": {
      "op": ">=",
      "defined_out": [
        "asaDue#1",
        "tmp%17#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "tmp%17#0"
      ]
    },
    "3478": {
      "op": "assert",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3479": {
      "op": "itxn_begin"
    },
    "3480": {
      "op": "txn Sender",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3482": {
      "op": "intc_0 // 0",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3483": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3484": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3485": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "3486": {
      "op": "btoi",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3487": {
      "op": "dig 2",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "asaDue#1 (copy)"
      ]
    },
    "3489": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3491": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3493": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3495": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "asaDue#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "4"
      ]
    },
    "3496": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3498": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "asaDue#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "1000"
      ]
    },
    "3499": {
      "op": "itxn_field Fee",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3501": {
      "op": "itxn_submit"
    },
    "3502": {
      "op": "intc_0 // 0",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "3503": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3505": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3506": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0"
      ]
    },
    "3507": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "asaDue#1",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "3509": {
      "op": "-",
      "defined_out": [
        "asaDue#1",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0"
      ]
    },
    "3510": {
      "op": "bytec 8 // \"circulating_lst\"",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "3512": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "3513": {
      "op": "app_global_put",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3514": {
      "op": "intc_0 // 0",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "3515": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"total_deposits\""
      ]
    },
    "3516": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3517": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%5#0"
      ]
    },
    "3518": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_value%5#0",
        "asaDue#1"
      ]
    },
    "3519": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "new_state_value%1#0"
      ]
    },
    "3520": {
      "op": "bytec_3 // \"total_deposits\"",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "3521": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "3522": {
      "op": "app_global_put",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3523": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "new_state_value%2#0"
      ]
    },
    "3526": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "3528": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "3529": {
      "op": "app_global_put",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3530": {
      "op": "intc_0 // 0",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "0"
      ]
    },
    "3531": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3532": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3533": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_value%6#0"
      ]
    },
    "3534": {
      "op": "btoi",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "to_encode%0#0"
      ]
    },
    "3535": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "val_as_bytes%0#0"
      ]
    },
    "3536": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%18#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "val_as_bytes%0#0",
        "tmp%18#0"
      ]
    },
    "3538": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%18#0",
        "val_as_bytes%0#0"
      ]
    },
    "3539": {
      "op": "concat",
      "defined_out": [
        "depositKey#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "depositKey#0"
      ]
    },
    "3540": {
      "op": "bytec 45 // \"deposit_record\"",
      "defined_out": [
        "\"deposit_record\"",
        "depositKey#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "depositKey#0",
        "\"deposit_record\""
      ]
    },
    "3542": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "\"deposit_record\"",
        "depositKey#0"
      ]
    },
    "3543": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%19#0"
      ]
    },
    "3544": {
      "op": "dup",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%19#0",
        "tmp%19#0"
      ]
    },
    "3545": {
      "op": "frame_bury 1",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%19#0"
      ]
    },
    "3547": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "3548": {
      "op": "bury 1",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_exists%7#0"
      ]
    },
    "3550": {
      "op": "bz withdrawDeposit_after_if_else@14",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3553": {
      "op": "frame_dig 1",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%19#0"
      ]
    },
    "3555": {
      "op": "box_get",
      "defined_out": [
        "existingRecord#0",
        "maybe_exists%8#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "existingRecord#0",
        "maybe_exists%8#0"
      ]
    },
    "3556": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_exists%8#0",
        "existingRecord#0"
      ]
    },
    "3557": {
      "op": "dup",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "maybe_exists%8#0",
        "existingRecord#0",
        "existingRecord#0 (copy)"
      ]
    },
    "3558": {
      "op": "cover 2",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "existingRecord#0",
        "maybe_exists%8#0",
        "existingRecord#0"
      ]
    },
    "3560": {
      "op": "frame_bury 0",
      "defined_out": [
        "existingRecord#0",
        "maybe_exists%8#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "existingRecord#0",
        "maybe_exists%8#0"
      ]
    },
    "3562": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "existingRecord#0"
      ]
    },
    "3563": {
      "op": "intc_0 // 0",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "existingRecord#0",
        "0"
      ]
    },
    "3564": {
      "op": "extract_uint64",
      "defined_out": [
        "existingRecord#0",
        "tmp%19#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%22#0"
      ]
    },
    "3565": {
      "op": "frame_dig -3",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%22#0",
        "amount#0 (copy)"
      ]
    },
    "3567": {
      "op": "-",
      "defined_out": [
        "existingRecord#0",
        "newAmount#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "newAmount#0"
      ]
    },
    "3568": {
      "op": "dup",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "newAmount#0",
        "newAmount#0"
      ]
    },
    "3569": {
      "op": "frame_bury 2",
      "defined_out": [
        "existingRecord#0",
        "newAmount#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "newAmount#0"
      ]
    },
    "3571": {
      "op": "bnz withdrawDeposit_else_body@12",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3574": {
      "op": "frame_dig 1",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%19#0"
      ]
    },
    "3576": {
      "op": "box_del",
      "defined_out": [
        "existingRecord#0",
        "newAmount#0",
        "tmp%19#0",
        "{box_del}"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "{box_del}"
      ]
    },
    "3577": {
      "op": "pop",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3578": {
      "block": "withdrawDeposit_after_if_else@14",
      "stack_in": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "3579": {
      "block": "withdrawDeposit_else_body@12",
      "stack_in": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "existingRecord#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "existingRecord#0"
      ]
    },
    "3581": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "existingRecord#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%25#0"
      ]
    },
    "3584": {
      "op": "frame_dig 2",
      "defined_out": [
        "existingRecord#0",
        "newAmount#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%25#0",
        "newAmount#0"
      ]
    },
    "3586": {
      "op": "itob",
      "defined_out": [
        "existingRecord#0",
        "newAmount#0",
        "tmp%25#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%25#0",
        "val_as_bytes%1#0"
      ]
    },
    "3587": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "val_as_bytes%1#0",
        "tmp%25#0"
      ]
    },
    "3588": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "existingRecord#0",
        "newAmount#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3589": {
      "op": "frame_dig 1",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "existingRecord#0",
        "newAmount#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0"
      ]
    },
    "3591": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%19#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3592": {
      "op": "box_put",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3593": {
      "retsub": true,
      "op": "retsub"
    },
    "3594": {
      "block": "withdrawDeposit_else_body@7",
      "stack_in": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ],
      "op": "itxn_begin"
    },
    "3595": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "3597": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3599": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3601": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3603": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "appl"
      ]
    },
    "3605": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3607": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "1000"
      ]
    },
    "3608": {
      "op": "itxn_field Fee",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ]
    },
    "3610": {
      "op": "itxn_submit"
    },
    "3611": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "3613": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3614": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "awst_tmp%0#0",
        "tmp%0#1"
      ]
    },
    "3617": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%0#1",
        "awst_tmp%0#0"
      ]
    },
    "3618": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "3621": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1",
        "0x151f7c75"
      ]
    },
    "3622": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%0#1",
        "tmp%2#1"
      ]
    },
    "3623": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "tmp%0#1"
      ]
    },
    "3624": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3625": {
      "op": "itxn_begin"
    },
    "3626": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "3628": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3630": {
      "op": "frame_dig -2",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3632": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3634": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "3636": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3638": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "3639": {
      "op": "itxn_field Fee",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3641": {
      "op": "itxn_submit"
    },
    "3642": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "3644": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3645": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%4#1"
      ]
    },
    "3648": {
      "op": "swap",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "awst_tmp%1#0"
      ]
    },
    "3649": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ]
    },
    "3652": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1",
        "0x151f7c75"
      ]
    },
    "3653": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ]
    },
    "3654": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ]
    },
    "3655": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3656": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "3658": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3659": {
      "op": "uncover 2",
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "3661": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3662": {
      "op": "b withdrawDeposit_after_if_else@8"
    },
    "3665": {
      "block": "withdrawDeposit_bool_false@4",
      "stack_in": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "existingRecord#0",
        "tmp%19#0",
        "newAmount#0",
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "3666": {
      "op": "b withdrawDeposit_bool_merge@5"
    },
    "3669": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.borrow",
      "params": {
        "assetTransferTxn#0": "uint64",
        "requestedLoanAmount#0": "uint64",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64",
        "collateralTokenId#0": "bytes",
        "mbrTxn#0": "uint64"
      },
      "block": "borrow",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "3672": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0"
      ]
    },
    "3673": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1"
      ]
    },
    "3675": {
      "op": "dupn 4",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ]
    },
    "3677": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "0"
      ]
    },
    "3678": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "0",
        "\"contract_state\""
      ]
    },
    "3680": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3681": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "maybe_value%0#0"
      ]
    },
    "3682": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "tmp%0#0"
      ]
    },
    "3683": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "tmp%0#0",
        "1"
      ]
    },
    "3684": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "tmp%1#0"
      ]
    },
    "3685": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ]
    },
    "3686": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "\"loan_record\""
      ]
    },
    "3688": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "\"loan_record\"",
        "tmp%2#0"
      ]
    },
    "3690": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "tmp%3#0"
      ]
    },
    "3691": {
      "op": "box_len",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "maybe_value%1#0",
        "hasLoan#0"
      ]
    },
    "3692": {
      "op": "dup",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "maybe_value%1#0",
        "hasLoan#0",
        "hasLoan#0 (copy)"
      ]
    },
    "3693": {
      "op": "uncover 2",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hasLoan#0",
        "maybe_value%1#0"
      ]
    },
    "3695": {
      "op": "pop",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3696": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hasLoan#0",
        "_interestSlice#0"
      ]
    },
    "3699": {
      "op": "pop",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3700": {
      "op": "bz borrow_else_body@2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3703": {
      "op": "txn Sender",
      "defined_out": [
        "hasLoan#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%4#0"
      ]
    },
    "3705": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "hasLoan#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%5#0"
      ]
    },
    "3708": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "hasLoan#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%5#0",
        "40"
      ]
    },
    "3710": {
      "op": "extract_uint64",
      "defined_out": [
        "hasLoan#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%6#0"
      ]
    },
    "3711": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "hasLoan#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%6#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3713": {
      "op": "+",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "3714": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3716": {
      "block": "borrow_after_if_else@3",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3718": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%0#0"
      ]
    },
    "3720": {
      "op": "pushint 4000 // 4000",
      "defined_out": [
        "4000",
        "tmp%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%0#0",
        "4000"
      ]
    },
    "3723": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%1#0"
      ]
    },
    "3724": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3725": {
      "op": "frame_dig -6",
      "defined_out": [
        "assetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3727": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%2#0"
      ]
    },
    "3729": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%2#0",
        "tmp%3#3"
      ]
    },
    "3731": {
      "op": "==",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%4#1"
      ]
    },
    "3732": {
      "op": "bz borrow_bool_false@34",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3735": {
      "op": "frame_dig -6",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3737": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%5#1"
      ]
    },
    "3739": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "tmp%5#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%5#1",
        "collateralAmount#0 (copy)"
      ]
    },
    "3741": {
      "op": "==",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%6#1"
      ]
    },
    "3742": {
      "op": "bz borrow_bool_false@34",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3745": {
      "op": "frame_dig -6",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3747": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%7#0"
      ]
    },
    "3749": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%7#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3751": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%7#0",
        "tmp%8#1"
      ]
    },
    "3752": {
      "op": "==",
      "defined_out": [
        "tmp%9#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%9#1"
      ]
    },
    "3753": {
      "op": "bz borrow_bool_false@34",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3756": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "3757": {
      "block": "borrow_bool_merge@35",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3758": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "\"accepted_collaterals\""
      ]
    },
    "3760": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3762": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%0#1"
      ]
    },
    "3763": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#4"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%0#4",
        "maybe_exists%0#0"
      ]
    },
    "3764": {
      "op": "bury 1",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_exists%0#0"
      ]
    },
    "3766": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3767": {
      "op": "frame_dig -2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3769": {
      "op": "frame_dig 1",
      "defined_out": [
        "collateralToUse#1",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralToUse#1"
      ]
    },
    "3771": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralToUse#1",
        "collateralTokenId#0 (copy)",
        "lstApp#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralToUse#1",
        "lstApp#0 (copy)"
      ]
    },
    "3773": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralUSD#0"
      ]
    },
    "3776": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralUSD#0",
        "0"
      ]
    },
    "3777": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralUSD#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "3779": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralUSD#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3780": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralUSD#0",
        "maybe_value%2#0"
      ]
    },
    "3781": {
      "op": "*",
      "defined_out": [
        "collateralToUse#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%7#0"
      ]
    },
    "3782": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralToUse#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%7#0",
        "10000"
      ]
    },
    "3784": {
      "op": "/",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3785": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0"
      ]
    },
    "3786": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3787": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3788": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%3#0"
      ]
    },
    "3789": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0"
      ]
    },
    "3792": {
      "op": "frame_dig -5",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3794": {
      "op": "mulw",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ]
    },
    "3795": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0",
        "1000000"
      ]
    },
    "3797": {
      "op": "divw",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3798": {
      "op": ">=",
      "defined_out": [
        "collateralToUse#1",
        "tmp%0#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%0#2"
      ]
    },
    "3799": {
      "error": "exceeds LTV limit",
      "op": "assert // exceeds LTV limit",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3800": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "0"
      ]
    },
    "3801": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3802": {
      "op": "app_global_get_ex",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%0#4",
        "maybe_exists%0#0"
      ]
    },
    "3803": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%0#4"
      ]
    },
    "3804": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%0#4",
        "0"
      ]
    },
    "3805": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\"",
        "0",
        "collateralToUse#1",
        "maybe_value%0#4"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%0#4",
        "0",
        "\"util_cap_bps\""
      ]
    },
    "3807": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maybe_exists%1#1",
        "maybe_value%0#4",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%0#4",
        "maybe_value%1#0",
        "maybe_exists%1#1"
      ]
    },
    "3808": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%0#4",
        "maybe_value%1#0"
      ]
    },
    "3809": {
      "op": "mulw",
      "defined_out": [
        "collateralToUse#1",
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "h#0",
        "l#0"
      ]
    },
    "3810": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "h#0",
        "l#0",
        "10000"
      ]
    },
    "3812": {
      "op": "divw",
      "defined_out": [
        "capBorrow#0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "capBorrow#0"
      ]
    },
    "3813": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "capBorrow#0",
        "0"
      ]
    },
    "3814": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "capBorrow#0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "capBorrow#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "3816": {
      "op": "app_global_get_ex",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#4",
        "maybe_exists%0#0"
      ]
    },
    "3817": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#4"
      ]
    },
    "3818": {
      "op": "frame_dig -5",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#4",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3820": {
      "op": "+",
      "defined_out": [
        "capBorrow#0",
        "collateralToUse#1",
        "tmp%1#4"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "capBorrow#0",
        "tmp%1#4"
      ]
    },
    "3821": {
      "op": ">=",
      "defined_out": [
        "collateralToUse#1",
        "tmp%2#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%2#2"
      ]
    },
    "3822": {
      "error": "UTIL_CAP_EXCEEDED",
      "op": "assert // UTIL_CAP_EXCEEDED",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3823": {
      "op": "bytec 34 // 0x0000000000000000",
      "defined_out": [
        "collateralToUse#1",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#0"
      ]
    },
    "3825": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralToUse#1",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3827": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "0"
      ]
    },
    "3828": {
      "op": "bytec 33 // \"flux_oracle_app\"",
      "defined_out": [
        "\"flux_oracle_app\"",
        "0",
        "collateralToUse#1",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "0",
        "\"flux_oracle_app\""
      ]
    },
    "3830": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3831": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%4#0"
      ]
    },
    "3832": {
      "op": "bz borrow_after_if_else@6",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3835": {
      "op": "itxn_begin"
    },
    "3836": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "0"
      ]
    },
    "3837": {
      "op": "bytec 33 // \"flux_oracle_app\"",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "0",
        "\"flux_oracle_app\""
      ]
    },
    "3839": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3840": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0"
      ]
    },
    "3841": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "collateralToUse#1",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%5#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "3843": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "0"
      ]
    },
    "3844": {
      "op": "bytec 33 // \"flux_oracle_app\"",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "0",
        "\"flux_oracle_app\""
      ]
    },
    "3846": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_exists%6#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3847": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0"
      ]
    },
    "3848": {
      "op": "txn Sender",
      "defined_out": [
        "collateralToUse#1",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%9#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0",
        "tmp%9#0"
      ]
    },
    "3850": {
      "op": "dup",
      "defined_out": [
        "collateralToUse#1",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%10#0",
        "tmp%9#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "3851": {
      "op": "pushbytes 0xd4d7aa5c // method \"getUserTier(address)uint64\"",
      "defined_out": [
        "Method(getUserTier(address)uint64)",
        "collateralToUse#1",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%10#0",
        "tmp%9#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0",
        "tmp%9#0",
        "tmp%10#0",
        "Method(getUserTier(address)uint64)"
      ]
    },
    "3857": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "3859": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0",
        "tmp%9#0"
      ]
    },
    "3861": {
      "op": "itxn_field Accounts",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%6#0"
      ]
    },
    "3863": {
      "op": "itxn_field Applications",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "3865": {
      "op": "itxn_field Sender",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "maybe_value%5#0"
      ]
    },
    "3867": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3869": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "collateralToUse#1",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "appl"
      ]
    },
    "3871": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3873": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralToUse#1",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "1000"
      ]
    },
    "3874": {
      "op": "itxn_field Fee",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3876": {
      "op": "itxn_submit"
    },
    "3877": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "collateralToUse#1",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "awst_tmp%0#0"
      ]
    },
    "3879": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "collateralToUse#1",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3880": {
      "op": "extract 4 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "awst_tmp%0#0",
        "userTier#0"
      ]
    },
    "3883": {
      "op": "frame_bury 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "awst_tmp%0#0"
      ]
    },
    "3885": {
      "op": "extract 0 4",
      "defined_out": [
        "collateralToUse#1",
        "tmp%12#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%12#0"
      ]
    },
    "3888": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "collateralToUse#1",
        "tmp%12#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "3889": {
      "op": "==",
      "defined_out": [
        "collateralToUse#1",
        "tmp%13#0",
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%13#0"
      ]
    },
    "3890": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3891": {
      "block": "borrow_after_if_else@6",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "userTier#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#0"
      ]
    },
    "3893": {
      "op": "btoi",
      "defined_out": [
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3"
      ]
    },
    "3894": {
      "op": "dup",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "userTier#3"
      ]
    },
    "3895": {
      "op": "frame_bury 5",
      "defined_out": [
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3"
      ]
    },
    "3897": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "0"
      ]
    },
    "3898": {
      "op": "bytec 39 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\"",
        "0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "0",
        "\"origination_fee_bps\""
      ]
    },
    "3900": {
      "op": "app_global_get_ex",
      "defined_out": [
        "initialFee#0",
        "maybe_exists%0#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "initialFee#0",
        "maybe_exists%0#0"
      ]
    },
    "3901": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "maybe_exists%0#0",
        "initialFee#0"
      ]
    },
    "3902": {
      "op": "frame_bury 4",
      "defined_out": [
        "initialFee#0",
        "maybe_exists%0#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "maybe_exists%0#0"
      ]
    },
    "3904": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3"
      ]
    },
    "3905": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "initialFee#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "1"
      ]
    },
    "3906": {
      "op": "==",
      "defined_out": [
        "initialFee#0",
        "tmp%0#2",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%0#2"
      ]
    },
    "3907": {
      "op": "bz borrow_else_body@17",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3910": {
      "op": "frame_dig 4",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0"
      ]
    },
    "3912": {
      "op": "pushint 90 // 90",
      "defined_out": [
        "90",
        "initialFee#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0",
        "90"
      ]
    },
    "3914": {
      "op": "mulw",
      "defined_out": [
        "hi#0",
        "initialFee#0",
        "lo#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3915": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "hi#0",
        "initialFee#0",
        "lo#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi#0",
        "lo#0",
        "100"
      ]
    },
    "3917": {
      "op": "divw",
      "defined_out": [
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "effectiveFeeBps#1"
      ]
    },
    "3918": {
      "op": "frame_bury 3",
      "defined_out": [
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3920": {
      "block": "borrow_after_if_else@26",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "frame_dig -5",
      "defined_out": [
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3922": {
      "op": "frame_dig 3",
      "defined_out": [
        "effectiveFeeBps#1",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "requestedLoanAmount#0 (copy)",
        "effectiveFeeBps#1"
      ]
    },
    "3924": {
      "op": "mulw",
      "defined_out": [
        "effectiveFeeBps#1",
        "feeHi#0",
        "feeLo#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "feeHi#0",
        "feeLo#0"
      ]
    },
    "3925": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "effectiveFeeBps#1",
        "feeHi#0",
        "feeLo#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "feeHi#0",
        "feeLo#0",
        "10000"
      ]
    },
    "3927": {
      "op": "divw",
      "defined_out": [
        "effectiveFeeBps#1",
        "fee#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#1"
      ]
    },
    "3928": {
      "op": "frame_dig -5",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3930": {
      "op": "dig 1",
      "defined_out": [
        "effectiveFeeBps#1",
        "fee#1",
        "fee#1 (copy)",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)",
        "fee#1 (copy)"
      ]
    },
    "3932": {
      "op": "-",
      "defined_out": [
        "disbursement#2",
        "effectiveFeeBps#1",
        "fee#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#1",
        "disbursement#2"
      ]
    },
    "3933": {
      "op": "frame_bury 2",
      "defined_out": [
        "disbursement#2",
        "effectiveFeeBps#1",
        "fee#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#1"
      ]
    },
    "3935": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "fee#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#1",
        "0"
      ]
    },
    "3936": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "fee#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#1",
        "0",
        "\"fee_pool\""
      ]
    },
    "3938": {
      "op": "app_global_get_ex",
      "defined_out": [
        "disbursement#2",
        "effectiveFeeBps#1",
        "fee#1",
        "maybe_exists%0#0",
        "maybe_value%0#4"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#1",
        "maybe_value%0#4",
        "maybe_exists%0#0"
      ]
    },
    "3939": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "fee#1",
        "maybe_value%0#4"
      ]
    },
    "3940": {
      "op": "+",
      "defined_out": [
        "disbursement#2",
        "effectiveFeeBps#1",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "3941": {
      "op": "bytec 15 // \"fee_pool\"",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"fee_pool\""
      ]
    },
    "3943": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "\"fee_pool\"",
        "new_state_value%0#0"
      ]
    },
    "3944": {
      "op": "app_global_put",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3945": {
      "op": "frame_dig 6",
      "defined_out": [
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3947": {
      "op": "bz borrow_else_body@8",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "3950": {
      "op": "txn Sender",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3952": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "borrower#0 (copy)",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "borrower#0 (copy)"
      ]
    },
    "3953": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "existingLoan#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0"
      ]
    },
    "3956": {
      "op": "dig 1",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "borrower#0 (copy)"
      ]
    },
    "3958": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "op": "callsub syncBorrowerSnapshot",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "existingLoan#0",
        "hasLoan#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0"
      ]
    },
    "3961": {
      "op": "frame_dig 2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#2"
      ]
    },
    "3963": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "disbursement#2 (copy)",
        "effectiveFeeBps#1",
        "existingLoan#0",
        "hasLoan#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#2 (copy)",
        "disbursement#2 (copy)"
      ]
    },
    "3964": {
      "op": "cover 3",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#2 (copy)"
      ]
    },
    "3966": {
      "op": "+",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "existingLoan#0",
        "hasLoan#0",
        "newDebt#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "newDebt#0"
      ]
    },
    "3967": {
      "op": "dig 1",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "hasLoan#0",
        "newDebt#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "newDebt#0",
        "existingLoan#0 (copy)"
      ]
    },
    "3969": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "existingLoan#0",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "newDebt#0",
        "tmp%0#1"
      ]
    },
    "3972": {
      "op": "uncover 2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "existingLoan#0"
      ]
    },
    "3974": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "existingLoan#0",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "existingLoan#0",
        "40"
      ]
    },
    "3976": {
      "op": "extract_uint64",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1"
      ]
    },
    "3977": {
      "op": "frame_dig -4",
      "defined_out": [
        "borrower#0",
        "collateralAmount#0 (copy)",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1",
        "collateralAmount#0 (copy)"
      ]
    },
    "3979": {
      "op": "+",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "to_encode%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "to_encode%0#0"
      ]
    },
    "3980": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ]
    },
    "3981": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3982": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3983": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3984": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0"
      ]
    },
    "3985": {
      "op": "uncover 4",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "disbursement#2"
      ]
    },
    "3987": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3988": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "to_encode%1#0"
      ]
    },
    "3990": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3991": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "3992": {
      "op": "bytec 27 // 0x00",
      "defined_out": [
        "0x00",
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0",
        "0x00"
      ]
    },
    "3994": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%2#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3995": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "3996": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3997": {
      "op": "uncover 4",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "newDebt#0"
      ]
    },
    "3999": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ]
    },
    "4000": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "4001": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4003": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_exists%1#1",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#1"
      ]
    },
    "4004": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "maybe_value%1#0"
      ]
    },
    "4005": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "4006": {
      "op": "dig 6",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "borrower#0 (copy)"
      ]
    },
    "4008": {
      "op": "uncover 6",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "borrower#0 (copy)",
        "tmp%0#1"
      ]
    },
    "4010": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4011": {
      "op": "uncover 5",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "4013": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4014": {
      "op": "uncover 3",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4016": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%8#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4017": {
      "op": "uncover 3",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0"
      ]
    },
    "4019": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%9#0",
        "hasLoan#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4020": {
      "op": "uncover 2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%3#0"
      ]
    },
    "4022": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%10#0",
        "hasLoan#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4023": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "4024": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4025": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0",
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "4027": {
      "op": "uncover 2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "borrower#0"
      ]
    },
    "4029": {
      "op": "concat",
      "defined_out": [
        "disbursement#2",
        "effectiveFeeBps#1",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "tmp%3#0"
      ]
    },
    "4030": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%3#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4031": {
      "op": "box_put",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4032": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "disbursement#2",
        "effectiveFeeBps#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4034": {
      "op": "frame_dig -4",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "4036": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4039": {
      "block": "borrow_after_if_else@9",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "borrower#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "4041": {
      "op": "itxn_begin"
    },
    "4042": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "borrower#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "0"
      ]
    },
    "4043": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4044": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4045": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0"
      ]
    },
    "4046": {
      "op": "btoi",
      "defined_out": [
        "borrower#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4047": {
      "op": "frame_dig 2",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "disbursement#2"
      ]
    },
    "4049": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "disbursement#2 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "disbursement#2 (copy)",
        "disbursement#2 (copy)"
      ]
    },
    "4050": {
      "op": "cover 2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "disbursement#2 (copy)"
      ]
    },
    "4052": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4054": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2"
      ]
    },
    "4056": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "borrower#0"
      ]
    },
    "4057": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "4059": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "disbursement#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "4"
      ]
    },
    "4060": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "4062": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "disbursement#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "1000"
      ]
    },
    "4063": {
      "op": "itxn_field Fee",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "4065": {
      "op": "itxn_submit"
    },
    "4066": {
      "op": "dup",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "disbursement#2 (copy)"
      ]
    },
    "4067": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "4070": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "0"
      ]
    },
    "4071": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "disbursement#2"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "0",
        "\"total_borrows\""
      ]
    },
    "4073": {
      "op": "app_global_get_ex",
      "defined_out": [
        "disbursement#2",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "4074": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "maybe_value%7#0"
      ]
    },
    "4075": {
      "op": "+",
      "defined_out": [
        "disbursement#2",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "4076": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4078": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4079": {
      "op": "app_global_put",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4080": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "disbursement#2",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "new_state_value%1#0"
      ]
    },
    "4083": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "disbursement#2",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "4085": {
      "op": "swap",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "4086": {
      "op": "app_global_put",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4087": {
      "retsub": true,
      "op": "retsub"
    },
    "4088": {
      "block": "borrow_else_body@8",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%16#0"
      ]
    },
    "4090": {
      "op": "frame_dig 2",
      "defined_out": [
        "disbursement#2",
        "tmp%16#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%16#0",
        "disbursement#2"
      ]
    },
    "4092": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "disbursement#2",
        "tmp%16#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%16#0",
        "disbursement#2",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4094": {
      "op": "uncover 2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "collateralTokenId#0 (copy)",
        "tmp%16#0"
      ]
    },
    "4096": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#2",
        "tmp%16#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "disbursement#2",
        "collateralTokenId#0 (copy)",
        "tmp%16#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4098": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.mintLoanRecord",
      "op": "callsub mintLoanRecord",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4101": {
      "op": "frame_dig -2",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4103": {
      "op": "frame_dig -4",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "4105": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4108": {
      "op": "b borrow_after_if_else@9"
    },
    "4111": {
      "block": "borrow_else_body@17",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3"
      ]
    },
    "4113": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "2"
      ]
    },
    "4115": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%1#0"
      ]
    },
    "4116": {
      "op": "bz borrow_else_body@19",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4119": {
      "op": "frame_dig 4",
      "defined_out": [
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0"
      ]
    },
    "4121": {
      "op": "pushint 75 // 75",
      "defined_out": [
        "75",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0",
        "75"
      ]
    },
    "4123": {
      "op": "mulw",
      "defined_out": [
        "hi\u2081#0",
        "initialFee#0",
        "lo\u2081#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi\u2081#0",
        "lo\u2081#0"
      ]
    },
    "4124": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "hi\u2081#0",
        "initialFee#0",
        "lo\u2081#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi\u2081#0",
        "lo\u2081#0",
        "100"
      ]
    },
    "4126": {
      "op": "divw",
      "defined_out": [
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "effectiveFeeBps#1"
      ]
    },
    "4127": {
      "op": "frame_bury 3",
      "defined_out": [
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4129": {
      "op": "b borrow_after_if_else@26"
    },
    "4132": {
      "block": "borrow_else_body@19",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3"
      ]
    },
    "4134": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "3"
      ]
    },
    "4136": {
      "op": "==",
      "defined_out": [
        "tmp%2#2",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%2#2"
      ]
    },
    "4137": {
      "op": "bz borrow_else_body@21",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4140": {
      "op": "frame_dig 4",
      "defined_out": [
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0"
      ]
    },
    "4142": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0",
        "50"
      ]
    },
    "4144": {
      "op": "mulw",
      "defined_out": [
        "hi\u2082#0",
        "initialFee#0",
        "lo\u2082#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi\u2082#0",
        "lo\u2082#0"
      ]
    },
    "4145": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "hi\u2082#0",
        "initialFee#0",
        "lo\u2082#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi\u2082#0",
        "lo\u2082#0",
        "100"
      ]
    },
    "4147": {
      "op": "divw",
      "defined_out": [
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "effectiveFeeBps#1"
      ]
    },
    "4148": {
      "op": "frame_bury 3",
      "defined_out": [
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4150": {
      "op": "b borrow_after_if_else@26"
    },
    "4153": {
      "block": "borrow_else_body@21",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3"
      ]
    },
    "4155": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "userTier#3",
        "4"
      ]
    },
    "4156": {
      "op": ">=",
      "defined_out": [
        "tmp%3#2",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%3#2"
      ]
    },
    "4157": {
      "op": "frame_dig 4",
      "defined_out": [
        "effectiveFeeBps#1",
        "tmp%3#2",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%3#2",
        "effectiveFeeBps#1"
      ]
    },
    "4159": {
      "op": "frame_bury 3",
      "defined_out": [
        "effectiveFeeBps#1",
        "tmp%3#2",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "tmp%3#2"
      ]
    },
    "4161": {
      "op": "bz borrow_after_if_else@26",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4164": {
      "op": "frame_dig 4",
      "defined_out": [
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0"
      ]
    },
    "4166": {
      "op": "pushint 25 // 25",
      "defined_out": [
        "25",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "initialFee#0",
        "25"
      ]
    },
    "4168": {
      "op": "mulw",
      "defined_out": [
        "effectiveFeeBps#1",
        "hi\u2083#0",
        "initialFee#0",
        "lo\u2083#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi\u2083#0",
        "lo\u2083#0"
      ]
    },
    "4169": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "effectiveFeeBps#1",
        "hi\u2083#0",
        "initialFee#0",
        "lo\u2083#0",
        "userTier#3"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "hi\u2083#0",
        "lo\u2083#0",
        "100"
      ]
    },
    "4171": {
      "op": "divw",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "effectiveFeeBps#1"
      ]
    },
    "4172": {
      "op": "frame_bury 3",
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4174": {
      "op": "b borrow_after_if_else@26"
    },
    "4177": {
      "block": "borrow_bool_false@34",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "4178": {
      "op": "b borrow_bool_merge@35"
    },
    "4181": {
      "block": "borrow_else_body@2",
      "stack_in": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "4183": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "userTier#0",
        "collateralToUse#1",
        "disbursement#2",
        "effectiveFeeBps#1",
        "initialFee#0",
        "userTier#3",
        "hasLoan#0"
      ]
    },
    "4185": {
      "op": "b borrow_after_if_else@3"
    },
    "4188": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.mintLoanRecord",
      "params": {
        "disbursement#0": "uint64",
        "collateralTokenId#0": "bytes",
        "borrowerAddress#0": "bytes",
        "collateralAmount#0": "uint64"
      },
      "block": "mintLoanRecord",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "4191": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralAmount#0 (copy)"
      ]
    },
    "4193": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "4194": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "4195": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4196": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4197": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0"
      ]
    },
    "4198": {
      "op": "frame_dig -4",
      "defined_out": [
        "disbursement#0 (copy)",
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "disbursement#0 (copy)"
      ]
    },
    "4200": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4201": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%0#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "to_encode%0#0"
      ]
    },
    "4203": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "4204": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "4206": {
      "op": "bytec 27 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)",
        "0x00"
      ]
    },
    "4208": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4209": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "4210": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4211": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0"
      ]
    },
    "4212": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4214": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4215": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%1#0"
      ]
    },
    "4216": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "4217": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4219": {
      "op": "frame_dig -3",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4221": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4222": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "4224": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4225": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4227": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4228": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0"
      ]
    },
    "4230": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4231": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "4233": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4234": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "4235": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4236": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "4238": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4240": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%0#0"
      ]
    },
    "4241": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4242": {
      "op": "box_put",
      "stack_out": []
    },
    "4243": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4244": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"active_loan_records\""
      ]
    },
    "4246": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4247": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "4248": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "4249": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "4250": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "4252": {
      "op": "swap",
      "stack_out": [
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "4253": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4254": {
      "retsub": true,
      "op": "retsub"
    },
    "4255": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueLoanInterest",
      "params": {
        "debtor#0": "bytes",
        "templateReserveAddress#0": "bytes"
      },
      "block": "accrueLoanInterest",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4258": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4260": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "4262": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4263": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4264": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "4266": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": []
    },
    "4267": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4268": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contract_state\""
      ]
    },
    "4270": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4271": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4272": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4273": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "4274": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "4275": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": []
    },
    "4276": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "{accrueMarket}"
      ],
      "stack_out": [
        "{accrueMarket}"
      ]
    },
    "4279": {
      "op": "pop",
      "stack_out": []
    },
    "4280": {
      "op": "frame_dig -2",
      "stack_out": [
        "debtor#0 (copy)"
      ]
    },
    "4282": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "op": "callsub syncBorrowerSnapshot",
      "defined_out": [
        "{syncBorrowerSnapshot}"
      ],
      "stack_out": [
        "{syncBorrowerSnapshot}"
      ]
    },
    "4285": {
      "op": "pop",
      "stack_out": []
    },
    "4286": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "4289": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"last_apr_bps\""
      ]
    },
    "4291": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ]
    },
    "4292": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4293": {
      "retsub": true,
      "op": "retsub"
    },
    "4294": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "params": {},
      "block": "current_apr_bps",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4297": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "U_raw#0"
      ]
    },
    "4299": {
      "op": "dupn 6",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ]
    },
    "4301": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "0"
      ]
    },
    "4302": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "4303": {
      "op": "app_global_get_ex",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "4304": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "maybe_exists%0#0",
        "D#0"
      ]
    },
    "4305": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "maybe_exists%0#0",
        "D#0",
        "D#0 (copy)"
      ]
    },
    "4306": {
      "op": "uncover 2",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "4308": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0"
      ]
    },
    "4309": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "0"
      ]
    },
    "4310": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4312": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "B#0",
        "maybe_exists%1#0"
      ]
    },
    "4313": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "maybe_exists%1#0",
        "B#0"
      ]
    },
    "4314": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ]
    },
    "4316": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0"
      ]
    },
    "4317": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "0"
      ]
    },
    "4318": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\"",
        "0",
        "B#0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "0",
        "\"util_cap_bps\""
      ]
    },
    "4320": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "4321": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%2#0",
        "cap_bps#0"
      ]
    },
    "4322": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "maybe_exists%2#0"
      ]
    },
    "4324": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "4325": {
      "op": "bnz current_apr_bps_after_if_else@14",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4328": {
      "op": "intc_0 // 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4329": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4331": {
      "block": "current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.util_norm_bps@17",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4332": {
      "op": "bytec 35 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"rate_model_type\""
      ]
    },
    "4334": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4335": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%0#0"
      ]
    },
    "4336": {
      "op": "bnz current_apr_bps_ternary_false@2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4339": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4340": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "4342": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%0#0"
      ]
    },
    "4343": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0"
      ]
    },
    "4344": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0"
      ]
    },
    "4345": {
      "op": "bytec 36 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\"",
        "0",
        "base_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0",
        "\"kink_norm_bps\""
      ]
    },
    "4347": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "4348": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "4349": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4350": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "4352": {
      "op": "cover 3",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "4354": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "4355": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "4356": {
      "op": "bytec 37 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope1_bps\""
      ]
    },
    "4358": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "4359": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ]
    },
    "4360": {
      "op": "frame_bury 5",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "4362": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "4363": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "4364": {
      "op": "bytec 38 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope2_bps\""
      ]
    },
    "4366": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope2_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "4367": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope2_bps#0"
      ]
    },
    "4368": {
      "op": "frame_bury 6",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "4370": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "4371": {
      "op": "frame_dig 0",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_raw#0"
      ]
    },
    "4373": {
      "op": ">=",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "tmp%0#1"
      ]
    },
    "4374": {
      "op": "bz current_apr_bps_else_body@6",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ]
    },
    "4377": {
      "op": "frame_dig 5",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "4379": {
      "op": "frame_dig 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0",
        "U_raw#0"
      ]
    },
    "4381": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "hi1#0",
        "kink_norm_bps#0",
        "lo1#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0"
      ]
    },
    "4382": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0",
        "kink_norm_bps#0"
      ]
    },
    "4384": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "tmp%1#0"
      ]
    },
    "4385": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4386": {
      "op": "frame_bury 1",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4388": {
      "block": "current_apr_bps_after_if_else@7",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4389": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "4391": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "4392": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "4393": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0",
        "maxCap#0 (copy)"
      ]
    },
    "4394": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "4396": {
      "op": "frame_bury 4",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "4398": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "4399": {
      "op": "frame_dig 1",
      "defined_out": [
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "apr#11"
      ]
    },
    "4401": {
      "op": "frame_bury 2",
      "defined_out": [
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "4403": {
      "op": "bz current_apr_bps_after_if_else@10",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4406": {
      "op": "frame_dig 1",
      "defined_out": [
        "apr#0",
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4408": {
      "op": "dup",
      "defined_out": [
        "apr#0",
        "apr#0 (copy)",
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)"
      ]
    },
    "4409": {
      "op": "frame_dig 4",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)",
        "maxCap#0"
      ]
    },
    "4411": {
      "op": ">",
      "defined_out": [
        "apr#0",
        "apr#11",
        "maxCap#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "tmp%5#0"
      ]
    },
    "4412": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#0",
        "apr#11"
      ]
    },
    "4413": {
      "op": "frame_bury 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#0"
      ]
    },
    "4415": {
      "op": "bz current_apr_bps_after_if_else@10",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4418": {
      "op": "frame_dig 4",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#11"
      ]
    },
    "4420": {
      "op": "frame_bury 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4422": {
      "block": "current_apr_bps_after_if_else@10",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4424": {
      "op": "frame_bury 1",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4426": {
      "block": "current_apr_bps_ternary_merge@3",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "bytec 30 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\""
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"prev_apr_bps\""
      ]
    },
    "4428": {
      "op": "frame_dig 1",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"prev_apr_bps\"",
        "apr#0"
      ]
    },
    "4430": {
      "op": "dup",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0",
        "apr#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"prev_apr_bps\"",
        "apr#0 (copy)",
        "apr#0 (copy)"
      ]
    },
    "4431": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "\"prev_apr_bps\"",
        "apr#0 (copy)"
      ]
    },
    "4433": {
      "op": "app_global_put",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4434": {
      "op": "frame_bury 0"
    },
    "4436": {
      "retsub": true,
      "op": "retsub"
    },
    "4437": {
      "block": "current_apr_bps_else_body@6",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "U_raw#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "U_raw#0"
      ]
    },
    "4439": {
      "op": "uncover 2",
      "defined_out": [
        "U_raw#0",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_raw#0",
        "kink_norm_bps#0"
      ]
    },
    "4441": {
      "op": "dup",
      "defined_out": [
        "U_raw#0",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_raw#0",
        "kink_norm_bps#0 (copy)",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4442": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_raw#0",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4444": {
      "op": "-",
      "defined_out": [
        "U_raw#0",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0"
      ]
    },
    "4445": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "U_raw#0",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0",
        "10000"
      ]
    },
    "4447": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "10000",
        "kink_norm_bps#0"
      ]
    },
    "4449": {
      "op": "-",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0"
      ]
    },
    "4450": {
      "op": "frame_dig 6",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "over#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0",
        "slope2_bps#0"
      ]
    },
    "4452": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "slope2_bps#0",
        "over#0"
      ]
    },
    "4454": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "4455": {
      "op": "uncover 3",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0"
      ]
    },
    "4457": {
      "op": "frame_dig 5",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "4459": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "tmp%2#0"
      ]
    },
    "4460": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "4462": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0",
        "denom#0"
      ]
    },
    "4464": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "4465": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4466": {
      "op": "frame_bury 1",
      "defined_out": [
        "U_raw#0",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4468": {
      "op": "b current_apr_bps_after_if_else@7"
    },
    "4471": {
      "block": "current_apr_bps_ternary_false@2",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4472": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "4474": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4475": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4476": {
      "op": "frame_bury 1",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4478": {
      "op": "b current_apr_bps_ternary_merge@3"
    },
    "4481": {
      "block": "current_apr_bps_after_if_else@14",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "4483": {
      "op": "frame_dig 9",
      "defined_out": [
        "D#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "cap_bps#0"
      ]
    },
    "4485": {
      "op": "mulw",
      "defined_out": [
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ]
    },
    "4486": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0",
        "10000"
      ]
    },
    "4488": {
      "op": "divw",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "4489": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0"
      ]
    },
    "4490": {
      "op": "frame_bury 3",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "4492": {
      "op": "bnz current_apr_bps_after_if_else@16",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4495": {
      "op": "intc_0 // 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4496": {
      "op": "frame_bury 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4498": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.util_norm_bps@17"
    },
    "4501": {
      "block": "current_apr_bps_after_if_else@16",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "B#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0"
      ]
    },
    "4503": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)"
      ]
    },
    "4504": {
      "op": "frame_dig 3",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ]
    },
    "4506": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0",
        "capBorrow#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "4507": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "4509": {
      "op": "<=",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#1"
      ]
    },
    "4510": {
      "op": "dig 1",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#1",
        "capBorrow#0 (copy)"
      ]
    },
    "4512": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "tmp%2#1",
        "capBorrow#0 (copy)",
        "B#0"
      ]
    },
    "4514": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0 (copy)",
        "B#0",
        "tmp%2#1"
      ]
    },
    "4516": {
      "op": "select",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0"
      ]
    },
    "4517": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0",
        "10000"
      ]
    },
    "4519": {
      "op": "mulw",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ]
    },
    "4520": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiN#0",
        "loN#0",
        "capBorrow#0"
      ]
    },
    "4522": {
      "op": "divw",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4523": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4525": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.util_norm_bps@17"
    },
    "4528": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "params": {
        "rec#0": "bytes"
      },
      "block": "currentDebtFromSnapshot",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "4531": {
      "op": "frame_dig -1",
      "defined_out": [
        "rec#0 (copy)"
      ],
      "stack_out": [
        "rec#0 (copy)"
      ]
    },
    "4533": {
      "op": "pushint 73 // 73",
      "defined_out": [
        "73",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "rec#0 (copy)",
        "73"
      ]
    },
    "4535": {
      "op": "extract_uint64",
      "defined_out": [
        "p#0"
      ],
      "stack_out": [
        "p#0"
      ]
    },
    "4536": {
      "op": "dup",
      "defined_out": [
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "p#0"
      ]
    },
    "4537": {
      "op": "bnz currentDebtFromSnapshot_after_if_else@2",
      "stack_out": [
        "p#0"
      ]
    },
    "4540": {
      "op": "intc_0 // 0",
      "stack_out": [
        "p#0",
        "0"
      ]
    },
    "4541": {
      "op": "frame_dig -1",
      "stack_out": [
        "p#0",
        "0",
        "rec#0 (copy)"
      ]
    },
    "4543": {
      "op": "uncover 2"
    },
    "4545": {
      "retsub": true,
      "op": "retsub"
    },
    "4546": {
      "block": "currentDebtFromSnapshot_after_if_else@2",
      "stack_in": [
        "p#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "p#0",
        "0"
      ]
    },
    "4547": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0"
      ],
      "stack_out": [
        "p#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4549": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "p#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4550": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "p#0",
        "maybe_value%0#0"
      ]
    },
    "4551": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "maybe_value%0#0",
        "p#0"
      ]
    },
    "4553": {
      "op": "mulw",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0"
      ]
    },
    "4554": {
      "op": "frame_dig -1",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "rec#0 (copy)"
      ]
    },
    "4556": {
      "op": "pushint 81 // 81",
      "defined_out": [
        "81",
        "hi#0",
        "lo#0",
        "p#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "rec#0 (copy)",
        "81"
      ]
    },
    "4558": {
      "op": "extract_uint64",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "tmp%3#0"
      ]
    },
    "4559": {
      "op": "divw",
      "defined_out": [
        "p#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "p#0",
        "tmp%4#0"
      ]
    },
    "4560": {
      "op": "frame_dig -1",
      "stack_out": [
        "p#0",
        "tmp%4#0",
        "rec#0 (copy)"
      ]
    },
    "4562": {
      "op": "uncover 2"
    },
    "4564": {
      "retsub": true,
      "op": "retsub"
    },
    "4565": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "syncBorrowerSnapshot",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4568": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4570": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "4572": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4573": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4574": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "maybe_exists%0#0"
      ]
    },
    "4575": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "rec#0"
      ]
    },
    "4576": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4579": {
      "op": "dup",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4580": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0"
      ]
    },
    "4583": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "rec#0 (copy)"
      ]
    },
    "4585": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "4588": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "0"
      ]
    },
    "4589": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4590": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liveDebt#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4591": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "4592": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "rec#0"
      ]
    },
    "4594": {
      "error": "Index access is out of bounds",
      "op": "extract 48 17 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ]
    },
    "4597": {
      "op": "dig 4",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "liveDebt#0 (copy)"
      ]
    },
    "4599": {
      "op": "itob",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "4600": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "4601": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4603": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liveDebt#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4604": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0"
      ]
    },
    "4605": {
      "op": "itob",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4606": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "borrower#0 (copy)"
      ]
    },
    "4608": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "borrower#0 (copy)",
        "tmp%1#0"
      ]
    },
    "4610": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4611": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ]
    },
    "4613": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4614": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "tmp%3#0"
      ]
    },
    "4616": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "4617": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0",
        "maybe_value%1#0"
      ]
    },
    "4619": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "liveDebt#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "4620": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "4622": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "liveDebt#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4623": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%1#0"
      ]
    },
    "4624": {
      "op": "concat",
      "defined_out": [
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "newRec#0"
      ]
    },
    "4625": {
      "op": "uncover 2",
      "stack_out": [
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ]
    },
    "4627": {
      "op": "swap",
      "stack_out": [
        "liveDebt#0",
        "tmp%0#0",
        "newRec#0"
      ]
    },
    "4628": {
      "op": "box_put",
      "stack_out": [
        "liveDebt#0"
      ]
    },
    "4629": {
      "retsub": true,
      "op": "retsub"
    },
    "4630": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "params": {},
      "block": "accrueMarket",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4633": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "deltaT#0"
      ]
    },
    "4635": {
      "op": "dupn 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ]
    },
    "4637": {
      "op": "global LatestTimestamp"
    },
    "4639": {
      "op": "dup"
    },
    "4640": {
      "op": "intc_0 // 0"
    },
    "4641": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "0",
        "\"last_accrual_ts\""
      ]
    },
    "4643": {
      "op": "app_global_get_ex",
      "defined_out": [
        "last#0",
        "maybe_exists%0#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0"
      ]
    },
    "4644": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "maybe_exists%0#0",
        "last#0"
      ]
    },
    "4645": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "maybe_exists%0#0",
        "last#0",
        "last#0 (copy)"
      ]
    },
    "4646": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0",
        "last#0"
      ]
    },
    "4648": {
      "op": "cover 3",
      "defined_out": [
        "last#0",
        "maybe_exists%0#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0"
      ]
    },
    "4650": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4651": {
      "op": "<=",
      "defined_out": [
        "last#0",
        "now#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp%0#0"
      ]
    },
    "4652": {
      "op": "bz accrueMarket_after_if_else@2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4655": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4656": {
      "op": "frame_bury 0"
    },
    "4658": {
      "retsub": true,
      "op": "retsub"
    },
    "4659": {
      "block": "accrueMarket_after_if_else@2",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0"
      ]
    },
    "4661": {
      "op": "frame_dig 5",
      "defined_out": [
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4663": {
      "op": "-",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4664": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0",
        "deltaT#0"
      ]
    },
    "4665": {
      "op": "frame_bury 0",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4667": {
      "op": "bnz accrueMarket_after_if_else@9",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4670": {
      "op": "intc_0 // 0",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4671": {
      "op": "frame_bury 2",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4673": {
      "block": "accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.sliceFactorWad@10",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4675": {
      "op": "bnz accrueMarket_after_if_else@4",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4678": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"last_accrual_ts\""
      ]
    },
    "4680": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"last_accrual_ts\"",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"last_accrual_ts\"",
        "now#0"
      ]
    },
    "4682": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4683": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4684": {
      "op": "frame_bury 0"
    },
    "4686": {
      "retsub": true,
      "op": "retsub"
    },
    "4687": {
      "block": "accrueMarket_after_if_else@4",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4688": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4690": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "oldIndex#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "maybe_exists%1#0"
      ]
    },
    "4691": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0"
      ]
    },
    "4692": {
      "op": "dup",
      "defined_out": [
        "oldIndex#0",
        "oldIndex#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "oldIndex#0 (copy)"
      ]
    },
    "4693": {
      "op": "frame_dig 2",
      "defined_out": [
        "oldIndex#0",
        "oldIndex#0 (copy)",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "oldIndex#0 (copy)",
        "simpleWad#0"
      ]
    },
    "4695": {
      "op": "mulw",
      "defined_out": [
        "hiI#0",
        "loI#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "hiI#0",
        "loI#0"
      ]
    },
    "4696": {
      "op": "intc 6 // 1000000000000",
      "defined_out": [
        "1000000000000",
        "hiI#0",
        "loI#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "hiI#0",
        "loI#0",
        "1000000000000"
      ]
    },
    "4698": {
      "op": "divw",
      "defined_out": [
        "incrIndex#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "incrIndex#0"
      ]
    },
    "4699": {
      "op": "+",
      "defined_out": [
        "newIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "newIndex#0"
      ]
    },
    "4700": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "newIndex#0",
        "\"borrow_index_wad\""
      ]
    },
    "4702": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"borrow_index_wad\"",
        "newIndex#0"
      ]
    },
    "4703": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4704": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4705": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4707": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0"
      ]
    },
    "4708": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_exists%2#0",
        "totalBefore#0"
      ]
    },
    "4709": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_exists%2#0",
        "totalBefore#0",
        "totalBefore#0 (copy)"
      ]
    },
    "4710": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0",
        "totalBefore#0"
      ]
    },
    "4712": {
      "op": "frame_bury 3",
      "defined_out": [
        "maybe_exists%2#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0"
      ]
    },
    "4714": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4715": {
      "op": "intc_0 // 0",
      "defined_out": [
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "interest#0"
      ]
    },
    "4716": {
      "op": "frame_bury 1",
      "defined_out": [
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4718": {
      "op": "bz accrueMarket_after_if_else@6",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4721": {
      "op": "frame_dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4723": {
      "op": "frame_dig 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "simpleWad#0"
      ]
    },
    "4725": {
      "op": "mulw",
      "defined_out": [
        "hiB#0",
        "interest#0",
        "loB#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "4726": {
      "op": "intc 6 // 1000000000000",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "hiB#0",
        "loB#0",
        "1000000000000"
      ]
    },
    "4728": {
      "op": "divw",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4729": {
      "op": "frame_bury 1",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4731": {
      "block": "accrueMarket_after_if_else@6",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4732": {
      "op": "bytec 40 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"protocol_share_bps\""
      ]
    },
    "4734": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "protoBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0",
        "maybe_exists%3#0"
      ]
    },
    "4735": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0"
      ]
    },
    "4736": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "protoBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0",
        "10000"
      ]
    },
    "4738": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "10000",
        "protoBps#0"
      ]
    },
    "4739": {
      "op": "-",
      "defined_out": [
        "deposBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deposBps#0"
      ]
    },
    "4740": {
      "op": "frame_dig 1",
      "defined_out": [
        "deposBps#0",
        "interest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deposBps#0",
        "interest#0"
      ]
    },
    "4742": {
      "op": "dup"
    },
    "4743": {
      "op": "uncover 2",
      "defined_out": [
        "deposBps#0",
        "interest#0",
        "interest#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "interest#0 (copy)",
        "deposBps#0"
      ]
    },
    "4745": {
      "op": "mulw",
      "defined_out": [
        "hiD#0",
        "interest#0",
        "loD#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "hiD#0",
        "loD#0"
      ]
    },
    "4746": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "hiD#0",
        "loD#0",
        "10000"
      ]
    },
    "4748": {
      "op": "divw",
      "defined_out": [
        "depositorInterest#0",
        "interest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0"
      ]
    },
    "4749": {
      "op": "dup2",
      "defined_out": [
        "depositorInterest#0",
        "depositorInterest#0 (copy)",
        "interest#0",
        "interest#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "interest#0 (copy)",
        "depositorInterest#0 (copy)"
      ]
    },
    "4750": {
      "op": "-",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4751": {
      "op": "frame_dig 3",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ]
    },
    "4753": {
      "op": "dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "totalBefore#0",
        "interest#0 (copy)"
      ]
    },
    "4755": {
      "op": "+",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "new_state_value%0#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "new_state_value%0#0"
      ]
    },
    "4756": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "depositorInterest#0",
        "interest#0",
        "new_state_value%0#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4758": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4759": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4760": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4761": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "4762": {
      "op": "app_global_get_ex",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4763": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%4#0"
      ]
    },
    "4764": {
      "op": "uncover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%4#0",
        "depositorInterest#0"
      ]
    },
    "4766": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "new_state_value%1#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%1#0"
      ]
    },
    "4767": {
      "op": "bytec_3 // \"total_deposits\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "4768": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "4769": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0"
      ]
    },
    "4770": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4771": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "4773": {
      "op": "app_global_get_ex",
      "defined_out": [
        "interest#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4774": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%5#0"
      ]
    },
    "4775": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "new_state_value%2#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "new_state_value%2#0"
      ]
    },
    "4776": {
      "op": "bytec 15 // \"fee_pool\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "new_state_value%2#0",
        "\"fee_pool\""
      ]
    },
    "4778": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"fee_pool\"",
        "new_state_value%2#0"
      ]
    },
    "4779": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4780": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "interest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"last_accrual_ts\""
      ]
    },
    "4782": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"last_accrual_ts\"",
        "interest#0",
        "now#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"last_accrual_ts\"",
        "now#0"
      ]
    },
    "4784": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4785": {
      "op": "frame_bury 0"
    },
    "4787": {
      "retsub": true,
      "op": "retsub"
    },
    "4788": {
      "block": "accrueMarket_after_if_else@9",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4789": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"last_apr_bps\""
      ]
    },
    "4791": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "4792": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1"
      ]
    },
    "4793": {
      "op": "frame_dig 0",
      "defined_out": [
        "deltaT#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1",
        "deltaT#0"
      ]
    },
    "4795": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "h1#0",
        "l1#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h1#0",
        "l1#0"
      ]
    },
    "4796": {
      "op": "pushint 31536000 // 31536000",
      "defined_out": [
        "31536000",
        "deltaT#0",
        "h1#0",
        "l1#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h1#0",
        "l1#0",
        "31536000"
      ]
    },
    "4801": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "tmp2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp2#0"
      ]
    },
    "4802": {
      "op": "intc 6 // 1000000000000",
      "defined_out": [
        "1000000000000",
        "deltaT#0",
        "tmp2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp2#0",
        "1000000000000"
      ]
    },
    "4804": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "h2#0",
        "l2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h2#0",
        "l2#0"
      ]
    },
    "4805": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "deltaT#0",
        "h2#0",
        "l2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h2#0",
        "l2#0",
        "10000"
      ]
    },
    "4807": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4808": {
      "op": "frame_bury 2",
      "defined_out": [
        "deltaT#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4810": {
      "op": "b accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.sliceFactorWad@10"
    },
    "4813": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanRecord",
      "params": {
        "borrowerAddress#0": "bytes"
      },
      "block": "getLoanRecord",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4816": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4818": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4820": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4821": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4822": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4823": {
      "retsub": true,
      "op": "retsub"
    },
    "4824": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.repayLoanASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "repaymentAmount#0": "uint64"
      },
      "block": "repayLoanASA",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4827": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4829": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4830": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4831": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4832": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0"
      ]
    },
    "4833": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4834": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "0"
      ]
    },
    "4835": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "0",
        "\"contract_state\""
      ]
    },
    "4837": {
      "op": "app_global_get_ex",
      "defined_out": [
        "baseToken#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4838": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%1#0"
      ]
    },
    "4839": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "4840": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%0#0",
        "1"
      ]
    },
    "4841": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%1#0"
      ]
    },
    "4842": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4843": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4845": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "4847": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "4849": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "4850": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4853": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4855": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "4857": {
      "op": "frame_dig 1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%5#0",
        "baseToken#0"
      ]
    },
    "4859": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "4860": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4863": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4865": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "4867": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseToken#0",
        "repaymentAmount#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%7#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4869": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%8#0"
      ]
    },
    "4870": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4873": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "4874": {
      "block": "repayLoanASA_bool_merge@5",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4875": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "_interestSlice#0"
      ]
    },
    "4878": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4879": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%9#0"
      ]
    },
    "4881": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ]
    },
    "4884": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4885": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%10#0"
      ]
    },
    "4887": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4890": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4893": {
      "op": "swap",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4894": {
      "op": "frame_dig -1",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4896": {
      "op": "dig 1",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)",
        "liveDebt#0 (copy)"
      ]
    },
    "4898": {
      "op": "<=",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "tmp%11#0"
      ]
    },
    "4899": {
      "op": "assert",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4900": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4902": {
      "op": "-",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4903": {
      "op": "dup",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "remainingDebt#0"
      ]
    },
    "4904": {
      "op": "frame_bury 0",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4906": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "0"
      ]
    },
    "4907": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4909": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4910": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%2#0"
      ]
    },
    "4911": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%2#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4913": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0"
      ]
    },
    "4914": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4916": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4917": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4918": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4920": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4923": {
      "op": "bnz repayLoanASA_else_body@8",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4926": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"loan_record\""
      ]
    },
    "4928": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"loan_record\"",
        "tmp%13#0"
      ]
    },
    "4930": {
      "op": "concat",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "tmp%14#0"
      ]
    },
    "4931": {
      "op": "box_del",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "{box_del}"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "{box_del}"
      ]
    },
    "4932": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4933": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "0"
      ]
    },
    "4934": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4936": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4937": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%3#0"
      ]
    },
    "4938": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "4939": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "new_state_value%1#0"
      ]
    },
    "4940": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "4942": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "4943": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4944": {
      "op": "itxn_begin"
    },
    "4945": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4947": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "4948": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4949": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "32"
      ]
    },
    "4951": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4952": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0"
      ]
    },
    "4953": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "40"
      ]
    },
    "4955": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "4956": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4958": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4960": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4962": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "4"
      ]
    },
    "4963": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4965": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "1000"
      ]
    },
    "4966": {
      "op": "itxn_field Fee",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4968": {
      "op": "itxn_submit"
    },
    "4969": {
      "retsub": true,
      "op": "retsub"
    },
    "4970": {
      "block": "repayLoanASA_else_body@8",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "tmp%17#0"
      ]
    },
    "4972": {
      "op": "swap",
      "defined_out": [
        "rec#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "rec#0"
      ]
    },
    "4973": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4974": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "rec#0",
        "tmp%18#0"
      ]
    },
    "4977": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "rec#0"
      ]
    },
    "4978": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "4981": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "0"
      ]
    },
    "4982": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4983": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4984": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0"
      ]
    },
    "4985": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%4#0",
        "repaymentAmount#0 (copy)",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4987": {
      "op": "itob",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "4988": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "4990": {
      "op": "itob",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4991": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "4992": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "4995": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4996": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "4997": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4998": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0"
      ]
    },
    "5000": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "5001": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "5002": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "5004": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_exists%5#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "remainingDebt#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5005": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0"
      ]
    },
    "5006": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "5007": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%18#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%17#0"
      ]
    },
    "5009": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "5011": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%19#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%19#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "5012": {
      "op": "uncover 5",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0",
        "tmp%19#0"
      ]
    },
    "5014": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "5015": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "5017": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "5018": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%4#0"
      ]
    },
    "5020": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "5021": {
      "op": "uncover 2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%2#0"
      ]
    },
    "5023": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "remainingDebt#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "5024": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%3#0"
      ]
    },
    "5025": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "5026": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "5028": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "tmp%20#0"
      ]
    },
    "5030": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "tmp%21#0"
      ]
    },
    "5031": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%21#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "5032": {
      "op": "box_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "5033": {
      "retsub": true,
      "op": "retsub"
    },
    "5034": {
      "block": "repayLoanASA_bool_false@4",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "5035": {
      "op": "b repayLoanASA_bool_merge@5"
    },
    "5038": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawPlatformFees",
      "params": {
        "paymentReceiver#0": "bytes",
        "feeTxn#0": "uint64"
      },
      "block": "withdrawPlatformFees",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "5041": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "payout#0"
      ]
    },
    "5043": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0"
      ]
    },
    "5045": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "0"
      ]
    },
    "5046": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "5047": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5048": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "5049": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%1#0"
      ]
    },
    "5050": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": [
        "payout#0"
      ]
    },
    "5051": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "0"
      ]
    },
    "5052": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "payout#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5054": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5055": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "maybe_value%1#0"
      ]
    },
    "5056": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%2#0"
      ]
    },
    "5057": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%2#0",
        "1"
      ]
    },
    "5058": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%3#0"
      ]
    },
    "5059": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "payout#0"
      ]
    },
    "5060": {
      "op": "frame_dig -1",
      "defined_out": [
        "feeTxn#0 (copy)"
      ],
      "stack_out": [
        "payout#0",
        "feeTxn#0 (copy)"
      ]
    },
    "5062": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%4#0"
      ]
    },
    "5064": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5066": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%6#0"
      ]
    },
    "5067": {
      "op": "bz withdrawPlatformFees_bool_false@3",
      "stack_out": [
        "payout#0"
      ]
    },
    "5070": {
      "op": "frame_dig -1",
      "stack_out": [
        "payout#0",
        "feeTxn#0 (copy)"
      ]
    },
    "5072": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%7#0"
      ]
    },
    "5074": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%7#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%7#0",
        "1000"
      ]
    },
    "5075": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%8#0"
      ]
    },
    "5076": {
      "op": "bz withdrawPlatformFees_bool_false@3",
      "stack_out": [
        "payout#0"
      ]
    },
    "5079": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "payout#0",
        "and_result%0#0"
      ]
    },
    "5080": {
      "block": "withdrawPlatformFees_bool_merge@4",
      "stack_in": [
        "payout#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "payout#0"
      ]
    },
    "5081": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "payout#0",
        "0"
      ]
    },
    "5082": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0"
      ],
      "stack_out": [
        "payout#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "5084": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5085": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "maybe_value%2#0"
      ]
    },
    "5086": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "5087": {
      "op": "bytec 19 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "0",
        "\"current_accumulated_commission\""
      ]
    },
    "5089": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5090": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "5091": {
      "op": "+",
      "defined_out": [
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "5092": {
      "op": "dup",
      "stack_out": [
        "payout#0",
        "payout#0",
        "payout#0"
      ]
    },
    "5093": {
      "op": "frame_bury 0",
      "defined_out": [
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "5095": {
      "op": "bz withdrawPlatformFees_after_if_else@7",
      "stack_out": [
        "payout#0"
      ]
    },
    "5098": {
      "op": "itxn_begin"
    },
    "5099": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "0"
      ]
    },
    "5100": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "5101": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "5102": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "maybe_value%4#0"
      ]
    },
    "5103": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5104": {
      "op": "frame_dig 0",
      "stack_out": [
        "payout#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "payout#0"
      ]
    },
    "5106": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "payout#0",
        "payout#0 (copy)"
      ],
      "stack_out": [
        "payout#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "payout#0 (copy)",
        "payout#0 (copy)"
      ]
    },
    "5107": {
      "op": "cover 2",
      "stack_out": [
        "payout#0",
        "payout#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "payout#0 (copy)"
      ]
    },
    "5109": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "payout#0",
        "payout#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5111": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "5113": {
      "op": "frame_dig -2",
      "defined_out": [
        "paymentReceiver#0 (copy)",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0",
        "paymentReceiver#0 (copy)"
      ]
    },
    "5115": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "5117": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0",
        "4"
      ]
    },
    "5118": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "5120": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0",
        "1000"
      ]
    },
    "5121": {
      "op": "itxn_field Fee",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "5123": {
      "op": "itxn_submit"
    },
    "5124": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "payout#0"
      ]
    },
    "5127": {
      "op": "bytec 15 // \"fee_pool\"",
      "stack_out": [
        "payout#0",
        "\"fee_pool\""
      ]
    },
    "5129": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "\"fee_pool\"",
        "0"
      ]
    },
    "5130": {
      "op": "app_global_put",
      "stack_out": [
        "payout#0"
      ]
    },
    "5131": {
      "op": "bytec 19 // \"current_accumulated_commission\"",
      "stack_out": [
        "payout#0",
        "\"current_accumulated_commission\""
      ]
    },
    "5133": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "\"current_accumulated_commission\"",
        "0"
      ]
    },
    "5134": {
      "op": "app_global_put",
      "stack_out": [
        "payout#0"
      ]
    },
    "5135": {
      "block": "withdrawPlatformFees_after_if_else@7",
      "stack_in": [
        "payout#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "5136": {
      "block": "withdrawPlatformFees_bool_false@3",
      "stack_in": [
        "payout#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "payout#0",
        "and_result%0#0"
      ]
    },
    "5137": {
      "op": "b withdrawPlatformFees_bool_merge@4"
    },
    "5140": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.buyoutSplitASA",
      "params": {
        "buyer#0": "bytes",
        "debtor#0": "bytes",
        "premiumAxferTxn#0": "uint64",
        "repayAxferTxn#0": "uint64",
        "lstAppId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "buyoutSplitASA",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "5143": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "baseAssetId#0"
      ]
    },
    "5145": {
      "op": "dupn 6",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0"
      ]
    },
    "5147": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "\"loan_record\""
      ]
    },
    "5149": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "5151": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0"
      ]
    },
    "5152": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5154": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5155": {
      "op": "bury 1",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5157": {
      "error": "NO_LOAN_RECORD",
      "op": "assert // NO_LOAN_RECORD",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5158": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "5159": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5161": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5162": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "5163": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "5164": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "5165": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "5166": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5167": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "5169": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "5171": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%3#0",
        "10000"
      ]
    },
    "5173": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "5174": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5175": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "tmp%0#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0",
        "{accrueMarket}"
      ]
    },
    "5178": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5179": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "5180": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "maybe_exists%2#0",
        "rec#0"
      ]
    },
    "5181": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "maybe_exists%2#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5182": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "5184": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "rec#0"
      ]
    },
    "5185": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5186": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)",
        "40"
      ]
    },
    "5188": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0"
      ]
    },
    "5189": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5190": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0"
      ]
    },
    "5192": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5193": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5196": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5197": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5199": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0"
      ]
    },
    "5201": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#1"
      ]
    },
    "5204": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5205": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5206": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5208": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)"
      ]
    },
    "5209": {
      "error": "NO_DEBT",
      "op": "assert // NO_DEBT",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5210": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "debtBase#0",
        "collateralTokenId#0"
      ]
    },
    "5211": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "5213": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "lstAppId#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5215": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralUSD#0"
      ]
    },
    "5218": {
      "op": "dup"
    },
    "5219": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtBase#0"
      ]
    },
    "5221": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "5224": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)"
      ]
    },
    "5225": {
      "error": "BAD_DEBT_USD",
      "op": "assert // BAD_DEBT_USD",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "5226": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0"
      ]
    },
    "5227": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0",
        "10000"
      ]
    },
    "5229": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0"
      ]
    },
    "5230": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hCR#0",
        "lCR#0",
        "debtUSDv#0"
      ]
    },
    "5232": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0"
      ]
    },
    "5233": {
      "op": "dup",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "CR_bps#0"
      ]
    },
    "5234": {
      "op": "intc_0 // 0",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5235": {
      "op": "swap",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0"
      ]
    },
    "5236": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "0"
      ]
    },
    "5237": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5239": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5240": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "maybe_value%3#0"
      ]
    },
    "5241": {
      "op": ">",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%9#0"
      ]
    },
    "5242": {
      "op": "bz buyoutSplitASA_after_if_else@2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5245": {
      "op": "frame_dig 13",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0"
      ]
    },
    "5247": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "10000"
      ]
    },
    "5249": {
      "op": "mulw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0"
      ]
    },
    "5250": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "0"
      ]
    },
    "5251": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5253": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "5254": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "maybe_value%4#0"
      ]
    },
    "5255": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "ratio_bps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "ratio_bps#0"
      ]
    },
    "5256": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "ratio_bps#0",
        "10000"
      ]
    },
    "5258": {
      "op": "-",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumRateBps#0"
      ]
    },
    "5259": {
      "op": "frame_bury 14",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5261": {
      "block": "buyoutSplitASA_after_if_else@2",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "collateralUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralUSD#0"
      ]
    },
    "5263": {
      "op": "frame_dig 14",
      "defined_out": [
        "collateralUSD#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralUSD#0",
        "premiumRateBps#0"
      ]
    },
    "5265": {
      "op": "mulw",
      "defined_out": [
        "collateralUSD#0",
        "hP#0",
        "lP#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hP#0",
        "lP#0"
      ]
    },
    "5266": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralUSD#0",
        "hP#0",
        "lP#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hP#0",
        "lP#0",
        "10000"
      ]
    },
    "5268": {
      "op": "divw",
      "defined_out": [
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ]
    },
    "5269": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "5270": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "5272": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralUSD#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5273": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%5#0"
      ]
    },
    "5274": {
      "op": "btoi",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenId#0"
      ]
    },
    "5275": {
      "op": "frame_bury 1",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ]
    },
    "5277": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "5278": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "5280": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "5281": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%6#0"
      ]
    },
    "5282": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5285": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5286": {
      "op": "frame_bury 2",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5288": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0"
      ]
    },
    "5289": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0",
        "1000000"
      ]
    },
    "5291": {
      "op": "mulw",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0"
      ]
    },
    "5292": {
      "op": "frame_bury 4",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "hPT#0"
      ]
    },
    "5294": {
      "op": "frame_bury 3",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5296": {
      "op": "bnz buyoutSplitASA_ternary_false@4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5299": {
      "op": "intc_0 // 0",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5300": {
      "op": "frame_bury 5",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5302": {
      "block": "buyoutSplitASA_ternary_merge@5",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "premiumAxferTxn#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5304": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%11#0"
      ]
    },
    "5306": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "5308": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%13#0"
      ]
    },
    "5309": {
      "error": "INVALID_RECEIVER",
      "op": "assert // INVALID_RECEIVER",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5310": {
      "op": "frame_dig -4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5312": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%14#0"
      ]
    },
    "5314": {
      "op": "frame_dig 1",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%14#0",
        "buyoutTokenId#0"
      ]
    },
    "5316": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%15#0"
      ]
    },
    "5317": {
      "error": "INVALID_XFER_ASSET",
      "op": "assert // INVALID_XFER_ASSET",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5318": {
      "op": "frame_dig -4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5320": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "buyoutTokenId#0",
        "paidAmount#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "paidAmount#0"
      ]
    },
    "5322": {
      "op": "dup",
      "defined_out": [
        "buyoutTokenId#0",
        "paidAmount#0",
        "paidAmount#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "paidAmount#0",
        "paidAmount#0 (copy)"
      ]
    },
    "5323": {
      "op": "frame_dig 5",
      "defined_out": [
        "buyoutTokenId#0",
        "paidAmount#0",
        "paidAmount#0 (copy)",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "paidAmount#0",
        "paidAmount#0 (copy)",
        "premiumTokens#0"
      ]
    },
    "5325": {
      "op": "dup",
      "defined_out": [
        "buyoutTokenId#0",
        "paidAmount#0",
        "paidAmount#0 (copy)",
        "premiumTokens#0",
        "premiumTokens#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "paidAmount#0",
        "paidAmount#0 (copy)",
        "premiumTokens#0 (copy)",
        "premiumTokens#0 (copy)"
      ]
    },
    "5326": {
      "op": "cover 3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "paidAmount#0",
        "paidAmount#0 (copy)",
        "premiumTokens#0 (copy)"
      ]
    },
    "5328": {
      "op": ">=",
      "defined_out": [
        "buyoutTokenId#0",
        "paidAmount#0",
        "premiumTokens#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "paidAmount#0",
        "tmp%17#0"
      ]
    },
    "5329": {
      "error": "INVALID_BUYOUT_AMOUNT",
      "op": "assert // INVALID_BUYOUT_AMOUNT",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "paidAmount#0"
      ]
    },
    "5330": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "paidAmount#0",
        "premiumTokens#0"
      ]
    },
    "5331": {
      "op": "-",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "refund#0"
      ]
    },
    "5332": {
      "op": "frame_bury 6",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5334": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0"
      ]
    },
    "5335": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "5336": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyoutTokenId#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "premiumTokens#0",
        "refund#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "5337": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%7#0"
      ]
    },
    "5338": {
      "op": "btoi",
      "defined_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "baseAssetId#0"
      ]
    },
    "5339": {
      "op": "frame_bury 0",
      "defined_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5341": {
      "op": "frame_dig -3",
      "defined_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "repayAxferTxn#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5343": {
      "op": "gtxns Sender",
      "defined_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%18#0"
      ]
    },
    "5345": {
      "op": "frame_dig -6",
      "defined_out": [
        "baseAssetId#0",
        "buyer#0 (copy)",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%18#0",
        "buyer#0 (copy)"
      ]
    },
    "5347": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%19#0"
      ]
    },
    "5348": {
      "op": "bz buyoutSplitASA_bool_false@10",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5351": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5353": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%20#0"
      ]
    },
    "5355": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "5357": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%22#0"
      ]
    },
    "5358": {
      "op": "bz buyoutSplitASA_bool_false@10",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5361": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5363": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%23#0"
      ]
    },
    "5365": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%23#0",
        "baseAssetId#0"
      ]
    },
    "5367": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0"
      ]
    },
    "5368": {
      "op": "bz buyoutSplitASA_bool_false@10",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5371": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5373": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%25#0"
      ]
    },
    "5375": {
      "op": "frame_dig 11",
      "defined_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%25#0",
        "debtBase#0"
      ]
    },
    "5377": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0"
      ]
    },
    "5378": {
      "op": "bz buyoutSplitASA_bool_false@10",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5381": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseAssetId#0",
        "buyoutTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "refund#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ]
    },
    "5382": {
      "block": "buyoutSplitASA_bool_merge@11",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5383": {
      "op": "frame_dig 7",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%0#0"
      ]
    },
    "5385": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "{box_del}"
      ]
    },
    "5386": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5387": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0"
      ]
    },
    "5388": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "5390": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "5391": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%8#0"
      ]
    },
    "5392": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%8#0",
        "1"
      ]
    },
    "5393": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%0#0"
      ]
    },
    "5394": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "5396": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "5397": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5398": {
      "op": "itxn_begin"
    },
    "5399": {
      "op": "frame_dig 8",
      "defined_out": [
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "rec#0"
      ]
    },
    "5401": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "rec#0",
        "32"
      ]
    },
    "5403": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5404": {
      "op": "frame_dig 9",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "5406": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "5407": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5409": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5411": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5413": {
      "op": "frame_dig -6",
      "defined_out": [
        "buyer#0 (copy)",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "buyer#0 (copy)"
      ]
    },
    "5415": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5417": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "5418": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5420": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "1000"
      ]
    },
    "5421": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5423": {
      "op": "itxn_submit"
    },
    "5424": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "\"accepted_collaterals\""
      ]
    },
    "5426": {
      "op": "frame_dig 10",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5428": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%28#0"
      ]
    },
    "5429": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "5430": {
      "op": "box_get",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%9#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%28#0",
        "acVal#0",
        "maybe_exists%9#0"
      ]
    },
    "5431": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%28#0",
        "acVal#0"
      ]
    },
    "5432": {
      "op": "dup",
      "defined_out": [
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%28#0",
        "acVal#0",
        "acVal#0 (copy)"
      ]
    },
    "5433": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%28#0",
        "acVal#0",
        "acVal#0 (copy)",
        "24"
      ]
    },
    "5435": {
      "op": "extract_uint64",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%28#0",
        "acVal#0",
        "tmp%30#0"
      ]
    },
    "5436": {
      "op": "uncover 3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "tmp%30#0",
        "collateralAmount#0"
      ]
    },
    "5438": {
      "op": "-",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "updatedTotal#0"
      ]
    },
    "5439": {
      "op": "dig 1",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "updatedTotal#0",
        "acVal#0 (copy)"
      ]
    },
    "5441": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%31#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%31#0"
      ]
    },
    "5444": {
      "op": "dig 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%31#0",
        "acVal#0 (copy)"
      ]
    },
    "5446": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%31#0",
        "tmp%32#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "5449": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "tmp%31#0",
        "tmp%32#0",
        "updatedTotal#0"
      ]
    },
    "5451": {
      "op": "itob",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0"
      ]
    },
    "5452": {
      "op": "dig 3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0",
        "acVal#0 (copy)"
      ]
    },
    "5454": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "acVal#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0",
        "tmp%33#0"
      ]
    },
    "5457": {
      "op": "uncover 4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0",
        "tmp%33#0",
        "acVal#0"
      ]
    },
    "5459": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "5462": {
      "op": "uncover 4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "tmp%32#0",
        "val_as_bytes%0#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%31#0"
      ]
    },
    "5464": {
      "op": "uncover 4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "val_as_bytes%0#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "5466": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%4#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%33#0",
        "tmp%34#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "val_as_bytes%0#0",
        "tmp%33#0",
        "tmp%34#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "5467": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "encoded_tuple_buffer%4#0",
        "tmp%33#0"
      ]
    },
    "5469": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%5#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%34#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "5470": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "tmp%34#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "5472": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%6#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "tmp%34#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "5473": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "encoded_tuple_buffer%6#0",
        "tmp%34#0"
      ]
    },
    "5474": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%7#0",
        "rec#0",
        "tmp%0#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%28#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "5475": {
      "op": "box_put",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5476": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0"
      ]
    },
    "5477": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "5479": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "5480": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%10#0"
      ]
    },
    "5481": {
      "op": "frame_dig 11",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "maybe_value%10#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%10#0",
        "debtBase#0"
      ]
    },
    "5483": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)",
        "maybe_value%10#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%10#0",
        "debtBase#0 (copy)",
        "debtBase#0 (copy)"
      ]
    },
    "5484": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0",
        "maybe_value%10#0",
        "debtBase#0 (copy)"
      ]
    },
    "5486": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0",
        "new_state_value%1#0"
      ]
    },
    "5487": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0",
        "new_state_value%1#0",
        "\"total_borrows\""
      ]
    },
    "5489": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0",
        "\"total_borrows\"",
        "new_state_value%1#0"
      ]
    },
    "5490": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0"
      ]
    },
    "5491": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5494": {
      "op": "frame_dig 5",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5496": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)"
      ]
    },
    "5497": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)",
        "2"
      ]
    },
    "5499": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0"
      ]
    },
    "5500": {
      "op": "itxn_begin"
    },
    "5501": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "0"
      ]
    },
    "5502": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "0",
        "\"admin_account\""
      ]
    },
    "5503": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "5504": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1"
      ]
    },
    "5505": {
      "op": "dig 1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "halfPremium#0 (copy)",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "halfPremium#0 (copy)"
      ]
    },
    "5507": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1"
      ]
    },
    "5509": {
      "op": "frame_dig 1",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "buyoutTokenId#0"
      ]
    },
    "5511": {
      "op": "dup",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenId#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "buyoutTokenId#0 (copy)",
        "buyoutTokenId#0 (copy)"
      ]
    },
    "5512": {
      "op": "cover 3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "buyoutTokenId#0 (copy)"
      ]
    },
    "5514": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "maybe_value%0#1"
      ]
    },
    "5516": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0"
      ]
    },
    "5518": {
      "op": "intc_3 // 4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "4"
      ]
    },
    "5519": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0"
      ]
    },
    "5521": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "1000"
      ]
    },
    "5522": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0"
      ]
    },
    "5524": {
      "op": "itxn_submit"
    },
    "5525": {
      "op": "itxn_begin"
    },
    "5526": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "premiumTokens#0"
      ]
    },
    "5528": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "halfPremium#0"
      ]
    },
    "5529": {
      "op": "-",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "inner_txn_params%1%%param_AssetAmount_idx_0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenId#0",
        "inner_txn_params%1%%param_AssetAmount_idx_0#1"
      ]
    },
    "5530": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenId#0"
      ]
    },
    "5532": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5534": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtor#0 (copy)",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtor#0 (copy)"
      ]
    },
    "5536": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5538": {
      "op": "intc_3 // 4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "4"
      ]
    },
    "5539": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5541": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "1000"
      ]
    },
    "5542": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5544": {
      "op": "itxn_submit"
    },
    "5545": {
      "op": "frame_dig 6",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "refund#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "refund#0"
      ]
    },
    "5547": {
      "op": "bz buyoutSplitASA_after_if_else@15",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5550": {
      "op": "itxn_begin"
    },
    "5551": {
      "op": "frame_dig 6",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "refund#0"
      ]
    },
    "5553": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5555": {
      "op": "frame_dig 1",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenId#0"
      ]
    },
    "5557": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5559": {
      "op": "frame_dig -6",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyer#0 (copy)"
      ]
    },
    "5561": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5563": {
      "op": "intc_3 // 4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "4"
      ]
    },
    "5564": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5566": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "1000"
      ]
    },
    "5567": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5569": {
      "op": "itxn_submit"
    },
    "5570": {
      "block": "buyoutSplitASA_after_if_else@15",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%2#0"
      ]
    },
    "5573": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "5575": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "5576": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5577": {
      "retsub": true,
      "op": "retsub"
    },
    "5578": {
      "block": "buyoutSplitASA_bool_false@10",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ]
    },
    "5579": {
      "op": "b buyoutSplitASA_bool_merge@11"
    },
    "5582": {
      "block": "buyoutSplitASA_ternary_false@4",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "hPT#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0"
      ]
    },
    "5584": {
      "op": "frame_dig 4",
      "defined_out": [
        "hPT#0",
        "lPT#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0",
        "lPT#0"
      ]
    },
    "5586": {
      "op": "frame_dig 2",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0",
        "lPT#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5588": {
      "op": "divw",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5589": {
      "op": "frame_bury 5",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "refund#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5591": {
      "op": "b buyoutSplitASA_ternary_merge@5"
    },
    "5594": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.debtUSD",
      "params": {
        "debtBaseUnits#0": "uint64"
      },
      "block": "debtUSD",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "5597": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5598": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "5599": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5600": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "5601": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenPrice#0"
      ],
      "stack_out": [
        "baseTokenPrice#0"
      ]
    },
    "5604": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenPrice#0",
        "debtBaseUnits#0 (copy)"
      ],
      "stack_out": [
        "baseTokenPrice#0",
        "debtBaseUnits#0 (copy)"
      ]
    },
    "5606": {
      "op": "mulw",
      "defined_out": [
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "h#0",
        "l#0"
      ]
    },
    "5607": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "h#0",
        "l#0",
        "1000000"
      ]
    },
    "5609": {
      "op": "divw",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5610": {
      "retsub": true,
      "op": "retsub"
    },
    "5611": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.maxWithdrawableCollateralLST",
      "params": {
        "lstAppId#0": "uint64"
      },
      "block": "maxWithdrawableCollateralLST",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "5614": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0"
      ]
    },
    "5615": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ]
    },
    "5617": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5618": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\""
      ]
    },
    "5620": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\"",
        "tmp%0#0"
      ]
    },
    "5622": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%1#0"
      ]
    },
    "5623": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5624": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_exists%0#0"
      ]
    },
    "5626": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5627": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0"
      ]
    },
    "5628": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5630": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5631": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%1#0"
      ]
    },
    "5632": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%2#0"
      ]
    },
    "5633": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%2#0",
        "1"
      ]
    },
    "5634": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%3#0"
      ]
    },
    "5635": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5636": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "{accrueMarket}"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "{accrueMarket}"
      ]
    },
    "5639": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5640": {
      "op": "bytec 7 // \"loan_record\"",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\""
      ]
    },
    "5642": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\"",
        "tmp%4#0"
      ]
    },
    "5644": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%5#0"
      ]
    },
    "5645": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "5646": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0"
      ]
    },
    "5647": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5648": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5651": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "5653": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5654": {
      "op": "concat",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%0#1"
      ]
    },
    "5655": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "collateralTokenId#0",
        "maybe_exists%0#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "5656": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0"
      ]
    },
    "5657": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateral#0",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0",
        "32"
      ]
    },
    "5659": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%8#0"
      ]
    },
    "5660": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#0",
        "lstAppId#0 (copy)",
        "rec#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%8#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5662": {
      "op": "==",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%9#0"
      ]
    },
    "5663": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0"
      ]
    },
    "5664": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5667": {
      "op": "swap",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5668": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5669": {
      "op": "cover 2",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5671": {
      "op": "bnz maxWithdrawableCollateralLST_after_if_else@2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5674": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "40"
      ]
    },
    "5676": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "tmp%12#0"
      ]
    },
    "5677": {
      "op": "frame_bury 0"
    },
    "5679": {
      "retsub": true,
      "op": "retsub"
    },
    "5680": {
      "block": "maxWithdrawableCollateralLST_after_if_else@2",
      "stack_in": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ],
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5681": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5684": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5685": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5687": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0"
      ]
    },
    "5689": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0",
        "40"
      ]
    },
    "5691": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "tmp%15#0"
      ]
    },
    "5692": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#0",
        "lstAppId#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "tmp%15#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5694": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5697": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "currCollatUSD#0"
      ]
    },
    "5698": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5700": {
      "op": "frame_dig 3",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtBase#0"
      ]
    },
    "5702": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0"
      ]
    },
    "5705": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0",
        "10000"
      ]
    },
    "5707": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0"
      ]
    },
    "5708": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0"
      ]
    },
    "5709": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "5711": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5712": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0"
      ]
    },
    "5713": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5714": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5715": {
      "op": "frame_bury 2",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5717": {
      "op": "<=",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "tmp%16#0"
      ]
    },
    "5718": {
      "op": "bz maxWithdrawableCollateralLST_after_if_else@4",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0"
      ]
    },
    "5721": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "0"
      ]
    },
    "5722": {
      "op": "frame_bury 0"
    },
    "5724": {
      "retsub": true,
      "op": "retsub"
    },
    "5725": {
      "block": "maxWithdrawableCollateralLST_after_if_else@4",
      "stack_in": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5727": {
      "op": "frame_dig 2",
      "defined_out": [
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5729": {
      "op": "-",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5730": {
      "op": "itxn_begin"
    },
    "5731": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "5733": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5735": {
      "op": "frame_dig -1",
      "defined_out": [
        "currCollatUSD#0",
        "lstAppId#0 (copy)",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5737": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5739": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "appl"
      ]
    },
    "5741": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5743": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "1000"
      ]
    },
    "5744": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5746": {
      "op": "itxn_submit"
    },
    "5747": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0"
      ]
    },
    "5749": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5750": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "tmp%17#0"
      ]
    },
    "5753": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "awst_tmp%0#0"
      ]
    },
    "5754": {
      "op": "extract 0 4",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "5757": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "5758": {
      "op": "==",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "5759": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0"
      ]
    },
    "5760": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5761": {
      "op": "itxn_begin"
    },
    "5762": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "5764": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5766": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5768": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5770": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "appl"
      ]
    },
    "5772": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5774": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "1000"
      ]
    },
    "5775": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5777": {
      "op": "itxn_submit"
    },
    "5778": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0"
      ]
    },
    "5780": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "5781": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "tmp%21#0"
      ]
    },
    "5784": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "awst_tmp%1#0"
      ]
    },
    "5785": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "5788": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "tmp%22#0",
        "0x151f7c75"
      ]
    },
    "5789": {
      "op": "==",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "5790": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0"
      ]
    },
    "5791": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0"
      ]
    },
    "5792": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\""
      ]
    },
    "5794": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5796": {
      "op": "concat",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%0#1",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%0#1"
      ]
    },
    "5797": {
      "op": "box_get",
      "defined_out": [
        "ac#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "maybe_exists%0#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0",
        "maybe_exists%0#0"
      ]
    },
    "5798": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0"
      ]
    },
    "5799": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%26#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%26#0"
      ]
    },
    "5802": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0"
      ]
    },
    "5805": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0"
      ]
    },
    "5807": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0",
        "1000000"
      ]
    },
    "5809": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "hU#0",
        "lU#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "hU#0",
        "lU#0"
      ]
    },
    "5810": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "hU#0",
        "lU#0",
        "basePrice#0"
      ]
    },
    "5812": {
      "op": "divw",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUnderlying#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "removableUnderlying#0"
      ]
    },
    "5813": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "totalDeposits#0",
        "removableUnderlying#0",
        "circulatingLST#0"
      ]
    },
    "5815": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "hL#0",
        "lL#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "totalDeposits#0",
        "hL#0",
        "lL#0"
      ]
    },
    "5816": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "hL#0",
        "lL#0",
        "totalDeposits#0"
      ]
    },
    "5818": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableLST#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableLST#0"
      ]
    },
    "5819": {
      "op": "frame_bury 0"
    },
    "5821": {
      "retsub": true,
      "op": "retsub"
    },
    "5822": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawCollateral",
      "params": {
        "amountLST#0": "uint64",
        "collateralTokenId#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "withdrawCollateral",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "5825": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1"
      ]
    },
    "5826": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ]
    },
    "5828": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5829": {
      "op": "frame_dig -3",
      "defined_out": [
        "amountLST#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "amountLST#0 (copy)"
      ]
    },
    "5831": {
      "error": "ZERO_AMOUNT",
      "op": "assert // ZERO_AMOUNT",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5832": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0"
      ]
    },
    "5833": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5835": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5836": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%0#0"
      ]
    },
    "5837": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%1#0"
      ]
    },
    "5838": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%1#0",
        "1"
      ]
    },
    "5839": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%2#0"
      ]
    },
    "5840": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5841": {
      "op": "txn Sender"
    },
    "5843": {
      "op": "bytec 7 // \"loan_record\""
    },
    "5845": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "\"loan_record\"",
        "borrower#0"
      ]
    },
    "5847": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0"
      ]
    },
    "5848": {
      "op": "dupn 2",
      "defined_out": [
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5850": {
      "op": "box_len",
      "defined_out": [
        "borrower#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5851": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_exists%1#0"
      ]
    },
    "5853": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "5854": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "borrower#0",
        "tmp%3#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "{accrueMarket}"
      ]
    },
    "5857": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "5858": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5859": {
      "op": "box_get",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "loan#0",
        "maybe_exists%2#0"
      ]
    },
    "5860": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_exists%2#0",
        "loan#0"
      ]
    },
    "5861": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_exists%2#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "5862": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "loan#0",
        "maybe_exists%2#0",
        "loan#0"
      ]
    },
    "5864": {
      "op": "cover 3",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0",
        "maybe_exists%2#0"
      ]
    },
    "5866": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0"
      ]
    },
    "5867": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "loan#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "5868": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0"
      ]
    },
    "5871": {
      "op": "cover 2",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "loan#0"
      ]
    },
    "5873": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "loan#0",
        "32"
      ]
    },
    "5875": {
      "op": "extract_uint64",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "5876": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrower#0",
        "collateralTokenId#0 (copy)",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "tmp%6#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5878": {
      "op": "==",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "tmp%7#0"
      ]
    },
    "5879": {
      "error": "WRONG_COLLATERAL",
      "op": "assert // WRONG_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0"
      ]
    },
    "5880": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5882": {
      "op": "itob",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "acKey#0"
      ]
    },
    "5883": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "acKey#0",
        "acKey#0"
      ]
    },
    "5884": {
      "op": "cover 2",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acKey#0"
      ]
    },
    "5886": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acKey#0",
        "\"accepted_collaterals\""
      ]
    },
    "5888": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "\"accepted_collaterals\"",
        "acKey#0"
      ]
    },
    "5889": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0"
      ]
    },
    "5890": {
      "op": "dup",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "5891": {
      "op": "box_len",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5892": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0",
        "maybe_exists%3#0"
      ]
    },
    "5894": {
      "error": "BAD_COLLATERAL",
      "op": "assert // BAD_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0"
      ]
    },
    "5895": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "acVal#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%4#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acVal#0",
        "maybe_exists%4#0"
      ]
    },
    "5896": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acVal#0"
      ]
    },
    "5897": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acVal#0",
        "32"
      ]
    },
    "5899": {
      "op": "extract_uint64",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%11#0"
      ]
    },
    "5900": {
      "op": "frame_dig -1",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "lstAppId#0 (copy)",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%11#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5902": {
      "op": "==",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%12#0"
      ]
    },
    "5903": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5904": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5905": {
      "op": "box_len",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "5906": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_exists%0#0"
      ]
    },
    "5908": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5909": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "0"
      ]
    },
    "5910": {
      "op": "bytec 5 // \"contract_state\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5912": {
      "op": "app_global_get_ex",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%1#0",
        "maybe_value%1#1",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "5913": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_value%1#1"
      ]
    },
    "5914": {
      "op": "btoi",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%1#0"
      ]
    },
    "5915": {
      "op": "intc_1 // 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%1#0",
        "1"
      ]
    },
    "5916": {
      "op": "==",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "5917": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5918": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "{accrueMarket}"
      ]
    },
    "5921": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5922": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%2#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "5923": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0"
      ]
    },
    "5924": {
      "op": "dup",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5925": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "5928": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateralTokenId#1",
        "\"accepted_collaterals\""
      ]
    },
    "5930": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#1"
      ]
    },
    "5931": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "loan#0",
        "rec#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%0#0"
      ]
    },
    "5932": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateral#0",
        "collateralTokenId#1",
        "loan#0",
        "maybe_exists%0#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "5933": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateral#0"
      ]
    },
    "5934": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateral#0",
        "32"
      ]
    },
    "5936": {
      "op": "extract_uint64",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%6#0"
      ]
    },
    "5937": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%6#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5939": {
      "op": "==",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%7#0"
      ]
    },
    "5940": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0"
      ]
    },
    "5941": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5944": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5945": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5946": {
      "op": "cover 2",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5948": {
      "op": "bnz withdrawCollateral_after_if_else@4",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5951": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "40"
      ]
    },
    "5953": {
      "op": "extract_uint64",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "maxSafe#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "5954": {
      "block": "withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "amountLST#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0",
        "amountLST#0 (copy)"
      ]
    },
    "5956": {
      "op": ">=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%13#0"
      ]
    },
    "5957": {
      "error": "EXCEEDS_LIMITS",
      "op": "assert // EXCEEDS_LIMITS",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "5958": {
      "op": "frame_dig 5",
      "defined_out": [
        "loan#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0"
      ]
    },
    "5960": {
      "op": "dup",
      "defined_out": [
        "loan#0",
        "loan#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "5961": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "loan#0",
        "loan#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "loan#0 (copy)",
        "40"
      ]
    },
    "5963": {
      "op": "extract_uint64",
      "defined_out": [
        "loan#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0"
      ]
    },
    "5964": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "amountLST#0 (copy)"
      ]
    },
    "5966": {
      "op": "dig 1",
      "defined_out": [
        "amountLST#0 (copy)",
        "loan#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "amountLST#0 (copy)",
        "tmp%15#0 (copy)"
      ]
    },
    "5968": {
      "op": "<",
      "defined_out": [
        "loan#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "5969": {
      "error": "INSUFFICIENT_COLLATERAL",
      "op": "assert // INSUFFICIENT_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0"
      ]
    },
    "5970": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "amountLST#0 (copy)"
      ]
    },
    "5972": {
      "op": "-",
      "defined_out": [
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5973": {
      "op": "itxn_begin"
    },
    "5974": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "amountLST#0 (copy)"
      ]
    },
    "5976": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5978": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5980": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5982": {
      "op": "frame_dig 3",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "borrower#0"
      ]
    },
    "5984": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "borrower#0 (copy)",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "borrower#0 (copy)",
        "borrower#0 (copy)"
      ]
    },
    "5985": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "borrower#0 (copy)"
      ]
    },
    "5987": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5989": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "4"
      ]
    },
    "5990": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5992": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "1000"
      ]
    },
    "5993": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5995": {
      "op": "itxn_submit"
    },
    "5996": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0"
      ]
    },
    "5997": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "5998": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "5999": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "6000": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0"
      ]
    },
    "6001": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "amountLST#0 (copy)"
      ]
    },
    "6003": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%3#0"
      ]
    },
    "6004": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%3#0",
        "to_encode%0#0"
      ]
    },
    "6006": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "6007": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "6008": {
      "op": "pushbytes 0x03",
      "defined_out": [
        "0x03",
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0",
        "0x03"
      ]
    },
    "6011": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%4#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "6012": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%4#0"
      ]
    },
    "6013": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "6014": {
      "op": "dig 4",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "loan#0 (copy)"
      ]
    },
    "6016": {
      "error": "Index access is out of bounds",
      "op": "extract 73 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0"
      ]
    },
    "6019": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "loan#0"
      ]
    },
    "6021": {
      "error": "Index access is out of bounds",
      "op": "extract 81 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "6024": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "borrower#0"
      ]
    },
    "6026": {
      "op": "frame_dig 7",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "borrower#0",
        "acKey#0"
      ]
    },
    "6028": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "6029": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%2#0"
      ]
    },
    "6031": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "6032": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "6034": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%10#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "6035": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%10#0",
        "maybe_value%5#0"
      ]
    },
    "6037": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0",
        "loan#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "6038": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%20#0",
        "encoded_tuple_buffer%11#0",
        "tmp%19#0"
      ]
    },
    "6040": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%12#0",
        "loan#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%20#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "6041": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "encoded_tuple_buffer%12#0",
        "tmp%20#0"
      ]
    },
    "6042": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "newRec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "newRec#0"
      ]
    },
    "6043": {
      "op": "frame_dig 4",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "newRec#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "newRec#0",
        "tmp%3#0"
      ]
    },
    "6045": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%3#0",
        "newRec#0"
      ]
    },
    "6046": {
      "op": "box_put",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "6047": {
      "op": "frame_dig 6",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%5#0"
      ]
    },
    "6049": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%5#0",
        "amountLST#0 (copy)"
      ]
    },
    "6051": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "6054": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "new_state_value%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "new_state_value%0#0"
      ]
    },
    "6057": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "acKey#0",
        "borrower#0",
        "loan#0",
        "new_state_value%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "new_state_value%0#0",
        "\"last_apr_bps\""
      ]
    },
    "6059": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ]
    },
    "6060": {
      "op": "app_global_put",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "6061": {
      "retsub": true,
      "op": "retsub"
    },
    "6062": {
      "block": "withdrawCollateral_after_if_else@4",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ],
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6063": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "6066": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#1",
        "collateralTokenId#1 (copy)"
      ]
    },
    "6067": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "6069": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0"
      ]
    },
    "6071": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0",
        "40"
      ]
    },
    "6073": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#1",
        "tmp%13#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "tmp%13#1"
      ]
    },
    "6074": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#1",
        "lstAppId#0 (copy)",
        "tmp%13#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "tmp%13#1",
        "lstAppId#0 (copy)"
      ]
    },
    "6076": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "6079": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "currCollatUSD#0"
      ]
    },
    "6080": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "6082": {
      "op": "frame_dig 8",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtBase#0"
      ]
    },
    "6084": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0"
      ]
    },
    "6087": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0",
        "10000"
      ]
    },
    "6089": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0"
      ]
    },
    "6090": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0"
      ]
    },
    "6091": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "6093": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "6094": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0"
      ]
    },
    "6095": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6096": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6097": {
      "op": "frame_bury 2",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6099": {
      "op": "<=",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0",
        "tmp%14#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%14#1"
      ]
    },
    "6100": {
      "op": "bz withdrawCollateral_after_if_else@6",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "6103": {
      "op": "intc_0 // 0",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "maxSafe#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "6104": {
      "op": "b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7"
    },
    "6107": {
      "block": "withdrawCollateral_after_if_else@6",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "6109": {
      "op": "frame_dig 2",
      "defined_out": [
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6111": {
      "op": "-",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6112": {
      "op": "itxn_begin"
    },
    "6113": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "6115": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6117": {
      "op": "frame_dig -1",
      "defined_out": [
        "currCollatUSD#0",
        "lstAppId#0 (copy)",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6119": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6121": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "appl"
      ]
    },
    "6123": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6125": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "1000"
      ]
    },
    "6126": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6128": {
      "op": "itxn_submit"
    },
    "6129": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0"
      ]
    },
    "6131": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6132": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "tmp%15#1"
      ]
    },
    "6135": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "awst_tmp%0#0"
      ]
    },
    "6136": {
      "op": "extract 0 4",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1",
        "tmp%16#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "tmp%16#1"
      ]
    },
    "6139": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1",
        "tmp%16#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "tmp%16#1",
        "0x151f7c75"
      ]
    },
    "6140": {
      "op": "==",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1",
        "tmp%17#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "tmp%17#1"
      ]
    },
    "6141": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1"
      ]
    },
    "6142": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6143": {
      "op": "itxn_begin"
    },
    "6144": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "6146": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6148": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6150": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6152": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "appl"
      ]
    },
    "6154": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6156": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "1000"
      ]
    },
    "6157": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6159": {
      "op": "itxn_submit"
    },
    "6160": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0"
      ]
    },
    "6162": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6163": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ]
    },
    "6166": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "awst_tmp%1#0"
      ]
    },
    "6167": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "6170": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "6171": {
      "op": "==",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0",
        "tmp%21#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%21#1"
      ]
    },
    "6172": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0"
      ]
    },
    "6173": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0"
      ]
    },
    "6174": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\""
      ]
    },
    "6176": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#1"
      ]
    },
    "6178": {
      "op": "concat",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%0#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%0#0"
      ]
    },
    "6179": {
      "op": "box_get",
      "defined_out": [
        "ac#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "maybe_exists%0#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0",
        "maybe_exists%0#0"
      ]
    },
    "6180": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0"
      ]
    },
    "6181": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%24#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%24#0"
      ]
    },
    "6184": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0"
      ]
    },
    "6187": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0"
      ]
    },
    "6189": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0",
        "1000000"
      ]
    },
    "6191": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "hU#0",
        "lU#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "hU#0",
        "lU#0"
      ]
    },
    "6192": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "hU#0",
        "lU#0",
        "basePrice#0"
      ]
    },
    "6194": {
      "op": "divw",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUnderlying#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "removableUnderlying#0"
      ]
    },
    "6195": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "totalDeposits#0",
        "removableUnderlying#0",
        "circulatingLST#0"
      ]
    },
    "6197": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "hL#0",
        "lL#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "totalDeposits#0",
        "hL#0",
        "lL#0"
      ]
    },
    "6198": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "hL#0",
        "lL#0",
        "totalDeposits#0"
      ]
    },
    "6200": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "maxSafe#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "6201": {
      "op": "b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7"
    },
    "6204": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.liquidatePartialASA",
      "params": {
        "debtor#0": "bytes",
        "repayAxfer#0": "uint64",
        "repayBaseAmount#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "liquidatePartialASA",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "6207": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "6208": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0"
      ]
    },
    "6210": {
      "op": "dupn 24",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0"
      ]
    },
    "6212": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "\"loan_record\""
      ]
    },
    "6214": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "6216": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0"
      ]
    },
    "6217": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "6219": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6220": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6222": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "6223": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "6224": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "tmp%0#0",
        "0",
        "\"contract_state\""
      ]
    },
    "6226": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6227": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "6228": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "6229": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "6230": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "6231": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "6232": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "tmp%0#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "tmp%0#0",
        "{accrueMarket}"
      ]
    },
    "6235": {
      "op": "pop",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "6236": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "6237": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "maybe_exists%2#0",
        "rec#0"
      ]
    },
    "6238": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "maybe_exists%2#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6239": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "6241": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "rec#0"
      ]
    },
    "6242": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6243": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collTok#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collTok#0"
      ]
    },
    "6246": {
      "op": "swap",
      "defined_out": [
        "collTok#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "rec#0"
      ]
    },
    "6247": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6248": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)",
        "40"
      ]
    },
    "6250": {
      "op": "extract_uint64",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "collLSTBal#0"
      ]
    },
    "6251": {
      "op": "swap",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#0"
      ]
    },
    "6252": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "liveDebt#0",
        "rec#1"
      ]
    },
    "6255": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6256": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "6257": {
      "error": "NO_DEBT",
      "op": "assert // NO_DEBT",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6258": {
      "op": "frame_dig -2",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "repayBaseAmount#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6260": {
      "op": "bz liquidatePartialASA_bool_false@3",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6263": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6265": {
      "op": "frame_dig 31",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "liveDebt#0"
      ]
    },
    "6267": {
      "op": "<=",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%7#0"
      ]
    },
    "6268": {
      "op": "bz liquidatePartialASA_bool_false@3",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6271": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ]
    },
    "6272": {
      "block": "liquidatePartialASA_bool_merge@4",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ],
      "error": "BAD_REPAY",
      "op": "assert // BAD_REPAY",
      "defined_out": [],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6273": {
      "op": "frame_dig 28",
      "defined_out": [
        "collTok#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0"
      ]
    },
    "6275": {
      "op": "frame_dig 29",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "collLSTBal#0"
      ]
    },
    "6277": {
      "op": "frame_dig -1",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "collLSTBal#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6279": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0"
      ]
    },
    "6282": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "collateralUSD#0"
      ]
    },
    "6283": {
      "op": "frame_bury 4",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0"
      ]
    },
    "6285": {
      "op": "frame_dig 31",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "liveDebt#0"
      ]
    },
    "6287": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "6290": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0"
      ]
    },
    "6291": {
      "op": "frame_bury 5",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "6293": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)"
      ]
    },
    "6294": {
      "error": "BAD_DEBT_USD",
      "op": "assert // BAD_DEBT_USD",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "6295": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "collateralUSD#0"
      ]
    },
    "6296": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "collateralUSD#0",
        "10000"
      ]
    },
    "6298": {
      "op": "mulw",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0"
      ]
    },
    "6299": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hCR#0",
        "lCR#0",
        "debtUSDv#0"
      ]
    },
    "6301": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0"
      ]
    },
    "6302": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "0"
      ]
    },
    "6303": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "6305": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "6306": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "maybe_value%3#0"
      ]
    },
    "6307": {
      "op": "<=",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%9#0"
      ]
    },
    "6308": {
      "error": "NOT_LIQUIDATABLE",
      "op": "assert // NOT_LIQUIDATABLE",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6309": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "6310": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6311": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "6312": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%4#0"
      ]
    },
    "6313": {
      "op": "btoi",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "baseAssetId#0"
      ]
    },
    "6314": {
      "op": "frame_bury 1",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6316": {
      "op": "frame_dig -3",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ]
    },
    "6318": {
      "op": "gtxns Sender",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%10#0"
      ]
    },
    "6320": {
      "op": "txn Sender",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "6322": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%12#0"
      ]
    },
    "6323": {
      "op": "bz liquidatePartialASA_bool_false@9",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6326": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ]
    },
    "6328": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%13#0"
      ]
    },
    "6330": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "6332": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%15#0"
      ]
    },
    "6333": {
      "op": "bz liquidatePartialASA_bool_false@9",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6336": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ]
    },
    "6338": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%16#0"
      ]
    },
    "6340": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%16#0",
        "baseAssetId#0"
      ]
    },
    "6342": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%17#0"
      ]
    },
    "6343": {
      "op": "bz liquidatePartialASA_bool_false@9",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6346": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ]
    },
    "6348": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%18#0"
      ]
    },
    "6350": {
      "op": "frame_dig -2",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%18#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6352": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%19#0"
      ]
    },
    "6353": {
      "op": "bz liquidatePartialASA_bool_false@9",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6356": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ]
    },
    "6357": {
      "block": "liquidatePartialASA_bool_merge@10",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6358": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "6359": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6360": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "6361": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%5#0"
      ]
    },
    "6362": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "basePrice#0"
      ]
    },
    "6365": {
      "op": "frame_bury 2",
      "defined_out": [
        "basePrice#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6367": {
      "op": "frame_dig 31",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "6369": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ]
    },
    "6370": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "basePrice#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "2"
      ]
    },
    "6372": {
      "op": "/",
      "defined_out": [
        "basePrice#0",
        "closeFactorHalf#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "closeFactorHalf#0"
      ]
    },
    "6373": {
      "op": "dup2",
      "defined_out": [
        "basePrice#0",
        "closeFactorHalf#0",
        "closeFactorHalf#0 (copy)",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "closeFactorHalf#0",
        "liveDebt#0 (copy)",
        "closeFactorHalf#0 (copy)"
      ]
    },
    "6374": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "closeFactorHalf#0 (copy)",
        "closeFactorHalf#0"
      ]
    },
    "6376": {
      "op": "select",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ]
    },
    "6377": {
      "op": "frame_bury 12",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "6379": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "0"
      ]
    },
    "6380": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "0",
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "0",
        "\"liq_bonus_bps\""
      ]
    },
    "6382": {
      "op": "app_global_get_ex",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "maybe_exists%6#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "bonusBps#0",
        "maybe_exists%6#0"
      ]
    },
    "6383": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "maybe_exists%6#0",
        "bonusBps#0"
      ]
    },
    "6384": {
      "op": "frame_bury 3",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "maybe_exists%6#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "maybe_exists%6#0"
      ]
    },
    "6386": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "6387": {
      "op": "frame_dig -2",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayBaseAmount#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6389": {
      "op": "==",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0"
      ]
    },
    "6390": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0",
        "isFullRepayRequest#0"
      ]
    },
    "6391": {
      "op": "frame_bury 9",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0"
      ]
    },
    "6393": {
      "op": "frame_dig -2",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayCandidate#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0",
        "repayCandidate#2"
      ]
    },
    "6395": {
      "op": "frame_bury 19",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayCandidate#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0"
      ]
    },
    "6397": {
      "op": "bnz liquidatePartialASA_after_if_else@13",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6400": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6402": {
      "op": "frame_dig 12",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "maxRepayAllowed#0"
      ]
    },
    "6404": {
      "op": ">",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayCandidate#2",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%21#0"
      ]
    },
    "6405": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%21#0",
        "repayCandidate#2"
      ]
    },
    "6407": {
      "op": "frame_bury 19",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%21#0"
      ]
    },
    "6409": {
      "op": "bz liquidatePartialASA_after_if_else@13",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6412": {
      "op": "frame_dig 12",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2"
      ]
    },
    "6414": {
      "op": "frame_bury 19",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6416": {
      "block": "liquidatePartialASA_after_if_else@13",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 19",
      "defined_out": [
        "repayCandidate#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2"
      ]
    },
    "6418": {
      "op": "frame_dig 2",
      "defined_out": [
        "basePrice#0",
        "repayCandidate#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2",
        "basePrice#0"
      ]
    },
    "6420": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "hRU#0",
        "lRU#0",
        "repayCandidate#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRU#0",
        "lRU#0"
      ]
    },
    "6421": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "hRU#0",
        "lRU#0",
        "repayCandidate#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRU#0",
        "lRU#0",
        "1000000"
      ]
    },
    "6423": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "repayCandidate#2",
        "repayUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0"
      ]
    },
    "6424": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "basePrice#0",
        "repayCandidate#2",
        "repayUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "10000"
      ]
    },
    "6426": {
      "op": "frame_dig 3",
      "defined_out": [
        "10000",
        "basePrice#0",
        "bonusBps#0",
        "repayCandidate#2",
        "repayUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "10000",
        "bonusBps#0"
      ]
    },
    "6428": {
      "op": "+",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "repayCandidate#2",
        "repayUSD#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "tmp%22#0"
      ]
    },
    "6429": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "tmp%22#0",
        "tmp%22#0"
      ]
    },
    "6430": {
      "op": "frame_bury 25",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "repayCandidate#2",
        "repayUSD#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "tmp%22#0"
      ]
    },
    "6432": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "hSZ#0",
        "lSZ#0",
        "repayCandidate#2",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSZ#0",
        "lSZ#0"
      ]
    },
    "6433": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSZ#0",
        "lSZ#0",
        "10000"
      ]
    },
    "6435": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0"
      ]
    },
    "6436": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "basePrice#0",
        "bonusBps#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "\"accepted_collaterals\""
      ]
    },
    "6438": {
      "op": "frame_dig 28",
      "defined_out": [
        "\"accepted_collaterals\"",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "\"accepted_collaterals\"",
        "collTok#0"
      ]
    },
    "6440": {
      "op": "concat",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3"
      ]
    },
    "6441": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%0#3"
      ]
    },
    "6442": {
      "op": "frame_bury 0",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3"
      ]
    },
    "6444": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%0#3 (copy)",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%0#3 (copy)"
      ]
    },
    "6445": {
      "op": "box_get",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "maybe_exists%0#0",
        "maybe_value%0#2",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "6446": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3",
        "maybe_value%0#2"
      ]
    },
    "6447": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%1#1",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%1#1"
      ]
    },
    "6450": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUSD#0",
        "tmp%0#3",
        "tmp%22#0",
        "underlyingPrice#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#3",
        "underlyingPrice#0"
      ]
    },
    "6453": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#3",
        "underlyingPrice#0",
        "seizeUSD#0"
      ]
    },
    "6455": {
      "op": "intc 5 // 1000000",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#3",
        "underlyingPrice#0",
        "seizeUSD#0",
        "1000000"
      ]
    },
    "6457": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "hUnd#0",
        "lUnd#0",
        "repayCandidate#2",
        "tmp%0#3",
        "tmp%22#0",
        "underlyingPrice#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#3",
        "underlyingPrice#0",
        "hUnd#0",
        "lUnd#0"
      ]
    },
    "6458": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#3",
        "hUnd#0",
        "lUnd#0",
        "underlyingPrice#0"
      ]
    },
    "6460": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#3",
        "seizeUnderlying#0"
      ]
    },
    "6461": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%0#3"
      ]
    },
    "6462": {
      "op": "box_get",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "collateral#0",
        "maybe_exists%0#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "6463": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "collateral#0"
      ]
    },
    "6464": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "collateral#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "collateral#0",
        "32"
      ]
    },
    "6466": {
      "op": "extract_uint64",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%3#1"
      ]
    },
    "6467": {
      "op": "frame_dig -1",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "lstAppId#0 (copy)",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%3#1",
        "lstAppId#0 (copy)"
      ]
    },
    "6469": {
      "op": "==",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%4#1"
      ]
    },
    "6470": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6471": {
      "op": "itxn_begin"
    },
    "6472": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "6474": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6476": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6478": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6480": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "appl"
      ]
    },
    "6482": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6484": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "1000"
      ]
    },
    "6485": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6487": {
      "op": "itxn_submit"
    },
    "6488": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "awst_tmp%0#0"
      ]
    },
    "6490": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6491": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "awst_tmp%0#0",
        "tmp%5#1"
      ]
    },
    "6494": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "awst_tmp%0#0"
      ]
    },
    "6495": {
      "op": "extract 0 4",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0",
        "tmp%5#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%6#1"
      ]
    },
    "6498": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0",
        "tmp%5#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%6#1",
        "0x151f7c75"
      ]
    },
    "6499": {
      "op": "==",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0",
        "tmp%5#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%7#0"
      ]
    },
    "6500": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1"
      ]
    },
    "6501": {
      "op": "btoi",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6502": {
      "op": "itxn_begin"
    },
    "6503": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "6505": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6507": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6509": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6511": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "appl"
      ]
    },
    "6513": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6515": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "1000"
      ]
    },
    "6516": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6518": {
      "op": "itxn_submit"
    },
    "6519": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0"
      ]
    },
    "6521": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6522": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0",
        "tmp%9#1"
      ]
    },
    "6525": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "awst_tmp%1#0"
      ]
    },
    "6526": {
      "op": "extract 0 4",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%10#1",
        "tmp%22#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "tmp%10#1"
      ]
    },
    "6529": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "tmp%10#1",
        "0x151f7c75"
      ]
    },
    "6530": {
      "op": "==",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%11#1",
        "tmp%22#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "tmp%11#1"
      ]
    },
    "6531": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1"
      ]
    },
    "6532": {
      "op": "btoi",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "circ#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeUnderlying#0",
        "tmp%0#3",
        "tmp%22#0",
        "total#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "total#0"
      ]
    },
    "6533": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "total#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6535": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "hL#0",
        "lL#0",
        "repayCandidate#2",
        "tmp%0#3",
        "tmp%22#0",
        "total#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "total#0",
        "hL#0",
        "lL#0"
      ]
    },
    "6536": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hL#0",
        "lL#0",
        "total#0"
      ]
    },
    "6538": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6539": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "seizeLST#1"
      ]
    },
    "6540": {
      "op": "frame_bury 23",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6542": {
      "op": "frame_dig 29",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collLSTBal#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "collLSTBal#0"
      ]
    },
    "6544": {
      "op": ">",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "collLSTBal#0",
        "collTok#0",
        "repayCandidate#2",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%13#1",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%13#1"
      ]
    },
    "6545": {
      "op": "bz liquidatePartialASA_after_if_else@46",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6548": {
      "op": "frame_dig 29",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6550": {
      "op": "frame_bury 23",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6552": {
      "block": "liquidatePartialASA_after_if_else@46",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 23",
      "defined_out": [
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6554": {
      "op": "dup",
      "defined_out": [
        "seizeLST#1",
        "seizeLST#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "seizeLST#1 (copy)"
      ]
    },
    "6555": {
      "error": "NOTHING_TO_SEIZE",
      "op": "assert // NOTHING_TO_SEIZE",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6556": {
      "op": "bnz liquidatePartialASA_after_if_else@50",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6559": {
      "op": "intc_0 // 0",
      "defined_out": [
        "repaySupported#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repaySupported#0"
      ]
    },
    "6560": {
      "op": "frame_bury 20",
      "defined_out": [
        "repaySupported#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6562": {
      "block": "liquidatePartialASA_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.repayBaseFromSeizedLST@51",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 20",
      "defined_out": [
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repaySupported#0"
      ]
    },
    "6564": {
      "op": "frame_dig 31",
      "defined_out": [
        "liveDebt#0",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repaySupported#0",
        "liveDebt#0"
      ]
    },
    "6566": {
      "op": ">",
      "defined_out": [
        "liveDebt#0",
        "repaySupported#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%24#0"
      ]
    },
    "6567": {
      "op": "bz liquidatePartialASA_after_if_else@15",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6570": {
      "op": "frame_dig 31",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repaySupported#0"
      ]
    },
    "6572": {
      "op": "frame_bury 20",
      "defined_out": [
        "liveDebt#0",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6574": {
      "block": "liquidatePartialASA_after_if_else@15",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 23",
      "defined_out": [
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6576": {
      "op": "frame_dig 29",
      "defined_out": [
        "collLSTBal#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "collLSTBal#0"
      ]
    },
    "6578": {
      "op": "==",
      "defined_out": [
        "collLSTBal#0",
        "seizeLST#1",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%25#0"
      ]
    },
    "6579": {
      "op": "bz liquidatePartialASA_after_if_else@17",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6582": {
      "op": "frame_dig -2",
      "defined_out": [
        "collLSTBal#0",
        "repayCandidate#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2"
      ]
    },
    "6584": {
      "op": "frame_bury 19",
      "defined_out": [
        "collLSTBal#0",
        "repayCandidate#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6586": {
      "block": "liquidatePartialASA_after_if_else@17",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 19",
      "defined_out": [
        "repayCandidate#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2"
      ]
    },
    "6588": {
      "op": "dup",
      "defined_out": [
        "repayCandidate#2",
        "repayCandidate#2 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2",
        "repayCandidate#2 (copy)"
      ]
    },
    "6589": {
      "op": "frame_dig 20",
      "defined_out": [
        "repayCandidate#2",
        "repayCandidate#2 (copy)",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2",
        "repayCandidate#2 (copy)",
        "repaySupported#0"
      ]
    },
    "6591": {
      "op": "dup",
      "defined_out": [
        "repayCandidate#2",
        "repayCandidate#2 (copy)",
        "repaySupported#0",
        "repaySupported#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2",
        "repayCandidate#2 (copy)",
        "repaySupported#0 (copy)",
        "repaySupported#0 (copy)"
      ]
    },
    "6592": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayCandidate#2 (copy)",
        "repaySupported#0 (copy)"
      ]
    },
    "6594": {
      "op": "<=",
      "defined_out": [
        "repayCandidate#2",
        "repaySupported#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2",
        "repaySupported#0",
        "tmp%26#0"
      ]
    },
    "6595": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayCandidate#2",
        "tmp%26#0",
        "repaySupported#0"
      ]
    },
    "6596": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repaySupported#0",
        "repayCandidate#2",
        "tmp%26#0"
      ]
    },
    "6598": {
      "op": "select",
      "defined_out": [
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "proposedRepayUsed#0"
      ]
    },
    "6599": {
      "op": "frame_bury 14",
      "defined_out": [
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6601": {
      "op": "frame_dig 9",
      "defined_out": [
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0"
      ]
    },
    "6603": {
      "op": "bnz liquidatePartialASA_after_if_else@30",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6606": {
      "op": "frame_dig 31",
      "defined_out": [
        "isFullRepayRequest#0",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "6608": {
      "op": "frame_dig 14",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "proposedRepayUsed#0"
      ]
    },
    "6610": {
      "op": "-",
      "defined_out": [
        "isFullRepayRequest#0",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "remainingDebtBase#0",
        "repayCandidate#2",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingDebtBase#0"
      ]
    },
    "6611": {
      "op": "bz liquidatePartialASA_after_if_else@30",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6614": {
      "op": "frame_dig 14",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "proposedRepayUsed#0"
      ]
    },
    "6616": {
      "op": "frame_dig 2",
      "defined_out": [
        "basePrice#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "basePrice#0"
      ]
    },
    "6618": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "hRepayUsedUSD#0",
        "isFullRepayRequest#0",
        "lRepayUsedUSD#0",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRepayUsedUSD#0",
        "lRepayUsedUSD#0"
      ]
    },
    "6619": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "hRepayUsedUSD#0",
        "isFullRepayRequest#0",
        "lRepayUsedUSD#0",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRepayUsedUSD#0",
        "lRepayUsedUSD#0",
        "1000000"
      ]
    },
    "6621": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsedUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsedUSD#0"
      ]
    },
    "6622": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsedUSD#0",
        "repayUsedUSD#0"
      ]
    },
    "6623": {
      "op": "frame_bury 22",
      "defined_out": [
        "basePrice#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsedUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsedUSD#0"
      ]
    },
    "6625": {
      "op": "intc_0 // 0",
      "defined_out": [
        "basePrice#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "remainingDebtUSD#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsedUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsedUSD#0",
        "remainingDebtUSD#0"
      ]
    },
    "6626": {
      "op": "frame_bury 17",
      "defined_out": [
        "basePrice#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "remainingDebtUSD#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsedUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsedUSD#0"
      ]
    },
    "6628": {
      "op": "frame_dig 5",
      "defined_out": [
        "basePrice#0",
        "debtUSDv#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "remainingDebtUSD#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsedUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsedUSD#0",
        "debtUSDv#0"
      ]
    },
    "6630": {
      "op": "<",
      "defined_out": [
        "basePrice#0",
        "debtUSDv#0",
        "isFullRepayRequest#0",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "remainingDebtUSD#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsedUSD#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0"
      ]
    },
    "6631": {
      "op": "bz liquidatePartialASA_after_if_else@21",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6634": {
      "op": "frame_dig 5",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0"
      ]
    },
    "6636": {
      "op": "frame_dig 22",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "repayUsedUSD#0"
      ]
    },
    "6638": {
      "op": "-",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingDebtUSD#0"
      ]
    },
    "6639": {
      "op": "frame_bury 17",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6641": {
      "block": "liquidatePartialASA_after_if_else@21",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 22",
      "defined_out": [
        "repayUsedUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsedUSD#0"
      ]
    },
    "6643": {
      "op": "frame_dig 25",
      "defined_out": [
        "repayUsedUSD#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsedUSD#0",
        "tmp%22#0"
      ]
    },
    "6645": {
      "op": "mulw",
      "defined_out": [
        "hSeizedUSDActual#0",
        "lSeizedUSDActual#0",
        "repayUsedUSD#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSeizedUSDActual#0",
        "lSeizedUSDActual#0"
      ]
    },
    "6646": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "hSeizedUSDActual#0",
        "lSeizedUSDActual#0",
        "repayUsedUSD#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSeizedUSDActual#0",
        "lSeizedUSDActual#0",
        "10000"
      ]
    },
    "6648": {
      "op": "divw",
      "defined_out": [
        "repayUsedUSD#0",
        "seizedUSDActual#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizedUSDActual#0"
      ]
    },
    "6649": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizedUSDActual#0",
        "seizedUSDActual#0"
      ]
    },
    "6650": {
      "op": "frame_bury 24",
      "defined_out": [
        "repayUsedUSD#0",
        "seizedUSDActual#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizedUSDActual#0"
      ]
    },
    "6652": {
      "op": "intc_0 // 0",
      "defined_out": [
        "remainingCollateralUSD#0",
        "repayUsedUSD#0",
        "seizedUSDActual#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizedUSDActual#0",
        "remainingCollateralUSD#0"
      ]
    },
    "6653": {
      "op": "frame_bury 16",
      "defined_out": [
        "remainingCollateralUSD#0",
        "repayUsedUSD#0",
        "seizedUSDActual#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizedUSDActual#0"
      ]
    },
    "6655": {
      "op": "frame_dig 4",
      "defined_out": [
        "collateralUSD#0",
        "remainingCollateralUSD#0",
        "repayUsedUSD#0",
        "seizedUSDActual#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizedUSDActual#0",
        "collateralUSD#0"
      ]
    },
    "6657": {
      "op": "<",
      "defined_out": [
        "collateralUSD#0",
        "remainingCollateralUSD#0",
        "repayUsedUSD#0",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%30#0"
      ]
    },
    "6658": {
      "op": "bz liquidatePartialASA_after_if_else@23",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6661": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0"
      ]
    },
    "6663": {
      "op": "frame_dig 24",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "seizedUSDActual#0"
      ]
    },
    "6665": {
      "op": "-",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingCollateralUSD#0"
      ]
    },
    "6666": {
      "op": "frame_bury 16",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6668": {
      "block": "liquidatePartialASA_after_if_else@23",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 16",
      "defined_out": [
        "remainingCollateralUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingCollateralUSD#0"
      ]
    },
    "6670": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "remainingCollateralUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingCollateralUSD#0",
        "10000"
      ]
    },
    "6672": {
      "op": "mulw",
      "defined_out": [
        "hLeft#0",
        "lLeft#0",
        "remainingCollateralUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hLeft#0",
        "lLeft#0"
      ]
    },
    "6673": {
      "op": "frame_bury 10",
      "defined_out": [
        "hLeft#0",
        "lLeft#0",
        "remainingCollateralUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hLeft#0"
      ]
    },
    "6675": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hLeft#0",
        "hLeft#0"
      ]
    },
    "6676": {
      "op": "frame_bury 6",
      "defined_out": [
        "hLeft#0",
        "lLeft#0",
        "remainingCollateralUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hLeft#0"
      ]
    },
    "6678": {
      "op": "frame_dig 17",
      "defined_out": [
        "hLeft#0",
        "lLeft#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hLeft#0",
        "remainingDebtUSD#0"
      ]
    },
    "6680": {
      "op": "frame_dig 25",
      "defined_out": [
        "hLeft#0",
        "lLeft#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hLeft#0",
        "remainingDebtUSD#0",
        "tmp%22#0"
      ]
    },
    "6682": {
      "op": "mulw",
      "defined_out": [
        "hLeft#0",
        "hRight#0",
        "lLeft#0",
        "lRight#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hLeft#0",
        "hRight#0",
        "lRight#0"
      ]
    },
    "6683": {
      "op": "frame_bury 11",
      "defined_out": [
        "hLeft#0",
        "hRight#0",
        "lLeft#0",
        "lRight#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hLeft#0",
        "hRight#0"
      ]
    },
    "6685": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hLeft#0",
        "hRight#0",
        "hRight#0"
      ]
    },
    "6686": {
      "op": "frame_bury 7",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hLeft#0",
        "hRight#0"
      ]
    },
    "6688": {
      "op": ">",
      "defined_out": [
        "hLeft#0",
        "hRight#0",
        "lLeft#0",
        "lRight#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "tmp%22#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%32#0"
      ]
    },
    "6689": {
      "op": "bnz liquidatePartialASA_bool_true@26",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6692": {
      "op": "frame_dig 6",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hLeft#0"
      ]
    },
    "6694": {
      "op": "frame_dig 7",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hLeft#0",
        "hRight#0"
      ]
    },
    "6696": {
      "op": "==",
      "defined_out": [
        "hLeft#0",
        "hRight#0",
        "lLeft#0",
        "lRight#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "tmp%22#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%33#0"
      ]
    },
    "6697": {
      "op": "bz liquidatePartialASA_bool_false@27",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6700": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "lLeft#0"
      ]
    },
    "6702": {
      "op": "frame_dig 11",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "lLeft#0",
        "lRight#0"
      ]
    },
    "6704": {
      "op": ">=",
      "defined_out": [
        "hLeft#0",
        "hRight#0",
        "lLeft#0",
        "lRight#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "tmp%22#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%34#0"
      ]
    },
    "6705": {
      "op": "bz liquidatePartialASA_bool_false@27",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6708": {
      "block": "liquidatePartialASA_bool_true@26",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "supports#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "supports#0"
      ]
    },
    "6709": {
      "block": "liquidatePartialASA_bool_merge@28",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "supports#0"
      ],
      "error": "FULL_REPAY_REQUIRED",
      "op": "assert // FULL_REPAY_REQUIRED",
      "defined_out": [],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6710": {
      "block": "liquidatePartialASA_after_if_else@30",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 14",
      "defined_out": [
        "proposedRepayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "proposedRepayUsed#0"
      ]
    },
    "6712": {
      "op": "frame_dig -2",
      "defined_out": [
        "proposedRepayUsed#0",
        "repayBaseAmount#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6714": {
      "op": "frame_dig 9",
      "defined_out": [
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "repayBaseAmount#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "repayBaseAmount#0 (copy)",
        "isFullRepayRequest#0"
      ]
    },
    "6716": {
      "op": "dup",
      "defined_out": [
        "isFullRepayRequest#0",
        "isFullRepayRequest#0 (copy)",
        "proposedRepayUsed#0",
        "repayBaseAmount#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "proposedRepayUsed#0",
        "repayBaseAmount#0 (copy)",
        "isFullRepayRequest#0 (copy)",
        "isFullRepayRequest#0 (copy)"
      ]
    },
    "6717": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "repayBaseAmount#0 (copy)",
        "isFullRepayRequest#0 (copy)"
      ]
    },
    "6719": {
      "op": "select",
      "defined_out": [
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0",
        "repayUsed#0"
      ]
    },
    "6720": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0",
        "repayUsed#0",
        "repayUsed#0"
      ]
    },
    "6721": {
      "op": "frame_bury 21",
      "defined_out": [
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0",
        "repayUsed#0"
      ]
    },
    "6723": {
      "error": "ZERO_REPAY_USED",
      "op": "assert // ZERO_REPAY_USED",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "isFullRepayRequest#0"
      ]
    },
    "6724": {
      "op": "bz liquidatePartialASA_ternary_false@32",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6727": {
      "op": "intc_0 // 0",
      "defined_out": [
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6728": {
      "op": "frame_bury 15",
      "defined_out": [
        "isFullRepayRequest#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6730": {
      "block": "liquidatePartialASA_ternary_merge@33",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "itxn_begin"
    },
    "6731": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6733": {
      "op": "frame_dig 27",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "6735": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "32"
      ]
    },
    "6737": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6738": {
      "op": "dup",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6739": {
      "op": "frame_bury 8",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6741": {
      "op": "frame_dig 23",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "seizeLST#1"
      ]
    },
    "6743": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1",
        "seizeLST#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "seizeLST#1 (copy)",
        "seizeLST#1 (copy)"
      ]
    },
    "6744": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "seizeLST#1 (copy)"
      ]
    },
    "6746": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6748": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6750": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6752": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "4"
      ]
    },
    "6753": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6755": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "1000"
      ]
    },
    "6756": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6758": {
      "op": "itxn_submit"
    },
    "6759": {
      "op": "frame_dig 29",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "collLSTBal#0"
      ]
    },
    "6761": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "collLSTBal#0",
        "seizeLST#1 (copy)"
      ]
    },
    "6763": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingLST#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "remainingLST#0"
      ]
    },
    "6764": {
      "op": "frame_bury 18",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingLST#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6766": {
      "op": "frame_dig 31",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "rec#0",
        "remainingLST#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "liveDebt#0"
      ]
    },
    "6768": {
      "op": "frame_dig 21",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "liveDebt#0",
        "repayUsed#0"
      ]
    },
    "6770": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#0",
        "repayUsed#0 (copy)",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "liveDebt#0",
        "repayUsed#0 (copy)",
        "repayUsed#0 (copy)"
      ]
    },
    "6771": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "seizeLST#1",
        "liveDebt#0",
        "repayUsed#0 (copy)"
      ]
    },
    "6773": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "seizeLST#1",
        "newDebtBase#0"
      ]
    },
    "6774": {
      "op": "frame_bury 13",
      "defined_out": [
        "collLSTBal#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "seizeLST#1"
      ]
    },
    "6776": {
      "op": "frame_dig 28",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "seizeLST#1",
        "collTok#0"
      ]
    },
    "6778": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "collTok#0",
        "seizeLST#1"
      ]
    },
    "6779": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0"
      ]
    },
    "6782": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "0"
      ]
    },
    "6783": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "6785": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "newDebtBase#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "6786": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "maybe_value%7#0"
      ]
    },
    "6787": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "maybe_value%7#0",
        "repayUsed#0 (copy)"
      ]
    },
    "6789": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "new_state_value%0#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "new_state_value%0#0"
      ]
    },
    "6790": {
      "op": "bytec 4 // \"total_borrows\"",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "6792": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "6793": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#0"
      ]
    },
    "6794": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6797": {
      "op": "frame_dig 15",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6799": {
      "op": "bz liquidatePartialASA_after_if_else@37",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6802": {
      "op": "itxn_begin"
    },
    "6803": {
      "op": "txn Sender",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6805": {
      "op": "frame_dig 15",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "refundAmount#0"
      ]
    },
    "6807": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "refundAmount#0",
        "refundAmount#0 (copy)",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "refundAmount#0 (copy)",
        "refundAmount#0 (copy)"
      ]
    },
    "6808": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "refundAmount#0 (copy)"
      ]
    },
    "6810": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6812": {
      "op": "frame_dig 1",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "baseAssetId#0"
      ]
    },
    "6814": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6816": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6818": {
      "op": "intc_3 // 4",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "4"
      ]
    },
    "6819": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6821": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "1000"
      ]
    },
    "6822": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6824": {
      "op": "itxn_submit"
    },
    "6825": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6828": {
      "block": "liquidatePartialASA_after_if_else@37",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 13",
      "defined_out": [
        "newDebtBase#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0"
      ]
    },
    "6830": {
      "op": "bnz liquidatePartialASA_else_body@42",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6833": {
      "op": "frame_dig 18",
      "defined_out": [
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6835": {
      "op": "bz liquidatePartialASA_after_if_else@41",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6838": {
      "op": "itxn_begin"
    },
    "6839": {
      "op": "frame_dig 18",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6841": {
      "op": "dup",
      "defined_out": [
        "newDebtBase#0",
        "remainingLST#0",
        "remainingLST#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "remainingLST#0 (copy)"
      ]
    },
    "6842": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6844": {
      "op": "frame_dig 8",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6846": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6848": {
      "op": "frame_dig -4",
      "defined_out": [
        "debtor#0 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "debtor#0 (copy)"
      ]
    },
    "6850": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6852": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "4"
      ]
    },
    "6853": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6855": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "1000"
      ]
    },
    "6856": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6858": {
      "op": "itxn_submit"
    },
    "6859": {
      "op": "frame_dig 28",
      "defined_out": [
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "collTok#0"
      ]
    },
    "6861": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "remainingLST#0"
      ]
    },
    "6862": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6865": {
      "block": "liquidatePartialASA_after_if_else@41",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 26",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#0"
      ]
    },
    "6867": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "{box_del}"
      ]
    },
    "6868": {
      "op": "pop",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6869": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "6870": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "6872": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "6873": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0"
      ]
    },
    "6874": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%8#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "1"
      ]
    },
    "6875": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%1#0"
      ]
    },
    "6876": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "6878": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "6879": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6880": {
      "block": "liquidatePartialASA_after_if_else@43",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%2#0"
      ]
    },
    "6883": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "6885": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "6886": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6887": {
      "retsub": true,
      "op": "retsub"
    },
    "6888": {
      "block": "liquidatePartialASA_else_body@42",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 30",
      "defined_out": [
        "rec#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1"
      ]
    },
    "6890": {
      "op": "dup",
      "defined_out": [
        "rec#1",
        "rec#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1",
        "rec#1 (copy)"
      ]
    },
    "6891": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#1",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1",
        "tmp%40#0"
      ]
    },
    "6894": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "rec#1"
      ]
    },
    "6895": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#1",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "6898": {
      "op": "frame_dig 18",
      "defined_out": [
        "rec#1",
        "remainingLST#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "remainingLST#0"
      ]
    },
    "6900": {
      "op": "itob",
      "defined_out": [
        "rec#1",
        "remainingLST#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0"
      ]
    },
    "6901": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "rec#1",
        "remainingLST#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "6902": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "rec#1",
        "remainingLST#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6903": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "rec#1",
        "remainingLST#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "6904": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0"
      ]
    },
    "6905": {
      "op": "frame_dig 13",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "newDebtBase#0"
      ]
    },
    "6907": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "6908": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "6909": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "6911": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "6912": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "maybe_value%10#0"
      ]
    },
    "6913": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "6914": {
      "op": "frame_dig 21",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "repayUsed#0"
      ]
    },
    "6916": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "6917": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%40#0",
        "tmp%41#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "to_encode%0#0"
      ]
    },
    "6919": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "6920": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "6921": {
      "op": "pushbytes 0x04",
      "defined_out": [
        "0x04",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0",
        "0x04"
      ]
    },
    "6924": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "6925": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%4#0"
      ]
    },
    "6926": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%40#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "6927": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%41#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%40#0"
      ]
    },
    "6929": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "6931": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "6932": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "6934": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "6935": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "6936": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "6937": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%9#0"
      ]
    },
    "6939": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "6940": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "6942": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "6943": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%2#0"
      ]
    },
    "6944": {
      "op": "concat",
      "defined_out": [
        "newDebtBase#0",
        "newRec#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newRec#0"
      ]
    },
    "6945": {
      "op": "frame_dig 26",
      "defined_out": [
        "newDebtBase#0",
        "newRec#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ]
    },
    "6947": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#0",
        "newRec#0"
      ]
    },
    "6948": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6949": {
      "op": "b liquidatePartialASA_after_if_else@43"
    },
    "6952": {
      "block": "liquidatePartialASA_ternary_false@32",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "repayBaseAmount#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6954": {
      "op": "frame_dig 21",
      "defined_out": [
        "repayBaseAmount#0 (copy)",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "repayUsed#0"
      ]
    },
    "6956": {
      "op": "-",
      "defined_out": [
        "refundAmount#0",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6957": {
      "op": "frame_bury 15",
      "defined_out": [
        "refundAmount#0",
        "repayUsed#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6959": {
      "op": "b liquidatePartialASA_ternary_merge@33"
    },
    "6962": {
      "block": "liquidatePartialASA_bool_false@27",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "supports#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "supports#0"
      ]
    },
    "6963": {
      "op": "b liquidatePartialASA_bool_merge@28"
    },
    "6966": {
      "block": "liquidatePartialASA_after_if_else@50",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#3"
      ]
    },
    "6968": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "6969": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0"
      ]
    },
    "6970": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "6971": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "collateral#0 (copy)",
        "32"
      ]
    },
    "6973": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#3",
        "tmp%2#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%2#2"
      ]
    },
    "6974": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateral#0",
        "lstAppId#0 (copy)",
        "tmp%0#3",
        "tmp%2#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%2#2",
        "lstAppId#0 (copy)"
      ]
    },
    "6976": {
      "op": "==",
      "defined_out": [
        "collateral#0",
        "tmp%0#3",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%3#2"
      ]
    },
    "6977": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0"
      ]
    },
    "6978": {
      "op": "itxn_begin"
    },
    "6979": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "6981": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0"
      ]
    },
    "6983": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6985": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0"
      ]
    },
    "6987": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "appl"
      ]
    },
    "6989": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0"
      ]
    },
    "6991": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "1000"
      ]
    },
    "6992": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0"
      ]
    },
    "6994": {
      "op": "itxn_submit"
    },
    "6995": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "awst_tmp%0#0"
      ]
    },
    "6997": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6998": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "collateral#0",
        "tmp%0#3",
        "tmp%4#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "awst_tmp%0#0",
        "tmp%4#2"
      ]
    },
    "7001": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%4#2",
        "awst_tmp%0#0"
      ]
    },
    "7002": {
      "op": "extract 0 4",
      "defined_out": [
        "collateral#0",
        "tmp%0#3",
        "tmp%4#2",
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%4#2",
        "tmp%5#1"
      ]
    },
    "7005": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "collateral#0",
        "tmp%0#3",
        "tmp%4#2",
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%4#2",
        "tmp%5#1",
        "0x151f7c75"
      ]
    },
    "7006": {
      "op": "==",
      "defined_out": [
        "collateral#0",
        "tmp%0#3",
        "tmp%4#2",
        "tmp%6#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%4#2",
        "tmp%6#2"
      ]
    },
    "7007": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "tmp%4#2"
      ]
    },
    "7008": {
      "op": "btoi",
      "defined_out": [
        "circ#0",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0"
      ]
    },
    "7009": {
      "op": "itxn_begin"
    },
    "7010": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circ#0",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "7012": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0"
      ]
    },
    "7014": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "lstAppId#0 (copy)"
      ]
    },
    "7016": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0"
      ]
    },
    "7018": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "appl"
      ]
    },
    "7020": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0"
      ]
    },
    "7022": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "1000"
      ]
    },
    "7023": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0"
      ]
    },
    "7025": {
      "op": "itxn_submit"
    },
    "7026": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circ#0",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "awst_tmp%1#0"
      ]
    },
    "7028": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circ#0",
        "collateral#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "7029": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circ#0",
        "collateral#0",
        "tmp%0#3",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "awst_tmp%1#0",
        "tmp%8#1"
      ]
    },
    "7032": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "tmp%8#1",
        "awst_tmp%1#0"
      ]
    },
    "7033": {
      "op": "extract 0 4",
      "defined_out": [
        "circ#0",
        "collateral#0",
        "tmp%0#3",
        "tmp%8#1",
        "tmp%9#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "tmp%8#1",
        "tmp%9#1"
      ]
    },
    "7036": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "tmp%8#1",
        "tmp%9#1",
        "0x151f7c75"
      ]
    },
    "7037": {
      "op": "==",
      "defined_out": [
        "circ#0",
        "collateral#0",
        "tmp%0#3",
        "tmp%10#2",
        "tmp%8#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "tmp%8#1",
        "tmp%10#2"
      ]
    },
    "7038": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "tmp%8#1"
      ]
    },
    "7039": {
      "op": "btoi",
      "defined_out": [
        "circ#0",
        "collateral#0",
        "tmp%0#3",
        "total#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "total#0"
      ]
    },
    "7040": {
      "op": "frame_dig 23",
      "defined_out": [
        "circ#0",
        "collateral#0",
        "seizeLST#1",
        "tmp%0#3",
        "total#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "total#0",
        "seizeLST#1"
      ]
    },
    "7042": {
      "op": "mulw",
      "defined_out": [
        "circ#0",
        "collateral#0",
        "hUnderlying#0",
        "lUnderlying#0",
        "seizeLST#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "circ#0",
        "hUnderlying#0",
        "lUnderlying#0"
      ]
    },
    "7043": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "hUnderlying#0",
        "lUnderlying#0",
        "circ#0"
      ]
    },
    "7045": {
      "op": "divw",
      "defined_out": [
        "collateral#0",
        "seizeLST#1",
        "seizedUnderlying#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateral#0",
        "seizedUnderlying#0"
      ]
    },
    "7046": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizedUnderlying#0",
        "collateral#0"
      ]
    },
    "7047": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "seizeLST#1",
        "seizedUnderlying#0",
        "tmp%0#3",
        "tmp%12#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizedUnderlying#0",
        "tmp%12#1"
      ]
    },
    "7050": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "seizeLST#1",
        "seizedUnderlying#0",
        "tmp%0#3",
        "underlyingPrice#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizedUnderlying#0",
        "underlyingPrice#0"
      ]
    },
    "7053": {
      "op": "mulw",
      "defined_out": [
        "hSeizeUSD#0",
        "lSeizeUSD#0",
        "seizeLST#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSeizeUSD#0",
        "lSeizeUSD#0"
      ]
    },
    "7054": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "hSeizeUSD#0",
        "lSeizeUSD#0",
        "seizeLST#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSeizeUSD#0",
        "lSeizeUSD#0",
        "1000000"
      ]
    },
    "7056": {
      "op": "divw",
      "defined_out": [
        "seizeLST#1",
        "seizeUSDActual#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSDActual#0"
      ]
    },
    "7057": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "seizeLST#1",
        "seizeUSDActual#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSDActual#0",
        "10000"
      ]
    },
    "7059": {
      "op": "mulw",
      "defined_out": [
        "hRepayUSD#0",
        "lRepayUSD#0",
        "seizeLST#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRepayUSD#0",
        "lRepayUSD#0"
      ]
    },
    "7060": {
      "op": "frame_dig 25",
      "defined_out": [
        "hRepayUSD#0",
        "lRepayUSD#0",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRepayUSD#0",
        "lRepayUSD#0",
        "tmp%22#0"
      ]
    },
    "7062": {
      "op": "divw",
      "defined_out": [
        "repayUSD#0",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0"
      ]
    },
    "7063": {
      "op": "intc 5 // 1000000",
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "1000000"
      ]
    },
    "7065": {
      "op": "mulw",
      "defined_out": [
        "hRepayBase#0",
        "lRepayBase#0",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRepayBase#0",
        "lRepayBase#0"
      ]
    },
    "7066": {
      "op": "frame_dig 2",
      "defined_out": [
        "basePrice#0",
        "hRepayBase#0",
        "lRepayBase#0",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRepayBase#0",
        "lRepayBase#0",
        "basePrice#0"
      ]
    },
    "7068": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "repaySupported#0",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repaySupported#0"
      ]
    },
    "7069": {
      "op": "frame_bury 20",
      "defined_out": [
        "basePrice#0",
        "repaySupported#0",
        "seizeLST#1",
        "tmp%0#3",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7071": {
      "op": "b liquidatePartialASA_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.repayBaseFromSeizedLST@51"
    },
    "7074": {
      "block": "liquidatePartialASA_bool_false@9",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ]
    },
    "7075": {
      "op": "b liquidatePartialASA_bool_merge@10"
    },
    "7078": {
      "block": "liquidatePartialASA_bool_false@3",
      "stack_in": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#3",
        "baseAssetId#0",
        "basePrice#0",
        "bonusBps#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hLeft#0",
        "hRight#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "isFullRepayRequest#0",
        "lLeft#0",
        "lRight#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "proposedRepayUsed#0",
        "refundAmount#0",
        "remainingCollateralUSD#0",
        "remainingDebtUSD#0",
        "remainingLST#0",
        "repayCandidate#2",
        "repaySupported#0",
        "repayUsed#0",
        "repayUsedUSD#0",
        "seizeLST#1",
        "seizedUSDActual#0",
        "tmp%22#0",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ]
    },
    "7079": {
      "op": "b liquidatePartialASA_bool_merge@4"
    },
    "7082": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanStatus",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "getLoanStatus",
      "stack_in": [],
      "op": "proto 1 7"
    },
    "7085": {
      "op": "bytec 7 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "7087": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "7089": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7090": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "7091": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7092": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7094": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7095": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "7096": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0"
      ]
    },
    "7097": {
      "op": "dup",
      "defined_out": [
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "record#0",
        "record#0 (copy)"
      ]
    },
    "7098": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralTokenId#0"
      ]
    },
    "7101": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "7103": {
      "op": "swap",
      "stack_out": [
        "record#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "7104": {
      "op": "concat",
      "stack_out": [
        "record#0",
        "tmp%0#0"
      ]
    },
    "7105": {
      "op": "box_get",
      "defined_out": [
        "collateralRecord#0",
        "maybe_exists%0#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralRecord#0",
        "maybe_exists%0#0"
      ]
    },
    "7106": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0",
        "collateralRecord#0"
      ]
    },
    "7107": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "collateralRecord#0",
        "record#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "record#0",
        "collateralRecord#0",
        "{accrueMarket}"
      ]
    },
    "7110": {
      "op": "pop",
      "stack_out": [
        "record#0",
        "collateralRecord#0"
      ]
    },
    "7111": {
      "op": "swap",
      "stack_out": [
        "collateralRecord#0",
        "record#0"
      ]
    },
    "7112": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ]
    },
    "7115": {
      "op": "dup",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "7116": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "7118": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "7119": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "7120": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "7122": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "maybe_exists%2#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "liqBps#0",
        "maybe_exists%2#0"
      ]
    },
    "7123": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "liqBps#0"
      ]
    },
    "7124": {
      "op": "uncover 2",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "record#0"
      ]
    },
    "7126": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0"
      ]
    },
    "7129": {
      "op": "uncover 4",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralRecord#0"
      ]
    },
    "7131": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralRecord#0",
        "32"
      ]
    },
    "7133": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "7134": {
      "op": "dig 3"
    },
    "7136": {
      "op": "swap",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "debt#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralAmount#0 (copy)",
        "tmp%6#0"
      ]
    },
    "7137": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0"
      ]
    },
    "7140": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)"
      ]
    },
    "7141": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "10000"
      ]
    },
    "7143": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%7#0"
      ]
    },
    "7144": {
      "op": "dig 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "debt#0 (copy)",
        "liqBps#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%7#0",
        "debt#0 (copy)"
      ]
    },
    "7146": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0"
      ]
    },
    "7147": {
      "op": "dup",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)"
      ]
    },
    "7148": {
      "op": "dig 3",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "liqBps#0 (copy)"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "7150": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0"
      ]
    },
    "7151": {
      "op": "dig 1",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)"
      ]
    },
    "7153": {
      "op": "dig 4",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "7155": {
      "op": ">",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForBuyout#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "7156": {
      "op": "uncover 6",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0"
      ]
    },
    "7158": {
      "op": "uncover 4",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0"
      ]
    },
    "7160": {
      "op": "uncover 6",
      "stack_out": [
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0"
      ]
    },
    "7162": {
      "op": "uncover 5",
      "stack_out": [
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0"
      ]
    },
    "7164": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0"
      ]
    },
    "7166": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0"
      ]
    },
    "7168": {
      "op": "uncover 6",
      "stack_out": [
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "7170": {
      "retsub": true,
      "op": "retsub"
    },
    "7171": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "params": {
        "collateralTokenId#0": "bytes",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64"
      },
      "block": "calculateCollateralValueUSD",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "7174": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "7176": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "7178": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7179": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "7180": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7181": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "7183": {
      "error": "unknown collateral",
      "op": "assert // unknown collateral",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7184": {
      "op": "dup",
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "7185": {
      "op": "box_get",
      "defined_out": [
        "collateralInfo#0",
        "maybe_exists%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0",
        "maybe_exists%0#0"
      ]
    },
    "7186": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0"
      ]
    },
    "7187": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralInfo#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0",
        "32"
      ]
    },
    "7189": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "7190": {
      "op": "frame_dig -1",
      "defined_out": [
        "lstApp#0 (copy)",
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%2#0",
        "lstApp#0 (copy)"
      ]
    },
    "7192": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%3#0"
      ]
    },
    "7193": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7194": {
      "op": "itxn_begin"
    },
    "7195": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "7197": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7199": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#1",
        "lstApp#0 (copy)"
      ]
    },
    "7201": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7203": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "appl"
      ]
    },
    "7205": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7207": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "1000"
      ]
    },
    "7208": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7210": {
      "op": "itxn_submit"
    },
    "7211": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0"
      ]
    },
    "7213": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "7214": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "7217": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "7218": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "7221": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "7222": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "7223": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0"
      ]
    },
    "7224": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7225": {
      "op": "itxn_begin"
    },
    "7226": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "7228": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7230": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "lstApp#0 (copy)"
      ]
    },
    "7232": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7234": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "7236": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7238": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "7239": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7241": {
      "op": "itxn_submit"
    },
    "7242": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "7244": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "7245": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "7248": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "awst_tmp%1#0"
      ]
    },
    "7249": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "7252": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "7253": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "7254": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0"
      ]
    },
    "7255": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "7256": {
      "op": "frame_dig -2",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateralAmount#0 (copy)",
        "tmp%0#1",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "7258": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0"
      ]
    },
    "7259": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "hC#0",
        "lC#0",
        "circulatingExternalLST#0"
      ]
    },
    "7261": {
      "op": "divw",
      "defined_out": [
        "tmp%0#1",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "underlyingCollateral#0"
      ]
    },
    "7262": {
      "op": "swap",
      "stack_out": [
        "underlyingCollateral#0",
        "tmp%0#1"
      ]
    },
    "7263": {
      "op": "box_get",
      "defined_out": [
        "lstCollateral#0",
        "maybe_exists%0#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "lstCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "7264": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "underlyingCollateral#0",
        "lstCollateral#0"
      ]
    },
    "7265": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "baseTokenId#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "baseTokenId#0"
      ]
    },
    "7268": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenPrice#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "baseTokenPrice#0"
      ]
    },
    "7271": {
      "op": "mulw",
      "defined_out": [
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "hU#0",
        "lU#0"
      ]
    },
    "7272": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "hU#0",
        "lU#0",
        "1000000"
      ]
    },
    "7274": {
      "op": "divw",
      "defined_out": [
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralUSD#0"
      ]
    },
    "7275": {
      "retsub": true,
      "op": "retsub"
    },
    "7276": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.pickupASARewards",
      "params": {},
      "block": "pickupASARewards",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "7279": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "rawReward#0"
      ]
    },
    "7281": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0"
      ]
    },
    "7283": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "0"
      ]
    },
    "7284": {
      "op": "bytec_2 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "7285": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7286": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "7287": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%1#0"
      ]
    },
    "7288": {
      "error": "Only admin can pickup rewards",
      "op": "assert // Only admin can pickup rewards",
      "stack_out": [
        "rawReward#0"
      ]
    },
    "7289": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "0"
      ]
    },
    "7290": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "rawReward#0",
        "0",
        "\"contract_state\""
      ]
    },
    "7292": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "rawReward#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "7293": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "maybe_value%1#0"
      ]
    },
    "7294": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%2#0"
      ]
    },
    "7295": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%2#0",
        "1"
      ]
    },
    "7296": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%3#0"
      ]
    },
    "7297": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "rawReward#0"
      ]
    },
    "7298": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "0"
      ]
    },
    "7299": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "rawReward#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7300": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "rawReward#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "7301": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "maybe_value%2#0"
      ]
    },
    "7302": {
      "op": "btoi",
      "defined_out": [
        "baseAsset#0"
      ],
      "stack_out": [
        "rawReward#0",
        "baseAsset#0"
      ]
    },
    "7303": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "rawReward#0",
        "baseAsset#0",
        "tmp%4#0"
      ]
    },
    "7305": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "tmp%4#0",
        "baseAsset#0"
      ]
    },
    "7306": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "assetBalance#0",
        "check%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "check%0#0"
      ]
    },
    "7308": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "check%0#0",
        "assetBalance#0"
      ]
    },
    "7309": {
      "op": "dup",
      "stack_out": [
        "rawReward#0",
        "check%0#0",
        "assetBalance#0",
        "assetBalance#0 (copy)"
      ]
    },
    "7310": {
      "op": "uncover 2",
      "defined_out": [
        "assetBalance#0",
        "check%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "assetBalance#0",
        "check%0#0"
      ]
    },
    "7312": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "assetBalance#0"
      ]
    },
    "7313": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "assetBalance#0",
        "0"
      ]
    },
    "7314": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0",
        "assetBalance#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "assetBalance#0",
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7316": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetBalance#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "assetBalance#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "7317": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "assetBalance#0",
        "maybe_value%3#0"
      ]
    },
    "7318": {
      "op": "<=",
      "defined_out": [
        "assetBalance#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "tmp%5#0"
      ]
    },
    "7319": {
      "op": "bz pickupASARewards_after_if_else@2",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0"
      ]
    },
    "7322": {
      "retsub": true,
      "op": "retsub"
    },
    "7323": {
      "block": "pickupASARewards_after_if_else@2",
      "stack_in": [
        "rawReward#0",
        "assetBalance#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "0"
      ]
    },
    "7324": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7326": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "7327": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "maybe_value%4#0"
      ]
    },
    "7328": {
      "op": "frame_dig 1",
      "defined_out": [
        "assetBalance#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "maybe_value%4#0",
        "assetBalance#0"
      ]
    },
    "7330": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "assetBalance#0",
        "maybe_value%4#0"
      ]
    },
    "7331": {
      "op": "-",
      "defined_out": [
        "assetBalance#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0"
      ]
    },
    "7332": {
      "op": "dup",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "rawReward#0"
      ]
    },
    "7333": {
      "op": "frame_bury 0",
      "defined_out": [
        "assetBalance#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0"
      ]
    },
    "7335": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "assetBalance#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "10000"
      ]
    },
    "7337": {
      "op": "<=",
      "defined_out": [
        "assetBalance#0",
        "rawReward#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "tmp%6#0"
      ]
    },
    "7338": {
      "op": "bz pickupASARewards_after_if_else@4",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0"
      ]
    },
    "7341": {
      "retsub": true,
      "op": "retsub"
    },
    "7342": {
      "block": "pickupASARewards_after_if_else@4",
      "stack_in": [
        "rawReward#0",
        "assetBalance#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0"
      ]
    },
    "7344": {
      "op": "dup",
      "defined_out": [
        "rawReward#0",
        "rawReward#0 (copy)"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "rawReward#0 (copy)"
      ]
    },
    "7345": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0"
      ]
    },
    "7348": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "0"
      ]
    },
    "7349": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\"",
        "0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "0",
        "\"commission_percentage\""
      ]
    },
    "7351": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "7352": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "maybe_value%5#0"
      ]
    },
    "7353": {
      "op": "dig 1",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "maybe_value%5#0",
        "rawReward#0 (copy)"
      ]
    },
    "7355": {
      "op": "mulw",
      "defined_out": [
        "hi#0",
        "lo#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "hi#0",
        "lo#0"
      ]
    },
    "7356": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "hi#0",
        "lo#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "hi#0",
        "lo#0",
        "100"
      ]
    },
    "7358": {
      "op": "divw",
      "defined_out": [
        "commission#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0"
      ]
    },
    "7359": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "0"
      ]
    },
    "7360": {
      "op": "bytec 19 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "0",
        "commission#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "0",
        "\"current_accumulated_commission\""
      ]
    },
    "7362": {
      "op": "app_global_get_ex",
      "defined_out": [
        "commission#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "7363": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%6#0"
      ]
    },
    "7364": {
      "op": "dig 1",
      "defined_out": [
        "commission#0",
        "commission#0 (copy)",
        "maybe_value%6#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%6#0",
        "commission#0 (copy)"
      ]
    },
    "7366": {
      "op": "+",
      "defined_out": [
        "commission#0",
        "new_state_value%0#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%0#0"
      ]
    },
    "7367": {
      "op": "bytec 19 // \"current_accumulated_commission\"",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%0#0",
        "\"current_accumulated_commission\""
      ]
    },
    "7369": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "\"current_accumulated_commission\"",
        "new_state_value%0#0"
      ]
    },
    "7370": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0"
      ]
    },
    "7371": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "0"
      ]
    },
    "7372": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\"",
        "0",
        "commission#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "0",
        "\"total_commission_earned\""
      ]
    },
    "7374": {
      "op": "app_global_get_ex",
      "defined_out": [
        "commission#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "7375": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%7#0"
      ]
    },
    "7376": {
      "op": "dig 1",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%7#0",
        "commission#0 (copy)"
      ]
    },
    "7378": {
      "op": "+",
      "defined_out": [
        "commission#0",
        "new_state_value%1#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%1#0"
      ]
    },
    "7379": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%1#0",
        "\"total_commission_earned\""
      ]
    },
    "7381": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0",
        "\"total_commission_earned\"",
        "new_state_value%1#0"
      ]
    },
    "7382": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "rawReward#0",
        "commission#0"
      ]
    },
    "7383": {
      "op": "-",
      "defined_out": [
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0"
      ]
    },
    "7384": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "0"
      ]
    },
    "7385": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\"",
        "0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "0",
        "\"total_additional_rewards\""
      ]
    },
    "7387": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "7388": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "maybe_value%8#0"
      ]
    },
    "7389": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%8#0",
        "netReward#0",
        "netReward#0 (copy)",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "maybe_value%8#0",
        "netReward#0 (copy)"
      ]
    },
    "7391": {
      "op": "+",
      "defined_out": [
        "netReward#0",
        "new_state_value%2#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "new_state_value%2#0"
      ]
    },
    "7392": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "new_state_value%2#0",
        "\"total_additional_rewards\""
      ]
    },
    "7394": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "\"total_additional_rewards\"",
        "new_state_value%2#0"
      ]
    },
    "7395": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0"
      ]
    },
    "7396": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "0"
      ]
    },
    "7397": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "7398": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "7399": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "netReward#0",
        "maybe_value%9#0"
      ]
    },
    "7400": {
      "op": "+",
      "defined_out": [
        "new_state_value%3#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "new_state_value%3#0"
      ]
    },
    "7401": {
      "op": "bytec_3 // \"total_deposits\"",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "new_state_value%3#0",
        "\"total_deposits\""
      ]
    },
    "7402": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0",
        "\"total_deposits\"",
        "new_state_value%3#0"
      ]
    },
    "7403": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "assetBalance#0"
      ]
    },
    "7404": {
      "retsub": true,
      "op": "retsub"
    },
    "7405": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.migrateCollateralTokenId",
      "params": {
        "collateralTokenId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "migrateCollateralTokenId",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "7408": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7410": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "7411": {
      "op": "bytec 14 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7413": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7414": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "7415": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "7416": {
      "error": "Only migration admin can migrate collateral",
      "op": "assert // Only migration admin can migrate collateral",
      "stack_out": []
    },
    "7417": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#0 (copy)"
      ]
    },
    "7419": {
      "op": "itob",
      "defined_out": [
        "acKey#0"
      ],
      "stack_out": [
        "acKey#0"
      ]
    },
    "7420": {
      "op": "bytec 6 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "acKey#0"
      ],
      "stack_out": [
        "acKey#0",
        "\"accepted_collaterals\""
      ]
    },
    "7422": {
      "op": "swap",
      "stack_out": [
        "\"accepted_collaterals\"",
        "acKey#0"
      ]
    },
    "7423": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "7424": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "7425": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "7427": {
      "error": "collateral not found",
      "op": "assert // collateral not found",
      "stack_out": []
    },
    "7428": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "7430": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%3#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "7432": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "check%0#0"
      ]
    },
    "7434": {
      "op": "swap",
      "stack_out": [
        "check%0#0",
        "collateralBalance#0"
      ]
    },
    "7435": {
      "op": "dup",
      "stack_out": [
        "check%0#0",
        "collateralBalance#0",
        "collateralBalance#0 (copy)"
      ]
    },
    "7436": {
      "op": "uncover 2",
      "defined_out": [
        "check%0#0",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "collateralBalance#0",
        "check%0#0"
      ]
    },
    "7438": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "collateralBalance#0",
        "collateralBalance#0"
      ]
    },
    "7439": {
      "op": "bz migrateCollateralTokenId_after_if_else@3",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "7442": {
      "op": "itxn_begin"
    },
    "7443": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralBalance#0",
        "0"
      ]
    },
    "7444": {
      "op": "bytec 14 // \"migration_admin\"",
      "stack_out": [
        "collateralBalance#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7446": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralBalance#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "7447": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%2#0"
      ]
    },
    "7448": {
      "op": "frame_dig 0",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%2#0",
        "collateralBalance#0"
      ]
    },
    "7450": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%2#0"
      ]
    },
    "7452": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%2#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "7454": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%2#0"
      ]
    },
    "7456": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "7458": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "4"
      ]
    },
    "7459": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "7461": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "1000"
      ]
    },
    "7462": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "7464": {
      "op": "itxn_submit"
    },
    "7465": {
      "block": "migrateCollateralTokenId_after_if_else@3",
      "stack_in": [
        "collateralBalance#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "7466": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.migrateContract",
      "params": {
        "feeTxn#0": "uint64"
      },
      "block": "migrateContract",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "7469": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7471": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "7472": {
      "op": "bytec 14 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7474": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7475": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "7476": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "7477": {
      "error": "Only migration admin can migrate",
      "op": "assert // Only migration admin can migrate",
      "stack_out": []
    },
    "7478": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "7480": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setContractState",
      "op": "callsub setContractState",
      "stack_out": []
    },
    "7483": {
      "op": "frame_dig -1",
      "defined_out": [
        "feeTxn#0 (copy)"
      ],
      "stack_out": [
        "feeTxn#0 (copy)"
      ]
    },
    "7485": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "7487": {
      "op": "pushint 500000 // 500000",
      "defined_out": [
        "500000",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "500000"
      ]
    },
    "7491": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "7492": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "7493": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "7494": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "7496": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "7497": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "7498": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "7499": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "lstAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%4#0"
      ]
    },
    "7501": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "lstAsset#0"
      ]
    },
    "7502": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "lstBalance#0"
      ],
      "stack_out": [
        "lstBalance#0",
        "check%0#0"
      ]
    },
    "7504": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "lstBalance#0"
      ]
    },
    "7505": {
      "op": "itxn_begin"
    },
    "7506": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstBalance#0",
        "0"
      ]
    },
    "7507": {
      "op": "bytec 14 // \"migration_admin\"",
      "stack_out": [
        "lstBalance#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7509": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstBalance#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstBalance#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "7510": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstBalance#0",
        "maybe_value%2#0"
      ]
    },
    "7511": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstBalance#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "7512": {
      "op": "bytec 10 // \"lst_token_id\"",
      "stack_out": [
        "lstBalance#0",
        "maybe_value%2#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "7514": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstBalance#0",
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstBalance#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "7515": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstBalance#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "7516": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstBalance#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstBalance#0",
        "maybe_value%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "7517": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstBalance#0"
      ]
    },
    "7519": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "7521": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "7523": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "7525": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "7526": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "7528": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "7529": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "7531": {
      "op": "itxn_submit"
    },
    "7532": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "7533": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "7534": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "7535": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "7536": {
      "op": "btoi",
      "defined_out": [
        "baseAsset#0"
      ],
      "stack_out": [
        "baseAsset#0"
      ]
    },
    "7537": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseAsset#0",
        "tmp%5#0"
      ]
    },
    "7539": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "baseAsset#0"
      ]
    },
    "7540": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "assetBalance#0",
        "check%1#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "check%1#0"
      ]
    },
    "7542": {
      "op": "swap",
      "stack_out": [
        "check%1#0",
        "assetBalance#0"
      ]
    },
    "7543": {
      "op": "dup",
      "stack_out": [
        "check%1#0",
        "assetBalance#0",
        "assetBalance#0 (copy)"
      ]
    },
    "7544": {
      "op": "uncover 2",
      "defined_out": [
        "assetBalance#0",
        "check%1#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "assetBalance#0",
        "check%1#0"
      ]
    },
    "7546": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "assetBalance#0",
        "assetBalance#0"
      ]
    },
    "7547": {
      "op": "bz migrateContract_after_if_else@4",
      "stack_out": [
        "assetBalance#0"
      ]
    },
    "7550": {
      "op": "itxn_begin"
    },
    "7551": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "0"
      ]
    },
    "7552": {
      "op": "bytec 14 // \"migration_admin\"",
      "stack_out": [
        "assetBalance#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7554": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetBalance#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "7555": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0"
      ]
    },
    "7556": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "7557": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7558": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetBalance#0",
        "maybe_exists%6#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "7559": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "7560": {
      "op": "btoi",
      "defined_out": [
        "assetBalance#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "7561": {
      "op": "frame_dig 0",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "assetBalance#0"
      ]
    },
    "7563": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "7565": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%5#0"
      ]
    },
    "7567": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "assetBalance#0"
      ]
    },
    "7569": {
      "op": "intc_3 // 4",
      "stack_out": [
        "assetBalance#0",
        "4"
      ]
    },
    "7570": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "assetBalance#0"
      ]
    },
    "7572": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "assetBalance#0",
        "1000"
      ]
    },
    "7573": {
      "op": "itxn_field Fee",
      "stack_out": [
        "assetBalance#0"
      ]
    },
    "7575": {
      "op": "itxn_submit"
    },
    "7576": {
      "block": "migrateContract_after_if_else@4",
      "stack_in": [
        "assetBalance#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "assetBalance#0",
        "0"
      ]
    },
    "7577": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "assetBalance#0",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "7579": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "7580": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "maybe_value%7#0"
      ]
    },
    "7581": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0"
      ]
    },
    "7582": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "7583": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7585": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "7586": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0"
      ]
    },
    "7587": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "7588": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "7589": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "7591": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "7592": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%9#0"
      ]
    },
    "7593": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "7594": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "7595": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "7596": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "7597": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%10#0"
      ]
    },
    "7598": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "7599": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "7600": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "7602": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "7603": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%11#0"
      ]
    },
    "7604": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "7605": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0"
      ]
    },
    "7606": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0",
        "\"total_additional_rewards\""
      ]
    },
    "7608": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%12#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "7609": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "maybe_value%12#0"
      ]
    },
    "7610": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "7611": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0"
      ]
    },
    "7612": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0",
        "\"total_commission_earned\""
      ]
    },
    "7614": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%13#0",
        "maybe_value%13#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "7615": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%13#0"
      ]
    },
    "7616": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "7617": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0"
      ]
    },
    "7618": {
      "op": "bytec 19 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0",
        "\"current_accumulated_commission\""
      ]
    },
    "7620": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%14#0",
        "maybe_value%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%14#0",
        "maybe_exists%14#0"
      ]
    },
    "7621": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%14#0"
      ]
    },
    "7622": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "7623": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0"
      ]
    },
    "7624": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "7626": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%15#0",
        "maybe_value%15#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%15#0",
        "maybe_exists%15#0"
      ]
    },
    "7627": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%15#0"
      ]
    },
    "7628": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "7629": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0"
      ]
    },
    "7630": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "7632": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%16#0",
        "maybe_value%16#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%16#0",
        "maybe_exists%16#0"
      ]
    },
    "7633": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%16#0"
      ]
    },
    "7634": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "7635": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0"
      ]
    },
    "7636": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7637": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%17#0",
        "maybe_value%17#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%17#0",
        "maybe_exists%17#0"
      ]
    },
    "7638": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%17#0"
      ]
    },
    "7639": {
      "op": "btoi",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "to_encode%0#0"
      ]
    },
    "7640": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "7641": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0"
      ]
    },
    "7642": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "7644": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%18#0",
        "maybe_value%18#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%18#0",
        "maybe_exists%18#0"
      ]
    },
    "7645": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%18#0"
      ]
    },
    "7646": {
      "op": "btoi",
      "defined_out": [
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "to_encode%1#0"
      ]
    },
    "7647": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ]
    },
    "7648": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0"
      ]
    },
    "7649": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "7651": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%19#0",
        "maybe_value%19#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%19#0",
        "maybe_exists%19#0"
      ]
    },
    "7652": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%19#0"
      ]
    },
    "7653": {
      "op": "btoi",
      "defined_out": [
        "to_encode%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "to_encode%2#0"
      ]
    },
    "7654": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ]
    },
    "7655": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0"
      ]
    },
    "7656": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0",
        "\"commission_percentage\""
      ]
    },
    "7658": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%20#0",
        "maybe_value%20#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%20#0",
        "maybe_exists%20#0"
      ]
    },
    "7659": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%20#0"
      ]
    },
    "7660": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0"
      ]
    },
    "7661": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "0"
      ]
    },
    "7662": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "0",
        "\"liq_bonus_bps\""
      ]
    },
    "7664": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%21#0",
        "maybe_value%21#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "maybe_value%21#0",
        "maybe_exists%21#0"
      ]
    },
    "7665": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "maybe_value%21#0"
      ]
    },
    "7666": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ]
    },
    "7667": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "0"
      ]
    },
    "7668": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "7670": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%22#0",
        "maybe_value%22#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "maybe_value%22#0",
        "maybe_exists%22#0"
      ]
    },
    "7671": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "maybe_value%22#0"
      ]
    },
    "7672": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ]
    },
    "7673": {
      "op": "uncover 12",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%3#0"
      ]
    },
    "7675": {
      "op": "uncover 12",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "7677": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "7678": {
      "op": "uncover 12",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "7680": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "7681": {
      "op": "uncover 12",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "7683": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "7684": {
      "op": "uncover 7",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%9#0"
      ]
    },
    "7686": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "7687": {
      "op": "uncover 6",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%10#0"
      ]
    },
    "7689": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "7690": {
      "op": "uncover 3",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%13#0"
      ]
    },
    "7692": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%0#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "7693": {
      "op": "uncover 4",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%11#0"
      ]
    },
    "7695": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "7696": {
      "op": "uncover 4",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%8#0"
      ]
    },
    "7698": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "7699": {
      "op": "uncover 7",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%0#0"
      ]
    },
    "7701": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "7702": {
      "op": "uncover 3",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%12#0"
      ]
    },
    "7704": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "7705": {
      "op": "uncover 2",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%14#0"
      ]
    },
    "7707": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "7708": {
      "op": "uncover 2",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%7#0"
      ]
    },
    "7710": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "7711": {
      "op": "uncover 2",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%6#0"
      ]
    },
    "7713": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "7714": {
      "op": "uncover 2",
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%5#0"
      ]
    },
    "7716": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0",
        "val_as_bytes%15#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "7717": {
      "op": "swap",
      "stack_out": [
        "assetBalance#0",
        "encoded_tuple_buffer%15#0",
        "val_as_bytes%15#0"
      ]
    },
    "7718": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "7719": {
      "op": "swap"
    },
    "7720": {
      "retsub": true,
      "op": "retsub"
    },
    "7721": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.acceptMigrationASAContract",
      "params": {
        "lstTransferTxn#0": "uint64",
        "algoTxn#0": "uint64",
        "baseAssetTransferTxn#0": "uint64",
        "snapshot#0": "bytes",
        "migrationAdmin#0": "bytes"
      },
      "block": "acceptMigrationASAContract",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "7724": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7726": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "7727": {
      "op": "bytec 14 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7729": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7730": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "7731": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "7732": {
      "error": "Only migration admin can accept migration",
      "op": "assert // Only migration admin can accept migration",
      "stack_out": []
    },
    "7733": {
      "op": "frame_dig -5",
      "defined_out": [
        "lstTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "lstTransferTxn#0 (copy)"
      ]
    },
    "7735": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "7737": {
      "op": "frame_dig -1",
      "defined_out": [
        "migrationAdmin#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "migrationAdmin#0 (copy)"
      ]
    },
    "7739": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "7740": {
      "op": "bz acceptMigrationASAContract_bool_false@4",
      "stack_out": []
    },
    "7743": {
      "op": "frame_dig -5",
      "stack_out": [
        "lstTransferTxn#0 (copy)"
      ]
    },
    "7745": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "7747": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "7749": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "7750": {
      "op": "bz acceptMigrationASAContract_bool_false@4",
      "stack_out": []
    },
    "7753": {
      "op": "frame_dig -5",
      "stack_out": [
        "lstTransferTxn#0 (copy)"
      ]
    },
    "7755": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "7757": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "7758": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "7760": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "7761": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0"
      ]
    },
    "7762": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "7763": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "7764": {
      "op": "bz acceptMigrationASAContract_bool_false@4",
      "stack_out": []
    },
    "7767": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "7768": {
      "block": "acceptMigrationASAContract_bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "7769": {
      "op": "frame_dig -4",
      "defined_out": [
        "algoTxn#0 (copy)"
      ],
      "stack_out": [
        "algoTxn#0 (copy)"
      ]
    },
    "7771": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "7773": {
      "op": "frame_dig -1",
      "defined_out": [
        "migrationAdmin#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "migrationAdmin#0 (copy)"
      ]
    },
    "7775": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "7776": {
      "op": "bz acceptMigrationASAContract_bool_false@8",
      "stack_out": []
    },
    "7779": {
      "op": "frame_dig -4",
      "stack_out": [
        "algoTxn#0 (copy)"
      ]
    },
    "7781": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "7783": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "7785": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "7786": {
      "op": "bz acceptMigrationASAContract_bool_false@8",
      "stack_out": []
    },
    "7789": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "7790": {
      "block": "acceptMigrationASAContract_bool_merge@9",
      "stack_in": [
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "7791": {
      "op": "frame_dig -3",
      "defined_out": [
        "baseAssetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "baseAssetTransferTxn#0 (copy)"
      ]
    },
    "7793": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "7795": {
      "op": "frame_dig -1",
      "defined_out": [
        "migrationAdmin#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "migrationAdmin#0 (copy)"
      ]
    },
    "7797": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "7798": {
      "op": "bz acceptMigrationASAContract_bool_false@13",
      "stack_out": []
    },
    "7801": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetTransferTxn#0 (copy)"
      ]
    },
    "7803": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "7805": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "7807": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "7808": {
      "op": "bz acceptMigrationASAContract_bool_false@13",
      "stack_out": []
    },
    "7811": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetTransferTxn#0 (copy)"
      ]
    },
    "7813": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "7815": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "7816": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7817": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "7818": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%20#0",
        "maybe_value%2#0"
      ]
    },
    "7819": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "7820": {
      "op": "==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "7821": {
      "op": "bz acceptMigrationASAContract_bool_false@13",
      "stack_out": []
    },
    "7824": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%2#0"
      ],
      "stack_out": [
        "and_result%2#0"
      ]
    },
    "7825": {
      "block": "acceptMigrationASAContract_bool_merge@14",
      "stack_in": [
        "and_result%2#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "7826": {
      "op": "frame_dig -2",
      "defined_out": [
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7828": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "24"
      ]
    },
    "7830": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "7831": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"cash_on_hand\""
      ]
    },
    "7833": {
      "op": "swap",
      "stack_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ]
    },
    "7834": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7835": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7837": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "0"
      ]
    },
    "7838": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "7839": {
      "op": "bytec_3 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "7840": {
      "op": "swap",
      "stack_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "7841": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7842": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7844": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "16"
      ]
    },
    "7846": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "7847": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"circulating_lst\""
      ]
    },
    "7849": {
      "op": "swap",
      "stack_out": [
        "\"circulating_lst\"",
        "new_state_value%2#0"
      ]
    },
    "7850": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7851": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7853": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "8"
      ]
    },
    "7855": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "7856": {
      "op": "bytec 4 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0",
        "\"total_borrows\""
      ]
    },
    "7858": {
      "op": "swap",
      "stack_out": [
        "\"total_borrows\"",
        "new_state_value%3#0"
      ]
    },
    "7859": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7860": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7862": {
      "op": "pushint 112 // 112",
      "defined_out": [
        "112",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "112"
      ]
    },
    "7864": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0"
      ]
    },
    "7865": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\"",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0",
        "\"total_additional_rewards\""
      ]
    },
    "7867": {
      "op": "swap",
      "stack_out": [
        "\"total_additional_rewards\"",
        "new_state_value%4#0"
      ]
    },
    "7868": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7869": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7871": {
      "op": "pushint 104 // 104",
      "defined_out": [
        "104",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "104"
      ]
    },
    "7873": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0"
      ]
    },
    "7874": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\"",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0",
        "\"total_commission_earned\""
      ]
    },
    "7876": {
      "op": "swap",
      "stack_out": [
        "\"total_commission_earned\"",
        "new_state_value%5#0"
      ]
    },
    "7877": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7878": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7880": {
      "op": "pushint 96 // 96",
      "defined_out": [
        "96",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "96"
      ]
    },
    "7882": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%6#0"
      ],
      "stack_out": [
        "new_state_value%6#0"
      ]
    },
    "7883": {
      "op": "bytec 19 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "new_state_value%6#0"
      ],
      "stack_out": [
        "new_state_value%6#0",
        "\"current_accumulated_commission\""
      ]
    },
    "7885": {
      "op": "swap",
      "stack_out": [
        "\"current_accumulated_commission\"",
        "new_state_value%6#0"
      ]
    },
    "7886": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7887": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7889": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "64"
      ]
    },
    "7891": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%7#0"
      ],
      "stack_out": [
        "new_state_value%7#0"
      ]
    },
    "7892": {
      "op": "bytec 15 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "new_state_value%7#0"
      ],
      "stack_out": [
        "new_state_value%7#0",
        "\"fee_pool\""
      ]
    },
    "7894": {
      "op": "swap",
      "stack_out": [
        "\"fee_pool\"",
        "new_state_value%7#0"
      ]
    },
    "7895": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7896": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7898": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "32"
      ]
    },
    "7900": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%8#0"
      ],
      "stack_out": [
        "new_state_value%8#0"
      ]
    },
    "7901": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "new_state_value%8#0"
      ],
      "stack_out": [
        "new_state_value%8#0",
        "\"borrow_index_wad\""
      ]
    },
    "7903": {
      "op": "swap",
      "stack_out": [
        "\"borrow_index_wad\"",
        "new_state_value%8#0"
      ]
    },
    "7904": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7905": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7907": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "72"
      ]
    },
    "7909": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%9#0"
      ],
      "stack_out": [
        "new_state_value%9#0"
      ]
    },
    "7910": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "new_state_value%9#0"
      ],
      "stack_out": [
        "new_state_value%9#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "7912": {
      "op": "swap",
      "stack_out": [
        "\"accepted_collaterals_count\"",
        "new_state_value%9#0"
      ]
    },
    "7913": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7914": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7916": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "40"
      ]
    },
    "7918": {
      "op": "extract_uint64",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "7919": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "7920": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"base_token_id\""
      ]
    },
    "7921": {
      "op": "swap",
      "stack_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "7922": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7923": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7925": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "56"
      ]
    },
    "7927": {
      "op": "extract_uint64",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "7928": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "7929": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "\"lst_token_id\""
      ]
    },
    "7931": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%1#0"
      ]
    },
    "7932": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7933": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7935": {
      "op": "pushint 80 // 80",
      "defined_out": [
        "80",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "80"
      ]
    },
    "7937": {
      "op": "extract_uint64",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "7938": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "7939": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "\"buyout_token_id\""
      ]
    },
    "7941": {
      "op": "swap",
      "stack_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%2#0"
      ]
    },
    "7942": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7943": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7945": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "48"
      ]
    },
    "7947": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%10#0"
      ],
      "stack_out": [
        "new_state_value%10#0"
      ]
    },
    "7948": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\"",
        "new_state_value%10#0"
      ],
      "stack_out": [
        "new_state_value%10#0",
        "\"commission_percentage\""
      ]
    },
    "7950": {
      "op": "swap",
      "stack_out": [
        "\"commission_percentage\"",
        "new_state_value%10#0"
      ]
    },
    "7951": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7952": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7954": {
      "op": "pushint 88 // 88",
      "defined_out": [
        "88",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "88"
      ]
    },
    "7956": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%11#0"
      ],
      "stack_out": [
        "new_state_value%11#0"
      ]
    },
    "7957": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "new_state_value%11#0"
      ],
      "stack_out": [
        "new_state_value%11#0",
        "\"liq_bonus_bps\""
      ]
    },
    "7959": {
      "op": "swap",
      "stack_out": [
        "\"liq_bonus_bps\"",
        "new_state_value%11#0"
      ]
    },
    "7960": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7961": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7963": {
      "op": "pushint 120 // 120",
      "defined_out": [
        "120",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "120"
      ]
    },
    "7965": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%12#0"
      ],
      "stack_out": [
        "new_state_value%12#0"
      ]
    },
    "7966": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "new_state_value%12#0"
      ],
      "stack_out": [
        "new_state_value%12#0",
        "\"active_loan_records\""
      ]
    },
    "7968": {
      "op": "swap",
      "stack_out": [
        "\"active_loan_records\"",
        "new_state_value%12#0"
      ]
    },
    "7969": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7970": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\""
      ],
      "stack_out": [
        "\"contract_state\""
      ]
    },
    "7972": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "\"contract_state\"",
        "0x0000000000000001"
      ],
      "stack_out": [
        "\"contract_state\"",
        "0x0000000000000001"
      ]
    },
    "7982": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7983": {
      "retsub": true,
      "op": "retsub"
    },
    "7984": {
      "block": "acceptMigrationASAContract_bool_false@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%2#0"
      ],
      "stack_out": [
        "and_result%2#0"
      ]
    },
    "7985": {
      "op": "b acceptMigrationASAContract_bool_merge@14"
    },
    "7988": {
      "block": "acceptMigrationASAContract_bool_false@8",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "7989": {
      "op": "b acceptMigrationASAContract_bool_merge@9"
    },
    "7992": {
      "block": "acceptMigrationASAContract_bool_false@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "7993": {
      "op": "b acceptMigrationASAContract_bool_merge@5"
    },
    "7996": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addCash",
      "params": {
        "amount#0": "uint64"
      },
      "block": "addCash",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "7999": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "8000": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"cash_on_hand\""
      ]
    },
    "8002": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "8003": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "8004": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "8006": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "8007": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"cash_on_hand\""
      ]
    },
    "8009": {
      "op": "swap",
      "stack_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ]
    },
    "8010": {
      "op": "app_global_put",
      "stack_out": []
    },
    "8011": {
      "retsub": true,
      "op": "retsub"
    },
    "8012": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.removeCash",
      "params": {
        "amount#0": "uint64"
      },
      "block": "removeCash",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "8015": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "8016": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"cash_on_hand\""
      ]
    },
    "8018": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "8019": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "8020": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "8022": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "8023": {
      "error": "INSUFFICIENT_CASH",
      "op": "assert // INSUFFICIENT_CASH",
      "stack_out": []
    },
    "8024": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "8025": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "stack_out": [
        "0",
        "\"cash_on_hand\""
      ]
    },
    "8027": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "8028": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "8029": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "8031": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "8032": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"cash_on_hand\""
      ]
    },
    "8034": {
      "op": "swap",
      "stack_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ]
    },
    "8035": {
      "op": "app_global_put",
      "stack_out": []
    },
    "8036": {
      "retsub": true,
      "op": "retsub"
    }
  }
}