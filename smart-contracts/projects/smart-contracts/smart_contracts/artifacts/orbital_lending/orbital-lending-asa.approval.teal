#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 1000 4 10000 1000000 1000000000000
    bytecblock "base_token_id" 0x151f7c75 "admin_account" "total_deposits" "total_borrows" "contract_state" "accepted_collaterals" "loan_record" "circulating_lst" "active_loan_records" "lst_token_id" "borrow_index_wad" "last_apr_bps" "cash_on_hand" "migration_admin" "fee_pool" 0x09ef525f 0xae859f3b "buyout_token_id" "current_accumulated_commission" "accepted_collaterals_count" "max_apr_bps" "liq_threshold_bps" "base_bps" "liq_bonus_bps" "total_commission_earned" "total_additional_rewards" 0x00 "ltv_bps" "util_cap_bps" "prev_apr_bps" "last_accrual_ts" "commission_percentage" "flux_oracle_app" 0x0000000000000000 "rate_model_type" "kink_norm_bps" "slope1_bps" "slope2_bps" "params_update_nonce" "origination_fee_bps" "protocol_share_bps" "oracle_app" "last_scaled_down_disbursement" "ema_alpha_bps" "power_gamma_q16" "scarcity_K_bps" "last_max_borrow" "last_requested_loan" "params_updated_at" "deposit_record"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn NumAppArgs
    bz main_after_if_else@39
    pushbytess 0x3b01665e 0xd2600ca9 0x6ca100cd 0x34b8343e 0xca7a1795 // method "createApplication(account,uint64)void", method "initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64,application)void", method "setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void", method "setContractState(uint64)void", method "setMigrationAdmin(account)void"
    bytec 16 // method "getCirculatingLST()uint64"
    bytec 17 // method "getTotalDeposits()uint64"
    pushbytess 0x6c6337c0 0x17c33662 0x5efce39a 0x5cac25a9 0xe596ac73 0x86a6b1bb 0xc0799344 0x72c5c57b 0x3e41a49b 0x15a5b25e 0x8553cffa 0xb4a74766 0xae99f45b 0x3dea8a60 0xd217f842 0xc5089c7e 0xd0e69812 0x5f0d6f03 0xc861aedf 0xdaa7f7f2 0x3172ca9d 0xef0bd27a 0x6e06c709 0x0ac83b5d 0xd0b8a7de 0xe8af118d // method "getAcceptedCollateralsCount()uint64", method "generateLSTToken(pay)void", method "optInToLST(uint64,pay)void", method "configureLSTToken(axfer,uint64)void", method "getOraclePrice(uint64)uint64", method "addNewCollateralType(uint64,uint64,pay,uint64)void", method "addLoanRecordExternal(uint64,uint64,account,uint64)void", method "depositASA(axfer,uint64,pay)void", method "withdrawDeposit(axfer,uint64,uint64,pay)void", method "borrow(axfer,uint64,uint64,uint64,uint64,pay)void", method "accrueLoanInterest(account,account)void", method "current_apr_bps()uint64", method "getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)", method "repayLoanASA(axfer,uint64)void", method "withdrawPlatformFees(account,pay)void", method "buyoutSplitASA(account,account,axfer,axfer,uint64,pay)void", method "maxWithdrawableCollateralLST(uint64)uint64", method "withdrawCollateral(uint64,uint64,uint64)void", method "liquidatePartialASA(account,axfer,uint64,uint64)void", method "getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)", method "gas()void", method "calculateCollateralValueUSD(uint64,uint64,uint64)uint64", method "pickupASARewards()void", method "migrateCollateralTokenId(uint64,pay)void", method "migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", method "acceptMigrationASAContract(axfer,pay,axfer,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_initApplication_route@4 main_setRateParams_route@5 main_setContractState_route@6 main_setMigrationAdmin_route@7 main_getCirculatingLST_route@8 main_getTotalDeposits_route@9 main_getAcceptedCollateralsCount_route@10 main_generateLSTToken_route@11 main_optInToLST_route@12 main_configureLSTToken_route@13 main_getOraclePrice_route@14 main_addNewCollateralType_route@15 main_addLoanRecordExternal_route@16 main_depositASA_route@17 main_withdrawDeposit_route@18 main_borrow_route@19 main_accrueLoanInterest_route@20 main_current_apr_bps_route@21 main_getLoanRecord_route@22 main_repayLoanASA_route@23 main_withdrawPlatformFees_route@24 main_buyoutSplitASA_route@25 main_maxWithdrawableCollateralLST_route@26 main_withdrawCollateral_route@27 main_liquidatePartialASA_route@28 main_getLoanStatus_route@29 main_gas_route@30 main_calculateCollateralValueUSD_route@31 main_pickupASARewards_route@32 main_migrateCollateralTokenId_route@33 main_migrateContract_route@34 main_acceptMigrationASAContract_route@35

main_after_if_else@39:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    intc_0 // 0
    return

main_acceptMigrationASAContract_route@35:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2215
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 3 // 3
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2215
    // @abimethod({ allowActions: 'NoOp' })
    callsub acceptMigrationASAContract
    intc_1 // 1
    return

main_migrateContract_route@34:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2154
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2154
    // @abimethod({ allowActions: 'NoOp' })
    callsub migrateContract
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_migrateCollateralTokenId_route@33:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2131
    // public migrateCollateralTokenId(collateralTokenId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2131
    // public migrateCollateralTokenId(collateralTokenId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    callsub migrateCollateralTokenId
    intc_1 // 1
    return

main_pickupASARewards_route@32:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2101
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub pickupASARewards
    intc_1 // 1
    return

main_calculateCollateralValueUSD_route@31:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1953
    // public calculateCollateralValueUSD(collateralTokenId: UintN64, collateralAmount: uint64, lstApp: uint64): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1953
    // public calculateCollateralValueUSD(collateralTokenId: UintN64, collateralAmount: uint64, lstApp: uint64): uint64 {
    callsub calculateCollateralValueUSD
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_gas_route@30:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1920
    // gas(): void {}
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_getLoanStatus_route@29:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1878
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1878
    // @abimethod({ allowActions: 'NoOp' })
    callsub getLoanStatus
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    uncover 6
    itob
    bytec 27 // 0x00
    intc_0 // 0
    uncover 8
    setbit
    bytec 27 // 0x00
    intc_0 // 0
    uncover 8
    setbit
    uncover 6
    uncover 6
    concat
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    intc_0 // 0
    getbit
    pushint 321 // 321
    swap
    setbit
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_liquidatePartialASA_route@28:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1733
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1733
    // @abimethod({ allowActions: 'NoOp' })
    callsub liquidatePartialASA
    intc_1 // 1
    return

main_withdrawCollateral_route@27:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1598
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1598
    // @abimethod({ allowActions: 'NoOp' })
    callsub withdrawCollateral
    intc_1 // 1
    return

main_maxWithdrawableCollateralLST_route@26:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1472
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1472
    // @abimethod({ allowActions: 'NoOp' })
    callsub maxWithdrawableCollateralLST
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_buyoutSplitASA_route@25:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1307
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txn GroupIndex
    pushint 3 // 3
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 3
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1307
    // @abimethod({ allowActions: 'NoOp' })
    callsub buyoutSplitASA
    intc_1 // 1
    return

main_withdrawPlatformFees_route@24:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1273
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1273
    // @abimethod({ allowActions: 'NoOp' })
    callsub withdrawPlatformFees
    intc_1 // 1
    return

main_repayLoanASA_route@23:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1215
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1215
    // @abimethod({ allowActions: 'NoOp' })
    callsub repayLoanASA
    intc_1 // 1
    return

main_getLoanRecord_route@22:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1202
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1202
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    callsub getLoanRecord
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_current_apr_bps_route@21:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1046
    // public current_apr_bps(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub current_apr_bps
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_accrueLoanInterest_route@20:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:958
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:958
    // @abimethod({ allowActions: 'NoOp' })
    callsub accrueLoanInterest
    intc_1 // 1
    return

main_borrow_route@19:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:862
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:862
    // @abimethod({ allowActions: 'NoOp' })
    callsub borrow
    intc_1 // 1
    return

main_withdrawDeposit_route@18:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:789
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:789
    // @abimethod({ allowActions: 'NoOp' })
    callsub withdrawDeposit
    intc_1 // 1
    return

main_depositASA_route@17:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:723
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:723
    // @abimethod({ allowActions: 'NoOp' })
    callsub depositASA
    intc_1 // 1
    return

main_addLoanRecordExternal_route@16:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:649
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    txna ApplicationArgs 4
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:649
    // @abimethod({ allowActions: 'NoOp' })
    callsub addLoanRecordExternal
    intc_1 // 1
    return

main_addNewCollateralType_route@15:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:606
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 3
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:606
    // @abimethod({ allowActions: 'NoOp' })
    callsub addNewCollateralType
    intc_1 // 1
    return

main_getOraclePrice_route@14:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:525
    // getOraclePrice(tokenId: UintN64): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:525
    // getOraclePrice(tokenId: UintN64): uint64 {
    callsub getOraclePrice
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_configureLSTToken_route@13:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:508
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:508
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    callsub configureLSTToken
    intc_1 // 1
    return

main_optInToLST_route@12:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:483
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:483
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    callsub optInToLST
    intc_1 // 1
    return

main_generateLSTToken_route@11:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:452
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:452
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    callsub generateLSTToken
    intc_1 // 1
    return

main_getAcceptedCollateralsCount_route@10:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:444
    // getAcceptedCollateralsCount(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getAcceptedCollateralsCount
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getTotalDeposits_route@9:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:436
    // getTotalDeposits(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getTotalDeposits
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getCirculatingLST_route@8:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:428
    // getCirculatingLST(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getCirculatingLST
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_setMigrationAdmin_route@7:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:419
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:419
    // @abimethod({ allowActions: 'NoOp' })
    callsub setMigrationAdmin
    intc_1 // 1
    return

main_setContractState_route@6:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:408
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:408
    // @abimethod({ allowActions: 'NoOp' })
    callsub setContractState
    intc_1 // 1
    return

main_setRateParams_route@5:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:360
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txna ApplicationArgs 7
    btoi
    txna ApplicationArgs 8
    btoi
    txna ApplicationArgs 9
    btoi
    txna ApplicationArgs 10
    btoi
    txna ApplicationArgs 11
    btoi
    txna ApplicationArgs 12
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:360
    // @abimethod({ allowActions: 'NoOp' })
    callsub setRateParams
    intc_1 // 1
    return

main_initApplication_route@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:257
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    txnas Applications
    txna ApplicationArgs 7
    btoi
    txna ApplicationArgs 8
    btoi
    txna ApplicationArgs 9
    btoi
    txnas Applications
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:257
    // @abimethod({ allowActions: 'NoOp' })
    callsub initApplication
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:237
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:50-51
    // @contract({ name: 'orbital-lending-asa', avmVersion: 11 })
    // export class OrbitalLending extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:237
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.createApplication(admin: bytes, baseTokenId: uint64) -> void:
createApplication:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:237-238
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    // public createApplication(admin: Account, baseTokenId: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    bytec_2 // "admin_account"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:239
    // this.admin_account.value = admin
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:240
    // this.base_token_id.value = new UintN64(baseTokenId)
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    bytec_0 // "base_token_id"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:240
    // this.base_token_id.value = new UintN64(baseTokenId)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:200
    // migration_admin = GlobalState<Account>()
    bytec 14 // "migration_admin"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:241
    // this.migration_admin.value = admin
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    bytec 5 // "contract_state"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:242
    // this.contract_state.value = new UintN64(0) // inactive
    bytec 34 // 0x0000000000000000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:229
    // contract_version = GlobalState<UintN64>() // contract version number
    pushbytess "contract_version" 0x000000000000076c // "contract_version", 0x000000000000076c
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:243
    // this.contract_version.value = new UintN64(CONTRACT_VERSION)
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.initApplication(mbrTxn: uint64, ltv_bps: uint64, liq_threshold_bps: uint64, liq_bonus_bps: uint64, origination_fee_bps: uint64, protocol_share_bps: uint64, oracle_app_id: uint64, buyout_token_id: uint64, additional_rewards_commission_percentage: uint64, flux_oracle_app_id: uint64) -> void:
initApplication:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:257-269
    // @abimethod({ allowActions: 'NoOp' })
    // public initApplication(
    //   mbrTxn: gtxn.PaymentTxn,
    //   ltv_bps: uint64,
    //   liq_threshold_bps: uint64,
    //   liq_bonus_bps: uint64,
    //   origination_fee_bps: uint64,
    //   protocol_share_bps: uint64,
    //   oracle_app_id: Application,
    //   buyout_token_id: uint64,
    //   additional_rewards_commission_percentage: uint64,
    //   flux_oracle_app_id: Application,
    // ): void {
    proto 10 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:270
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:270
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:272-275
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    frame_dig -10
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:272-275
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    ==
    bz initApplication_bool_false@3
    frame_dig -10
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:3
    // export const MBR_CREATE_APP: uint64 = 400_000
    pushint 400000 // 400000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:272-275
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    ==
    bz initApplication_bool_false@3
    intc_1 // 1

initApplication_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:272-275
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_CREATE_APP,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:277
    // assert(additional_rewards_commission_percentage <= 100, 'COMMISSION_TOO_HIGH')
    frame_dig -2
    pushint 100 // 100
    <=
    assert // COMMISSION_TOO_HIGH
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:93
    // ltv_bps = GlobalState<uint64>()
    bytec 28 // "ltv_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:279
    // this.ltv_bps.value = ltv_bps
    frame_dig -9
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:96
    // liq_threshold_bps = GlobalState<uint64>()
    bytec 22 // "liq_threshold_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:280
    // this.liq_threshold_bps.value = liq_threshold_bps
    frame_dig -8
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:99
    // origination_fee_bps = GlobalState<uint64>()
    bytec 40 // "origination_fee_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:281
    // this.origination_fee_bps.value = origination_fee_bps
    frame_dig -6
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:171
    // accepted_collaterals_count = GlobalState<uint64>()
    bytec 20 // "accepted_collaterals_count"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:282
    // this.accepted_collaterals_count.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    bytec 15 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:283
    // this.fee_pool.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    bytec 8 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:284
    // this.circulating_lst.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    bytec_3 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:285
    // this.total_deposits.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:168
    // active_loan_records = GlobalState<uint64>()
    bytec 9 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:286
    // this.active_loan_records.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:102
    // protocol_share_bps = GlobalState<uint64>()
    bytec 41 // "protocol_share_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:287
    // this.protocol_share_bps.value = protocol_share_bps
    frame_dig -5
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:83
    // oracle_app = GlobalState<Application>()
    bytec 42 // "oracle_app"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:288
    // this.oracle_app.value = oracle_app_id
    frame_dig -4
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:289
    // this.lst_token_id.value = new UintN64(99)
    pushbytes 0x0000000000000063
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:105
    // base_bps = GlobalState<uint64>()
    bytec 23 // "base_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:290
    // this.base_bps.value = 50
    pushint 50 // 50
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:108
    // util_cap_bps = GlobalState<uint64>()
    bytec 29 // "util_cap_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:291
    // this.util_cap_bps.value = 8000 // 80% utilization cap
    pushint 8000 // 8000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:292
    // this.total_borrows.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:134
    // rate_model_type = GlobalState<uint64>()
    bytec 35 // "rate_model_type"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:293
    // this.rate_model_type.value = 0 // Default to kinked model
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:111
    // kink_norm_bps = GlobalState<uint64>()
    bytec 36 // "kink_norm_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:294
    // this.kink_norm_bps.value = 5000 // 50% kink point
    pushint 5000 // 5000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:114
    // slope1_bps = GlobalState<uint64>()
    bytec 37 // "slope1_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:295
    // this.slope1_bps.value = 1000 // 10% slope to kink
    intc_2 // 1000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:117
    // slope2_bps = GlobalState<uint64>()
    bytec 38 // "slope2_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:296
    // this.slope2_bps.value = 2000 // 20% slope after kink
    pushint 2000 // 2000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:120
    // max_apr_bps = GlobalState<uint64>()
    bytec 21 // "max_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:297
    // this.max_apr_bps.value = 6000 // 60% APR Cap by Default
    pushint 6000 // 6000
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:207
    // last_scaled_down_disbursement = GlobalState<uint64>()
    bytec 43 // "last_scaled_down_disbursement"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:298
    // this.last_scaled_down_disbursement.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:122
    // ema_alpha_bps = GlobalState<uint64>()
    bytec 44 // "ema_alpha_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:299
    // this.ema_alpha_bps.value = 0 // No EMA smoothing by default
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:128
    // prev_apr_bps = GlobalState<uint64>()
    bytec 30 // "prev_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:300
    // this.prev_apr_bps.value = 50 // Same as base_bps by default
    pushint 50 // 50
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:131
    // util_ema_bps = GlobalState<uint64>()
    pushbytes "util_ema_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:301
    // this.util_ema_bps.value = 0 // No utilization EMA by default
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:137
    // power_gamma_q16 = GlobalState<uint64>()
    bytec 45 // "power_gamma_q16"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:302
    // this.power_gamma_q16.value = 0 // No power curve by default
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:140
    // scarcity_K_bps = GlobalState<uint64>()
    bytec 46 // "scarcity_K_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:303
    // this.scarcity_K_bps.value = 0 // No scarcity parameter by default
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:210
    // last_max_borrow = GlobalState<uint64>()
    bytec 47 // "last_max_borrow"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:304
    // this.last_max_borrow.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:213
    // last_requested_loan = GlobalState<uint64>()
    bytec 48 // "last_requested_loan"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:305
    // this.last_requested_loan.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:216
    // debug_diff = GlobalState<uint64>()
    pushbytes "debug_diff"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:306
    // this.debug_diff.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:218
    // params_updated_at = GlobalState<uint64>() // last params change timestamp (ledger seconds)
    bytec 49 // "params_updated_at"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:307
    // this.params_updated_at.value = Global.latestTimestamp
    global LatestTimestamp
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:219
    // params_update_nonce = GlobalState<uint64>() // monotonic counter
    bytec 39 // "params_update_nonce"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:308
    // this.params_update_nonce.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    bytec 11 // "borrow_index_wad"
    // smart_contracts/orbital_lending/config.algo.ts:11
    // export const INDEX_SCALE: uint64 = 1_000_000_000_000 // 1e12
    intc 6 // 1000000000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:309
    // this.borrow_index_wad.value = INDEX_SCALE
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:149
    // last_accrual_ts = GlobalState<uint64>()
    bytec 31 // "last_accrual_ts"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:310
    // this.last_accrual_ts.value = Global.latestTimestamp
    global LatestTimestamp
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:105
    // base_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 23 // "base_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 12 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:311
    // this.last_apr_bps.value = this.base_bps.value
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:312
    // this.buyout_token_id.value = new UintN64(buyout_token_id)
    frame_dig -3
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:174
    // buyout_token_id = GlobalState<UintN64>()
    bytec 18 // "buyout_token_id"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:312
    // this.buyout_token_id.value = new UintN64(buyout_token_id)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:177
    // liq_bonus_bps = GlobalState<uint64>()
    bytec 24 // "liq_bonus_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:313
    // this.liq_bonus_bps.value = liq_bonus_bps
    frame_dig -7
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:189
    // total_commission_earned = GlobalState<uint64>()
    bytec 25 // "total_commission_earned"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:314
    // this.total_commission_earned.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:187
    // current_accumulated_commission = GlobalState<uint64>()
    bytec 19 // "current_accumulated_commission"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:315
    // this.current_accumulated_commission.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:185
    // commission_percentage = GlobalState<uint64>()
    bytec 32 // "commission_percentage"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:316
    // this.commission_percentage.value = additional_rewards_commission_percentage
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:155
    // total_borrows_principal = GlobalState<uint64>()
    pushbytes "total_borrows_principal"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:317
    // this.total_borrows_principal.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:193
    // cash_on_hand = GlobalState<uint64>()
    bytec 13 // "cash_on_hand"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:318
    // this.cash_on_hand.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:191
    // total_additional_rewards = GlobalState<uint64>()
    bytec 26 // "total_additional_rewards"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:319
    // this.total_additional_rewards.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:86
    // flux_oracle_app = GlobalState<Application>()
    bytec 33 // "flux_oracle_app"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:320
    // this.flux_oracle_app.value = flux_oracle_app_id
    frame_dig -1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:322
    // if (this.base_token_id.value.native !== 0) {
    btoi
    bz initApplication_after_if_else@7
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:323-330
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:325
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:326
    // xferAsset: this.base_token_id.value.native,
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:327
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:323-329
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:323-330
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit

initApplication_after_if_else@7:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:174
    // buyout_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 18 // "buyout_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:332
    // if (this.buyout_token_id.value.native !== 0) {
    btoi
    bz initApplication_after_if_else@10
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:333-340
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.buyout_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:335
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:174
    // buyout_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 18 // "buyout_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:336
    // xferAsset: this.buyout_token_id.value.native,
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:337
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:333-339
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.buyout_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:333-340
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: this.buyout_token_id.value.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit

initApplication_after_if_else@10:
    retsub

initApplication_bool_false@3:
    intc_0 // 0
    b initApplication_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setRateParams(base_bps: uint64, util_cap_bps: uint64, kink_norm_bps: uint64, slope1_bps: uint64, slope2_bps: uint64, max_apr_bps: uint64, max_apr_step_bps: uint64, ema_alpha_bps: uint64, power_gamma_q16: uint64, scarcity_K_bps: uint64, rate_model_type: uint64, liq_bonus_bps: uint64) -> void:
setRateParams:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:360-374
    // @abimethod({ allowActions: 'NoOp' })
    // public setRateParams(
    //   base_bps: uint64,
    //   util_cap_bps: uint64,
    //   kink_norm_bps: uint64,
    //   slope1_bps: uint64,
    //   slope2_bps: uint64,
    //   max_apr_bps: uint64,
    //   max_apr_step_bps: uint64,
    //   ema_alpha_bps: uint64,
    //   power_gamma_q16: uint64,
    //   scarcity_K_bps: uint64,
    //   rate_model_type: uint64, // or uint8
    //   liq_bonus_bps: uint64,
    // ) {
    proto 12 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:375
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:375
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    ==
    assert // UNAUTHORIZED
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:378
    // assert(util_cap_bps >= 1 && util_cap_bps <= 10_000, 'BAD_UTIL_CAP')
    frame_dig -11
    bz setRateParams_bool_false@3
    frame_dig -11
    intc 4 // 10000
    <=
    bz setRateParams_bool_false@3
    intc_1 // 1

setRateParams_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:378
    // assert(util_cap_bps >= 1 && util_cap_bps <= 10_000, 'BAD_UTIL_CAP')
    assert // BAD_UTIL_CAP
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:379
    // assert(kink_norm_bps >= 1 && kink_norm_bps < 10_000, 'BAD_KINK')
    frame_dig -10
    bz setRateParams_bool_false@7
    frame_dig -10
    intc 4 // 10000
    <
    bz setRateParams_bool_false@7
    intc_1 // 1

setRateParams_bool_merge@8:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:379
    // assert(kink_norm_bps >= 1 && kink_norm_bps < 10_000, 'BAD_KINK')
    assert // BAD_KINK
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:381
    // if (max_apr_bps > 0) {
    frame_dig -7
    bz setRateParams_after_if_else@14
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:382
    // assert(max_apr_bps >= base_bps, 'BAD_MAX_APR')
    frame_dig -7
    frame_dig -12
    >=
    assert // BAD_MAX_APR

setRateParams_after_if_else@14:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:384
    // assert(ema_alpha_bps <= 10_000, 'BAD_EMA_ALPHA')
    frame_dig -5
    intc 4 // 10000
    <=
    assert // BAD_EMA_ALPHA
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:387
    // assert(rate_model_type === 0 /* kinked */ || rate_model_type === 255 /* fixed */, 'UNSUPPORTED_MODEL')
    frame_dig -2
    bz setRateParams_bool_true@16
    frame_dig -2
    pushint 255 // 255
    ==
    bz setRateParams_bool_false@17

setRateParams_bool_true@16:
    intc_1 // 1

setRateParams_bool_merge@18:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:387
    // assert(rate_model_type === 0 /* kinked */ || rate_model_type === 255 /* fixed */, 'UNSUPPORTED_MODEL')
    assert // UNSUPPORTED_MODEL
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:105
    // base_bps = GlobalState<uint64>()
    bytec 23 // "base_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:388
    // this.base_bps.value = base_bps
    frame_dig -12
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:108
    // util_cap_bps = GlobalState<uint64>()
    bytec 29 // "util_cap_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:389
    // this.util_cap_bps.value = util_cap_bps
    frame_dig -11
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:111
    // kink_norm_bps = GlobalState<uint64>()
    bytec 36 // "kink_norm_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:390
    // this.kink_norm_bps.value = kink_norm_bps
    frame_dig -10
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:114
    // slope1_bps = GlobalState<uint64>()
    bytec 37 // "slope1_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:391
    // this.slope1_bps.value = slope1_bps
    frame_dig -9
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:117
    // slope2_bps = GlobalState<uint64>()
    bytec 38 // "slope2_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:392
    // this.slope2_bps.value = slope2_bps
    frame_dig -8
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:120
    // max_apr_bps = GlobalState<uint64>()
    bytec 21 // "max_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:393
    // this.max_apr_bps.value = max_apr_bps
    frame_dig -7
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:125
    // max_apr_step_bps = GlobalState<uint64>()
    pushbytes "max_apr_step_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:394
    // this.max_apr_step_bps.value = max_apr_step_bps
    frame_dig -6
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:134
    // rate_model_type = GlobalState<uint64>()
    bytec 35 // "rate_model_type"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:395
    // this.rate_model_type.value = rate_model_type
    frame_dig -2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:177
    // liq_bonus_bps = GlobalState<uint64>()
    bytec 24 // "liq_bonus_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:396
    // this.liq_bonus_bps.value = liq_bonus_bps
    frame_dig -1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:219
    // params_update_nonce = GlobalState<uint64>() // monotonic counter
    intc_0 // 0
    bytec 39 // "params_update_nonce"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:397
    // this.params_update_nonce.value += 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:219
    // params_update_nonce = GlobalState<uint64>() // monotonic counter
    bytec 39 // "params_update_nonce"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:397
    // this.params_update_nonce.value += 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:218
    // params_updated_at = GlobalState<uint64>() // last params change timestamp (ledger seconds)
    bytec 49 // "params_updated_at"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:398
    // this.params_updated_at.value = Global.latestTimestamp
    global LatestTimestamp
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:122
    // ema_alpha_bps = GlobalState<uint64>()
    bytec 44 // "ema_alpha_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:399
    // this.ema_alpha_bps.value = ema_alpha_bps
    frame_dig -5
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:137
    // power_gamma_q16 = GlobalState<uint64>()
    bytec 45 // "power_gamma_q16"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:400
    // this.power_gamma_q16.value = power_gamma_q16
    frame_dig -4
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:140
    // scarcity_K_bps = GlobalState<uint64>()
    bytec 46 // "scarcity_K_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:401
    // this.scarcity_K_bps.value = scarcity_K_bps
    frame_dig -3
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:120
    // max_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 21 // "max_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:403
    // if (this.max_apr_bps.value > 0 && this.prev_apr_bps.value > this.max_apr_bps.value) {
    bz setRateParams_after_if_else@21
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:128
    // prev_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 30 // "prev_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:120
    // max_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 21 // "max_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:403
    // if (this.max_apr_bps.value > 0 && this.prev_apr_bps.value > this.max_apr_bps.value) {
    >
    bz setRateParams_after_if_else@21
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:120
    // max_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 21 // "max_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:128
    // prev_apr_bps = GlobalState<uint64>()
    bytec 30 // "prev_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:404
    // this.prev_apr_bps.value = this.max_apr_bps.value
    swap
    app_global_put

setRateParams_after_if_else@21:
    retsub

setRateParams_bool_false@17:
    intc_0 // 0
    b setRateParams_bool_merge@18

setRateParams_bool_false@7:
    intc_0 // 0
    b setRateParams_bool_merge@8

setRateParams_bool_false@3:
    intc_0 // 0
    b setRateParams_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setContractState(state: uint64) -> void:
setContractState:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:408-409
    // @abimethod({ allowActions: 'NoOp' })
    // public setContractState(state: uint64): void {
    proto 1 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:410
    // assert(op.Txn.sender === this.admin_account.value || op.Txn.sender === this.migration_admin.value, 'UNAUTHORIZED')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:410
    // assert(op.Txn.sender === this.admin_account.value || op.Txn.sender === this.migration_admin.value, 'UNAUTHORIZED')
    ==
    bnz setContractState_bool_true@2
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:200
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 14 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:410
    // assert(op.Txn.sender === this.admin_account.value || op.Txn.sender === this.migration_admin.value, 'UNAUTHORIZED')
    ==
    bz setContractState_bool_false@3

setContractState_bool_true@2:
    intc_1 // 1

setContractState_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:410
    // assert(op.Txn.sender === this.admin_account.value || op.Txn.sender === this.migration_admin.value, 'UNAUTHORIZED')
    assert // UNAUTHORIZED
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:411
    // assert(state <= 2, 'INVALID_STATE') // 0=inactive,1=active,2=migrating
    frame_dig -1
    pushint 2 // 2
    <=
    assert // INVALID_STATE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:412
    // this.contract_state.value = new UintN64(state)
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    bytec 5 // "contract_state"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:412
    // this.contract_state.value = new UintN64(state)
    swap
    app_global_put
    retsub

setContractState_bool_false@3:
    intc_0 // 0
    b setContractState_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.setMigrationAdmin(migrationAdmin: bytes) -> void:
setMigrationAdmin:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:419-420
    // @abimethod({ allowActions: 'NoOp' })
    // public setMigrationAdmin(migrationAdmin: Account): void {
    proto 1 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:421
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:421
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    ==
    assert // UNAUTHORIZED
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:200
    // migration_admin = GlobalState<Account>()
    bytec 14 // "migration_admin"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:422
    // this.migration_admin.value = migrationAdmin
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getCirculatingLST() -> uint64:
getCirculatingLST:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:429
    // return this.circulating_lst.value
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getTotalDeposits() -> uint64:
getTotalDeposits:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:437
    // return this.total_deposits.value
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getAcceptedCollateralsCount() -> uint64:
getAcceptedCollateralsCount:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:171
    // accepted_collaterals_count = GlobalState<uint64>()
    intc_0 // 0
    bytec 20 // "accepted_collaterals_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:445
    // return this.accepted_collaterals_count.value
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.generateLSTToken(mbrTxn: uint64) -> void:
generateLSTToken:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:452
    // public generateLSTToken(mbrTxn: gtxn.PaymentTxn): void {
    proto 1 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:453
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:453
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:454-457
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:454-457
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    ==
    bz generateLSTToken_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:4
    // export const MBR_INIT_APP: uint64 = 102_000
    pushint 102000 // 102000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:454-457
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    ==
    bz generateLSTToken_bool_false@3
    intc_1 // 1

generateLSTToken_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:454-457
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_INIT_APP,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:461
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:462-473
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(baseToken.unitName),
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:464
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:465
    // total: baseToken.total,
    dig 1
    asset_params_get AssetTotal
    assert // asset exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:466
    // decimals: baseToken.decimals,
    dig 2
    asset_params_get AssetDecimals
    assert // asset exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:468
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:469
    // unitName: 'c' + String(baseToken.unitName),
    dig 4
    asset_params_get AssetUnitName
    assert // asset exists
    pushbytes "c"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:470
    // assetName: 'c' + String(baseToken.unitName),
    uncover 5
    asset_params_get AssetUnitName
    assert // asset exists
    pushbytes "c"
    swap
    concat
    itxn_field ConfigAssetName
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetManager
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:467
    // defaultFrozen: false,
    intc_0 // 0
    itxn_field ConfigAssetDefaultFrozen
    itxn_field ConfigAssetDecimals
    itxn_field ConfigAssetTotal
    itxn_field Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:462-472
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(baseToken.unitName),
    //     fee: STANDARD_TXN_FEE,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:462-473
    // const result = itxn
    //   .assetConfig({
    //     sender: Global.currentApplicationAddress,
    //     total: baseToken.total,
    //     decimals: baseToken.decimals,
    //     defaultFrozen: false,
    //     manager: Global.currentApplicationAddress,
    //     unitName: 'c' + String(baseToken.unitName),
    //     assetName: 'c' + String(baseToken.unitName),
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:474
    // this.lst_token_id.value = new UintN64(result.createdAsset.id)
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:474
    // this.lst_token_id.value = new UintN64(result.createdAsset.id)
    swap
    app_global_put
    retsub

generateLSTToken_bool_false@3:
    intc_0 // 0
    b generateLSTToken_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.optInToLST(lstAssetId: uint64, mbrTxn: uint64) -> void:
optInToLST:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:483
    // public optInToLST(lstAssetId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:484
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:484
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:485-488
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    frame_dig -1
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:485-488
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    ==
    bz optInToLST_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:5
    // export const MBR_OPT_IN_LST: uint64 = 2_000
    pushint 2000 // 2000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:485-488
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    ==
    bz optInToLST_bool_false@3
    intc_1 // 1

optInToLST_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:485-488
    // assertMatch(mbrTxn, {
    //   sender: this.admin_account.value,
    //   amount: MBR_OPT_IN_LST,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:489
    // this.lst_token_id.value = new UintN64(lstAssetId)
    frame_dig -2
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:489
    // this.lst_token_id.value = new UintN64(lstAssetId)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:492-499
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:494
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:496
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:492-498
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:492-499
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: lstAssetId,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    retsub

optInToLST_bool_false@3:
    intc_0 // 0
    b optInToLST_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.configureLSTToken(axferTxn: uint64, circulating_lst: uint64) -> void:
configureLSTToken:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:508
    // public configureLSTToken(axferTxn: gtxn.AssetTransferTxn, circulating_lst: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:509
    // assert(op.Txn.sender === this.admin_account.value)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:509
    // assert(op.Txn.sender === this.admin_account.value)
    ==
    assert
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:510
    // assert(this.lst_token_id.value.native === axferTxn.xferAsset.id, 'LST token not set')
    btoi
    frame_dig -2
    gtxns XferAsset
    ==
    assert // LST token not set
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:512-515
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    frame_dig -2
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:512-515
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    ==
    bz configureLSTToken_bool_false@3
    frame_dig -2
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:514
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:512-515
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    ==
    bz configureLSTToken_bool_false@3
    intc_1 // 1

configureLSTToken_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:512-515
    // assertMatch(axferTxn, {
    //   sender: this.admin_account.value,
    //   assetReceiver: Global.currentApplicationAddress,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    bytec 8 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:516
    // this.circulating_lst.value = circulating_lst
    frame_dig -1
    app_global_put
    retsub

configureLSTToken_bool_false@3:
    intc_0 // 0
    b configureLSTToken_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getOraclePrice(tokenId: bytes) -> uint64:
getOraclePrice:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:525
    // getOraclePrice(tokenId: UintN64): uint64 {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:83
    // oracle_app = GlobalState<Application>()
    intc_0 // 0
    bytec 42 // "oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:527
    // const address = oracle.address
    dup
    app_params_get AppAddress
    bury 1
    assert // application exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:530-534
    // const result = abiCall(PriceOracleStub.prototype.getTokenPrice, {
    //   appId: contractAppId,
    //   args: [tokenId],
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    pushbytes 0xac13e004 // method "getTokenPrice(uint64)(uint64,uint64,uint64)"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:530-534
    // const result = abiCall(PriceOracleStub.prototype.getTokenPrice, {
    //   appId: contractAppId,
    //   args: [tokenId],
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    pushint 12 // 12
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:536
    // return result.price.native
    extract_uint64
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.updateCollateralTotal(collateralTokenId: bytes, amount: uint64) -> void:
updateCollateralTotal:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:564
    // private updateCollateralTotal(collateralTokenId: UintN64, amount: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:162
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 6 // "accepted_collaterals"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:566
    // const collateral = this.accepted_collaterals(key).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:568
    // const newTotal: uint64 = collateral.totalCollateral.native + amount
    dup
    pushint 24 // 24
    extract_uint64
    frame_dig -1
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:570
    // assetId: collateral.assetId,
    dig 1
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:571
    // baseAssetId: collateral.baseAssetId,
    dig 2
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:572
    // marketBaseAssetId: collateral.marketBaseAssetId,
    dig 3
    extract 16 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:573
    // totalCollateral: new UintN64(newTotal),
    uncover 3
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:574
    // originatingAppId: collateral.originatingAppId,
    uncover 4
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:569-575
    // this.accepted_collaterals(key).value = new AcceptedCollateral({
    //   assetId: collateral.assetId,
    //   baseAssetId: collateral.baseAssetId,
    //   marketBaseAssetId: collateral.marketBaseAssetId,
    //   totalCollateral: new UintN64(newTotal),
    //   originatingAppId: collateral.originatingAppId,
    // }).copy()
    uncover 4
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    box_put
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.reduceCollateralTotal(collateralTokenId: bytes, amount: uint64) -> void:
reduceCollateralTotal:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:584
    // private reduceCollateralTotal(collateralTokenId: UintN64, amount: uint64): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:162
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 6 // "accepted_collaterals"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:586
    // const collateral = this.accepted_collaterals(key).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:588
    // assert(collateral.totalCollateral.native >= amount, 'INSUFFICIENT_COLLATERAL')
    dup
    pushint 24 // 24
    extract_uint64
    dup
    frame_dig -1
    >=
    assert // INSUFFICIENT_COLLATERAL
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:589
    // const newTotal: uint64 = collateral.totalCollateral.native - amount
    frame_dig -1
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:591
    // assetId: collateral.assetId,
    dig 1
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:592
    // baseAssetId: collateral.baseAssetId,
    dig 2
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:593
    // marketBaseAssetId: collateral.marketBaseAssetId,
    dig 3
    extract 16 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:594
    // totalCollateral: new UintN64(newTotal),
    uncover 3
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:595
    // originatingAppId: collateral.originatingAppId,
    uncover 4
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:590-596
    // this.accepted_collaterals(key).value = new AcceptedCollateral({
    //   assetId: collateral.assetId,
    //   baseAssetId: collateral.baseAssetId,
    //   marketBaseAssetId: collateral.marketBaseAssetId,
    //   totalCollateral: new UintN64(newTotal),
    //   originatingAppId: collateral.originatingAppId,
    // }).copy()
    uncover 4
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    box_put
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addNewCollateralType(collateralTokenId: bytes, collateralBaseTokenId: bytes, mbrTxn: uint64, originatingAppId: bytes) -> void:
addNewCollateralType:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:606-612
    // @abimethod({ allowActions: 'NoOp' })
    // addNewCollateralType(
    //   collateralTokenId: UintN64,
    //   collateralBaseTokenId: UintN64,
    //   mbrTxn: gtxn.PaymentTxn,
    //   originatingAppId: UintN64,
    // ): void {
    proto 4 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:613
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:614
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:614
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    ==
    assert // UNAUTHORIZED
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:615
    // assert(collateralTokenId.native !== baseToken.id, 'CANNOT_USE_BASE_AS_COLLATERAL')
    frame_dig -4
    btoi
    dup
    uncover 2
    !=
    assert // CANNOT_USE_BASE_AS_COLLATERAL
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:162
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 6 // "accepted_collaterals"
    frame_dig -4
    concat
    dup
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:546
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:616
    // assert(!this.collateralExists(collateralTokenId), 'COLLATERAL_ALREADY_EXISTS')
    !
    assert // COLLATERAL_ALREADY_EXISTS
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:617-624
    // assertMatch(
    //   mbrTxn,
    //   {
    //     sender: this.admin_account.value,
    //     amount: MBR_COLLATERAL,
    //   },
    //   'INSUFFICIENT_MBR',
    // )
    frame_dig -2
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:617-624
    // assertMatch(
    //   mbrTxn,
    //   {
    //     sender: this.admin_account.value,
    //     amount: MBR_COLLATERAL,
    //   },
    //   'INSUFFICIENT_MBR',
    // )
    ==
    bz addNewCollateralType_bool_false@3
    frame_dig -2
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:6
    // export const MBR_COLLATERAL: uint64 = 101_000
    pushint 101000 // 101000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:617-624
    // assertMatch(
    //   mbrTxn,
    //   {
    //     sender: this.admin_account.value,
    //     amount: MBR_COLLATERAL,
    //   },
    //   'INSUFFICIENT_MBR',
    // )
    ==
    bz addNewCollateralType_bool_false@3
    intc_1 // 1

addNewCollateralType_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:617-624
    // assertMatch(
    //   mbrTxn,
    //   {
    //     sender: this.admin_account.value,
    //     amount: MBR_COLLATERAL,
    //   },
    //   'INSUFFICIENT_MBR',
    // )
    assert // INSUFFICIENT_MBR
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:626-632
    // const newAcceptedCollateral: AcceptedCollateral = new AcceptedCollateral({
    //   assetId: collateralTokenId,
    //   baseAssetId: collateralBaseTokenId,
    //   marketBaseAssetId: this.base_token_id.value,
    //   totalCollateral: new UintN64(0),
    //   originatingAppId: originatingAppId,
    // })
    frame_dig -4
    frame_dig -3
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:630
    // totalCollateral: new UintN64(0),
    bytec 34 // 0x0000000000000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:626-632
    // const newAcceptedCollateral: AcceptedCollateral = new AcceptedCollateral({
    //   assetId: collateralTokenId,
    //   baseAssetId: collateralBaseTokenId,
    //   marketBaseAssetId: this.base_token_id.value,
    //   totalCollateral: new UintN64(0),
    //   originatingAppId: originatingAppId,
    // })
    concat
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:634
    // this.accepted_collaterals(key).value = newAcceptedCollateral.copy()
    frame_dig 1
    dup
    uncover 2
    box_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:171
    // accepted_collaterals_count = GlobalState<uint64>()
    intc_0 // 0
    bytec 20 // "accepted_collaterals_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:635
    // this.accepted_collaterals_count.value = this.accepted_collaterals_count.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:171
    // accepted_collaterals_count = GlobalState<uint64>()
    bytec 20 // "accepted_collaterals_count"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:635
    // this.accepted_collaterals_count.value = this.accepted_collaterals_count.value + 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:636-644
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:638
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:639
    // assetReceiver: Global.currentApplicationAddress,
    dup
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:641
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig 0
    itxn_field XferAsset
    itxn_field AssetReceiver
    itxn_field Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:636-643
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:636-644
    // itxn
    //   .assetTransfer({
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: Global.currentApplicationAddress,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: 0,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:546
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:646
    // assert(this.collateralExists(collateralTokenId), 'unsupported collateral')
    assert // unsupported collateral
    retsub

addNewCollateralType_bool_false@3:
    intc_0 // 0
    b addNewCollateralType_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addLoanRecordExternal(disbursement: uint64, collateralTokenId: bytes, borrowerAddress: bytes, collateralAmount: uint64) -> void:
addLoanRecordExternal:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:649-655
    // @abimethod({ allowActions: 'NoOp' })
    // public addLoanRecordExternal(
    //   disbursement: uint64,
    //   collateralTokenId: UintN64,
    //   borrowerAddress: Account,
    //   collateralAmount: uint64,
    // ): void {
    proto 4 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:656
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:656
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    ==
    assert // UNAUTHORIZED
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:657
    // this.mintLoanRecord(disbursement, collateralTokenId, borrowerAddress, collateralAmount)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub mintLoanRecord
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:658
    // this.updateCollateralTotal(collateralTokenId, collateralAmount)
    frame_dig -3
    frame_dig -1
    callsub updateCollateralTotal
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:659
    // this.total_borrows.value = this.total_borrows.value + disbursement
    frame_dig -4
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:659
    // this.total_borrows.value = this.total_borrows.value + disbursement
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:660
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 12 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:660
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.depositASA(assetTransferTxn: uint64, amount: uint64, mbrTxn: uint64) -> void:
depositASA:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:723-724
    // @abimethod({ allowActions: 'NoOp' })
    // depositASA(assetTransferTxn: gtxn.AssetTransferTxn, amount: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 3 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:725
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:726-730
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    frame_dig -3
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:727
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:726-730
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    ==
    bz depositASA_bool_false@4
    frame_dig -3
    gtxns XferAsset
    frame_dig 0
    ==
    bz depositASA_bool_false@4
    frame_dig -3
    gtxns AssetAmount
    frame_dig -2
    ==
    bz depositASA_bool_false@4
    intc_1 // 1

depositASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:726-730
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:731-733
    // assertMatch(mbrTxn, {
    //   amount: DEPOSIT_MBR,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:17
    // export const DEPOSIT_MBR: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:731-733
    // assertMatch(mbrTxn, {
    //   amount: DEPOSIT_MBR,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:734
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:735
    // this.addCash(amount)
    frame_dig -2
    callsub addCash
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:737
    // const _interestSlice = this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    bury 1
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:744
    // if (this.total_deposits.value === 0) {
    bnz depositASA_else_body@7
    frame_dig -2

depositASA_after_if_else@8:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:749-756
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:751
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:752
    // xferAsset: this.lst_token_id.value.native,
    btoi
    dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:749-755
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:749-756
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:758
    // this.circulating_lst.value += lstDue
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    bytec 8 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:758
    // this.circulating_lst.value += lstDue
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:759
    // this.total_deposits.value += amount
    frame_dig -2
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    bytec_3 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:759
    // this.total_deposits.value += amount
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:760
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 12 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:760
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:762
    // assetId: new UintN64(this.base_token_id.value.native),
    btoi
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:763
    // userAddress: new Address(op.Txn.sender),
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:761-764
    // const depositKey = new DepositRecordKey({
    //   assetId: new UintN64(this.base_token_id.value.native),
    //   userAddress: new Address(op.Txn.sender),
    // })
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:179
    // deposit_record = BoxMap<DepositRecordKey, DepositRecord>({ keyPrefix: 'deposit_record' })
    bytec 50 // "deposit_record"
    swap
    concat
    dup
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:765
    // if (this.deposit_record(depositKey).exists) {
    box_len
    bury 1
    bz depositASA_else_body@11
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:766
    // const existingRecord = this.deposit_record(depositKey).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:767
    // const newAmount: uint64 = existingRecord.depositAmount.native + amount
    dup
    intc_0 // 0
    extract_uint64
    frame_dig -2
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:769
    // assetId: existingRecord.assetId,
    swap
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:770
    // depositAmount: new UintN64(newAmount),
    swap
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:768-771
    // this.deposit_record(depositKey).value = new DepositRecord({
    //   assetId: existingRecord.assetId,
    //   depositAmount: new UintN64(newAmount),
    // }).copy()
    swap
    concat
    box_put
    retsub

depositASA_else_body@11:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:774
    // assetId: new UintN64(this.base_token_id.value.native),
    btoi
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:775
    // depositAmount: new UintN64(amount),
    frame_dig -2
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:773-776
    // this.deposit_record(depositKey).value = new DepositRecord({
    //   assetId: new UintN64(this.base_token_id.value.native),
    //   depositAmount: new UintN64(amount),
    // }).copy()
    swap
    concat
    box_put
    retsub

depositASA_else_body@7:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:669
    // const [highBits1, lowBits1] = mulw(this.circulating_lst.value, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:671
    // const lstRatio = divw(highBits1, lowBits1, this.total_deposits.value)
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:673
    // const [highBits2, lowBits2] = mulw(lstRatio, amount)
    frame_dig -2
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:674
    // return divw(highBits2, lowBits2, BASIS_POINTS)
    divw
    b depositASA_after_if_else@8

depositASA_bool_false@4:
    intc_0 // 0
    b depositASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawDeposit(assetTransferTxn: uint64, amount: uint64, lstAppId: uint64, mbrTxn: uint64) -> void:
withdrawDeposit:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:789-795
    // @abimethod({ allowActions: 'NoOp' })
    // withdrawDeposit(
    //   assetTransferTxn: gtxn.AssetTransferTxn,
    //   amount: uint64,
    //   lstAppId: uint64,
    //   mbrTxn: gtxn.PaymentTxn,
    // ): void {
    proto 4 0
    intc_0 // 0
    dup
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:796
    // const lstAsset = Asset(this.lst_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:797
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:798-802
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    frame_dig -4
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:799
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:798-802
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    ==
    bz withdrawDeposit_bool_false@4
    frame_dig -4
    gtxns XferAsset
    frame_dig 3
    ==
    bz withdrawDeposit_bool_false@4
    frame_dig -4
    gtxns AssetAmount
    frame_dig -3
    ==
    bz withdrawDeposit_bool_false@4
    intc_1 // 1

withdrawDeposit_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:798-802
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: lstAsset,
    //   assetAmount: amount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:804-806
    // assertMatch(mbrTxn, {
    //   amount: 3000,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:805
    // amount: 3000,
    pushint 3000 // 3000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:804-806
    // assertMatch(mbrTxn, {
    //   amount: 3000,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:808
    // const _interestSlice = this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:812
    // if (lstAppId === Global.currentApplicationId.id) {
    frame_dig -2
    global CurrentApplicationID
    ==
    bz withdrawDeposit_else_body@7
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:711
    // const [hi, lo] = mulw(totalDepositsExternal, amount)
    frame_dig -3
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:712
    // return divw(hi, lo, circulatingExternalLST)
    uncover 2
    divw

withdrawDeposit_after_if_else@8:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:817
    // this.removeCash(asaDue)
    dup
    callsub removeCash
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:819
    // assert(op.AssetHolding.assetBalance(Global.currentApplicationAddress, this.base_token_id.value.native)[0] >= asaDue)
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:819
    // assert(op.AssetHolding.assetBalance(Global.currentApplicationAddress, this.base_token_id.value.native)[0] >= asaDue)
    btoi
    asset_holding_get AssetBalance
    pop
    dig 1
    >=
    assert
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:820-827
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:822
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:823
    // xferAsset: this.base_token_id.value.native,
    btoi
    dig 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:820-826
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:820-827
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: asaDue,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:829
    // this.circulating_lst.value -= amount // LST burned
    frame_dig -3
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    bytec 8 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:829
    // this.circulating_lst.value -= amount // LST burned
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:830
    // this.total_deposits.value -= asaDue // ASA returned
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    bytec_3 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:830
    // this.total_deposits.value -= asaDue // ASA returned
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:831
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 12 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:831
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:833
    // assetId: new UintN64(this.base_token_id.value.native),
    btoi
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:834
    // userAddress: new Address(op.Txn.sender),
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:832-835
    // const depositKey = new DepositRecordKey({
    //   assetId: new UintN64(this.base_token_id.value.native),
    //   userAddress: new Address(op.Txn.sender),
    // })
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:179
    // deposit_record = BoxMap<DepositRecordKey, DepositRecord>({ keyPrefix: 'deposit_record' })
    bytec 50 // "deposit_record"
    swap
    concat
    dup
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:836
    // if (this.deposit_record(depositKey).exists) {
    box_len
    bury 1
    bz withdrawDeposit_after_if_else@14
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:837
    // const existingRecord = this.deposit_record(depositKey).value.copy()
    frame_dig 1
    box_get
    swap
    dup
    cover 2
    frame_bury 0
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:838
    // const newAmount: uint64 = existingRecord.depositAmount.native - amount
    intc_0 // 0
    extract_uint64
    frame_dig -3
    -
    dup
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:839
    // if (newAmount === 0) {
    bnz withdrawDeposit_else_body@12
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:840
    // this.deposit_record(depositKey).delete()
    frame_dig 1
    box_del
    pop

withdrawDeposit_after_if_else@14:
    retsub

withdrawDeposit_else_body@12:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:843
    // assetId: existingRecord.assetId,
    frame_dig 0
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:844
    // depositAmount: new UintN64(newAmount),
    frame_dig 2
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:842-845
    // this.deposit_record(depositKey).value = new DepositRecord({
    //   assetId: existingRecord.assetId,
    //   depositAmount: new UintN64(newAmount),
    // }).copy()
    swap
    concat
    frame_dig 1
    swap
    box_put
    retsub

withdrawDeposit_else_body@7:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:686-689
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 16 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:686-689
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:690-693
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 17 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:690-693
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:696
    // const [hi, lo] = mulw(totalDepositsExternal, amount)
    frame_dig -3
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:697
    // return divw(hi, lo, circulatingExternalLST)
    uncover 2
    divw
    b withdrawDeposit_after_if_else@8

withdrawDeposit_bool_false@4:
    intc_0 // 0
    b withdrawDeposit_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.borrow(assetTransferTxn: uint64, requestedLoanAmount: uint64, collateralAmount: uint64, lstApp: uint64, collateralTokenId: bytes, mbrTxn: uint64) -> void:
borrow:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:862-870
    // @abimethod({ allowActions: 'NoOp' })
    // borrow(
    //   assetTransferTxn: gtxn.AssetTransferTxn,
    //   requestedLoanAmount: uint64,
    //   collateralAmount: uint64,
    //   lstApp: uint64,
    //   collateralTokenId: UintN64,
    //   mbrTxn: gtxn.PaymentTxn,
    // ): void {
    proto 6 0
    intc_0 // 0
    pushbytes ""
    dupn 4
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:871
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 7 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:873
    // const hasLoan = this.loan_record(op.Txn.sender).exists
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:873
    // const hasLoan = this.loan_record(op.Txn.sender).exists
    box_len
    dup
    uncover 2
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:874
    // const _interestSlice = this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:876
    // if (hasLoan) {
    bz borrow_else_body@2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:877
    // const existingCollateral = this.getLoanRecord(op.Txn.sender).collateralAmount
    txn Sender
    callsub getLoanRecord
    pushint 40 // 40
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:878
    // collateralToUse = existingCollateral.native + collateralAmount
    extract_uint64
    frame_dig -4
    +
    frame_bury 1

borrow_after_if_else@3:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1935
    // assertMatch(mbrTxn, { amount: VALIDATE_BORROW_FEE })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:8
    // export const VALIDATE_BORROW_FEE: uint64 = 4_000
    pushint 4000 // 4000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1935
    // assertMatch(mbrTxn, { amount: VALIDATE_BORROW_FEE })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1937-1941
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: collateralAmount,
    //   xferAsset: Asset(collateralTokenId.native),
    // })
    frame_dig -6
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1938
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1937-1941
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: collateralAmount,
    //   xferAsset: Asset(collateralTokenId.native),
    // })
    ==
    bz borrow_bool_false@34
    frame_dig -6
    gtxns AssetAmount
    frame_dig -4
    ==
    bz borrow_bool_false@34
    frame_dig -6
    gtxns XferAsset
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1940
    // xferAsset: Asset(collateralTokenId.native),
    frame_dig -2
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1937-1941
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: collateralAmount,
    //   xferAsset: Asset(collateralTokenId.native),
    // })
    ==
    bz borrow_bool_false@34
    intc_1 // 1

borrow_bool_merge@35:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1937-1941
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   assetAmount: collateralAmount,
    //   xferAsset: Asset(collateralTokenId.native),
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:162
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 6 // "accepted_collaterals"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:546
    // return this.accepted_collaterals(key).exists
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1943
    // assert(this.collateralExists(collateralTokenId), 'unsupported collateral')
    assert // unsupported collateral
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:883
    // const collateralUSD = this.calculateCollateralValueUSD(collateralTokenId, collateralToUse, lstApp)
    frame_dig -2
    frame_dig 1
    frame_dig -3
    callsub calculateCollateralValueUSD
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:93
    // ltv_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 28 // "ltv_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:884
    // const maxBorrowUSD: uint64 = (collateralUSD * this.ltv_bps.value) / BASIS_POINTS
    *
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:884
    // const maxBorrowUSD: uint64 = (collateralUSD * this.ltv_bps.value) / BASIS_POINTS
    /
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:210
    // last_max_borrow = GlobalState<uint64>()
    bytec 47 // "last_max_borrow"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:885
    // this.last_max_borrow.value = maxBorrowUSD
    dig 1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:886
    // const baseTokenOraclePrice: uint64 = this.getOraclePrice(this.base_token_id.value)
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1995
    // const [rH, rL] = mulw(requestedLoanAmount, baseTokenOraclePrice)
    frame_dig -5
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1996
    // const requestedLoanUSD = divw(rH, rL, USD_MICRO_UNITS)
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:213
    // last_requested_loan = GlobalState<uint64>()
    bytec 48 // "last_requested_loan"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1999
    // this.last_requested_loan.value = requestedLoanUSD
    dig 1
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2001
    // assert(requestedLoanUSD <= maxBorrowUSD, 'exceeds LTV limit')
    >=
    assert // exceeds LTV limit
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:108
    // util_cap_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 29 // "util_cap_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2013
    // const [h, l] = mulw(this.total_deposits.value, this.util_cap_bps.value)
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2014
    // return divw(h, l, BASIS_POINTS)
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2003
    // assert(this.total_borrows.value + requestedLoanAmount <= capBorrow, 'UTIL_CAP_EXCEEDED')
    frame_dig -5
    +
    >=
    assert // UTIL_CAP_EXCEEDED
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:890
    // let userTier: UintN64 = new UintN64(0)
    bytec 34 // 0x0000000000000000
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:86
    // flux_oracle_app = GlobalState<Application>()
    intc_0 // 0
    bytec 33 // "flux_oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:891
    // if (this.flux_oracle_app.value.id !== 0) {
    bz borrow_after_if_else@6
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:892-899
    // userTier = abiCall(FluxGateStub.prototype.getUserTier, {
    //   appId: this.flux_oracle_app.value.id,
    //   args: [new Address(op.Txn.sender)],
    //   sender: Global.currentApplicationAddress,
    //   fee: STANDARD_TXN_FEE,
    //   apps: [this.flux_oracle_app.value],
    //   accounts: [op.Txn.sender],
    // }).returnValue
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:86
    // flux_oracle_app = GlobalState<Application>()
    intc_0 // 0
    bytec 33 // "flux_oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:895
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:86
    // flux_oracle_app = GlobalState<Application>()
    intc_0 // 0
    bytec 33 // "flux_oracle_app"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:898
    // accounts: [op.Txn.sender],
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:894
    // args: [new Address(op.Txn.sender)],
    dup
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:892-899
    // userTier = abiCall(FluxGateStub.prototype.getUserTier, {
    //   appId: this.flux_oracle_app.value.id,
    //   args: [new Address(op.Txn.sender)],
    //   sender: Global.currentApplicationAddress,
    //   fee: STANDARD_TXN_FEE,
    //   apps: [this.flux_oracle_app.value],
    //   accounts: [op.Txn.sender],
    // }).returnValue
    pushbytes 0xd4d7aa5c // method "getUserTier(address)uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field Accounts
    itxn_field Applications
    itxn_field Sender
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:892-899
    // userTier = abiCall(FluxGateStub.prototype.getUserTier, {
    //   appId: this.flux_oracle_app.value.id,
    //   args: [new Address(op.Txn.sender)],
    //   sender: Global.currentApplicationAddress,
    //   fee: STANDARD_TXN_FEE,
    //   apps: [this.flux_oracle_app.value],
    //   accounts: [op.Txn.sender],
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    frame_bury 0
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix

borrow_after_if_else@6:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:901
    // const calculatedFee = this.computeFees(requestedLoanAmount, userTier.native)
    frame_dig 0
    btoi
    dup
    frame_bury 5
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:99
    // origination_fee_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 40 // "origination_fee_bps"
    app_global_get_ex
    swap
    frame_bury 4
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1022
    // if (userTier === 1) {
    intc_1 // 1
    ==
    bz borrow_else_body@17
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1023
    // const [hi, lo] = mulw(initialFee, 90)
    frame_dig 4
    pushint 90 // 90
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1024
    // effectiveFeeBps = divw(hi, lo, 100)
    pushint 100 // 100
    divw
    frame_bury 3

borrow_after_if_else@26:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1036
    // const [feeHi, feeLo] = mulw(depositAmount, effectiveFeeBps)
    frame_dig -5
    frame_dig 3
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1037
    // const fee: uint64 = divw(feeHi, feeLo, 10_000)
    intc 4 // 10000
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2024
    // const disbursement: uint64 = requestedAmount - calculatedFee
    frame_dig -5
    dig 1
    -
    dup
    cover 2
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 15 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2026
    // this.fee_pool.value += calculatedFee
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    bytec 15 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2026
    // this.fee_pool.value += calculatedFee
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:207
    // last_scaled_down_disbursement = GlobalState<uint64>()
    bytec 43 // "last_scaled_down_disbursement"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2027
    // this.last_scaled_down_disbursement.value = disbursement
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:905
    // if (hasLoan) {
    frame_dig 6
    bz borrow_else_body@8
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:907
    // op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2051
    // const existingLoan = this.getLoanRecord(borrower)
    dup
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2053
    // const liveDebt: uint64 = this.syncBorrowerSnapshot(borrower)
    dig 1
    callsub syncBorrowerSnapshot
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2061
    // const newDebt: uint64 = liveDebt + disbursement
    frame_dig 2
    dup
    cover 3
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2066
    // collateralTokenId: existingLoan.collateralTokenId,
    dig 1
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2067
    // collateralAmount: new UintN64(existingLoan.collateralAmount.native + collateralAmount),
    uncover 2
    pushint 40 // 40
    extract_uint64
    frame_dig -4
    +
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2070
    // amount: new UintN64(disbursement),
    uncover 4
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2071
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2069-2073
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // borrow
    // }),
    swap
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2072
    // changeType: new UintN8(0), // borrow
    bytec 27 // 0x00
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2069-2073
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // borrow
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2074
    // principal: new UintN64(newDebt),
    uncover 4
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2075
    // userIndexWad: new UintN64(this.borrow_index_wad.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2064-2076
    // this.loan_record(borrower).value = new LoanRecord({
    //   borrowerAddress: new Address(borrower.bytes),
    //   collateralTokenId: existingLoan.collateralTokenId,
    //   collateralAmount: new UintN64(existingLoan.collateralAmount.native + collateralAmount),
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(disbursement),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(0), // borrow
    //   }),
    //   principal: new UintN64(newDebt),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    // }).copy()
    dig 6
    uncover 6
    concat
    uncover 5
    concat
    uncover 3
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 7 // "loan_record"
    uncover 2
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2064-2076
    // this.loan_record(borrower).value = new LoanRecord({
    //   borrowerAddress: new Address(borrower.bytes),
    //   collateralTokenId: existingLoan.collateralTokenId,
    //   collateralAmount: new UintN64(existingLoan.collateralAmount.native + collateralAmount),
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(disbursement),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(0), // borrow
    //   }),
    //   principal: new UintN64(newDebt),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    // }).copy()
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2079
    // this.updateCollateralTotal(collateralTokenId, collateralAmount)
    frame_dig -2
    frame_dig -4
    callsub updateCollateralTotal

borrow_after_if_else@9:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:920
    // this.disburseFunds(op.Txn.sender, disbursement)
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2087-2094
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2090
    // xferAsset: this.base_token_id.value.native,
    btoi
    frame_dig 2
    dup
    cover 2
    itxn_field AssetAmount
    itxn_field XferAsset
    swap
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2087-2093
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2087-2094
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: amount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:921
    // this.removeCash(disbursement)
    dup
    callsub removeCash
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:922
    // this.total_borrows.value = this.total_borrows.value + disbursement
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:922
    // this.total_borrows.value = this.total_borrows.value + disbursement
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:923
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 12 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:923
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    retsub

borrow_else_body@8:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:916
    // this.mintLoanRecord(disbursement, collateralTokenId, op.Txn.sender, collateralAmount)
    txn Sender
    frame_dig 2
    frame_dig -2
    uncover 2
    frame_dig -4
    callsub mintLoanRecord
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:917
    // this.updateCollateralTotal(collateralTokenId, collateralAmount)
    frame_dig -2
    frame_dig -4
    callsub updateCollateralTotal
    b borrow_after_if_else@9

borrow_else_body@17:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1025
    // } else if (userTier === 2) {
    frame_dig 5
    pushint 2 // 2
    ==
    bz borrow_else_body@19
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1026
    // const [hi, lo] = mulw(initialFee, 75)
    frame_dig 4
    pushint 75 // 75
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1027
    // effectiveFeeBps = divw(hi, lo, 100)
    pushint 100 // 100
    divw
    frame_bury 3
    b borrow_after_if_else@26

borrow_else_body@19:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1028
    // } else if (userTier === 3) {
    frame_dig 5
    pushint 3 // 3
    ==
    bz borrow_else_body@21
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1029
    // const [hi, lo] = mulw(initialFee, 50)
    frame_dig 4
    pushint 50 // 50
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1030
    // effectiveFeeBps = divw(hi, lo, 100)
    pushint 100 // 100
    divw
    frame_bury 3
    b borrow_after_if_else@26

borrow_else_body@21:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1031
    // } else if (userTier >= 4) {
    frame_dig 5
    intc_3 // 4
    >=
    frame_dig 4
    frame_bury 3
    bz borrow_after_if_else@26
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1032
    // const [hi, lo] = mulw(initialFee, 25)
    frame_dig 4
    pushint 25 // 25
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1033
    // effectiveFeeBps = divw(hi, lo, 100)
    pushint 100 // 100
    divw
    frame_bury 3
    b borrow_after_if_else@26

borrow_bool_false@34:
    intc_0 // 0
    b borrow_bool_merge@35

borrow_else_body@2:
    frame_dig -4
    frame_bury 1
    b borrow_after_if_else@3


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.mintLoanRecord(disbursement: uint64, collateralTokenId: bytes, borrowerAddress: bytes, collateralAmount: uint64) -> void:
mintLoanRecord:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:933-938
    // private mintLoanRecord(
    //   disbursement: uint64,
    //   collateralTokenId: UintN64,
    //   borrowerAddress: Account,
    //   collateralAmount: uint64,
    // ): void {
    proto 4 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:944
    // collateralAmount: new UintN64(collateralAmount),
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:947
    // amount: new UintN64(disbursement),
    frame_dig -4
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:948
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:946-950
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // borrow
    // }),
    dig 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:949
    // changeType: new UintN8(0), // borrow
    bytec 27 // 0x00
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:946-950
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(disbursement),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(0), // borrow
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:952
    // userIndexWad: new UintN64(this.borrow_index_wad.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:941-953
    // this.loan_record(borrowerAddress).value = new LoanRecord({
    //   borrowerAddress: new Address(borrowerAddress.bytes),
    //   collateralTokenId,
    //   collateralAmount: new UintN64(collateralAmount),
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(disbursement),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(0), // borrow
    //   }),
    //   principal: new UintN64(disbursement),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    // }).copy()
    frame_dig -2
    frame_dig -3
    concat
    uncover 5
    concat
    uncover 2
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 7 // "loan_record"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:941-953
    // this.loan_record(borrowerAddress).value = new LoanRecord({
    //   borrowerAddress: new Address(borrowerAddress.bytes),
    //   collateralTokenId,
    //   collateralAmount: new UintN64(collateralAmount),
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(disbursement),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(0), // borrow
    //   }),
    //   principal: new UintN64(disbursement),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    // }).copy()
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:168
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:955
    // this.active_loan_records.value = this.active_loan_records.value + 1
    intc_1 // 1
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:168
    // active_loan_records = GlobalState<uint64>()
    bytec 9 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:955
    // this.active_loan_records.value = this.active_loan_records.value + 1
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueLoanInterest(debtor: bytes, templateReserveAddress: bytes) -> void:
accrueLoanInterest:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:958-959
    // @abimethod({ allowActions: 'NoOp' })
    // accrueLoanInterest(debtor: Account, templateReserveAddress: Account): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 7 // "loan_record"
    frame_dig -2
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:960
    // assert(this.loan_record(debtor).exists, 'Loan record does not exist')
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:961
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:962
    // this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:964
    // this.syncBorrowerSnapshot(debtor)
    frame_dig -2
    callsub syncBorrowerSnapshot
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:966
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 12 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:966
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.current_apr_bps() -> uint64:
current_apr_bps:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1046
    // public current_apr_bps(): uint64 {
    proto 0 1
    pushbytes ""
    dupn 6
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    swap
    dup
    uncover 2
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    swap
    cover 2
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:108
    // util_cap_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 29 // "util_cap_bps"
    app_global_get_ex
    swap
    cover 2
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:978
    // if (D === 0) return 0
    bnz current_apr_bps_after_if_else@14
    intc_0 // 0
    frame_bury 0

current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.util_norm_bps@17:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:134
    // rate_model_type = GlobalState<uint64>()
    intc_0 // 0
    bytec 35 // "rate_model_type"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1053
    // const apr = this.rate_model_type.value === 0 ? this.apr_bps_kinked(U_used) : this.base_bps.value // Fixed APR fallback
    bnz current_apr_bps_ternary_false@2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:105
    // base_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 23 // "base_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:111
    // kink_norm_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 36 // "kink_norm_bps"
    app_global_get_ex
    swap
    dup
    cover 2
    cover 3
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:114
    // slope1_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 37 // "slope1_bps"
    app_global_get_ex
    swap
    frame_bury 5
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:117
    // slope2_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 38 // "slope2_bps"
    app_global_get_ex
    swap
    frame_bury 6
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1003
    // if (U_norm_bps <= kink_norm_bps) {
    frame_dig 0
    >=
    bz current_apr_bps_else_body@6
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1004
    // const [hi1, lo1] = mulw(slope1_bps, U_norm_bps)
    frame_dig 5
    frame_dig 0
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1005
    // apr = base_bps + divw(hi1, lo1, kink_norm_bps)
    uncover 3
    divw
    +
    frame_bury 1

current_apr_bps_after_if_else@7:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:120
    // max_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 21 // "max_apr_bps"
    app_global_get_ex
    swap
    dup
    cover 2
    frame_bury 4
    assert // check GlobalState exists
    frame_dig 1
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1014
    // if (maxCap > 0 && apr > maxCap) apr = maxCap
    bz current_apr_bps_after_if_else@10
    frame_dig 1
    dup
    frame_dig 4
    >
    swap
    frame_bury 2
    bz current_apr_bps_after_if_else@10
    frame_dig 4
    frame_bury 2

current_apr_bps_after_if_else@10:
    frame_dig 2
    frame_bury 1

current_apr_bps_ternary_merge@3:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:128
    // prev_apr_bps = GlobalState<uint64>()
    bytec 30 // "prev_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1065
    // this.prev_apr_bps.value = apr
    frame_dig 1
    dup
    cover 2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1066
    // return apr
    frame_bury 0
    retsub

current_apr_bps_else_body@6:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1007
    // const over: uint64 = U_norm_bps - kink_norm_bps
    frame_dig 0
    uncover 2
    dup
    cover 2
    -
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1008
    // const denom: uint64 = BASIS_POINTS - kink_norm_bps
    uncover 2
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1009
    // const [hi2, lo2] = mulw(slope2_bps, over)
    frame_dig 6
    uncover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1010
    // apr = base_bps + slope1_bps + divw(hi2, lo2, denom)
    uncover 3
    frame_dig 5
    +
    cover 2
    uncover 3
    divw
    +
    frame_bury 1
    b current_apr_bps_after_if_else@7

current_apr_bps_ternary_false@2:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:105
    // base_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 23 // "base_bps"
    app_global_get_ex
    assert // check GlobalState exists
    frame_bury 1
    b current_apr_bps_ternary_merge@3

current_apr_bps_after_if_else@14:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:981
    // const [hiCap, loCap] = mulw(D, cap_bps)
    frame_dig 7
    frame_dig 9
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:982
    // const capBorrow = divw(hiCap, loCap, BASIS_POINTS)
    divw
    dup
    frame_bury 3
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:983
    // if (capBorrow === 0) return 0
    bnz current_apr_bps_after_if_else@16
    intc_0 // 0
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1048
    // const U_raw: uint64 = this.util_norm_bps()
    b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.util_norm_bps@17

current_apr_bps_after_if_else@16:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:985
    // const cappedB = B <= capBorrow ? B : capBorrow
    frame_dig 8
    dup
    frame_dig 3
    dup
    cover 2
    <=
    dig 1
    uncover 3
    uncover 2
    select
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:986
    // const [hiN, loN] = mulw(cappedB, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:987
    // return divw(hiN, loN, capBorrow)
    uncover 2
    divw
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1048
    // const U_raw: uint64 = this.util_norm_bps()
    b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.util_norm_bps@17


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.currentDebtFromSnapshot(rec: bytes) -> uint64, bytes:
currentDebtFromSnapshot:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1095
    // private currentDebtFromSnapshot(rec: LoanRecord): uint64 {
    proto 1 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1096
    // const p: uint64 = rec.principal.native
    frame_dig -1
    pushint 73 // 73
    extract_uint64
    dup
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1097
    // if (p === 0) return 0
    bnz currentDebtFromSnapshot_after_if_else@2
    intc_0 // 0
    frame_dig -1
    uncover 2
    retsub

currentDebtFromSnapshot_after_if_else@2:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1098
    // const [hi, lo] = mulw(p, this.borrow_index_wad.value)
    frame_dig 0
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1099
    // return divw(hi, lo, rec.userIndexWad.native)
    frame_dig -1
    pushint 81 // 81
    extract_uint64
    divw
    frame_dig -1
    uncover 2
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.syncBorrowerSnapshot(borrower: bytes) -> uint64:
syncBorrowerSnapshot:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1108
    // private syncBorrowerSnapshot(borrower: Account): uint64 {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 7 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1109
    // const rec = this.loan_record(borrower).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1110
    // const liveDebt: uint64 = this.currentDebtFromSnapshot(rec)
    callsub currentDebtFromSnapshot
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1113
    // collateralTokenId: rec.collateralTokenId,
    dup
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1114
    // collateralAmount: rec.collateralAmount,
    dig 1
    extract 40 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1116
    // lastDebtChange: rec.lastDebtChange.copy(), // keep your audit trail
    uncover 3
    extract 48 17 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1117
    // principal: new UintN64(liveDebt),
    dig 4
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1118
    // userIndexWad: new UintN64(this.borrow_index_wad.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1111-1119
    // const newRec = new LoanRecord({
    //   borrowerAddress: new Address(borrower.bytes),
    //   collateralTokenId: rec.collateralTokenId,
    //   collateralAmount: rec.collateralAmount,
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: rec.lastDebtChange.copy(), // keep your audit trail
    //   principal: new UintN64(liveDebt),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    // })
    frame_dig -1
    uncover 6
    concat
    uncover 5
    concat
    uncover 3
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1120
    // this.loan_record(borrower).value = newRec.copy()
    uncover 2
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1121
    // return liveDebt
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.accrueMarket() -> uint64:
accrueMarket:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1130
    // private accrueMarket(): uint64 {
    proto 0 1
    pushbytes ""
    dupn 3
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1131
    // const now: uint64 = Global.latestTimestamp
    global LatestTimestamp
    dup
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:149
    // last_accrual_ts = GlobalState<uint64>()
    intc_0 // 0
    bytec 31 // "last_accrual_ts"
    app_global_get_ex
    swap
    dup
    cover 2
    cover 3
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1133
    // if (now <= last) return 0
    <=
    bz accrueMarket_after_if_else@2
    intc_0 // 0
    frame_bury 0
    retsub

accrueMarket_after_if_else@2:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1135
    // const deltaT: uint64 = now - last
    frame_dig 4
    frame_dig 5
    -
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1077
    // if (deltaT === 0) return 0
    bnz accrueMarket_after_if_else@9
    intc_0 // 0
    frame_bury 2

accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.sliceFactorWad@10:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:225
    // calculateledSimpleWad = GlobalState<uint64>() // debug variable to track last calculated simple wad
    pushbytes "calculateledSimpleWad"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1145
    // this.calculateledSimpleWad.value = simpleWad
    frame_dig 2
    dup
    cover 2
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1146
    // if (simpleWad === 0) {
    bnz accrueMarket_after_if_else@4
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:149
    // last_accrual_ts = GlobalState<uint64>()
    bytec 31 // "last_accrual_ts"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1147
    // this.last_accrual_ts.value = now
    frame_dig 4
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1148
    // return 0
    intc_0 // 0
    frame_bury 0
    retsub

accrueMarket_after_if_else@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1154
    // const [hiI, loI] = mulw(oldIndex, simpleWad)
    dup
    frame_dig 2
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:11
    // export const INDEX_SCALE: uint64 = 1_000_000_000_000 // 1e12
    intc 6 // 1000000000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1155
    // const incrIndex: uint64 = divw(hiI, loI, INDEX_SCALE)
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1156
    // const newIndex: uint64 = oldIndex + incrIndex
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    bytec 11 // "borrow_index_wad"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1157
    // this.borrow_index_wad.value = newIndex
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    swap
    dup
    cover 2
    frame_bury 3
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1163
    // let interest: uint64 = 0
    intc_0 // 0
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1164
    // if (totalBefore > 0) {
    bz accrueMarket_after_if_else@6
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1165
    // const [hiB, loB] = mulw(totalBefore, simpleWad)
    frame_dig 3
    frame_dig 2
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:11
    // export const INDEX_SCALE: uint64 = 1_000_000_000_000 // 1e12
    intc 6 // 1000000000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1166
    // interest = divw(hiB, loB, INDEX_SCALE)
    divw
    frame_bury 1

accrueMarket_after_if_else@6:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:102
    // protocol_share_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 41 // "protocol_share_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1171
    // const deposBps: uint64 = BASIS_POINTS - protoBps
    swap
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1174
    // const [hiD, loD] = mulw(interest, deposBps)
    frame_dig 1
    dup
    uncover 2
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1175
    // const depositorInterest: uint64 = divw(hiD, loD, BASIS_POINTS)
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1176
    // const protocolInterest: uint64 = interest - depositorInterest
    dup2
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1180
    // this.total_borrows.value = totalBefore + interest
    frame_dig 3
    dig 3
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1180
    // this.total_borrows.value = totalBefore + interest
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:221
    // last_interest_applied = GlobalState<uint64>() // last interest application timestamp (ledger seconds)
    pushbytes "last_interest_applied"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1181
    // this.last_interest_applied.value = interest
    dig 3
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1184
    // this.total_deposits.value += depositorInterest
    uncover 2
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    bytec_3 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1184
    // this.total_deposits.value += depositorInterest
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 15 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1187
    // this.fee_pool.value += protocolInterest
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    bytec 15 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1187
    // this.fee_pool.value += protocolInterest
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:149
    // last_accrual_ts = GlobalState<uint64>()
    bytec 31 // "last_accrual_ts"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1190
    // this.last_accrual_ts.value = now
    frame_dig 4
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1194
    // return interest
    frame_bury 0
    retsub

accrueMarket_after_if_else@9:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 12 // "last_apr_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1080
    // const [h1, l1] = mulw(this.last_apr_bps.value, deltaT)
    frame_dig 0
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:13
    // export const SECONDS_PER_YEAR: uint64 = 365 * 24 * 60 * 60
    pushint 31536000 // 31536000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1082
    // const tmp2: uint64 = divw(h1, l1, SECONDS_PER_YEAR)
    divw
    // smart_contracts/orbital_lending/config.algo.ts:11
    // export const INDEX_SCALE: uint64 = 1_000_000_000_000 // 1e12
    intc 6 // 1000000000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1085
    // const [h2, l2] = mulw(INDEX_SCALE, tmp2)
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1086
    // const simpleWad: uint64 = divw(h2, l2, BASIS_POINTS)
    divw
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1144
    // const simpleWad: uint64 = this.sliceFactorWad(deltaT)
    b accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.sliceFactorWad@10


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanRecord(borrowerAddress: bytes) -> bytes:
getLoanRecord:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1202
    // getLoanRecord(borrowerAddress: Account): LoanRecord {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 7 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1203
    // return this.loan_record(borrowerAddress).value
    box_get
    assert // Box must have value
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.repayLoanASA(assetTransferTxn: uint64, repaymentAmount: uint64) -> void:
repayLoanASA:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1215-1216
    // @abimethod({ allowActions: 'NoOp' })
    // repayLoanASA(assetTransferTxn: gtxn.AssetTransferTxn, repaymentAmount: uint64): void {
    proto 2 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1217
    // const baseToken = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1218
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1219-1223
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: repaymentAmount,
    // })
    frame_dig -2
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1220
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1219-1223
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: repaymentAmount,
    // })
    ==
    bz repayLoanASA_bool_false@4
    frame_dig -2
    gtxns XferAsset
    frame_dig 1
    ==
    bz repayLoanASA_bool_false@4
    frame_dig -2
    gtxns AssetAmount
    frame_dig -1
    ==
    bz repayLoanASA_bool_false@4
    intc_1 // 1

repayLoanASA_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1219-1223
    // assertMatch(assetTransferTxn, {
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: baseToken,
    //   assetAmount: repaymentAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1224
    // const _interestSlice = this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1225
    // const loanRecord = this.getLoanRecord(op.Txn.sender)
    txn Sender
    callsub getLoanRecord
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1227
    // const rec = this.getLoanRecord(op.Txn.sender)
    txn Sender
    callsub getLoanRecord
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1228
    // const liveDebt: uint64 = this.currentDebtFromSnapshot(rec)
    callsub currentDebtFromSnapshot
    swap
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1230
    // assert(repaymentAmount <= liveDebt)
    frame_dig -1
    dig 1
    <=
    assert
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1232
    // const remainingDebt: uint64 = liveDebt - repaymentAmount
    frame_dig -1
    -
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1235
    // this.total_borrows.value -= repaymentAmount
    frame_dig -1
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1235
    // this.total_borrows.value -= repaymentAmount
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1236
    // this.addCash(repaymentAmount)
    frame_dig -1
    callsub addCash
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1238
    // if (remainingDebt === 0) {
    bnz repayLoanASA_else_body@8
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 7 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1239
    // this.loan_record(op.Txn.sender).delete()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1239
    // this.loan_record(op.Txn.sender).delete()
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:168
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1240
    // this.active_loan_records.value -= 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:168
    // active_loan_records = GlobalState<uint64>()
    bytec 9 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1240
    // this.active_loan_records.value -= 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1242-1249
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: rec.collateralTokenId.native,
    //     assetAmount: rec.collateralAmount.native,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1244
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1245
    // xferAsset: rec.collateralTokenId.native,
    swap
    dup
    pushint 32 // 32
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1246
    // assetAmount: rec.collateralAmount.native,
    swap
    pushint 40 // 40
    extract_uint64
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1242-1248
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: rec.collateralTokenId.native,
    //     assetAmount: rec.collateralAmount.native,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1242-1249
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: rec.collateralTokenId.native,
    //     assetAmount: rec.collateralAmount.native,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    retsub

repayLoanASA_else_body@8:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1253
    // borrowerAddress: new Address(op.Txn.sender.bytes),
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1254
    // collateralTokenId: rec.collateralTokenId,
    swap
    dup
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1255
    // collateralAmount: rec.collateralAmount,
    swap
    extract 40 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1258
    // amount: new UintN64(repaymentAmount),
    frame_dig -1
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1259
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1257-1261
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(repaymentAmount),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(2), // repay
    // }),
    swap
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1260
    // changeType: new UintN8(2), // repay
    pushbytes 0x02
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1257-1261
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(repaymentAmount),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(2), // repay
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1262
    // principal: new UintN64(remainingDebt),
    frame_dig 0
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1263
    // userIndexWad: new UintN64(this.borrow_index_wad.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1252-1264
    // this.loan_record(op.Txn.sender).value = new LoanRecord({
    //   borrowerAddress: new Address(op.Txn.sender.bytes),
    //   collateralTokenId: rec.collateralTokenId,
    //   collateralAmount: rec.collateralAmount,
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(repaymentAmount),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(2), // repay
    //   }),
    //   principal: new UintN64(remainingDebt),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    // }).copy()
    uncover 6
    uncover 6
    concat
    uncover 5
    concat
    uncover 3
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 7 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1252
    // this.loan_record(op.Txn.sender).value = new LoanRecord({
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1252-1264
    // this.loan_record(op.Txn.sender).value = new LoanRecord({
    //   borrowerAddress: new Address(op.Txn.sender.bytes),
    //   collateralTokenId: rec.collateralTokenId,
    //   collateralAmount: rec.collateralAmount,
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(repaymentAmount),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(2), // repay
    //   }),
    //   principal: new UintN64(remainingDebt),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    // }).copy()
    swap
    box_put
    retsub

repayLoanASA_bool_false@4:
    intc_0 // 0
    b repayLoanASA_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawPlatformFees(paymentReceiver: bytes, feeTxn: uint64) -> void:
withdrawPlatformFees:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1273-1274
    // @abimethod({ allowActions: 'NoOp' })
    // public withdrawPlatformFees(paymentReceiver: Account, feeTxn: gtxn.PaymentTxn): void {
    proto 2 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1275
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1275
    // assert(op.Txn.sender === this.admin_account.value, 'UNAUTHORIZED')
    ==
    assert // UNAUTHORIZED
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1276
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1277-1280
    // assertMatch(feeTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: STANDARD_TXN_FEE,
    // })
    frame_dig -1
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1278
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1277-1280
    // assertMatch(feeTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: STANDARD_TXN_FEE,
    // })
    ==
    bz withdrawPlatformFees_bool_false@3
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1277-1280
    // assertMatch(feeTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: STANDARD_TXN_FEE,
    // })
    ==
    bz withdrawPlatformFees_bool_false@3
    intc_1 // 1

withdrawPlatformFees_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1277-1280
    // assertMatch(feeTxn, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: STANDARD_TXN_FEE,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 15 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:187
    // current_accumulated_commission = GlobalState<uint64>()
    intc_0 // 0
    bytec 19 // "current_accumulated_commission"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1281
    // const payout: uint64 = this.fee_pool.value + this.current_accumulated_commission.value
    +
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1282
    // if (payout > 0) {
    bz withdrawPlatformFees_after_if_else@7
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1283-1290
    // itxn
    //   .assetTransfer({
    //     assetReceiver: paymentReceiver,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: payout,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1286
    // xferAsset: this.base_token_id.value.native,
    btoi
    frame_dig 0
    dup
    cover 2
    itxn_field AssetAmount
    itxn_field XferAsset
    frame_dig -2
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1283-1289
    // itxn
    //   .assetTransfer({
    //     assetReceiver: paymentReceiver,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: payout,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1283-1290
    // itxn
    //   .assetTransfer({
    //     assetReceiver: paymentReceiver,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: payout,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1292
    // this.removeCash(payout)
    callsub removeCash
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    bytec 15 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1293
    // this.fee_pool.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:187
    // current_accumulated_commission = GlobalState<uint64>()
    bytec 19 // "current_accumulated_commission"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1294
    // this.current_accumulated_commission.value = 0
    intc_0 // 0
    app_global_put

withdrawPlatformFees_after_if_else@7:
    retsub

withdrawPlatformFees_bool_false@3:
    intc_0 // 0
    b withdrawPlatformFees_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.buyoutSplitASA(buyer: bytes, debtor: bytes, premiumAxferTxn: uint64, repayAxferTxn: uint64, lstAppId: uint64, mbrTxn: uint64) -> void:
buyoutSplitASA:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1307-1315
    // @abimethod({ allowActions: 'NoOp' })
    // public buyoutSplitASA(
    //   buyer: Account,
    //   debtor: Account,
    //   premiumAxferTxn: gtxn.AssetTransferTxn, // buyout token (xUSD) PREMIUM
    //   repayAxferTxn: gtxn.AssetTransferTxn, // BASE TOKEN (ASA) full DEBT
    //   lstAppId: uint64, // LST app backing the collateral
    //   mbrTxn: gtxn.PaymentTxn,
    // ): void {
    proto 6 0
    pushbytes ""
    dupn 6
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 7 // "loan_record"
    frame_dig -5
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1316
    // assert(this.loan_record(debtor).exists, 'NO_LOAN_RECORD')
    box_len
    bury 1
    assert // NO_LOAN_RECORD
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1317
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1319-1321
    // assertMatch(mbrTxn, {
    //   amount: BUYOUT_MBR,
    // })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:16
    // export const BUYOUT_MBR: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1319-1321
    // assertMatch(mbrTxn, {
    //   amount: BUYOUT_MBR,
    // })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1324
    // this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1327
    // const rec = this.loan_record(debtor).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1328
    // const collateralAmount: uint64 = rec.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1329
    // const collateralTokenId: UintN64 = rec.collateralTokenId
    dup
    extract 32 8 // on error: Index access is out of bounds
    dup
    cover 2
    cover 3
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1332
    // const debtBase: uint64 = this.currentDebtFromSnapshot(rec)
    callsub currentDebtFromSnapshot
    pop
    dup
    cover 3
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1333
    // assert(debtBase > 0, 'NO_DEBT')
    dup
    assert // NO_DEBT
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1336
    // const collateralUSD: uint64 = this.calculateCollateralValueUSD(collateralTokenId, collateralAmount, lstAppId)
    swap
    uncover 2
    frame_dig -2
    callsub calculateCollateralValueUSD
    dup
    uncover 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1337
    // const debtUSDv: uint64 = this.debtUSD(debtBase)
    callsub debtUSD
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1338
    // assert(debtUSDv > 0, 'BAD_DEBT_USD')
    dup
    assert // BAD_DEBT_USD
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1341
    // const [hCR, lCR] = mulw(collateralUSD, BASIS_POINTS)
    swap
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1341
    // const [hCR, lCR] = mulw(collateralUSD, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1342
    // const CR_bps: uint64 = divw(hCR, lCR, debtUSDv)
    uncover 2
    divw
    dup
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1345
    // let premiumRateBps: uint64 = 0
    intc_0 // 0
    swap
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:96
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 22 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1346
    // if (CR_bps > this.liq_threshold_bps.value) {
    >
    bz buyoutSplitASA_after_if_else@2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1347
    // const [hR, lR] = mulw(CR_bps, BASIS_POINTS)
    frame_dig 13
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1347
    // const [hR, lR] = mulw(CR_bps, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:96
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 22 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1348
    // const ratio_bps: uint64 = divw(hR, lR, this.liq_threshold_bps.value) // > 10_000 if CR_bps > thresh
    divw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1349
    // premiumRateBps = ratio_bps - BASIS_POINTS
    -
    frame_bury 14

buyoutSplitASA_after_if_else@2:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1353
    // const [hP, lP] = mulw(collateralUSD, premiumRateBps)
    frame_dig 12
    frame_dig 14
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1354
    // const premiumUSD: uint64 = divw(hP, lP, BASIS_POINTS)
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:174
    // buyout_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 18 // "buyout_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1357
    // const buyoutTokenId: uint64 = this.buyout_token_id.value.native
    btoi
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:174
    // buyout_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 18 // "buyout_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1358
    // const buyoutTokenPrice: uint64 = this.getOraclePrice(this.buyout_token_id.value) // µUSD per token
    callsub getOraclePrice
    dup
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1361
    // const [hPT, lPT] = mulw(premiumUSD, USD_MICRO_UNITS)
    swap
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1361
    // const [hPT, lPT] = mulw(premiumUSD, USD_MICRO_UNITS)
    mulw
    frame_bury 4
    frame_bury 3
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1362
    // const premiumTokens: uint64 = buyoutTokenPrice === 0 ? 0 : divw(hPT, lPT, buyoutTokenPrice)
    bnz buyoutSplitASA_ternary_false@4
    intc_0 // 0
    frame_bury 5

buyoutSplitASA_ternary_merge@5:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1364
    // assert(premiumAxferTxn.assetReceiver === Global.currentApplicationAddress, 'INVALID_RECEIVER')
    frame_dig -4
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // INVALID_RECEIVER
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1365
    // assert(premiumAxferTxn.xferAsset === Asset(buyoutTokenId), 'INVALID_XFER_ASSET')
    frame_dig -4
    gtxns XferAsset
    frame_dig 1
    ==
    assert // INVALID_XFER_ASSET
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1366
    // assert(premiumAxferTxn.assetAmount >= premiumTokens, 'INVALID_BUYOUT_AMOUNT')
    frame_dig -4
    gtxns AssetAmount
    dup
    frame_dig 5
    dup
    cover 3
    >=
    assert // INVALID_BUYOUT_AMOUNT
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1369
    // const refund: uint64 = paidAmount - premiumTokens
    swap
    -
    frame_bury 6
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1372
    // const baseAssetId = this.base_token_id.value.native
    btoi
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1373-1378
    // assertMatch(repayAxferTxn, {
    //   sender: buyer,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(baseAssetId),
    //   assetAmount: debtBase, // full live debt
    // })
    frame_dig -3
    gtxns Sender
    frame_dig -6
    ==
    bz buyoutSplitASA_bool_false@10
    frame_dig -3
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1375
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1373-1378
    // assertMatch(repayAxferTxn, {
    //   sender: buyer,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(baseAssetId),
    //   assetAmount: debtBase, // full live debt
    // })
    ==
    bz buyoutSplitASA_bool_false@10
    frame_dig -3
    gtxns XferAsset
    frame_dig 0
    ==
    bz buyoutSplitASA_bool_false@10
    frame_dig -3
    gtxns AssetAmount
    frame_dig 11
    ==
    bz buyoutSplitASA_bool_false@10
    intc_1 // 1

buyoutSplitASA_bool_merge@11:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1373-1378
    // assertMatch(repayAxferTxn, {
    //   sender: buyer,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(baseAssetId),
    //   assetAmount: debtBase, // full live debt
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1381
    // this.loan_record(debtor).delete()
    frame_dig 7
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:168
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1382
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:168
    // active_loan_records = GlobalState<uint64>()
    bytec 9 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1382
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1384-1391
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1387
    // xferAsset: collateralTokenId.native,
    frame_dig 8
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1329
    // const collateralTokenId: UintN64 = rec.collateralTokenId
    pushint 32 // 32
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1387
    // xferAsset: collateralTokenId.native,
    extract_uint64
    frame_dig 9
    dup
    cover 2
    itxn_field AssetAmount
    itxn_field XferAsset
    frame_dig -6
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1384-1390
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1384-1391
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: collateralTokenId.native,
    //     assetAmount: collateralAmount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:162
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 6 // "accepted_collaterals"
    frame_dig 10
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1395
    // const acVal = this.accepted_collaterals(acKey).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1396
    // const updatedTotal: uint64 = acVal.totalCollateral.native - collateralAmount
    dup
    pushint 24 // 24
    extract_uint64
    uncover 3
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1398
    // assetId: acVal.assetId,
    dig 1
    extract 0 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1399
    // baseAssetId: acVal.baseAssetId,
    dig 2
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1400
    // totalCollateral: new UintN64(updatedTotal),
    uncover 2
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1401
    // marketBaseAssetId: acVal.marketBaseAssetId,
    dig 3
    extract 16 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1402
    // originatingAppId: acVal.originatingAppId,
    uncover 4
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1397-1403
    // this.accepted_collaterals(acKey).value = new AcceptedCollateral({
    //   assetId: acVal.assetId,
    //   baseAssetId: acVal.baseAssetId,
    //   totalCollateral: new UintN64(updatedTotal),
    //   marketBaseAssetId: acVal.marketBaseAssetId,
    //   originatingAppId: acVal.originatingAppId,
    // }).copy()
    uncover 4
    uncover 4
    concat
    uncover 2
    concat
    uncover 2
    concat
    swap
    concat
    box_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1406
    // this.total_borrows.value = this.total_borrows.value - debtBase
    frame_dig 11
    dup
    cover 2
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1406
    // this.total_borrows.value = this.total_borrows.value - debtBase
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1407
    // this.addCash(debtBase)
    callsub addCash
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1435
    // const halfPremium: uint64 = premiumTokens / 2
    frame_dig 5
    dup
    pushint 2 // 2
    /
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1437-1444
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: halfPremium,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    dig 1
    itxn_field AssetAmount
    frame_dig 1
    dup
    cover 3
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1437-1443
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: halfPremium,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1437-1444
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.admin_account.value,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: halfPremium,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1446-1453
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: premiumTokens - halfPremium, // cover odd token if any
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1450
    // assetAmount: premiumTokens - halfPremium, // cover odd token if any
    uncover 2
    swap
    -
    itxn_field AssetAmount
    itxn_field XferAsset
    frame_dig -5
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1446-1452
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: premiumTokens - halfPremium, // cover odd token if any
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1446-1453
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: premiumTokens - halfPremium, // cover odd token if any
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1412
    // if (refund > 0) {
    frame_dig 6
    bz buyoutSplitASA_after_if_else@15
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1413-1420
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: refund,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    frame_dig 6
    itxn_field AssetAmount
    frame_dig 1
    itxn_field XferAsset
    frame_dig -6
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1413-1419
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: refund,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1413-1420
    // itxn
    //   .assetTransfer({
    //     assetReceiver: buyer,
    //     xferAsset: buyoutTokenId,
    //     assetAmount: refund,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit

buyoutSplitASA_after_if_else@15:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1424
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 12 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1424
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    retsub

buyoutSplitASA_bool_false@10:
    intc_0 // 0
    b buyoutSplitASA_bool_merge@11

buyoutSplitASA_ternary_false@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1362
    // const premiumTokens: uint64 = buyoutTokenPrice === 0 ? 0 : divw(hPT, lPT, buyoutTokenPrice)
    frame_dig 3
    frame_dig 4
    frame_dig 2
    divw
    frame_bury 5
    b buyoutSplitASA_ternary_merge@5


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.debtUSD(debtBaseUnits: uint64) -> uint64:
debtUSD:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1461
    // private debtUSD(debtBaseUnits: uint64): uint64 {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1462
    // const baseTokenPrice: uint64 = this.getOraclePrice(this.base_token_id.value) // price of market base token
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1463
    // const [h, l] = mulw(debtBaseUnits, baseTokenPrice)
    frame_dig -1
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1464
    // return divw(h, l, USD_MICRO_UNITS) // micro-USD
    divw
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.maxWithdrawableCollateralLST(lstAppId: uint64) -> uint64:
maxWithdrawableCollateralLST:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1472-1473
    // @abimethod({ allowActions: 'NoOp' })
    // public maxWithdrawableCollateralLST(lstAppId: uint64): uint64 {
    proto 1 1
    intc_0 // 0
    pushbytes ""
    dup
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 7 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1474
    // assert(this.loan_record(op.Txn.sender).exists, 'NO_LOAN')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1474
    // assert(this.loan_record(op.Txn.sender).exists, 'NO_LOAN')
    box_len
    bury 1
    assert // NO_LOAN
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1475
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1476
    // this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 7 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1478
    // const rec = this.loan_record(op.Txn.sender).value.copy()
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1478
    // const rec = this.loan_record(op.Txn.sender).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1479
    // const collateral = this.getCollateral(rec.collateralTokenId)
    dup
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:162
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 6 // "accepted_collaterals"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:556
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1480
    // assert(collateral.originatingAppId.native === lstAppId, 'mismatched LST app')
    pushint 32 // 32
    extract_uint64
    frame_dig -1
    ==
    assert // mismatched LST app
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1482
    // const debtBase: uint64 = this.currentDebtFromSnapshot(rec)
    callsub currentDebtFromSnapshot
    swap
    dup
    cover 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1483
    // if (debtBase === 0) return rec.collateralAmount.native // all collateral is withdrawable if no debt
    bnz maxWithdrawableCollateralLST_after_if_else@2
    pushint 40 // 40
    extract_uint64
    frame_bury 0
    retsub

maxWithdrawableCollateralLST_after_if_else@2:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1487
    // rec.collateralTokenId,
    dup
    extract 32 8 // on error: Index access is out of bounds
    dup
    cover 2
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1488
    // rec.collateralAmount.native,
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1486-1490
    // const currCollatUSD: uint64 = this.calculateCollateralValueUSD(
    //   rec.collateralTokenId,
    //   rec.collateralAmount.native,
    //   lstAppId,
    // )
    frame_dig -1
    callsub calculateCollateralValueUSD
    dup
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1493
    // const debtUSDv: uint64 = this.debtUSD(debtBase)
    frame_dig 3
    callsub debtUSD
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1495
    // const [hReq, lReq] = mulw(debtUSDv, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:93
    // ltv_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 28 // "ltv_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1496
    // const requiredCollateralUSD: uint64 = divw(hReq, lReq, this.ltv_bps.value)
    divw
    dup
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1499
    // if (currCollatUSD <= requiredCollateralUSD) return 0
    <=
    bz maxWithdrawableCollateralLST_after_if_else@4
    intc_0 // 0
    frame_bury 0
    retsub

maxWithdrawableCollateralLST_after_if_else@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1502
    // const removableUSD: uint64 = currCollatUSD - requiredCollateralUSD
    frame_dig 1
    frame_dig 2
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1506-1509
    // const circulatingLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 16 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1506-1509
    // const circulatingLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1510-1513
    // const totalDeposits = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 17 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1510-1513
    // const totalDeposits = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:162
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 6 // "accepted_collaterals"
    frame_dig 0
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:556
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1517
    // const basePrice = this.getOraclePrice(ac.baseAssetId)
    extract 8 8 // on error: Index access is out of bounds
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1520
    // const [hU, lU] = mulw(removableUSD, USD_MICRO_UNITS)
    uncover 3
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1520
    // const [hU, lU] = mulw(removableUSD, USD_MICRO_UNITS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1521
    // const removableUnderlying: uint64 = divw(hU, lU, basePrice)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1524
    // const [hL, lL] = mulw(removableUnderlying, circulatingLST)
    uncover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1525
    // const removableLST: uint64 = divw(hL, lL, totalDeposits)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1527
    // return removableLST
    frame_bury 0
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.withdrawCollateral(amountLST: uint64, collateralTokenId: uint64, lstAppId: uint64) -> void:
withdrawCollateral:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1598-1599
    // @abimethod({ allowActions: 'NoOp' })
    // public withdrawCollateral(amountLST: uint64, collateralTokenId: uint64, lstAppId: uint64): void {
    proto 3 0
    intc_0 // 0
    pushbytes ""
    dup
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1600
    // assert(amountLST > 0, 'ZERO_AMOUNT')
    frame_dig -3
    assert // ZERO_AMOUNT
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1601
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1602
    // const borrower = op.Txn.sender
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 7 // "loan_record"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1602
    // const borrower = op.Txn.sender
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1603
    // assert(this.loan_record(borrower).exists, 'NO_LOAN')
    box_len
    bury 1
    assert // NO_LOAN
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1604
    // this.accrueMarket() // 1) make time current for everyone
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1605
    // const loan = this.loan_record(borrower).value.copy()
    dup
    box_get
    swap
    dup
    cover 2
    cover 3
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1607
    // assert(loan.collateralTokenId.native === collateralTokenId, 'WRONG_COLLATERAL')
    dup
    extract 32 8 // on error: Index access is out of bounds
    cover 2
    pushint 32 // 32
    extract_uint64
    frame_dig -2
    ==
    assert // WRONG_COLLATERAL
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1609
    // const acKey = new AcceptedCollateralKey({ assetId: new UintN64(collateralTokenId) })
    frame_dig -2
    itob
    dup
    cover 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:162
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 6 // "accepted_collaterals"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1610
    // assert(this.accepted_collaterals(acKey).exists, 'BAD_COLLATERAL')
    dup
    box_len
    bury 1
    assert // BAD_COLLATERAL
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1611
    // const acVal = this.accepted_collaterals(acKey).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1612
    // assert(acVal.originatingAppId.native === lstAppId, 'mismatched LST app')
    pushint 32 // 32
    extract_uint64
    frame_dig -1
    ==
    assert // mismatched LST app
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1537
    // assert(this.loan_record(borrower).exists, 'NO_LOAN')
    dup
    box_len
    bury 1
    assert // NO_LOAN
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1538
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1539
    // this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1541
    // const rec = this.loan_record(borrower).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1542
    // const collateral = this.getCollateral(rec.collateralTokenId)
    dup
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:162
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 6 // "accepted_collaterals"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:556
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1543
    // assert(collateral.originatingAppId.native === lstAppId, 'mismatched LST app')
    pushint 32 // 32
    extract_uint64
    frame_dig -1
    ==
    assert // mismatched LST app
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1544
    // const debtBase: uint64 = this.currentDebtFromSnapshot(rec)
    callsub currentDebtFromSnapshot
    swap
    dup
    cover 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1545
    // if (debtBase === 0) return rec.collateralAmount.native // all collateral is withdrawable if no debt
    bnz withdrawCollateral_after_if_else@4
    pushint 40 // 40
    extract_uint64

withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1615
    // assert(amountLST <= maxSafe, 'EXCEEDS_LIMITS')
    frame_dig -3
    >=
    assert // EXCEEDS_LIMITS
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1616
    // assert(amountLST < loan.collateralAmount.native, 'INSUFFICIENT_COLLATERAL')
    frame_dig 5
    dup
    pushint 40 // 40
    extract_uint64
    frame_dig -3
    dig 1
    <
    assert // INSUFFICIENT_COLLATERAL
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1617
    // const remainLST: uint64 = loan.collateralAmount.native - amountLST
    frame_dig -3
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1620-1627
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: collateralTokenId, // LST ASA
    //     assetAmount: amountLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    frame_dig -3
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    frame_dig 3
    dup
    cover 2
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1620-1626
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: collateralTokenId, // LST ASA
    //     assetAmount: amountLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1620-1627
    // itxn
    //   .assetTransfer({
    //     assetReceiver: borrower,
    //     xferAsset: collateralTokenId, // LST ASA
    //     assetAmount: amountLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1633
    // collateralAmount: new UintN64(remainLST),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1636
    // amount: new UintN64(amountLST),
    frame_dig -3
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1637
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1635-1639
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(amountLST),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(3), // 3 = collateral withdraw
    // }),
    swap
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1638
    // changeType: new UintN8(3), // 3 = collateral withdraw
    pushbytes 0x03
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1635-1639
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(amountLST),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(3), // 3 = collateral withdraw
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1640
    // principal: loan.principal, // unchanged
    dig 4
    extract 73 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1641
    // userIndexWad: loan.userIndexWad, // unchanged snapshot; no debt change here
    uncover 5
    extract 81 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1630-1642
    // const newRec = new LoanRecord({
    //   borrowerAddress: new Address(borrower.bytes),
    //   collateralTokenId: new UintN64(collateralTokenId),
    //   collateralAmount: new UintN64(remainLST),
    //   borrowedTokenId: this.base_token_id.value,
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(amountLST),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(3), // 3 = collateral withdraw
    //   }),
    //   principal: loan.principal, // unchanged
    //   userIndexWad: loan.userIndexWad, // unchanged snapshot; no debt change here
    // })
    uncover 5
    frame_dig 7
    concat
    uncover 5
    concat
    uncover 3
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1643
    // this.loan_record(borrower).value = newRec.copy()
    frame_dig 4
    swap
    box_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1646
    // this.reduceCollateralTotal(loan.collateralTokenId, amountLST)
    frame_dig 6
    frame_dig -3
    callsub reduceCollateralTotal
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1649
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 12 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1649
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    retsub

withdrawCollateral_after_if_else@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1549
    // rec.collateralTokenId,
    dup
    extract 32 8 // on error: Index access is out of bounds
    dup
    cover 2
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1550
    // rec.collateralAmount.native,
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1548-1552
    // const currCollatUSD: uint64 = this.calculateCollateralValueUSD(
    //   rec.collateralTokenId,
    //   rec.collateralAmount.native,
    //   lstAppId,
    // )
    frame_dig -1
    callsub calculateCollateralValueUSD
    dup
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1555
    // const debtUSDv: uint64 = this.debtUSD(debtBase)
    frame_dig 8
    callsub debtUSD
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1557
    // const [hReq, lReq] = mulw(debtUSDv, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:93
    // ltv_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 28 // "ltv_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1558
    // const requiredCollateralUSD: uint64 = divw(hReq, lReq, this.ltv_bps.value)
    divw
    dup
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1561
    // if (currCollatUSD <= requiredCollateralUSD) return 0
    <=
    bz withdrawCollateral_after_if_else@6
    intc_0 // 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1614
    // const maxSafe = this.maxWithdrawableCollateralLSTLocal(borrower, lstAppId)
    b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7

withdrawCollateral_after_if_else@6:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1564
    // const removableUSD: uint64 = currCollatUSD - requiredCollateralUSD
    frame_dig 1
    frame_dig 2
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1568-1571
    // const circulatingLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 16 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1568-1571
    // const circulatingLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1572-1575
    // const totalDeposits = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 17 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1572-1575
    // const totalDeposits = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:162
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 6 // "accepted_collaterals"
    frame_dig 0
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:556
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1579
    // const basePrice = this.getOraclePrice(ac.baseAssetId)
    extract 8 8 // on error: Index access is out of bounds
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1582
    // const [hU, lU] = mulw(removableUSD, USD_MICRO_UNITS)
    uncover 3
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1582
    // const [hU, lU] = mulw(removableUSD, USD_MICRO_UNITS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1583
    // const removableUnderlying: uint64 = divw(hU, lU, basePrice)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1586
    // const [hL, lL] = mulw(removableUnderlying, circulatingLST)
    uncover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1587
    // const removableLST: uint64 = divw(hL, lL, totalDeposits)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1614
    // const maxSafe = this.maxWithdrawableCollateralLSTLocal(borrower, lstAppId)
    b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.liquidatePartialASA(debtor: bytes, repayAxfer: uint64, repayBaseAmount: uint64, lstAppId: uint64) -> void:
liquidatePartialASA:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1733-1739
    // @abimethod({ allowActions: 'NoOp' })
    // public liquidatePartialASA(
    //   debtor: Account,
    //   repayAxfer: gtxn.AssetTransferTxn, // liquidator pays base token (ASA)
    //   repayBaseAmount: uint64, // amount to repay in base units (≤ live debt)
    //   lstAppId: uint64, // LST app backing the collateral
    // ): void {
    proto 4 0
    intc_0 // 0
    pushbytes ""
    dupn 12
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 7 // "loan_record"
    frame_dig -4
    concat
    dupn 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1740
    // assert(this.loan_record(debtor).exists, 'NO_LOAN')
    box_len
    bury 1
    assert // NO_LOAN
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1741
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1742
    // this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1744
    // const rec = this.loan_record(debtor).value.copy()
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1745
    // const collTok: UintN64 = rec.collateralTokenId
    dup
    extract 32 8 // on error: Index access is out of bounds
    swap
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1746
    // const collLSTBal: uint64 = rec.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    swap
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1747
    // const liveDebt: uint64 = this.currentDebtFromSnapshot(rec)
    callsub currentDebtFromSnapshot
    swap
    dup
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1748
    // assert(liveDebt > 0, 'NO_DEBT')
    assert // NO_DEBT
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1749
    // assert(repayBaseAmount > 0 && repayBaseAmount <= liveDebt, 'BAD_REPAY')
    frame_dig -2
    bz liquidatePartialASA_bool_false@3
    frame_dig -2
    frame_dig 19
    <=
    bz liquidatePartialASA_bool_false@3
    intc_1 // 1

liquidatePartialASA_bool_merge@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1749
    // assert(repayBaseAmount > 0 && repayBaseAmount <= liveDebt, 'BAD_REPAY')
    assert // BAD_REPAY
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1752
    // const collateralUSD: uint64 = this.calculateCollateralValueUSD(collTok, collLSTBal, lstAppId)
    frame_dig 16
    frame_dig 17
    frame_dig -1
    callsub calculateCollateralValueUSD
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1753
    // const debtUSDv: uint64 = this.debtUSD(liveDebt)
    frame_dig 19
    callsub debtUSD
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1754
    // assert(debtUSDv > 0, 'BAD_DEBT_USD')
    dup
    assert // BAD_DEBT_USD
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1757
    // const [hCR, lCR] = mulw(collateralUSD, BASIS_POINTS)
    swap
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1757
    // const [hCR, lCR] = mulw(collateralUSD, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1758
    // const CR_bps: uint64 = divw(hCR, lCR, debtUSDv)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:96
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 22 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1759
    // assert(CR_bps <= this.liq_threshold_bps.value, 'NOT_LIQUIDATABLE')
    <=
    assert // NOT_LIQUIDATABLE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1762
    // const baseAssetId = this.base_token_id.value.native
    btoi
    frame_bury 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1763-1768
    // assertMatch(repayAxfer, {
    //   sender: op.Txn.sender,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(baseAssetId),
    //   assetAmount: repayBaseAmount,
    // })
    frame_dig -3
    gtxns Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1764
    // sender: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1763-1768
    // assertMatch(repayAxfer, {
    //   sender: op.Txn.sender,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(baseAssetId),
    //   assetAmount: repayBaseAmount,
    // })
    ==
    bz liquidatePartialASA_bool_false@9
    frame_dig -3
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1765
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1763-1768
    // assertMatch(repayAxfer, {
    //   sender: op.Txn.sender,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(baseAssetId),
    //   assetAmount: repayBaseAmount,
    // })
    ==
    bz liquidatePartialASA_bool_false@9
    frame_dig -3
    gtxns XferAsset
    frame_dig 1
    ==
    bz liquidatePartialASA_bool_false@9
    frame_dig -3
    gtxns AssetAmount
    frame_dig -2
    ==
    bz liquidatePartialASA_bool_false@9
    intc_1 // 1

liquidatePartialASA_bool_merge@10:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1763-1768
    // assertMatch(repayAxfer, {
    //   sender: op.Txn.sender,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(baseAssetId),
    //   assetAmount: repayBaseAmount,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1771
    // const basePrice = this.getOraclePrice(this.base_token_id.value) // µUSD
    callsub getOraclePrice
    frame_bury 2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1772
    // const closeFactorHalf: uint64 = liveDebt / 2
    frame_dig 19
    dup
    pushint 2 // 2
    /
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1773
    // const maxRepayAllowed: uint64 = closeFactorHalf > 0 ? closeFactorHalf : liveDebt
    swap
    dig 1
    uncover 2
    select
    dup
    frame_bury 5
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:177
    // liq_bonus_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 24 // "liq_bonus_bps"
    app_global_get_ex
    swap
    frame_bury 3
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1777
    // if (repayCandidate > maxRepayAllowed) {
    frame_dig -2
    <
    frame_dig -2
    frame_bury 9
    bz liquidatePartialASA_after_if_else@12
    frame_dig 5
    frame_bury 9

liquidatePartialASA_after_if_else@12:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1781
    // const [hRU, lRU] = mulw(repayCandidate, basePrice)
    frame_dig 9
    frame_dig 2
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1782
    // const repayUSD: uint64 = divw(hRU, lRU, USD_MICRO_UNITS)
    divw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1784
    // const [hSZ, lSZ] = mulw(repayUSD, BASIS_POINTS + bonusBps)
    frame_dig 3
    +
    dup
    frame_bury 13
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1785
    // const seizeUSD: uint64 = divw(hSZ, lSZ, BASIS_POINTS)
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:162
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 6 // "accepted_collaterals"
    frame_dig 16
    concat
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:556
    // return this.accepted_collaterals(key).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1666
    // const underlyingPrice = this.getOraclePrice(this.getCollateral(collateralTokenId).baseAssetId) // µUSD
    extract 8 8 // on error: Index access is out of bounds
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1667
    // const [hUnd, lUnd] = mulw(seizeUSD, USD_MICRO_UNITS)
    uncover 2
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1667
    // const [hUnd, lUnd] = mulw(seizeUSD, USD_MICRO_UNITS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1668
    // const seizeUnderlying: uint64 = divw(hUnd, lUnd, underlyingPrice)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:556
    // return this.accepted_collaterals(key).value.copy()
    swap
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1671
    // assert(collateral.originatingAppId.native === lstAppId, 'mismatched LST app')
    pushint 32 // 32
    extract_uint64
    frame_dig -1
    ==
    assert // mismatched LST app
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1674-1677
    // const circ = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 16 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1674-1677
    // const circ = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1678-1681
    // const total = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 17 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1678-1681
    // const total = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1682
    // const [hL, lL] = mulw(seizeUnderlying, circ)
    cover 2
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1683
    // let seizeLST: uint64 = divw(hL, lL, total)
    uncover 2
    divw
    dup
    frame_bury 12
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1685
    // if (seizeLST > availableLST) seizeLST = availableLST
    frame_dig 17
    >
    bz liquidatePartialASA_after_if_else@29
    frame_dig 17
    frame_bury 12

liquidatePartialASA_after_if_else@29:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1789
    // assert(seizeLST > 0, 'NOTHING_TO_SEIZE')
    frame_dig 12
    dup
    assert // NOTHING_TO_SEIZE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1696
    // if (seizeLST === 0) return 0
    bnz liquidatePartialASA_after_if_else@33
    intc_0 // 0
    frame_bury 10

liquidatePartialASA_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.repayBaseFromSeizedLST@34:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1792
    // if (repaySupported > liveDebt) {
    frame_dig 10
    frame_dig 19
    >
    bz liquidatePartialASA_after_if_else@14
    frame_dig 19
    frame_bury 10

liquidatePartialASA_after_if_else@14:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1796
    // if (seizeLST === collLSTBal) {
    frame_dig 12
    frame_dig 17
    ==
    bz liquidatePartialASA_after_if_else@16
    frame_dig -2
    frame_bury 9

liquidatePartialASA_after_if_else@16:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1801
    // const repayUsed: uint64 = repayCandidate <= repaySupported ? repayCandidate : repaySupported
    frame_dig 9
    dup
    frame_dig 10
    dup
    cover 2
    <=
    swap
    cover 2
    select
    dup
    frame_bury 11
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1802
    // assert(repayUsed > 0, 'ZERO_REPAY_USED')
    dup
    assert // ZERO_REPAY_USED
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1803
    // const refundAmount: uint64 = repayBaseAmount - repayUsed
    frame_dig -2
    dig 1
    -
    dup
    cover 2
    frame_bury 7
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1806-1813
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collTok.native,
    //     assetAmount: seizeLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1808
    // assetReceiver: op.Txn.sender,
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1809
    // xferAsset: collTok.native,
    frame_dig 15
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1745
    // const collTok: UintN64 = rec.collateralTokenId
    pushint 32 // 32
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1809
    // xferAsset: collTok.native,
    extract_uint64
    dup
    frame_bury 4
    frame_dig 12
    dup
    cover 3
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1806-1812
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collTok.native,
    //     assetAmount: seizeLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1806-1813
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: collTok.native,
    //     assetAmount: seizeLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1815
    // const remainingLST: uint64 = collLSTBal - seizeLST
    frame_dig 17
    dig 1
    -
    frame_bury 8
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1816
    // const newDebtBase: uint64 = liveDebt - repayUsed
    frame_dig 19
    dig 2
    -
    frame_bury 6
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1819
    // this.reduceCollateralTotal(collTok, seizeLST)
    frame_dig 16
    swap
    callsub reduceCollateralTotal
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1820
    // this.total_borrows.value = this.total_borrows.value - repayUsed
    dig 1
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1820
    // this.total_borrows.value = this.total_borrows.value - repayUsed
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1821
    // this.addCash(repayUsed)
    callsub addCash
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1823
    // if (refundAmount > 0) {
    bz liquidatePartialASA_after_if_else@20
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1824-1831
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: baseAssetId,
    //     assetAmount: refundAmount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1826
    // assetReceiver: op.Txn.sender,
    txn Sender
    frame_dig 7
    dup
    cover 2
    itxn_field AssetAmount
    frame_dig 1
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1824-1830
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: baseAssetId,
    //     assetAmount: refundAmount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1824-1831
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Txn.sender,
    //     xferAsset: baseAssetId,
    //     assetAmount: refundAmount,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1832
    // this.removeCash(refundAmount)
    callsub removeCash

liquidatePartialASA_after_if_else@20:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1835
    // if (newDebtBase === 0) {
    frame_dig 6
    bnz liquidatePartialASA_else_body@25
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1837
    // if (remainingLST > 0) {
    frame_dig 8
    bz liquidatePartialASA_after_if_else@24
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1838-1845
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: collTok.native,
    //     assetAmount: remainingLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    frame_dig 8
    dup
    itxn_field AssetAmount
    frame_dig 4
    itxn_field XferAsset
    frame_dig -4
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1838-1844
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: collTok.native,
    //     assetAmount: remainingLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1838-1845
    // itxn
    //   .assetTransfer({
    //     assetReceiver: debtor,
    //     xferAsset: collTok.native,
    //     assetAmount: remainingLST,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1846
    // this.reduceCollateralTotal(collTok, remainingLST)
    frame_dig 16
    swap
    callsub reduceCollateralTotal

liquidatePartialASA_after_if_else@24:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1848
    // this.loan_record(debtor).delete()
    frame_dig 14
    box_del
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:168
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1849
    // this.active_loan_records.value = this.active_loan_records.value - 1
    intc_1 // 1
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:168
    // active_loan_records = GlobalState<uint64>()
    bytec 9 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1849
    // this.active_loan_records.value = this.active_loan_records.value - 1
    swap
    app_global_put

liquidatePartialASA_after_if_else@26:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1868
    // this.last_apr_bps.value = this.current_apr_bps()
    callsub current_apr_bps
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:152
    // last_apr_bps = GlobalState<uint64>()
    bytec 12 // "last_apr_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1868
    // this.last_apr_bps.value = this.current_apr_bps()
    swap
    app_global_put
    retsub

liquidatePartialASA_else_body@25:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1853
    // borrowerAddress: rec.borrowerAddress,
    frame_dig 18
    dup
    extract 0 32 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1854
    // collateralTokenId: rec.collateralTokenId,
    swap
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1855
    // collateralAmount: new UintN64(remainingLST),
    frame_dig 8
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1857
    // principal: new UintN64(newDebtBase),
    frame_dig 6
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1858
    // userIndexWad: new UintN64(this.borrow_index_wad.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1860
    // amount: new UintN64(repayUsed),
    frame_dig 11
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1861
    // timestamp: new UintN64(Global.latestTimestamp),
    global LatestTimestamp
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1859-1863
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(repayUsed),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(4), // 4 = liquidation repay
    // }),
    swap
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1862
    // changeType: new UintN8(4), // 4 = liquidation repay
    pushbytes 0x04
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1859-1863
    // lastDebtChange: new DebtChange({
    //   amount: new UintN64(repayUsed),
    //   timestamp: new UintN64(Global.latestTimestamp),
    //   changeType: new UintN8(4), // 4 = liquidation repay
    // }),
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1852-1864
    // const newRec = new LoanRecord({
    //   borrowerAddress: rec.borrowerAddress,
    //   collateralTokenId: rec.collateralTokenId,
    //   collateralAmount: new UintN64(remainingLST),
    //   borrowedTokenId: this.base_token_id.value,
    //   principal: new UintN64(newDebtBase),
    //   userIndexWad: new UintN64(this.borrow_index_wad.value),
    //   lastDebtChange: new DebtChange({
    //     amount: new UintN64(repayUsed),
    //     timestamp: new UintN64(Global.latestTimestamp),
    //     changeType: new UintN8(4), // 4 = liquidation repay
    //   }),
    // })
    uncover 6
    uncover 6
    concat
    uncover 5
    concat
    swap
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1865
    // this.loan_record(debtor).value = newRec.copy()
    frame_dig 14
    swap
    box_put
    b liquidatePartialASA_after_if_else@26

liquidatePartialASA_after_if_else@33:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:556
    // return this.accepted_collaterals(key).value.copy()
    frame_dig 0
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1699
    // assert(collateral.originatingAppId.native === lstAppId, 'mismatched LST app')
    dup
    pushint 32 // 32
    extract_uint64
    frame_dig -1
    ==
    assert // mismatched LST app
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1701-1704
    // const circ = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 16 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1701-1704
    // const circ = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1705-1708
    // const total = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 17 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1705-1708
    // const total = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstAppId,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1709
    // const [hUnderlying, lUnderlying] = mulw(seizeLST, total)
    frame_dig 12
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1710
    // const seizedUnderlying: uint64 = divw(hUnderlying, lUnderlying, circ)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1712
    // const underlyingPrice = this.getOraclePrice(collateral.baseAssetId) // µUSD
    swap
    extract 8 8 // on error: Index access is out of bounds
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1713
    // const [hSeizeUSD, lSeizeUSD] = mulw(seizedUnderlying, underlyingPrice)
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1714
    // const seizeUSDActual: uint64 = divw(hSeizeUSD, lSeizeUSD, USD_MICRO_UNITS)
    divw
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1716
    // const [hRepayUSD, lRepayUSD] = mulw(seizeUSDActual, BASIS_POINTS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1717
    // const repayUSD: uint64 = divw(hRepayUSD, lRepayUSD, BASIS_POINTS + bonusBps)
    frame_dig 13
    divw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1719
    // const [hRepayBase, lRepayBase] = mulw(repayUSD, USD_MICRO_UNITS)
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1720
    // const repayBase: uint64 = divw(hRepayBase, lRepayBase, basePrice)
    frame_dig 2
    divw
    frame_bury 10
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1791
    // let repaySupported: uint64 = this.repayBaseFromSeizedLST(seizeLST, collTok, lstAppId, bonusBps, basePrice)
    b liquidatePartialASA_after_inlined_smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.repayBaseFromSeizedLST@34

liquidatePartialASA_bool_false@9:
    intc_0 // 0
    b liquidatePartialASA_bool_merge@10

liquidatePartialASA_bool_false@3:
    intc_0 // 0
    b liquidatePartialASA_bool_merge@4


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.getLoanStatus(borrower: bytes) -> uint64, uint64, uint64, uint64, uint64, uint64, uint64:
getLoanStatus:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1878-1887
    // @abimethod({ allowActions: 'NoOp' })
    // getLoanStatus(borrower: Account): {
    //   outstandingDebt: uint64
    //   collateralValueUSD: uint64
    //   collateralAmount: uint64
    //   collateralRatioBps: uint64
    //   liquidationThresholdBps: uint64
    //   eligibleForLiquidation: boolean
    //   eligibleForBuyout: boolean
    // } {
    proto 1 7
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:165
    // loan_record = BoxMap<Account, LoanRecord>({ keyPrefix: 'loan_record' })
    bytec 7 // "loan_record"
    frame_dig -1
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1888
    // assert(this.loan_record(borrower).exists, 'Loan record does not exist')
    dup
    box_len
    bury 1
    assert // Loan record does not exist
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1889
    // const record = this.loan_record(borrower).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1890
    // const collateralRecord = this.getCollateral(record.collateralTokenId)
    dup
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:162
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 6 // "accepted_collaterals"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:556
    // return this.accepted_collaterals(key).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1891
    // this.accrueMarket()
    callsub accrueMarket
    pop
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1892
    // const debt: uint64 = this.currentDebtFromSnapshot(record)
    swap
    callsub currentDebtFromSnapshot
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1893
    // const collateralAmount: uint64 = record.collateralAmount.native
    dup
    pushint 40 // 40
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:96
    // liq_threshold_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 22 // "liq_threshold_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1897
    // record.collateralTokenId,
    uncover 2
    extract 32 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1899
    // collateralRecord.originatingAppId.native,
    uncover 4
    pushint 32 // 32
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1896-1900
    // const collateralValueUSD: uint64 = this.calculateCollateralValueUSD(
    //   record.collateralTokenId,
    //   collateralAmount,
    //   collateralRecord.originatingAppId.native,
    // )
    dig 3
    swap
    callsub calculateCollateralValueUSD
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1902
    // const CR: uint64 = (collateralValueUSD * BASIS_POINTS) / debt
    dup
    // smart_contracts/orbital_lending/config.algo.ts:9
    // export const BASIS_POINTS: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1902
    // const CR: uint64 = (collateralValueUSD * BASIS_POINTS) / debt
    *
    dig 4
    /
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1903
    // const eligibleForLiquidation = CR < liqBps
    dup
    dig 3
    <
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1904
    // const eligibleForBuyout = CR > liqBps
    dig 1
    dig 4
    >
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1906-1914
    // return {
    //   outstandingDebt: debt,
    //   collateralValueUSD: collateralValueUSD,
    //   collateralAmount: collateralAmount,
    //   collateralRatioBps: CR,
    //   liquidationThresholdBps: liqBps,
    //   eligibleForLiquidation,
    //   eligibleForBuyout,
    // }
    uncover 6
    uncover 4
    uncover 6
    uncover 5
    uncover 6
    uncover 6
    uncover 6
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.calculateCollateralValueUSD(collateralTokenId: bytes, collateralAmount: uint64, lstApp: uint64) -> uint64:
calculateCollateralValueUSD:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1953
    // public calculateCollateralValueUSD(collateralTokenId: UintN64, collateralAmount: uint64, lstApp: uint64): uint64 {
    proto 3 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:162
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 6 // "accepted_collaterals"
    frame_dig -3
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:546
    // return this.accepted_collaterals(key).exists
    dup
    box_len
    bury 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1955
    // assert(this.collateralExists(collateralTokenId), 'unknown collateral')
    assert // unknown collateral
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:556
    // return this.accepted_collaterals(key).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1957
    // assert(collateralInfo.originatingAppId.native === lstApp, 'mismatched LST app')
    pushint 32 // 32
    extract_uint64
    frame_dig -1
    ==
    assert // mismatched LST app
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1959-1962
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 16 // method "getCirculatingLST()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1959-1962
    // const circulatingExternalLST = abiCall(TargetContract.prototype.getCirculatingLST, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1964-1967
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_begin
    bytec 17 // method "getTotalDeposits()uint64"
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1964-1967
    // const totalDepositsExternal = abiCall(TargetContract.prototype.getTotalDeposits, {
    //   appId: lstApp,
    //   fee: STANDARD_TXN_FEE,
    // }).returnValue
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1970
    // const [hC, lC] = mulw(totalDepositsExternal, collateralAmount)
    frame_dig -2
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1971
    // const underlyingCollateral = divw(hC, lC, circulatingExternalLST)
    uncover 2
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:556
    // return this.accepted_collaterals(key).value.copy()
    swap
    box_get
    assert // Box must have value
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1975
    // const baseTokenId = lstCollateral.baseAssetId
    extract 8 8 // on error: Index access is out of bounds
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1977
    // const baseTokenPrice = this.getOraclePrice(baseTokenId)
    callsub getOraclePrice
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1980
    // const [hU, lU] = mulw(underlyingCollateral, baseTokenPrice)
    mulw
    // smart_contracts/orbital_lending/config.algo.ts:10
    // export const USD_MICRO_UNITS: uint64 = 1_000_000
    intc 5 // 1000000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1981
    // const collateralUSD = divw(hU, lU, USD_MICRO_UNITS)
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:1983
    // return collateralUSD
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.pickupASARewards() -> void:
pickupASARewards:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2101-2102
    // @abimethod({ allowActions: 'NoOp' })
    // pickupASARewards(): void {
    proto 0 0
    pushbytes ""
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2103
    // assert(op.Txn.sender === this.admin_account.value, 'Only admin can pickup rewards')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:80
    // admin_account = GlobalState<Account>()
    intc_0 // 0
    bytec_2 // "admin_account"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2103
    // assert(op.Txn.sender === this.admin_account.value, 'Only admin can pickup rewards')
    ==
    assert // Only admin can pickup rewards
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    intc_0 // 0
    bytec 5 // "contract_state"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2104
    // assert(this.contract_state.value.native === 1, 'CONTRACT_NOT_ACTIVE')
    btoi
    intc_1 // 1
    ==
    assert // CONTRACT_NOT_ACTIVE
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2106
    // const baseAsset = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2107
    // const assetBalance = baseAsset.balance(Global.currentApplicationAddress)
    global CurrentApplicationAddress
    swap
    asset_holding_get AssetBalance
    swap
    dup
    uncover 2
    assert // account opted into asset
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:193
    // cash_on_hand = GlobalState<uint64>()
    intc_0 // 0
    bytec 13 // "cash_on_hand"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2109
    // if (assetBalance <= this.cash_on_hand.value) {
    <=
    bz pickupASARewards_after_if_else@2
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2110
    // return // nothing new arrived
    retsub

pickupASARewards_after_if_else@2:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:193
    // cash_on_hand = GlobalState<uint64>()
    intc_0 // 0
    bytec 13 // "cash_on_hand"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2113
    // const rawReward: uint64 = assetBalance - this.cash_on_hand.value
    frame_dig 1
    swap
    -
    dup
    frame_bury 0
    // smart_contracts/orbital_lending/config.algo.ts:14
    // export const MINIMUM_ADDITIONAL_REWARD: uint64 = 10_000
    intc 4 // 10000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2114
    // if (rawReward <= MINIMUM_ADDITIONAL_REWARD) {
    <=
    bz pickupASARewards_after_if_else@4
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2115
    // return
    retsub

pickupASARewards_after_if_else@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2118
    // this.addCash(rawReward)
    frame_dig 0
    dup
    callsub addCash
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:185
    // commission_percentage = GlobalState<uint64>()
    intc_0 // 0
    bytec 32 // "commission_percentage"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2120
    // const [hi, lo] = mulw(rawReward, this.commission_percentage.value)
    dig 1
    mulw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2121
    // const commission: uint64 = divw(hi, lo, 100)
    pushint 100 // 100
    divw
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:187
    // current_accumulated_commission = GlobalState<uint64>()
    intc_0 // 0
    bytec 19 // "current_accumulated_commission"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2123
    // this.current_accumulated_commission.value += commission
    dig 1
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:187
    // current_accumulated_commission = GlobalState<uint64>()
    bytec 19 // "current_accumulated_commission"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2123
    // this.current_accumulated_commission.value += commission
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:189
    // total_commission_earned = GlobalState<uint64>()
    intc_0 // 0
    bytec 25 // "total_commission_earned"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2124
    // this.total_commission_earned.value += commission
    dig 1
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:189
    // total_commission_earned = GlobalState<uint64>()
    bytec 25 // "total_commission_earned"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2124
    // this.total_commission_earned.value += commission
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2126
    // const netReward: uint64 = rawReward - commission
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:191
    // total_additional_rewards = GlobalState<uint64>()
    intc_0 // 0
    bytec 26 // "total_additional_rewards"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2127
    // this.total_additional_rewards.value += netReward
    dig 1
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:191
    // total_additional_rewards = GlobalState<uint64>()
    bytec 26 // "total_additional_rewards"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2127
    // this.total_additional_rewards.value += netReward
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2128
    // this.total_deposits.value += netReward
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    bytec_3 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2128
    // this.total_deposits.value += netReward
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.migrateCollateralTokenId(collateralTokenId: uint64, mbrTxn: uint64) -> void:
migrateCollateralTokenId:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2131
    // public migrateCollateralTokenId(collateralTokenId: uint64, mbrTxn: gtxn.PaymentTxn): void {
    proto 2 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2132
    // assert(op.Txn.sender === this.migration_admin.value, 'Only migration admin can migrate collateral')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:200
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 14 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2132
    // assert(op.Txn.sender === this.migration_admin.value, 'Only migration admin can migrate collateral')
    ==
    assert // Only migration admin can migrate collateral
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2134
    // const acKey = new AcceptedCollateralKey({ assetId: new UintN64(collateralTokenId) })
    frame_dig -2
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:162
    // accepted_collaterals = BoxMap<AcceptedCollateralKey, AcceptedCollateral>({ keyPrefix: 'accepted_collaterals' })
    bytec 6 // "accepted_collaterals"
    swap
    concat
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2135
    // assert(this.accepted_collaterals(acKey).exists, 'collateral not found')
    box_len
    bury 1
    assert // collateral not found
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2136
    // const collateralBalance = Asset(collateralTokenId).balance(Global.currentApplicationAddress)
    global CurrentApplicationAddress
    frame_dig -2
    asset_holding_get AssetBalance
    swap
    dup
    uncover 2
    assert // account opted into asset
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2137
    // if (collateralBalance > 0) {
    bz migrateCollateralTokenId_after_if_else@3
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2138-2145
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: collateralTokenId,
    //     assetAmount: collateralBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:200
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 14 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    frame_dig 0
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2138-2144
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: collateralTokenId,
    //     assetAmount: collateralBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2138-2145
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: collateralTokenId,
    //     assetAmount: collateralBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit

migrateCollateralTokenId_after_if_else@3:
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.migrateContract(feeTxn: uint64) -> bytes:
migrateContract:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2154-2155
    // @abimethod({ allowActions: 'NoOp' })
    // public migrateContract(feeTxn: gtxn.PaymentTxn): MigrationSnapshot {
    proto 1 1
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2156
    // assert(op.Txn.sender === this.migration_admin.value, 'Only migration admin can migrate')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:200
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 14 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2156
    // assert(op.Txn.sender === this.migration_admin.value, 'Only migration admin can migrate')
    ==
    assert // Only migration admin can migrate
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2157
    // this.setContractState(2) // set to migrating
    pushint 2 // 2
    callsub setContractState
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2158
    // assertMatch(feeTxn, { amount: MIGRATION_FEE })
    frame_dig -1
    gtxns Amount
    // smart_contracts/orbital_lending/config.algo.ts:15
    // export const MIGRATION_FEE: uint64 = 500_000 // 0.5 Algo
    pushint 500000 // 500000
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2158
    // assertMatch(feeTxn, { amount: MIGRATION_FEE })
    ==
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2161
    // const lstAsset = Asset(this.lst_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2162
    // const lstBalance = lstAsset.balance(Global.currentApplicationAddress)
    global CurrentApplicationAddress
    swap
    asset_holding_get AssetBalance
    assert // account opted into asset
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2165-2172
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:200
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 14 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2168
    // xferAsset: this.lst_token_id.value.native,
    btoi
    uncover 2
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2165-2171
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2165-2172
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: this.lst_token_id.value.native,
    //     assetAmount: lstBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2174
    // const baseAsset = Asset(this.base_token_id.value.native)
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2175
    // const assetBalance = baseAsset.balance(Global.currentApplicationAddress)
    global CurrentApplicationAddress
    swap
    asset_holding_get AssetBalance
    swap
    dup
    uncover 2
    assert // account opted into asset
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2176
    // if (assetBalance > 0) {
    bz migrateContract_after_if_else@4
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2177-2184
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: assetBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:200
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 14 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2180
    // xferAsset: this.base_token_id.value.native,
    btoi
    frame_dig 0
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2177-2183
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: assetBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    intc_3 // 4
    itxn_field TypeEnum
    // smart_contracts/orbital_lending/config.algo.ts:7
    // export const STANDARD_TXN_FEE: uint64 = 1_000
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2177-2184
    // itxn
    //   .assetTransfer({
    //     assetReceiver: this.migration_admin.value,
    //     xferAsset: this.base_token_id.value.native,
    //     assetAmount: assetBalance,
    //     fee: STANDARD_TXN_FEE,
    //   })
    //   .submit()
    itxn_submit

migrateContract_after_if_else@4:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:171
    // accepted_collaterals_count = GlobalState<uint64>()
    intc_0 // 0
    bytec 20 // "accepted_collaterals_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2188
    // accepted_collaterals_count: new UintN64(this.accepted_collaterals_count.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:193
    // cash_on_hand = GlobalState<uint64>()
    intc_0 // 0
    bytec 13 // "cash_on_hand"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2189
    // cash_on_hand: new UintN64(this.cash_on_hand.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    intc_0 // 0
    bytec 8 // "circulating_lst"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2190
    // circulating_lst: new UintN64(this.circulating_lst.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "total_deposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2191
    // total_deposits: new UintN64(this.total_deposits.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "total_borrows"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2192
    // total_borrows: new UintN64(this.total_borrows.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:191
    // total_additional_rewards = GlobalState<uint64>()
    intc_0 // 0
    bytec 26 // "total_additional_rewards"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2193
    // total_additional_rewards: new UintN64(this.total_additional_rewards.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:189
    // total_commission_earned = GlobalState<uint64>()
    intc_0 // 0
    bytec 25 // "total_commission_earned"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2194
    // total_commission_earned: new UintN64(this.total_commission_earned.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:187
    // current_accumulated_commission = GlobalState<uint64>()
    intc_0 // 0
    bytec 19 // "current_accumulated_commission"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2195
    // current_accumulated_commission: new UintN64(this.current_accumulated_commission.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    intc_0 // 0
    bytec 15 // "fee_pool"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2196
    // fee_pool: new UintN64(this.fee_pool.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    intc_0 // 0
    bytec 11 // "borrow_index_wad"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2197
    // borrowIndexWad: new UintN64(this.borrow_index_wad.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2198
    // base_token_id: new UintN64(this.base_token_id.value.native),
    btoi
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2199
    // lst_token_id: new UintN64(this.lst_token_id.value.native),
    btoi
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:174
    // buyout_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 18 // "buyout_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2200
    // buyout_token_id: new UintN64(this.buyout_token_id.value.native),
    btoi
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:185
    // commission_percentage = GlobalState<uint64>()
    intc_0 // 0
    bytec 32 // "commission_percentage"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2201
    // commission_percentage: new UintN64(this.commission_percentage.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:177
    // liq_bonus_bps = GlobalState<uint64>()
    intc_0 // 0
    bytec 24 // "liq_bonus_bps"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2202
    // liq_bonus_bps: new UintN64(this.liq_bonus_bps.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:168
    // active_loan_records = GlobalState<uint64>()
    intc_0 // 0
    bytec 9 // "active_loan_records"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2203
    // active_loan_records: new UintN64(this.active_loan_records.value),
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2187-2204
    // return new MigrationSnapshot({
    //   accepted_collaterals_count: new UintN64(this.accepted_collaterals_count.value),
    //   cash_on_hand: new UintN64(this.cash_on_hand.value),
    //   circulating_lst: new UintN64(this.circulating_lst.value),
    //   total_deposits: new UintN64(this.total_deposits.value),
    //   total_borrows: new UintN64(this.total_borrows.value),
    //   total_additional_rewards: new UintN64(this.total_additional_rewards.value),
    //   total_commission_earned: new UintN64(this.total_commission_earned.value),
    //   current_accumulated_commission: new UintN64(this.current_accumulated_commission.value),
    //   fee_pool: new UintN64(this.fee_pool.value),
    //   borrowIndexWad: new UintN64(this.borrow_index_wad.value),
    //   base_token_id: new UintN64(this.base_token_id.value.native),
    //   lst_token_id: new UintN64(this.lst_token_id.value.native),
    //   buyout_token_id: new UintN64(this.buyout_token_id.value.native),
    //   commission_percentage: new UintN64(this.commission_percentage.value),
    //   liq_bonus_bps: new UintN64(this.liq_bonus_bps.value),
    //   active_loan_records: new UintN64(this.active_loan_records.value),
    // })
    uncover 12
    uncover 12
    concat
    uncover 12
    concat
    uncover 12
    concat
    uncover 7
    concat
    uncover 6
    concat
    uncover 3
    concat
    uncover 4
    concat
    uncover 4
    concat
    uncover 7
    concat
    uncover 3
    concat
    uncover 2
    concat
    uncover 2
    concat
    uncover 2
    concat
    uncover 2
    concat
    swap
    concat
    swap
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.acceptMigrationASAContract(lstTransferTxn: uint64, algoTxn: uint64, baseAssetTransferTxn: uint64, snapshot: bytes, migrationAdmin: bytes) -> void:
acceptMigrationASAContract:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2215-2222
    // @abimethod({ allowActions: 'NoOp' })
    // public acceptMigrationASAContract(
    //   lstTransferTxn: gtxn.AssetTransferTxn,
    //   algoTxn: gtxn.PaymentTxn,
    //   baseAssetTransferTxn: gtxn.AssetTransferTxn,
    //   snapshot: MigrationSnapshot,
    //   migrationAdmin: Account,
    // ): void {
    proto 5 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2223
    // assert(op.Txn.sender === this.migration_admin.value, 'Only migration admin can accept migration')
    txn Sender
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:200
    // migration_admin = GlobalState<Account>()
    intc_0 // 0
    bytec 14 // "migration_admin"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2223
    // assert(op.Txn.sender === this.migration_admin.value, 'Only migration admin can accept migration')
    ==
    assert // Only migration admin can accept migration
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2224-2228
    // assertMatch(lstTransferTxn, {
    //   sender: migrationAdmin,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.lst_token_id.value.native),
    // })
    frame_dig -5
    gtxns Sender
    frame_dig -1
    ==
    bz acceptMigrationASAContract_bool_false@4
    frame_dig -5
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2226
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2224-2228
    // assertMatch(lstTransferTxn, {
    //   sender: migrationAdmin,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.lst_token_id.value.native),
    // })
    ==
    bz acceptMigrationASAContract_bool_false@4
    frame_dig -5
    gtxns XferAsset
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec 10 // "lst_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2227
    // xferAsset: Asset(this.lst_token_id.value.native),
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2224-2228
    // assertMatch(lstTransferTxn, {
    //   sender: migrationAdmin,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.lst_token_id.value.native),
    // })
    ==
    bz acceptMigrationASAContract_bool_false@4
    intc_1 // 1

acceptMigrationASAContract_bool_merge@5:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2224-2228
    // assertMatch(lstTransferTxn, {
    //   sender: migrationAdmin,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.lst_token_id.value.native),
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2229-2232
    // assertMatch(algoTxn, {
    //   sender: migrationAdmin,
    //   receiver: Global.currentApplicationAddress,
    // })
    frame_dig -4
    gtxns Sender
    frame_dig -1
    ==
    bz acceptMigrationASAContract_bool_false@8
    frame_dig -4
    gtxns Receiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2231
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2229-2232
    // assertMatch(algoTxn, {
    //   sender: migrationAdmin,
    //   receiver: Global.currentApplicationAddress,
    // })
    ==
    bz acceptMigrationASAContract_bool_false@8
    intc_1 // 1

acceptMigrationASAContract_bool_merge@9:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2229-2232
    // assertMatch(algoTxn, {
    //   sender: migrationAdmin,
    //   receiver: Global.currentApplicationAddress,
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2233-2237
    // assertMatch(baseAssetTransferTxn, {
    //   sender: migrationAdmin,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    // })
    frame_dig -3
    gtxns Sender
    frame_dig -1
    ==
    bz acceptMigrationASAContract_bool_false@13
    frame_dig -3
    gtxns AssetReceiver
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2235
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2233-2237
    // assertMatch(baseAssetTransferTxn, {
    //   sender: migrationAdmin,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    // })
    ==
    bz acceptMigrationASAContract_bool_false@13
    frame_dig -3
    gtxns XferAsset
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    intc_0 // 0
    bytec_0 // "base_token_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2236
    // xferAsset: Asset(this.base_token_id.value.native),
    btoi
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2233-2237
    // assertMatch(baseAssetTransferTxn, {
    //   sender: migrationAdmin,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    // })
    ==
    bz acceptMigrationASAContract_bool_false@13
    intc_1 // 1

acceptMigrationASAContract_bool_merge@14:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2233-2237
    // assertMatch(baseAssetTransferTxn, {
    //   sender: migrationAdmin,
    //   assetReceiver: Global.currentApplicationAddress,
    //   xferAsset: Asset(this.base_token_id.value.native),
    // })
    assert // assert target is match for conditions
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2240
    // this.cash_on_hand.value = snapshot.cash_on_hand.native
    frame_dig -2
    pushint 24 // 24
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:193
    // cash_on_hand = GlobalState<uint64>()
    bytec 13 // "cash_on_hand"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2240
    // this.cash_on_hand.value = snapshot.cash_on_hand.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2241
    // this.total_deposits.value = snapshot.total_deposits.native
    frame_dig -2
    intc_0 // 0
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:70
    // total_deposits = GlobalState<uint64>()
    bytec_3 // "total_deposits"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2241
    // this.total_deposits.value = snapshot.total_deposits.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2242
    // this.circulating_lst.value = snapshot.circulating_lst.native
    frame_dig -2
    pushint 16 // 16
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:67
    // circulating_lst = GlobalState<uint64>()
    bytec 8 // "circulating_lst"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2242
    // this.circulating_lst.value = snapshot.circulating_lst.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2243
    // this.total_borrows.value = snapshot.total_borrows.native
    frame_dig -2
    pushint 8 // 8
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:143
    // total_borrows = GlobalState<uint64>()
    bytec 4 // "total_borrows"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2243
    // this.total_borrows.value = snapshot.total_borrows.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2244
    // this.total_additional_rewards.value = snapshot.total_additional_rewards.native
    frame_dig -2
    pushint 112 // 112
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:191
    // total_additional_rewards = GlobalState<uint64>()
    bytec 26 // "total_additional_rewards"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2244
    // this.total_additional_rewards.value = snapshot.total_additional_rewards.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2245
    // this.total_commission_earned.value = snapshot.total_commission_earned.native
    frame_dig -2
    pushint 104 // 104
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:189
    // total_commission_earned = GlobalState<uint64>()
    bytec 25 // "total_commission_earned"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2245
    // this.total_commission_earned.value = snapshot.total_commission_earned.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2246
    // this.current_accumulated_commission.value = snapshot.current_accumulated_commission.native
    frame_dig -2
    pushint 96 // 96
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:187
    // current_accumulated_commission = GlobalState<uint64>()
    bytec 19 // "current_accumulated_commission"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2246
    // this.current_accumulated_commission.value = snapshot.current_accumulated_commission.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2247
    // this.fee_pool.value = snapshot.fee_pool.native
    frame_dig -2
    pushint 64 // 64
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:73
    // fee_pool = GlobalState<uint64>()
    bytec 15 // "fee_pool"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2247
    // this.fee_pool.value = snapshot.fee_pool.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2248
    // this.borrow_index_wad.value = snapshot.borrowIndexWad.native
    frame_dig -2
    pushint 32 // 32
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:146
    // borrow_index_wad = GlobalState<uint64>()
    bytec 11 // "borrow_index_wad"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2248
    // this.borrow_index_wad.value = snapshot.borrowIndexWad.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2249
    // this.accepted_collaterals_count.value = snapshot.accepted_collaterals_count.native
    frame_dig -2
    pushint 72 // 72
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:171
    // accepted_collaterals_count = GlobalState<uint64>()
    bytec 20 // "accepted_collaterals_count"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2249
    // this.accepted_collaterals_count.value = snapshot.accepted_collaterals_count.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2250
    // this.base_token_id.value = new UintN64(snapshot.base_token_id.native)
    frame_dig -2
    pushint 40 // 40
    extract_uint64
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:57
    // base_token_id = GlobalState<UintN64>()
    bytec_0 // "base_token_id"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2250
    // this.base_token_id.value = new UintN64(snapshot.base_token_id.native)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2251
    // this.lst_token_id.value = new UintN64(snapshot.lst_token_id.native)
    frame_dig -2
    pushint 56 // 56
    extract_uint64
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:60
    // lst_token_id = GlobalState<UintN64>()
    bytec 10 // "lst_token_id"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2251
    // this.lst_token_id.value = new UintN64(snapshot.lst_token_id.native)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2252
    // this.buyout_token_id.value = new UintN64(snapshot.buyout_token_id.native)
    frame_dig -2
    pushint 80 // 80
    extract_uint64
    itob
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:174
    // buyout_token_id = GlobalState<UintN64>()
    bytec 18 // "buyout_token_id"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2252
    // this.buyout_token_id.value = new UintN64(snapshot.buyout_token_id.native)
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2253
    // this.commission_percentage.value = snapshot.commission_percentage.native
    frame_dig -2
    pushint 48 // 48
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:185
    // commission_percentage = GlobalState<uint64>()
    bytec 32 // "commission_percentage"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2253
    // this.commission_percentage.value = snapshot.commission_percentage.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2254
    // this.liq_bonus_bps.value = snapshot.liq_bonus_bps.native
    frame_dig -2
    pushint 88 // 88
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:177
    // liq_bonus_bps = GlobalState<uint64>()
    bytec 24 // "liq_bonus_bps"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2254
    // this.liq_bonus_bps.value = snapshot.liq_bonus_bps.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2255
    // this.active_loan_records.value = snapshot.active_loan_records.native
    frame_dig -2
    pushint 120 // 120
    extract_uint64
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:168
    // active_loan_records = GlobalState<uint64>()
    bytec 9 // "active_loan_records"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2255
    // this.active_loan_records.value = snapshot.active_loan_records.native
    swap
    app_global_put
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:227
    // contract_state = GlobalState<UintN64>() // 0 = inactive, 1 = active, 2 = migrating
    bytec 5 // "contract_state"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2257
    // this.contract_state.value = new UintN64(1) // active
    pushbytes 0x0000000000000001
    app_global_put
    retsub

acceptMigrationASAContract_bool_false@13:
    intc_0 // 0
    b acceptMigrationASAContract_bool_merge@14

acceptMigrationASAContract_bool_false@8:
    intc_0 // 0
    b acceptMigrationASAContract_bool_merge@9

acceptMigrationASAContract_bool_false@4:
    intc_0 // 0
    b acceptMigrationASAContract_bool_merge@5


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.addCash(amount: uint64) -> void:
addCash:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2264
    // private addCash(amount: uint64): void {
    proto 1 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:193
    // cash_on_hand = GlobalState<uint64>()
    intc_0 // 0
    bytec 13 // "cash_on_hand"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2265
    // this.cash_on_hand.value = this.cash_on_hand.value + amount
    frame_dig -1
    +
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:193
    // cash_on_hand = GlobalState<uint64>()
    bytec 13 // "cash_on_hand"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2265
    // this.cash_on_hand.value = this.cash_on_hand.value + amount
    swap
    app_global_put
    retsub


// smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts::OrbitalLending.removeCash(amount: uint64) -> void:
removeCash:
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2273
    // private removeCash(amount: uint64): void {
    proto 1 0
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:193
    // cash_on_hand = GlobalState<uint64>()
    intc_0 // 0
    bytec 13 // "cash_on_hand"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2274
    // assert(this.cash_on_hand.value >= amount, 'INSUFFICIENT_CASH')
    frame_dig -1
    >=
    assert // INSUFFICIENT_CASH
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:193
    // cash_on_hand = GlobalState<uint64>()
    intc_0 // 0
    bytec 13 // "cash_on_hand"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2275
    // this.cash_on_hand.value = this.cash_on_hand.value - amount
    frame_dig -1
    -
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:193
    // cash_on_hand = GlobalState<uint64>()
    bytec 13 // "cash_on_hand"
    // smart_contracts/orbital_lending/OrbitalLendingASA.algo.ts:2275
    // this.cash_on_hand.value = this.cash_on_hand.value - amount
    swap
    app_global_put
    retsub
