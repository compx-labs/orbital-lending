{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/OrbitalLending.algo.ts",
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/config.algo.ts"
  ],
  "mappingsnBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAvCC;;AAAA;AAAA;AAAA;;AAAA;AAr5DH;;;AAAA;AAAA;;AAq5DG;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxHA;;AAAA;AAAA;AAAA;;AAAA;AA7xDH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA6xDG;;;AAAA;;AAnIA;;AAAA;AAAA;AAAA;;AAAA;AA1pDH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA0pDG;;;AAAA;;AA3FA;;AAAA;AAAA;AAAA;;AAAA;AA/jDH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA+jDG;;;AAAA;;AAhHA;;AAAA;AAAA;AAAA;;AAAA;AA/8CH;;;AAAA;AA+8CG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvHA;;AAAA;AAAA;AAAA;;AAAA;AAx1CH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAw1CG;;;AAAA;;AAlHA;;AAAA;AAAA;AAAA;;AAAA;AAtuCH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAsuCG;;;AAAA;;AAvCA;;AAAA;AAAA;AAAA;;AAAA;AA/rCH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+rCG;;;AAAA;;AAjDA;;AAAA;AAAA;AAAA;;AAAA;AA9oCH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA8oCG;;;AAAA;;AA7FA;;AAAA;AAAA;AAAA;;AAAA;AAjjCH;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAijCG;;;AAAA;;AAbD;;AAAA;AAAA;AAAA;;AAAA;AApiCF;;;AAAA;AAAA;;AAoiCE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3MA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnDC;;AAAA;AAAA;AAAA;;AAAA;AAtyBH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAsyBG;;;AAAA;;AA3FA;;AAAA;AAAA;AAAA;;AAAA;AA3sBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA2sBG;;;AAAA;;AAvDA;;AAAA;AAAA;AAAA;;AAAA;AAppBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAopBG;;;AAAA;;AA1CA;;AAAA;AAAA;AAAA;;AAAA;AA1mBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0mBG;;;AAAA;;AA9CA;;AAAA;AAAA;AAAA;;AAAA;AA5jBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4jBG;;;AAAA;;AAvFA;;AAAA;AAAA;AAAA;;AAAA;AAreH;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAqeG;;;AAAA;;AA5DD;;AAAA;AAAA;AAAA;;AAAA;AAzaF;;;AAyaE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAhYF;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAgYE;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AAvWF;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuWE;;;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAvUF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuUE;;;AAAA;;AA3DC;;AAAA;AAAA;AAAA;;AAAA;AA5QH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA4QG;;;AAAA;;AA/FA;;AAAA;AAAA;AAAA;;AAAA;AA7KH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AA6KG;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA5JH;;;AAAA;AAAA;;AAAA;;;AAAA;AA4JG;;;AAAA;;AAAD;;;AA9HA;;AAgIE;;AAAA;AAC2B;;AAAA;AAxJ7B;AAwJE;AAAA;;AAcF;;;AAWgB;;AA1JhB;AAAA;;AAAA;AAAA;AA0JS;AAAP;AAEA;;AAAA;;AA5JF;AAAA;;AAAA;AAAA;AA4JE;AAAA;;;AAAA;;AAAA;;ACtOkC;;;;ADsOlC;AAAA;;;;AAAA;AAlJF;;AAuJE;;AAAA;AApJF;;AAqJE;;AAAA;AAlJF;;AAmJE;;AAAA;AA1EF;;AA2E0C;AAAxC;AA3KF;;AA4KwB;AAAtB;AAlLF;;AAmL+B;AAA7B;AAhLF;;AAiL8B;AAA5B;AAjFF;;AAkFmC;AAAjC;AArJF;;AAsJE;;AAAA;AAtKF;;AAuKE;;AAAA;AA9LF;;AA+L4B;;;;;;;;;;AAA1B;AArJF;;AAsJwB;;AAAtB;AAnJF;;AAoJ4B;;;AAA1B;AAhHF;AAiH6B;AAA3B;AA1HF;;AA2H+B;AAA7B;AAnJF;;AAoJ6B;;;AAA3B;AAjJF;;AAkJ0B;AAAxB;AA/IF;;AAgJ0B;;;AAAxB;AA7IF;;AA8I2B;;;AAAzB;AA3IF;;AA4I6B;AAA3B;AAzIF;;AA0IgC;AAA9B;AAvIF;;AAwI4B;;AAA1B;AArIF;;AAsI4B;AAA1B;AAhIF;;AAiI+B;AAA7B;AA9HF;;AA+H8B;AAA5B;AAnFF;;AAoF6C;AAA3C;AAjFF;;AAkF+B;AAA7B;AA/EF;;AAgFmC;AAAjC;AA7EF;;AA8E0B;AAAxB;AA5EF;;AA6EwC;;AAAtC;AA5EF;;AA6EmC;AAAjC;AA/HF;;ACjIiC;;ADiQ/B;AA7HF;;AA8HsC;;AAApC;AA3KF;AAAA;;AAAA;AAAA;AAgDA;;AA4HE;AAAA;AAC6B;;AAAA;AAvG/B;;AAuGE;AAAA;AApGF;;AAqGE;;AAAA;AA3HF;;;;;;;;;;;;;;;;;;;;;;;;;AA6HuC;AAArC;AA7NF;AAAA;AAAA;AAAA;AA+N+B;AAA7B;;;AACE;AAE0B;;AAlO9B;AAAA;AAAA;AAAA;AAmO4C;AACvB;;;;;;;AAJjB;;;;AC/QkC;;;AD+QlC;AA7GJ;AAAA;;AAAA;AAAA;AAsHiC;AAA/B;;;AACE;AAE0B;;AAzH9B;AAAA;;AAAA;AAAA;AA0H8C;AACzB;;;;;;;AAJjB;;;;ACzRkC;;;ADyRlC;;;;;;AA2BJ;;;AAgBgB;;AA9PhB;AAAA;;AAAA;AAAA;AA8PS;AAAP;AAGO;;AAAA;;;AAAqB;;AAAgB;AAAhB;AAArB;;;;AAAP;AACO;;AAAA;;;AAAsB;;AAAgB;AAAhB;AAAtB;;;;AAAP;AAEA;;AAAA;;;AACS;;AAAA;;AAAA;AAAP;AAEK;;AAAiB;AAAjB;AAAP;AAEO;;AAAA;;;AAAsC;;AAAoB;;;AAApB;AAAtC;;;;AAAP;AAnPF;;AAsPE;;AAAA;AAnPF;;AAoPE;;AAAA;AAjPF;;AAkPE;;AAAA;AA/OF;;AAgPE;;AAAA;AA7OF;;AA8OE;;AAAA;AA3OF;;AA4OE;;AAAA;AAzOF;;AA0OE;;AAAA;AAvOF;;AAwOE;;AAAA;AA/NF;;AAgOE;;AAAA;AA7NF;;AA8NE;;AAAA;AA3NF;;AA4NE;;AAAA;AAvLF;;AAwLE;;AAAA;AArKF;AAAA;;AAAA;AAAA;AAuKoC;AAAlC;AAvKF;;AAuKE;AAAA;AAxKF;;AAyKwC;;AAAtC;AArPF;AAAA;;AAAA;AAAA;AAwPM;;;AA/ON;AAAA;;AAAA;AAAA;AATA;AAAA;;AAAA;AAAA;AAwPoC;AAA9B;;;AAxPN;AAAA;;AAAA;AAAA;AASA;;AAgPI;AAAA;;;;;;;;;;;;;;AAWJ;;;AACgB;;AA1ShB;AAAA;;AAAA;AAAA;AA0SS;AAAP;AACA;;AAAA;;AA3SF;AAAA;;AAAA;AAAA;AA2SE;AAAA;;;AAAA;;AAAA;;ACpXgC;;;;ADoXhC;AAAA;;;;AAAA;AAlUF;AAAA;AAAA;AAAA;AAyUmD;AAClC;AAEI;;AACE;;AAAA;;AAAA;AACG;;AAAA;;AAAA;AAEJ;;AACiB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;AACwB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;;;;;;;AAHI;;;;;;;;;AALJ;;;;ACzXqB;;;ADyXrB;;;AAYW;AAnV5B;;AAmVE;AAAA;;;;;;AAUF;;;AACgB;;AA1UhB;AAAA;;AAAA;AAAA;AA0US;AAAP;AACA;;AAAA;;AA3UF;AAAA;;AAAA;AAAA;AA2UE;AAAA;;;AAAA;;AAAA;;ACnZkC;;;ADmZlC;AAAA;;;;AAAA;AAI0B;;AAAA;AAnW5B;;AAmWE;AAAA;AAGA;AAE0B;;AAET;;;;;;;;;AAJjB;;;;ACxZoC;;;ADwZpC;;;;;;AAgBF;;;AACgB;;AAnWhB;AAAA;;AAAA;AAAA;AAmWS;AAAP;AAvXF;AAAA;;AAAA;AAAA;AAwXiC;AAAoB;;AAAA;;AAA5C;AAAP;AAEA;;AAAA;;AAtWF;AAAA;;AAAA;AAAA;AAsWE;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;;AAAA;AAnXF;;AAuXE;;AAAA;;;;;;AAvXF;AAAA;;AAAA;AAAA;AA+XE;AA5XF;AAAA;;AAAA;AAAA;AAoYE;AAjSF;AAAA;;AAAA;AAAA;AAySE;AASF;;;AAxYA;AAAA;;AAAA;AAAA;AA0YyB;AAAA;;AAAA;;AAAA;AAGR;AAAA;;;;;;;;;;;;;;AAAA;;;;ACtdqB;;;ADsdrB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAMK;AAApB;AAaF;;;AAnVsF;;AAAA;;AAAA;AAqVlC;AAAA;AAAA;AAEE;AAAhB;;AAAgB;AAA9C;;AAAmB;AAEH;;AAAA;;;AACI;;AAAA;;;AACM;;AAAA;;;AACb;;AAAA;AACY;;AAAA;;;AALQ;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AASF;;;AAjWsF;;AAAA;;AAAA;AAmWlC;AAAA;AAAA;AAEhB;AAAhB;;AAAgB;AAA3B;AAAA;;AAAA;AAAP;AACM;;AAAmB;AAEH;;AAAA;;;AACI;;AAAA;;;AACM;;AAAA;;;AACb;;AAAA;AACY;;AAAA;;;AALQ;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AAgBF;;;AA9dA;AAAA;AAAA;AAAA;AAqemD;AACnC;;AA/chB;AAAA;;AAAA;AAAA;AA+cS;AAAP;AACyB;;AAAA;AAAA;AAAA;;AAAlB;AAAP;AAhYoF;;AAAA;;AAAA;AAAA;AA2U9C;AAAA;;AAsD/B;AAAP;AACA;;AAAA;;AAldF;AAAA;;AAAA;AAAA;AAkdE;AAAA;;;AAAA;;AAAA;;ACzhBkC;;;;ADyhBlC;AAAA;;;;AAAA;AAzeF;AAAA;AAAA;AAAA;AAkfoD;;AAAA;;AAAA;AAAA;AAAA;AAI/B;;;;;;;;;;AAJ+B;AAAA;;AAAA;AAQlD;;AAAA;AAAA;;AAAA;AA1YF;AAAA;;AAAA;AAAA;AA2YkF;AAAxC;AA3Y1C;;AA2YE;AAAA;AACA;AAEmB;;AACO;AAET;;;;;;;;;;;AALjB;;;;AC3iBoC;;;AD2iBpC;AA1EsC;AAAA;;AAoFtC;;;;;;AAGF;;;AA/fA;AAAA;;AAAA;AAAA;ACtDkC;ADsjBF;AA7fhC;AAAA;;AAAA;AAAA;AA+fmB;AAEa;;AAAA;AC1jBE;AD2jBzB;AAAP;AAsCF;;;AArjBA;AAAA;AAAA;AAAA;AAujBmD;AACjD;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAKA;;AAAA;;AC5mBoC;AD4mBpC;AAAA;AAIuB;;;AAAjB;AAjkBR;AAAA;AAAA;AAAA;;AAAA;AAaA;AAAA;;AAAA;AAAA;AA2jBE;;;;;AAKA;AAE0B;;AA5kB5B;AAAA;;AAAA;AAAA;AA6kByC;;;;;;;;;AAHvC;;;;AC5nBoC;;;AD4nBpC;AAnkBF;AAAA;;AAAA;AAAA;AA4kBE;AA5kBF;;AA4kBE;AAAA;AAzkBF;AAAA;;AAAA;AAAA;AA0kBE;;AAAA;AA1kBF;;AA0kBE;AAAA;AAC0B;;;AA3f5B;;AA2fE;AAAA;;AAbE;;AAAS;;;;;;;;;;AAwBb;;;AAnmBA;AAAA;AAAA;AAAA;;AAAA;AAsmBE;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAIA;;AAAA;;ACzpBoC;ADypBpC;AAAA;AAIuB;;;AAAjB;AAjmBR;AAAA;;AAAA;AAAA;AAomBE;;;;;AAKA;AAE0B;;AArnB5B;AAAA;;AAAA;AAAA;AAsnByC;;;;;;;;;AAHvC;;;;ACrqBoC;;;ADqqBpC;AA5mBF;AAAA;;AAAA;AAAA;AAqnBE;AArnBF;;AAqnBE;AAAA;AAlnBF;AAAA;;AAAA;AAAA;AAmnBE;;AAAA;AAnnBF;;AAmnBE;AAAA;AAC0B;;;AApiB5B;;AAoiBE;AAAA;;AAbE;;AAAS;;;;;;;;;;AAyBb;;;AA1oBA;AAAA;;AAAA;AAAA;AAipBiD;AAC/C;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAMA;;AAAA;;AACU;;;AADV;AAAA;AAIuB;;;AAAjB;AAIF;;AAAoB;;AAApB;AAAJ;;;AAzpBF;AAAA;;AAAA;AAAA;AAGA;AAAA;;AAAA;AAAA;AA4hBmB;;AAAA;AACV;;AAAA;AA+HoC;;AAzqB7C;AAAA;AAAA;AAAA;AAyqBiG;AAAxF;;AAAA;AAAA;;AAAA;AAAP;AACA;AAE0B;;AA5qB5B;AAAA;AAAA;AAAA;AA6qB0C;;;;;;;;;AAHxC;;;;ACztBoC;;;ADytBpC;AAhqBF;AAAA;;AAAA;AAAA;AAyqBE;;AAAA;AAzqBF;;AAyqBE;AAAA;AAtqBF;AAAA;;AAAA;AAAA;AAuqBE;AAAA;AAvqBF;;AAuqBE;AAAA;AAC0B;;;AAxlB5B;;AAwlBE;AAAA;;AAhK+B;AAAA;;;;;;;;AAAA;;;;ACpkBK;;;ADokBL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;ACxkBM;;;ADwkBN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAMb;;AAAA;AACV;;AAAA;;;;;;;;AAoKT;;;;;;AA1lBuD;AAomBb;;AApmBa;AAomBL;AAAA;AAAA;;AAAA;AACzB;;;AAAjB;AAEN;;;AACuD;;AAA1B;;;AAAkC;;AACxB;AAArC;;AAAkB;AAAlB;;AA0uCF;;AAAA;;AC3+DuC;;;AD2+DvC;AAAA;AAEA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAGqC;;AAAA;AAHrC;AAAA;;;;AAAA;AAx1DoF;;AAAA;;AAAA;AA2U9C;AAAA;;AAmhDtC;AA7uCM;;AAAA;;AAAA;;AAAgB;;;AAvrBxB;AAAA;;AAAA;AAAA;AAwrBgC;ACrwBE;ADqwBH;AAzlB/B;;AA0lBE;;AAAA;AA1tBF;AAAA;AAAA;AAAA;AA2tBuC;;;AAgxCpB;;AAAA;ACthEkB;;ADuhEV;AAz2D3B;;AA42DE;;AAAA;AACwB;AAAA;AA12D1B;;AA02DE;AAAA;AAEO;AAAP;AAr+DF;AAAA;;AAAA;AAAA;AAmCA;AAAA;;AAAA;AAAA;AA08DiB;ACtiEiB;ADuiEzB;AAv6DT;AAAA;AAAA;AAAA;AAg6DS;;AAAA;AAAA;AAAP;AA78DF;AAAA;;AAAA;AAAA;AAw9DuB;;AAAA;AC3iEW;AD2iEZ;AACd;;AAAA;;AAAuB;AAAvB;AAAA;;AAAA;;AAh/DR;AAAA;;AAAA;AAAA;AAk/DE;AAl/DF;;AAk/DE;AAAA;AAr4DF;;AAs4DE;AAAA;AApyCA;;AAAA;;;AAEW;;AAgzCL;AAAe;;;AAEf;;AAAmB;;;AAQnB;;AAAA;AAAA;;AAAkB;AAKU;;AAAA;;;AAC4B;;AAAjB;;AAAiB;AAA9B;;AAAA;AAAZ;AAjiEtB;AAAA;AAAA;AAAA;AAoiEc;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;AAHE;AAAA;AAAA;AAKL;;AAAA;AAj9Df;AAAA;;AAAA;AAAA;AAk9DkB;AAXmB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAp7DkB;AAAA;;AAAA;AAo7DrD;AAAA;AAeA;;AAAA;;AAAA;;;AA/zC0B;;AA9uB5B;AAAA;AAAA;AAAA;AAgjE+B;AAA7B;;;AACE;;;;;;;AAAA;;;AChmEkC;;;ADgmElC;AA79DJ;AAAA;AAAA;AAAA;AA2pB6B;;AAAA;AA3pB7B;AA2pBE;AAAA;AAC0B;;;AAnpB5B;;AAmpBE;AAAA;;AAy0CE;AAzjEJ;AAAA;AAAA;AAAA;AA4jE4C;;;;;;;;;AAHxC;;;;ACxmEkC;;;ADwmElC;;;;AA/0C4D;;AAoB1C;;AAAA;AA9vBtB;AAAA;AAAA;AAAA;AAiwBc;;AAAA;AACsB;;AAAnB;AAFG;;AAGF;;AAHE;AAAA;AAAA;AAzqBpB;AAAA;;AAAA;AAAA;AA+qBkB;AAX0B;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjpBW;AAAA;;AAAA;AAipBrD;AAAA;AA9oBF;AAAA;;AAAA;AAAA;AA4pBoE;AAAjC;AA5pBnC;;AA4pBE;AAAA;AA9BE;;AAAA;;AAAA;;;;;;;;;;;;;;;;;AAoDJ;;;AArrBuD;AAAA;;AAAA;AAurBrB;AAAA;;AAAhC;AACA;;;;AAEA;;AAAA;;;;AAE0B;;;AAzsB5B;;AAysBE;AAAA;;AA4CF;;;;;;;AAr0BA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAuEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AApCA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA8vBE;;;AAAoB;;;AA/uBtB;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA0xBE;;;;;;;AA9wBF;AAAA;;AAAA;AAAA;AA0xBY;;;AAxzBZ;AAAA;;AAAA;AAAA;AAMA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAywBM;;AAAA;AAAJ;;;AACqB;;AAAA;;AAAA;AACF;;AAAA;AAAX;AAAN;;AAxwBJ;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AAixBM;;;AAAc;;AAAA;AAAA;;AAAA;;;;AAAd;;;;;;;;;;;AA3wBN;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AAuyBE;;;AApyBF;AAAA;;AAAA;AAAA;AAqyB4B;;;AA7zB5B;AAAA;;AAAA;AAAA;;;AA8zBuB;;AAAA;;AAAA;AAAA;;;AAAoB;;AAAA;;AAAA;;;AACjC;;AAAA;;AAAa;AAAb;;AACF;;AAAA;;AAAA;AAAJ;;;;;;;AACI;;AAAA;;AAAA;AAAJ;;;;;;;;;;;;;AAzyBJ;;AA4yBE;;AAAA;AACA;;AAAA;AAP6D;;;;;;AAtyB/D;AAAA;;AAAA;AAAA;;;;;;AAiwBU;;AAAA;;AAAA;AAAA;;AAAe;ACl3BS;ADm3BxB;;AAAgB;AACH;;AAAA;;AAAA;AACb;;AAAA;;AAAA;AAAwB;;AAAA;;AAAA;AAAxB;AAAN;;;;;AA5xBJ;AAAA;;AAAA;AAAA;;;;;;AA2BA;AAAA;;AAAA;AAAA;ACpHkC;ADy4BxB;;AAAA;AAAA;;AAAmB;AACN;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACV;;AAAA;;AC54BqB;AD44BrB;AAA+B;;AC54BV;AD44BU;AAA/B;AAAT;AAAA;;AAxxBJ;;AAyxBI;AAAA;;;;AAhDqB;;AAAA;;AAAA;AC71BS;AD81Bd;AAAZ;AAAA;;AACN;;;AAA4B;;;AAiCN;;;AA/BN;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;ACj2BgB;ADk2Bb;AACZ;;AAAA;;;AA6Be;;;AAiDxB;;;AACQ;;AAAgB;;AAAU;AAA1B;AACN;;;AAAoB;AAAP;;AAAA;;AAAA;AAhzBf;AAAA;;AAAA;AAAA;AAizBmB;;AAAA;AACoB;;AAAb;;AAAa;AAA9B;AAAP;;AAAA;;AAAA;AAIF;;;AAnyBuD;AAAA;;AAAA;AAoyBd;AAAA;AAAA;AACd;;;AAGA;AAAA;;;AACD;;AAAA;;;AAn5B1B;AAAA;AAAA;AAAA;AAq5BwB;;AAAA;;;AACT;;AAAA;AA/zBf;AAAA;;AAAA;AAAA;AAg0BkB;AAPD;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AASf;;AAAA;AAAA;AACA;AAKF;;;;;;;AAC6B;;AAArB;AAt0BR;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAw0BM;AAAJ;;;AAAwB;AAAP;;AAAA;AAEX;;AAAA;;AAAiB;AAAjB;AAAA;;AA5CN;;;AAAyB;;;AA3uB3B;;;;;;;;;;;;;;;;;;;;;;;AAiyBE;;AAAA;AAAA;;AAAA;AACA;;;AAr1BF;;AAs1BI;;AAAA;AACO;AAAP;;AAAA;AA11BJ;AAAA;;AAAA;AAAA;AAg2BqB;AAAA;;AAAA;ACj+BY;;ADk+BL;AACD;AAl2B3B;;AAm2BE;AAAA;AAt2BF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA42ByB;AAAnB;;AACJ;;;AACqB;;AAAA;;AAAA;AC5+BU;;AD6+BlB;AAAX;;AAz5BJ;AAAA;;AAAA;AAAA;ACtFkC;ADo/B1B;AAAmB;AAGN;;AAAA;AAAA;;AAAA;ACv/Ba;ADw/BE;AAC5B;AAA2B;AAIN;;AAAA;;AAAA;AA73B7B;AA63BE;AAAA;AAt0BF;;;;;;;;;;;;;;;;;;;;;;;AAu0BE;;AAAA;AAr8BF;AAAA;;AAAA;AAAA;AAw8BE;;AAAA;AAx8BF;;AAw8BE;AAAA;AAr8BF;AAAA;;AAAA;AAAA;AAw8BE;AAx8BF;;AAw8BE;AAAA;AA93BF;;AAi4BE;;AAAA;AAIA;;AAAA;AAl4BF;AAAA;;AAAA;AAAA;AA8xBmB;;AAAA;ACj6BmB;;;;;ADm6Bf;ACv6BU;;AD06Bd;AC56Be;AD66BN;AAApB;;AA4CoB;;;AAgH5B;;;AAn7BuD;AAAA;;AAAA;AAo7BZ;AAAA;AAAzC;AAYF;;;;;AA1iCA;AAAA;AAAA;AAAA;AA4iCmD;AACjD;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAKuB;;;AAAjB;AACuC;;AAA1B;;;AAAb;AAEgC;;AAA1B;;;AACa;;;AAAA;AAElB;;AAAA;;AAAA;AAAP;AAEM;;AAAwB;AAAxB;AAAA;;AAt+BR;AAAA;AAAA;AAAA;AAy+BE;;AAAA;AAz+BF;AAy+BE;AAAA;AAEA;;;AAr9BqD;AAs9B3B;;AAt9B2B;AAs9BnB;;AAn9BpC;AAAA;;AAAA;AAAA;AAo9BsC;AAAlC;AAp9BJ;;AAo9BI;AAAA;AAEA;AAE0B;;AACW;AAAA;AAAlB;;AAAkB;AACC;AAAjB;;AAAiB;;;;;;;AAJtC;;;;AClnCkC;;;ADknClC;;AAWsC;;AACb;AAAA;AAAA;;;AACD;AAAA;;;AAhlC5B;AAAA;AAAA;AAAA;AAmlCgB;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKL;;AAAA;AAhgCjB;AAAA;;AAAA;AAAA;AAigCoB;AAXwB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAn+BW;AAm+B3B;;AAn+B2B;AAm+BnD;AAAA;;;;;;AA0DJ;;;;;AAvoCA;AAAA;AAAA;AAAA;;AAAA;AA0oCE;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAIuB;;;AAAjB;AACuC;;AAA1B;;;AAAb;AACgC;;AAA1B;;;AACa;;;AAAA;AAElB;;AAAA;;AAAA;AAAP;AAEM;;AAAwB;AAAxB;AAAA;;AAjkCR;AAAA;AAAA;AAAA;AAokCE;;AAAA;AApkCF;AAokCE;AAAA;AAEA;;;AAhjCqD;AAijC3B;;AAjjC2B;AAijCnB;;AA9iCpC;AAAA;;AAAA;AAAA;AA+iCsC;AAAlC;AA/iCJ;;AA+iCI;AAAA;AAEA;AAE0B;;AACW;AAAA;AAAlB;;AAAkB;AACC;AAAjB;;AAAiB;;;;;;;AAJtC;;;;AC7sCkC;;;AD6sClC;;AAWsC;;AACb;AAAA;AAAA;;;AACD;AAAA;;;AA3qC5B;AAAA;AAAA;AAAA;AA8qCgB;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKL;;AAAA;AA3lCjB;AAAA;;AAAA;AAAA;AA4lCoB;AAXwB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9jCW;AA8jC3B;;AA9jC2B;AA8jCnD;AAAA;;;;;;AAgBJ;;;AAEgB;;AAnqChB;AAAA;;AAAA;AAAA;AAmqCS;AAAP;AACA;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AC1uCoC;AD0uCpC;AAAA;;;;AAAA;AA3qCF;AAAA;;AAAA;AAAA;AA+qCE;;;AA/rCF;AAAA;AAAA;AAAA;AAgsCiC;AAA7B;;;AACE;AAjrCN;AAAA;;AAAA;AAAA;;;;;;;AAirCM;;;AChvCgC;;;ADgvChC;AAjrCN;;AAksC0B;AAAtB;;AATE;AAzsCN;AAAA;AAAA;AAAA;AA4sC8C;AA5rC9C;AAAA;;AAAA;AAAA;;;;;;;;;AAyrCM;;;;ACxvCgC;;;ADwvChC;;;;;;;;AAsBN;;;;;;;AArnCuD;AAAA;;AAAA;AAAA;;AA6nCrB;AAAA;;AAAhC;AAGA;;;;AAGqC;AAAA;AAAA;AAAA;;AAAA;AAC/B;AAA+B;;AAAiB;AAAhD;AAAA;;AACA;AAAiC;;;AAAjC;AAAA;;AAAA;;AAGmB;;;AAAA;AAAA;AAAA;;AACzB;AAAA;AAGM;AAAA;;AAAA;;AAAwB;;;AAAxB;AAAA;;AACmB;;;AACzB;AAAA;AAGmB;ACvyCa;ADuyCb;AACb;;AAAiB;AAAjB;AAGuB;AAAzB;AA3tCN;AAAA;;AAAA;AAAA;AA4tCM;AAAJ;;;AACmB;;AC7yCa;AD6yCb;AA7tCrB;AAAA;;AAAA;AAAA;AA8tC8B;AC9yCI;AD+yCb;AAAjB;;AAIe;;AAAA;;AAAA;ACnzCe;ADozCL;AArpC7B;AAAA;;AAAA;AAAA;AAwpC2D;AAAnD;;AAxpCR;AAAA;;AAAA;AAAA;AAypCmC;;;AAA3B;AAAA;;AAGa;AC1zCgB;;AD0zChB;AAAA;;AAAA;;AACW;;;AAAyB;;;AAGvD;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAnxCF;AAAA;AAAA;AAAA;AA2xC+C;AAAvC;;AACN;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAQyB;;AAAA;;AAvrC3B;AAAA;;AAAA;AAAA;AAwrCoE;AAAjC;AAxrCnC;;AAwrCE;AAAA;AAEA;AAGiC;;AA3DM;;AA2DN;;;;;;;;;;;;;;AAHjC;;;;ACt1CoC;;;ADs1CpC;AAhsCoF;;AAAA;;AAAA;AA2sCrC;AAAA;AAAA;AACI;AAAhB;;AAAgB;AAA7C;;AAAuB;AAEZ;;AAAA;;;AACI;;AAAA;;;AACF;;AAAA;AACQ;;AAAA;;;AACD;;AAAA;;;AALe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAzC;AAhuCF;AAAA;AAAA;AAAA;AAyuC6B;;AAAA;AAzuC7B;AAyuCE;AAAA;AAGA;;AAAA;;AAAA;;AAAA;;;AAG0B;;;AAtuC5B;;AAsuCE;AAAA;;;;;;;;;;AAnD2D;;AAAA;;AAAA;;AAAA;;;;;;AAiE7D;;;;;;;AAvuCuD;AAAA;;AAAA;AAAA;;AA+uCrB;AAAA;;AAAhC;AAGA;;;;AAEqC;AAAA;AAAA;AAAA;;AAAA;AAC/B;AAA+B;;AAAiB;AAAhD;AAAA;;AACA;AAAiC;;;AAAjC;AAAA;;AAAA;;AAEmB;;;AAAA;AAAA;AAAA;;AACzB;AAAA;AAGM;AAAA;;AAAA;;AAAwB;;;AAAxB;AAAA;;AACmB;;;AACzB;AAAA;AAEmB;ACt5Ca;ADs5Cb;AACb;;AAAiB;AAAjB;AAEuB;AAAzB;AAz0CN;AAAA;;AAAA;AAAA;AA00CM;AAAJ;;;AACmB;;AC35Ca;AD25Cb;AA30CrB;AAAA;;AAAA;AAAA;AA40C8B;AC55CI;AD65Cb;AAAjB;;AAGe;;AAAA;;AAAA;ACh6Ce;ADi6CL;AAlwC7B;AAAA;;AAAA;AAAA;AAqwC2D;AAAnD;;AArwCR;AAAA;;AAAA;AAAA;AAswCmC;;;AAA3B;AAAA;;AAEa;ACt6CgB;;ADs6ChB;AAAA;;AAAA;;AACW;;;AAAyB;;;AAEvD;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAQA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEmB;;AAFnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAOyB;;AAAA;;AAhyC3B;AAAA;;AAAA;AAAA;AAiyCoE;AAAjC;AAjyCnC;;AAiyCE;AAAA;AAEA;AAGiC;;AAnDM;;AAmDN;;;;;;;;;;;;;;AAHjC;;;;AC/7CoC;;;AD+7CpC;AAzyCoF;;AAAA;;AAAA;AAmzCrC;AAAA;AAAA;AACI;AAAhB;;AAAgB;AAA7C;;AAAuB;AAEZ;;AAAA;;;AACI;;AAAA;;;AACF;;AAAA;AACQ;;AAAA;;;AACD;;AAAA;;;AALe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAzC;AAx0CF;AAAA;AAAA;AAAA;AAg1C6B;;AAAA;AAh1C7B;AAg1CE;AAAA;AAEA;;AAAA;;AAAA;;AAAA;;;AAE0B;;;AA30C5B;;AA20CE;AAAA;;;;;;;;;;AA5C2D;;AAAA;;AAAA;;AAAA;;;;;;AA+C7D;;;AAEQ;;AAAsC;;AAAhB;AAE5B;AAx5CF;AAAA;;AAAA;AAAA;;;;;;;;;;;AAw5CE;;;;AC99CoC;;;AD89CpC;AASA;AAIiB;;AAAA;AAAA;;;;;;;;;;;AAJjB;;;;ACv+CoC;;;ADu+CpC;;AAUF;;;AAl8CA;AAAA;AAAA;AAAA;AAm8CiC;;;AAChB;;AAAA;AC/+CoB;;ADg/C5B;AAAP;AAGF;;;;;;;AA91CuD;AAg2CtB;;AAh2CsB;AAg2Cd;AAAA;;AAAvC;AACA;;;;AAj2CqD;AAm2CjB;;AAn2CiB;AAm2CT;AAAA;AACF;AAAA;;;AAv2C0C;;AAAA;AAAA;AAgV9C;AAAA;AAwhCpB;;AAAiB;AAA5B;;AAAA;AAAP;AAEyB;;;AAAA;AAAA;AAAA;;AACzB;;;AAA+B;;AAAiB;AAA5B;;AAAA;AAId;AAAA;;;AAAA;AAAA;;AAAA;;AACA;;AAAiB;AAFjB;;AAAwB;;;AAAxB;AAAA;;AAOA;;AAAmB;;;ACxgDO;AD0gDX;AA77CvB;AAAA;;AAAA;AAAA;AA87CwC;AAAhC;AAAA;;AAGF;AAAJ;;;AAAmD;AAAP;;AAAA;AAGtC;;AAAA;;AAAuB;AAIN;AAAA;;;;;;;;AAAA;;;;ACxhDa;;;ADwhDb;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;AC5hDc;;;AD4hDd;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAt4C8D;;AAAA;;AAAA;AAgV9C;AAAA;AA6jCG;;;AAAvB;;;AAGD;;ACliDkB;;ADkiDlB;AACX;;AAA8B;AAGnB;;AAAA;AACX;;AAAuB;AAE7B;;AAAA;AA0DF;;;;;;;AAEE;;AAAA;AACwB;;AAj9C6B;AAi9C/C;;AAj9C+C;AAAA;;AAk9CnB;AAAA;;AAAlC;AACA;;;;AACwC;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAE5B;AAAA;;;AAAA;;AAAA;;AAAkB;AAAvB;;AAAA;AAAP;AAEmD;;AAAA;AAAA;AAAA;;AA39CiC;;AAAA;AAAA;AA49C5C;AAAA;AAAA;;AAAxC;AAC+C;AAAA;AAClC;;AAAiB;AAAvB;;AAAA;AAAP;AAnEkC;AAAA;AAAA;;AAAlC;AACA;;;;AAEuC;AAAA;AACG;AAAA;;;AA/5C0C;;AAAA;AAAA;AAgV9C;AAAA;AAglCpB;;AAAiB;AAA5B;;AAAA;AAAP;AACyB;;;AAAA;AAAA;AAAA;;AACzB;;;AAA+B;;AAAiB;AA+DzC;;AAAA;AAAP;AACyC;;AAAA;AAAjB;;AAAiB;AAAlC;;AAAA;;AAAA;AAAP;AACM;;AAAoB;AAG1B;;;;;;;;;;;;;;;;AAAA;;;;AC5nDoC;;;AD4nDpC;AAaoB;AA1lDtB;AAAA;AAAA;AAAA;AA6lDc;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKA;;AAAA;;;AACG;;AAAA;;;AAXN;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaf;;AAAA;AAAA;AAGA;;AAAA;;AAAA;;;AAG0B;;;AA7gD5B;;AA6gDE;AAAA;;AA7FM;AAAA;;;AAAA;AAAA;;AAAA;;AACA;;AAAiB;AAFjB;;AAAwB;;;AAAxB;AAAA;;AAOA;;AAAmB;;;AC/jDO;ADikDX;AAp/CvB;AAAA;;AAAA;AAAA;AAq/CwC;AAAhC;AAAA;;AAGF;AAAJ;;;AAAmD;AA8CnC;;;AA3CV;;AAAA;;AAAuB;AAIN;AAAA;;;;;;;;AAAA;;;;AC/kDa;;;AD+kDb;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;ACnlDc;;;ADmlDd;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AA77C8D;;AAAA;;AAAA;AAgV9C;AAAA;AAonCG;;;AAAvB;;;AAGD;;ACzlDkB;;ADylDlB;AACX;;AAA8B;AAGnB;;AAAA;AACX;;AAAuB;AAoBb;;;AAsClB;;;AAtgDsF;;AAAA;;AAAA;AAgV9C;AAAA;AAAA;AA6rC4C;;;AAA1D;;;AACH;;AChqDc;;ADgqDd;AACf;;AAA0B;AA/rCM;AAAA;AAAA;AAksCpB;;AAAiB;AAA5B;;AAAA;AAAP;AAGa;AAAA;;;;;;;;AAAA;;;;AC3qDuB;;;AD2qDvB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIC;AAAA;;;;;;;;AAAA;;;;AC/qDsB;;;AD+qDtB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIG;;AAAA;AACb;;AAAmB;AAAnB;AAEA;;AAAA;AAAJ;;;;;;;AACA;;AAAA;AAAA;AAWF;;;;;;;AAziDuD;AAAA;;AAAA;AAAA;;AAgjDrB;AAAA;;AAAhC;AACA;;;;AAEqC;AAAA;AAAA;AAAA;;AAAA;AAC/B;AAAuB;;;AAAvB;AACA;AAAyB;;AAAiB;AAA1C;AACmB;;;AAAA;AAAA;AACzB;AACO;;AAAA;;;AAAuB;;AAAA;;AAAA;AAAvB;;;;AAAP;AAGM;;AAAA;;AAAA;;AAAwB;;;AACxB;;AAAmB;;;AACzB;AAAA;AAGmB;ACttDa;ADstDb;AACb;;AAAiB;AAvoDzB;AAAA;;AAAA;AAAA;AAwoDS;AAAP;AA5qDF;AAAA;AAAA;AAAA;AA+qD+C;AAAvC;;AACN;;AAAA;;AACiB;;AADjB;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAhrDF;AAAA;AAAA;AAAA;AAwrDoB;;;AAAZ;;AACA;;AAAA;AAAqC;;AAAX;AACA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAGL;AAAvB;;AACA;;AAAA;;;;;AAAJ;;;AACE;;AAAA;;AAAA;AAAA;;AAAe;AAAf;;;;AAIiB;;AAAA;AAAA;;AAAA;AC9uDgB;;AD+uDV;AA9kD3B;AAAA;;AAAA;AAAA;AClKkC;ADmvDE;AAAf;ACnvDa;ADovDP;AAGnB;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAmB;;;AACzB;AAAA;AAGA;AAE0B;;AACH;;AApDM;;AAoDN;AAAA;AAAA;;;;;;;;;;AAHvB;;;;AC9vDoC;;;AD8vDpC;AASM;AAAA;;AAAuB;AAAvB;;AACA;;AAAA;;AAAsB;AAAtB;;AAGN;;;AAxoDF;AAAA;AAAA;AAAA;AAyoD6B;AAAA;AAzoD7B;AAyoDE;AAAA;AAEA;;AAAA;;;AACE;AAE0B;;;;;;;;;;;;AAF1B;;;;AC/wDkC;;;AD+wDlC;AAUF;;AAAA;;;AAEE;;AAAA;;;AACE;;;;;;;;;;;;;;AAAA;;;;AC5xDgC;;;AD4xDhC;AAQA;;AAAA;AAAA;;;AAEuB;;AAAA;;AA1oD7B;AAAA;;AAAA;AAAA;AA2oDsE;AAAjC;AA3oDrC;;AA2oDI;AAAA;AAmBwB;;;AA9qD5B;;AA8qDE;AAAA;;AAfyB;;AAAA;AAAA;;;AACE;AAAA;;;AACL;;AAAA;AA9vDxB;AAAA;AAAA;AAAA;AAgwDiB;;AAAA;AAzqDjB;AAAA;;AAAA;AAAA;AA0qDoB;AAEJ;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAPH;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaf;;AAAA;AAAA;;;;;;;;;;;;AAcJ;;;;;;;AAtxDA;AAAA;AAAA;AAAA;AA6xDkC;AAAzB;AAAP;AAnrDqD;AAAA;;AAAA;AAAA;;AAorDrB;AAAA;;AAAhC;AACA;;;;AAEqC;AAAA;AAAA;AAAA;;AAAA;AAC/B;AAAuB;;;AAAvB;AACA;AAAyB;;AAAiB;AAA1C;AACmB;;;AAAA;AAAA;AACzB;AACO;;AAAA;;;AAAuB;;AAAA;;AAAA;AAAvB;;;;AAAP;AAEM;;AAAA;;AAAA;;AAAwB;;;AACxB;;AAAmB;;;AACzB;AAAA;AAEmB;ACx1Da;ADw1Db;AACb;;AAAiB;AAzwDzB;AAAA;;AAAA;AAAA;AA0wDS;AAAP;AAGA;;AAAA;;AACiB;;AADjB;AAAA;;;AAAA;;AAAA;;AAEmB;;AAFnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAjzDF;AAAA;AAAA;AAAA;AAuzDoB;;;AAAZ;;AACA;;AAAA;AAAqC;;AAAX;AACA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAGL;AAAvB;;AACA;;AAAA;;;;;AAAJ;;;AACE;;AAAA;;AAAA;AAAA;;AAAe;AAAf;;;;AAIiB;;AAAA;;AAAA;AC72DgB;;AD82DV;AA7sD3B;AAAA;;AAAA;AAAA;AClKkC;ADk3DE;AAAf;ACl3Da;ADm3DP;AAEnB;;AAAA;;AAAA;;AAAmB;;;AAAnB;AAAA;;AACN;AAAA;AAEA;AAE0B;;AACH;;AA7CM;;AA6CN;AAAA;AAAA;;;;;;;;;;AAHvB;;;;AC33DoC;;;AD23DpC;AASA;;AAAA;;;AACE;AAGqB;;;;;;;;AAHrB;;;ACr4DkC;;;ADq4DlC;AASI;;AAAA;;AAAA;AAAA;;AAAuB;AAAvB;;AACA;;AAAA;;AAAA;AAAA;;AAAsB;AAAtB;AAAA;;AAAA;;AAEN;;AAAA;AAAA;;;AA9wDF;AAAA;AAAA;AAAA;AA+wD6B;AAAA;AA/wD7B;AA+wDE;AAAA;AAEA;;;AACE;;AAAA;;;AACE;;;;;;;;;;;;;;AAAA;;;;ACt5DgC;;;ADs5DhC;AAQA;;AAAA;AAAA;;;AAEuB;;AAAA;;AApwD7B;AAAA;;AAAA;AAAA;AAqwDsE;AAAjC;AArwDrC;;AAqwDI;AAAA;AAkBwB;;;AAvyD5B;;AAuyDE;AAAA;;AAfyB;;AAAA;AAAA;;;AACE;AAAA;;;AACL;;AAAA;AAv3DxB;AAAA;AAAA;AAAA;AAy3DiB;;AAAA;AAlyDjB;AAAA;;AAAA;AAAA;AAmyDoB;AAEJ;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAPH;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaf;;AAAA;AAAA;;;;;;;;;;;;AAaJ;;;AApyDuD;AAAA;;AAAA;AA8yDnB;AAAA;AAAA;;AAAlC;AAC0C;AAAA;AACS;AAAA;;;AAnzDiC;;AAAA;AAAA;AAgV9C;AAAA;AAo+CtC;;;;AACqB;AAAA;;;AACf;AAAkC;;AAAiB;AAz3D3D;AAAA;;AAAA;AAAA;AA63DW;;AAAA;;;AAE2B;;AAAjB;;AAAiB;AAH9B;;AAAA;AAA6B;;;AAMf;ACl9DY;ADk9DZ;AAAd;;AAAa;AACb;AAAA;;AAAyB;AACzB;;AAAA;;AAAoB;AAE1B;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AA8BF;;;AAj2DsF;;AAAA;;AAAA;AA2U9C;AAAA;AAAA;;AAwhDtC;AAnhDsC;AAAA;AAAA;AAqhDhB;;AAAiB;AAAhC;;AAAA;AAAP;AAE+B;AAAA;;;;;;;;AAAA;;;;AC7/DK;;;AD6/DL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAKD;AAAA;;;;;;;;AAAA;;;;AClgEM;;;ADkgEN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAMb;;AAAA;AACX;;AAAuB;AAniDS;AAAA;AAAA;AAuiDJ;;;AAEX;;;AAGN;AC9gEkB;;AD+gEb;AAEtB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000 10000 1000000 1000000000000"
    },
    "18": {
      "op": "bytecblock \"base_token_id\" 0x151f7c75 \"total_borrows\" \"loan_record\" \"total_deposits\" \"active_loan_records\" \"admin_account\" \"accepted_collaterals\" \"last_apr_bps\" \"circulating_lst\" \"borrow_index_wad\" \"fee_pool\" \"liq_threshold_bps\" \"lst_token_id\" \"buyout_token_id\" 0x09ef525f 0xae859f3b \"base_bps\" \"max_apr_bps\" \"prev_apr_bps\" 0x00 \"ltv_bps\" \"accepted_collaterals_count\" \"util_cap_bps\" \"last_accrual_ts\" \"liq_bonus_bps\" \"rate_model_type\" \"kink_norm_bps\" \"slope1_bps\" \"slope2_bps\" \"ema_alpha_bps\" \"max_apr_step_bps\" \"util_ema_bps\" \"params_update_nonce\" \"origination_fee_bps\" \"protocol_share_bps\" \"oracle_app\" \"power_gamma_q16\" \"scarcity_K_bps\" \"last_scaled_down_disbursement\" \"last_max_borrow\" \"last_requested_loan\" \"debug_diff\" \"params_updated_at\""
    },
    "653": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "655": {
      "op": "bz main_after_if_else@36",
      "stack_out": []
    },
    "658": {
      "op": "pushbytess 0x3b01665e 0x7a6ddbe9 0xe25d809f 0x17c33662 0x5efce39a 0x5cac25a9 // method \"createApplication(account,uint64)void\", method \"initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void\", method \"setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void\", method \"generateLSTToken(pay)void\", method \"optInToLST(uint64,pay)void\", method \"configureLSTToken(axfer,uint64)void\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)"
      ]
    },
    "690": {
      "op": "bytec 15 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "692": {
      "op": "bytec 16 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "694": {
      "op": "pushbytess 0x6c6337c0 0xe596ac73 0x86a6b1bb 0x72c5c57b 0xbae4c238 0x3e41a49b 0x15a5b25e 0x8553cffa 0xb4a74766 0xae99f45b 0x3dea8a60 0xbed00024 0xd217f842 0xf1f38ba6 0xb0d6e8eb 0xd0e69812 0x5f0d6f03 0xc861aedf 0x70d451f7 0xdaa7f7f2 0x3172ca9d 0xef0bd27a // method \"getAcceptedCollateralsCount()uint64\", method \"getOraclePrice(uint64)uint64\", method \"addNewCollateralType(uint64,uint64,pay,uint64)void\", method \"depositASA(axfer,uint64,pay)void\", method \"depositAlgo(pay,uint64,pay)void\", method \"withdrawDeposit(axfer,uint64,uint64,pay)void\", method \"borrow(axfer,uint64,uint64,uint64,uint64,pay)void\", method \"accrueLoanInterest(account,account)void\", method \"current_apr_bps()uint64\", method \"getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)\", method \"repayLoanASA(axfer,uint64)void\", method \"repayLoanAlgo(pay,uint64)void\", method \"withdrawPlatformFees(account,pay)void\", method \"buyoutSplitASA(account,account,axfer,axfer,uint64)void\", method \"buyoutSplitAlgo(account,account,axfer,pay,uint64)void\", method \"maxWithdrawableCollateralLST(uint64)uint64\", method \"withdrawCollateral(uint64,uint64,uint64)void\", method \"liquidatePartialASA(account,axfer,uint64,uint64)void\", method \"liquidatePartialAlgo(account,pay,uint64,uint64)void\", method \"getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)\", method \"gas()void\", method \"calculateCollateralValueUSD(uint64,uint64,uint64)uint64\"",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64)void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(liquidatePartialASA(account,axfer,uint64,uint64)void)",
        "Method(liquidatePartialAlgo(account,pay,uint64,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(liquidatePartialASA(account,axfer,uint64,uint64)void)",
        "Method(liquidatePartialAlgo(account,pay,uint64,uint64)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)"
      ]
    },
    "806": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64)void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(liquidatePartialASA(account,axfer,uint64,uint64)void)",
        "Method(liquidatePartialAlgo(account,pay,uint64,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(liquidatePartialASA(account,axfer,uint64,uint64)void)",
        "Method(liquidatePartialAlgo(account,pay,uint64,uint64)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "tmp%2#0"
      ]
    },
    "809": {
      "op": "match main_createApplication_route@3 main_initApplication_route@4 main_setRateParams_route@5 main_generateLSTToken_route@6 main_optInToLST_route@7 main_configureLSTToken_route@8 main_getCirculatingLST_route@9 main_getTotalDeposits_route@10 main_getAcceptedCollateralsCount_route@11 main_getOraclePrice_route@12 main_addNewCollateralType_route@13 main_depositASA_route@14 main_depositAlgo_route@15 main_withdrawDeposit_route@16 main_borrow_route@17 main_accrueLoanInterest_route@18 main_current_apr_bps_route@19 main_getLoanRecord_route@20 main_repayLoanASA_route@21 main_repayLoanAlgo_route@22 main_withdrawPlatformFees_route@23 main_buyoutSplitASA_route@24 main_buyoutSplitAlgo_route@25 main_maxWithdrawableCollateralLST_route@26 main_withdrawCollateral_route@27 main_liquidatePartialASA_route@28 main_liquidatePartialAlgo_route@29 main_getLoanStatus_route@30 main_gas_route@31 main_calculateCollateralValueUSD_route@32",
      "stack_out": []
    },
    "871": {
      "block": "main_after_if_else@36",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "872": {
      "op": "return",
      "stack_out": []
    },
    "873": {
      "block": "main_calculateCollateralValueUSD_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%217#0"
      ],
      "stack_out": [
        "tmp%217#0"
      ]
    },
    "875": {
      "op": "!",
      "defined_out": [
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0"
      ]
    },
    "876": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "877": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%219#0"
      ],
      "stack_out": [
        "tmp%219#0"
      ]
    },
    "879": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "880": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%46#0"
      ]
    },
    "883": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%46#0",
        "reinterpret_bytes[8]%47#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%46#0",
        "reinterpret_bytes[8]%47#0"
      ]
    },
    "886": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%46#0",
        "tmp%221#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%46#0",
        "tmp%221#0"
      ]
    },
    "887": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%46#0",
        "reinterpret_bytes[8]%48#0",
        "tmp%221#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%46#0",
        "tmp%221#0",
        "reinterpret_bytes[8]%48#0"
      ]
    },
    "890": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%46#0",
        "tmp%221#0",
        "tmp%222#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%46#0",
        "tmp%221#0",
        "tmp%222#0"
      ]
    },
    "891": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "894": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0"
      ]
    },
    "895": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0",
        "0x151f7c75"
      ]
    },
    "896": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ]
    },
    "897": {
      "op": "concat",
      "defined_out": [
        "tmp%223#0"
      ],
      "stack_out": [
        "tmp%223#0"
      ]
    },
    "898": {
      "op": "log",
      "stack_out": []
    },
    "899": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "900": {
      "op": "return",
      "stack_out": []
    },
    "901": {
      "block": "main_gas_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%213#0"
      ],
      "stack_out": [
        "tmp%213#0"
      ]
    },
    "903": {
      "op": "!",
      "defined_out": [
        "tmp%214#0"
      ],
      "stack_out": [
        "tmp%214#0"
      ]
    },
    "904": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "905": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%215#0"
      ],
      "stack_out": [
        "tmp%215#0"
      ]
    },
    "907": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "908": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "909": {
      "op": "return",
      "stack_out": []
    },
    "910": {
      "block": "main_getLoanStatus_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%206#0"
      ],
      "stack_out": [
        "tmp%206#0"
      ]
    },
    "912": {
      "op": "!",
      "defined_out": [
        "tmp%207#0"
      ],
      "stack_out": [
        "tmp%207#0"
      ]
    },
    "913": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "914": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%208#0"
      ],
      "stack_out": [
        "tmp%208#0"
      ]
    },
    "916": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "917": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%12#0"
      ]
    },
    "920": {
      "op": "btoi",
      "defined_out": [
        "tmp%210#0"
      ],
      "stack_out": [
        "tmp%210#0"
      ]
    },
    "921": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%211#0"
      ],
      "stack_out": [
        "tmp%211#0"
      ]
    },
    "923": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus",
      "op": "callsub getLoanStatus",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ]
    },
    "926": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%0#0"
      ]
    },
    "928": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0"
      ]
    },
    "929": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "elements_to_encode%1#0"
      ]
    },
    "931": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "932": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%2#0"
      ]
    },
    "934": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "935": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "elements_to_encode%3#0"
      ]
    },
    "937": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "938": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "elements_to_encode%4#0"
      ]
    },
    "940": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "941": {
      "op": "bytec 20 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00"
      ]
    },
    "943": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00",
        "0"
      ]
    },
    "944": {
      "op": "uncover 8",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00",
        "0",
        "elements_to_encode%5#0"
      ]
    },
    "946": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%6#0",
        "encoded_bool%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0"
      ]
    },
    "947": {
      "op": "bytec 20 // 0x00",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "949": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00",
        "0"
      ]
    },
    "950": {
      "op": "uncover 8",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00",
        "0",
        "elements_to_encode%6#0"
      ]
    },
    "952": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "953": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%6#0"
      ]
    },
    "955": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "957": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%10#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "958": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%8#0"
      ]
    },
    "960": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%10#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "961": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%9#0"
      ]
    },
    "963": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "964": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%10#0"
      ]
    },
    "966": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "967": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_bool%0#0"
      ]
    },
    "969": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "970": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0"
      ]
    },
    "971": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "972": {
      "op": "getbit",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ]
    },
    "973": {
      "op": "pushint 321 // 321"
    },
    "976": {
      "op": "swap",
      "defined_out": [
        "321",
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "321",
        "is_true%0#0"
      ]
    },
    "977": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "978": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "0x151f7c75"
      ]
    },
    "979": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "980": {
      "op": "concat",
      "defined_out": [
        "tmp%212#0"
      ],
      "stack_out": [
        "tmp%212#0"
      ]
    },
    "981": {
      "op": "log",
      "stack_out": []
    },
    "982": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "983": {
      "op": "return",
      "stack_out": []
    },
    "984": {
      "block": "main_liquidatePartialAlgo_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%197#0"
      ],
      "stack_out": [
        "tmp%197#0"
      ]
    },
    "986": {
      "op": "!",
      "defined_out": [
        "tmp%198#0"
      ],
      "stack_out": [
        "tmp%198#0"
      ]
    },
    "987": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "988": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%199#0"
      ],
      "stack_out": [
        "tmp%199#0"
      ]
    },
    "990": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "991": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%11#0"
      ]
    },
    "994": {
      "op": "btoi",
      "defined_out": [
        "tmp%201#0"
      ],
      "stack_out": [
        "tmp%201#0"
      ]
    },
    "995": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0"
      ]
    },
    "997": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%202#0",
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%202#0",
        "tmp%203#0"
      ]
    },
    "999": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%202#0",
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%202#0",
        "tmp%203#0",
        "1"
      ]
    },
    "1000": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%21#0",
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0",
        "gtxn_idx%21#0"
      ]
    },
    "1001": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%21#0",
        "gtxn_idx%21#0 (copy)",
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0",
        "gtxn_idx%21#0",
        "gtxn_idx%21#0 (copy)"
      ]
    },
    "1002": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%21#0",
        "gtxn_type%21#0",
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0",
        "gtxn_idx%21#0",
        "gtxn_type%21#0"
      ]
    },
    "1004": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%21#0",
        "gtxn_type%21#0",
        "pay",
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0",
        "gtxn_idx%21#0",
        "gtxn_type%21#0",
        "pay"
      ]
    },
    "1005": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%21#0",
        "gtxn_type_matches%21#0",
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0",
        "gtxn_idx%21#0",
        "gtxn_type_matches%21#0"
      ]
    },
    "1006": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%202#0",
        "gtxn_idx%21#0"
      ]
    },
    "1007": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%21#0",
        "reinterpret_bytes[8]%44#0",
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0",
        "gtxn_idx%21#0",
        "reinterpret_bytes[8]%44#0"
      ]
    },
    "1010": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%21#0",
        "tmp%202#0",
        "tmp%204#0"
      ],
      "stack_out": [
        "tmp%202#0",
        "gtxn_idx%21#0",
        "tmp%204#0"
      ]
    },
    "1011": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%21#0",
        "reinterpret_bytes[8]%45#0",
        "tmp%202#0",
        "tmp%204#0"
      ],
      "stack_out": [
        "tmp%202#0",
        "gtxn_idx%21#0",
        "tmp%204#0",
        "reinterpret_bytes[8]%45#0"
      ]
    },
    "1014": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%21#0",
        "tmp%202#0",
        "tmp%204#0",
        "tmp%205#0"
      ],
      "stack_out": [
        "tmp%202#0",
        "gtxn_idx%21#0",
        "tmp%204#0",
        "tmp%205#0"
      ]
    },
    "1015": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidatePartialAlgo",
      "op": "callsub liquidatePartialAlgo",
      "stack_out": []
    },
    "1018": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1019": {
      "op": "return",
      "stack_out": []
    },
    "1020": {
      "block": "main_liquidatePartialASA_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "1022": {
      "op": "!",
      "defined_out": [
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%189#0"
      ]
    },
    "1023": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1024": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%190#0"
      ]
    },
    "1026": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1027": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "1030": {
      "op": "btoi",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "1031": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0"
      ]
    },
    "1033": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%193#0",
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%193#0",
        "tmp%194#0"
      ]
    },
    "1035": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%193#0",
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%193#0",
        "tmp%194#0",
        "1"
      ]
    },
    "1036": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%20#0",
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0",
        "gtxn_idx%20#0"
      ]
    },
    "1037": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%20#0",
        "gtxn_idx%20#0 (copy)",
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0",
        "gtxn_idx%20#0",
        "gtxn_idx%20#0 (copy)"
      ]
    },
    "1038": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%20#0",
        "gtxn_type%20#0",
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0"
      ]
    },
    "1040": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%20#0",
        "gtxn_type%20#0",
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0",
        "axfer"
      ]
    },
    "1042": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%20#0",
        "gtxn_type_matches%20#0",
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0",
        "gtxn_idx%20#0",
        "gtxn_type_matches%20#0"
      ]
    },
    "1043": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%193#0",
        "gtxn_idx%20#0"
      ]
    },
    "1044": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%20#0",
        "reinterpret_bytes[8]%42#0",
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0",
        "gtxn_idx%20#0",
        "reinterpret_bytes[8]%42#0"
      ]
    },
    "1047": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%20#0",
        "tmp%193#0",
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%193#0",
        "gtxn_idx%20#0",
        "tmp%195#0"
      ]
    },
    "1048": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%20#0",
        "reinterpret_bytes[8]%43#0",
        "tmp%193#0",
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%193#0",
        "gtxn_idx%20#0",
        "tmp%195#0",
        "reinterpret_bytes[8]%43#0"
      ]
    },
    "1051": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%20#0",
        "tmp%193#0",
        "tmp%195#0",
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%193#0",
        "gtxn_idx%20#0",
        "tmp%195#0",
        "tmp%196#0"
      ]
    },
    "1052": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidatePartialASA",
      "op": "callsub liquidatePartialASA",
      "stack_out": []
    },
    "1055": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1056": {
      "op": "return",
      "stack_out": []
    },
    "1057": {
      "block": "main_withdrawCollateral_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "1059": {
      "op": "!",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "1060": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1061": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%183#0"
      ]
    },
    "1063": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1064": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%39#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%39#0"
      ]
    },
    "1067": {
      "op": "btoi",
      "defined_out": [
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0"
      ]
    },
    "1068": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%40#0",
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0",
        "reinterpret_bytes[8]%40#0"
      ]
    },
    "1071": {
      "op": "btoi",
      "defined_out": [
        "tmp%185#0",
        "tmp%186#0"
      ],
      "stack_out": [
        "tmp%185#0",
        "tmp%186#0"
      ]
    },
    "1072": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%41#0",
        "tmp%185#0",
        "tmp%186#0"
      ],
      "stack_out": [
        "tmp%185#0",
        "tmp%186#0",
        "reinterpret_bytes[8]%41#0"
      ]
    },
    "1075": {
      "op": "btoi",
      "defined_out": [
        "tmp%185#0",
        "tmp%186#0",
        "tmp%187#0"
      ],
      "stack_out": [
        "tmp%185#0",
        "tmp%186#0",
        "tmp%187#0"
      ]
    },
    "1076": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawCollateral",
      "op": "callsub withdrawCollateral",
      "stack_out": []
    },
    "1079": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1080": {
      "op": "return",
      "stack_out": []
    },
    "1081": {
      "block": "main_maxWithdrawableCollateralLST_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "1083": {
      "op": "!",
      "defined_out": [
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%176#0"
      ]
    },
    "1084": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1085": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "1087": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1088": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%38#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%38#0"
      ]
    },
    "1091": {
      "op": "btoi",
      "defined_out": [
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%179#0"
      ]
    },
    "1092": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLST",
      "op": "callsub maxWithdrawableCollateralLST",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "1095": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "1096": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "1097": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "1098": {
      "op": "concat",
      "defined_out": [
        "tmp%180#0"
      ],
      "stack_out": [
        "tmp%180#0"
      ]
    },
    "1099": {
      "op": "log",
      "stack_out": []
    },
    "1100": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1101": {
      "op": "return",
      "stack_out": []
    },
    "1102": {
      "block": "main_buyoutSplitAlgo_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "1104": {
      "op": "!",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "1105": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1106": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "1108": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1109": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "1112": {
      "op": "btoi",
      "defined_out": [
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0"
      ]
    },
    "1113": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "1115": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%9#0",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "1118": {
      "op": "btoi",
      "defined_out": [
        "tmp%169#0",
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%170#0"
      ]
    },
    "1119": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%169#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0"
      ]
    },
    "1121": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%169#0",
        "tmp%171#0",
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "tmp%172#0"
      ]
    },
    "1123": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%169#0",
        "tmp%171#0",
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "tmp%172#0",
        "2"
      ]
    },
    "1125": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%18#0",
        "tmp%169#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0"
      ]
    },
    "1126": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)",
        "tmp%169#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)"
      ]
    },
    "1127": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "tmp%169#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ]
    },
    "1129": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "tmp%169#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "axfer"
      ]
    },
    "1131": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0",
        "tmp%169#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0"
      ]
    },
    "1132": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0"
      ]
    },
    "1133": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%18#0",
        "tmp%169#0",
        "tmp%171#0",
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0",
        "tmp%173#0"
      ]
    },
    "1135": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%18#0",
        "tmp%169#0",
        "tmp%171#0",
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0",
        "tmp%173#0",
        "1"
      ]
    },
    "1136": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "tmp%169#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0",
        "gtxn_idx%19#0"
      ]
    },
    "1137": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%19#0 (copy)",
        "tmp%169#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%19#0 (copy)"
      ]
    },
    "1138": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type%19#0",
        "tmp%169#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type%19#0"
      ]
    },
    "1140": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type%19#0",
        "pay",
        "tmp%169#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type%19#0",
        "pay"
      ]
    },
    "1141": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type_matches%19#0",
        "tmp%169#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type_matches%19#0"
      ]
    },
    "1142": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0",
        "gtxn_idx%19#0"
      ]
    },
    "1143": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "reinterpret_bytes[8]%37#0",
        "tmp%169#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "reinterpret_bytes[8]%37#0"
      ]
    },
    "1146": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "tmp%169#0",
        "tmp%171#0",
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%169#0",
        "tmp%171#0",
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "tmp%174#0"
      ]
    },
    "1147": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutSplitAlgo",
      "op": "callsub buyoutSplitAlgo",
      "stack_out": []
    },
    "1150": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1151": {
      "op": "return",
      "stack_out": []
    },
    "1152": {
      "block": "main_buyoutSplitASA_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "1154": {
      "op": "!",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "1155": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1156": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "1158": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1159": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "1162": {
      "op": "btoi",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "1163": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "1165": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%7#0",
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "1168": {
      "op": "btoi",
      "defined_out": [
        "tmp%158#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%159#0"
      ]
    },
    "1169": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%158#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0"
      ]
    },
    "1171": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%158#0",
        "tmp%160#0",
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "tmp%161#0"
      ]
    },
    "1173": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%158#0",
        "tmp%160#0",
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "tmp%161#0",
        "2"
      ]
    },
    "1175": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%16#0",
        "tmp%158#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0"
      ]
    },
    "1176": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)",
        "tmp%158#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)"
      ]
    },
    "1177": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "tmp%158#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0"
      ]
    },
    "1179": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "tmp%158#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "axfer"
      ]
    },
    "1181": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0",
        "tmp%158#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0"
      ]
    },
    "1182": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0"
      ]
    },
    "1183": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%16#0",
        "tmp%158#0",
        "tmp%160#0",
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0",
        "tmp%162#0"
      ]
    },
    "1185": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%16#0",
        "tmp%158#0",
        "tmp%160#0",
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0",
        "tmp%162#0",
        "1"
      ]
    },
    "1186": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_idx%17#0",
        "tmp%158#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0",
        "gtxn_idx%17#0"
      ]
    },
    "1187": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)",
        "tmp%158#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0",
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)"
      ]
    },
    "1188": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "tmp%158#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0"
      ]
    },
    "1190": {
      "op": "pushint 4 // axfer",
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "axfer"
      ]
    },
    "1192": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0",
        "tmp%158#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0",
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0"
      ]
    },
    "1193": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0",
        "gtxn_idx%17#0"
      ]
    },
    "1194": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_idx%17#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%158#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0",
        "gtxn_idx%17#0",
        "reinterpret_bytes[8]%36#0"
      ]
    },
    "1197": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_idx%17#0",
        "tmp%158#0",
        "tmp%160#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%158#0",
        "tmp%160#0",
        "gtxn_idx%16#0",
        "gtxn_idx%17#0",
        "tmp%163#0"
      ]
    },
    "1198": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutSplitASA",
      "op": "callsub buyoutSplitASA",
      "stack_out": []
    },
    "1201": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1202": {
      "op": "return",
      "stack_out": []
    },
    "1203": {
      "block": "main_withdrawPlatformFees_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "1205": {
      "op": "!",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "1206": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1207": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "1209": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1210": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "1213": {
      "op": "btoi",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "1214": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "1216": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%151#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%152#0"
      ]
    },
    "1218": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%151#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "tmp%152#0",
        "1"
      ]
    },
    "1219": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%15#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "gtxn_idx%15#0"
      ]
    },
    "1220": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)"
      ]
    },
    "1221": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0"
      ]
    },
    "1223": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "pay",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "pay"
      ]
    },
    "1224": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0"
      ]
    },
    "1225": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%151#0",
        "gtxn_idx%15#0"
      ]
    },
    "1226": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawPlatformFees",
      "op": "callsub withdrawPlatformFees",
      "stack_out": []
    },
    "1229": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1230": {
      "op": "return",
      "stack_out": []
    },
    "1231": {
      "block": "main_repayLoanAlgo_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "1233": {
      "op": "!",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "1234": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1235": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "1237": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1238": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "1240": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0",
        "1"
      ]
    },
    "1241": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0"
      ]
    },
    "1242": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)"
      ]
    },
    "1243": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0"
      ]
    },
    "1245": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "pay"
      ]
    },
    "1246": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0"
      ]
    },
    "1247": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%14#0"
      ]
    },
    "1248": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%35#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%35#0"
      ]
    },
    "1251": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%14#0",
        "tmp%145#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "tmp%145#0"
      ]
    },
    "1252": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo",
      "op": "callsub repayLoanAlgo",
      "stack_out": []
    },
    "1255": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1256": {
      "op": "return",
      "stack_out": []
    },
    "1257": {
      "block": "main_repayLoanASA_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "1259": {
      "op": "!",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "1260": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1261": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "1263": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1264": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "1266": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0",
        "1"
      ]
    },
    "1267": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0"
      ]
    },
    "1268": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)"
      ]
    },
    "1269": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ]
    },
    "1271": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "axfer"
      ]
    },
    "1273": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0"
      ]
    },
    "1274": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%13#0"
      ]
    },
    "1275": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%13#0",
        "reinterpret_bytes[8]%34#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "reinterpret_bytes[8]%34#0"
      ]
    },
    "1278": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "tmp%139#0"
      ]
    },
    "1279": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanASA",
      "op": "callsub repayLoanASA",
      "stack_out": []
    },
    "1282": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1283": {
      "op": "return",
      "stack_out": []
    },
    "1284": {
      "block": "main_getLoanRecord_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "1286": {
      "op": "!",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "1287": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1288": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "1290": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1291": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "1294": {
      "op": "btoi",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "1295": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "1297": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "1300": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0",
        "0x151f7c75"
      ]
    },
    "1301": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%132#0"
      ]
    },
    "1302": {
      "op": "concat",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "1303": {
      "op": "log",
      "stack_out": []
    },
    "1304": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1305": {
      "op": "return",
      "stack_out": []
    },
    "1306": {
      "block": "main_current_apr_bps_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "1308": {
      "op": "!",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "1309": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1310": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "1312": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1313": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "1316": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "1317": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "1318": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "1319": {
      "op": "concat",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "1320": {
      "op": "log",
      "stack_out": []
    },
    "1321": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1322": {
      "op": "return",
      "stack_out": []
    },
    "1323": {
      "block": "main_accrueLoanInterest_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "1325": {
      "op": "!",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "1326": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1327": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "1329": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1330": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "1333": {
      "op": "btoi",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "1334": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "1336": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "1339": {
      "op": "btoi",
      "defined_out": [
        "tmp%118#0",
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%118#0",
        "tmp%119#0"
      ]
    },
    "1340": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%118#0",
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%118#0",
        "tmp%120#0"
      ]
    },
    "1342": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest",
      "op": "callsub accrueLoanInterest",
      "stack_out": []
    },
    "1345": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1346": {
      "op": "return",
      "stack_out": []
    },
    "1347": {
      "block": "main_borrow_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "1349": {
      "op": "!",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "1350": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1351": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "1353": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1354": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "1356": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0",
        "2"
      ]
    },
    "1358": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1359": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ]
    },
    "1360": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ]
    },
    "1362": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0",
        "axfer"
      ]
    },
    "1364": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ]
    },
    "1365": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1366": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%30#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%30#0"
      ]
    },
    "1369": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%109#0"
      ]
    },
    "1370": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%31#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%31#0"
      ]
    },
    "1373": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "tmp%110#0"
      ]
    },
    "1374": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%32#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "tmp%110#0",
        "reinterpret_bytes[8]%32#0"
      ]
    },
    "1377": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0"
      ]
    },
    "1378": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0",
        "reinterpret_bytes[8]%33#0"
      ]
    },
    "1381": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0",
        "tmp%112#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%112#0"
      ]
    },
    "1383": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0",
        "tmp%112#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%112#0",
        "1"
      ]
    },
    "1384": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%12#0"
      ]
    },
    "1385": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)",
        "reinterpret_bytes[8]%33#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)"
      ]
    },
    "1386": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0"
      ]
    },
    "1388": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay",
        "reinterpret_bytes[8]%33#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay"
      ]
    },
    "1389": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0"
      ]
    },
    "1390": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%12#0"
      ]
    },
    "1391": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow",
      "op": "callsub borrow",
      "stack_out": []
    },
    "1394": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1395": {
      "op": "return",
      "stack_out": []
    },
    "1396": {
      "block": "main_withdrawDeposit_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "1398": {
      "op": "!",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "1399": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1400": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "1402": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1403": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "1405": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0",
        "2"
      ]
    },
    "1407": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1408": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ]
    },
    "1409": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ]
    },
    "1411": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0",
        "axfer"
      ]
    },
    "1413": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ]
    },
    "1414": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1415": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%28#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%28#0"
      ]
    },
    "1418": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%101#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%101#0"
      ]
    },
    "1419": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%101#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%101#0",
        "reinterpret_bytes[8]%29#0"
      ]
    },
    "1422": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%101#0",
        "tmp%102#0"
      ]
    },
    "1423": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0"
      ]
    },
    "1425": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%9#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%101#0",
        "tmp%102#0",
        "tmp%103#0",
        "1"
      ]
    },
    "1426": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%101#0",
        "tmp%102#0",
        "gtxn_idx%10#0"
      ]
    },
    "1427": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)",
        "gtxn_idx%9#0",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%101#0",
        "tmp%102#0",
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)"
      ]
    },
    "1428": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%101#0",
        "tmp%102#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0"
      ]
    },
    "1430": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "pay",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%101#0",
        "tmp%102#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0",
        "pay"
      ]
    },
    "1431": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type_matches%10#0",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%101#0",
        "tmp%102#0",
        "gtxn_idx%10#0",
        "gtxn_type_matches%10#0"
      ]
    },
    "1432": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%101#0",
        "tmp%102#0",
        "gtxn_idx%10#0"
      ]
    },
    "1433": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit",
      "op": "callsub withdrawDeposit",
      "stack_out": []
    },
    "1436": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1437": {
      "op": "return",
      "stack_out": []
    },
    "1438": {
      "block": "main_depositAlgo_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "1440": {
      "op": "!",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "1441": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1442": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "1444": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1445": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "1447": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0",
        "2"
      ]
    },
    "1449": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1450": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ]
    },
    "1451": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ]
    },
    "1453": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "pay"
      ]
    },
    "1454": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ]
    },
    "1455": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1456": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%27#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%27#0"
      ]
    },
    "1459": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%94#0"
      ]
    },
    "1460": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%94#0",
        "tmp%95#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%94#0",
        "tmp%95#0"
      ]
    },
    "1462": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%7#0",
        "tmp%94#0",
        "tmp%95#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%94#0",
        "tmp%95#0",
        "1"
      ]
    },
    "1463": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%94#0",
        "gtxn_idx%8#0"
      ]
    },
    "1464": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)",
        "tmp%94#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%94#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)"
      ]
    },
    "1465": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%94#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0"
      ]
    },
    "1467": {
      "op": "intc_1 // pay",
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%94#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "pay"
      ]
    },
    "1468": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%94#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0"
      ]
    },
    "1469": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%94#0",
        "gtxn_idx%8#0"
      ]
    },
    "1470": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo",
      "op": "callsub depositAlgo",
      "stack_out": []
    },
    "1473": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1474": {
      "op": "return",
      "stack_out": []
    },
    "1475": {
      "block": "main_depositASA_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "1477": {
      "op": "!",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "1478": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1479": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "1481": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1482": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "1484": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0",
        "2"
      ]
    },
    "1486": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1487": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ]
    },
    "1488": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ]
    },
    "1490": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "axfer"
      ]
    },
    "1492": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ]
    },
    "1493": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1494": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%26#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%26#0"
      ]
    },
    "1497": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%87#0"
      ]
    },
    "1498": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%87#0",
        "tmp%88#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%87#0",
        "tmp%88#0"
      ]
    },
    "1500": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%5#0",
        "tmp%87#0",
        "tmp%88#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%87#0",
        "tmp%88#0",
        "1"
      ]
    },
    "1501": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%87#0",
        "gtxn_idx%6#0"
      ]
    },
    "1502": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)",
        "tmp%87#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%87#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)"
      ]
    },
    "1503": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%87#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0"
      ]
    },
    "1505": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay",
        "tmp%87#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%87#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay"
      ]
    },
    "1506": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%87#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0"
      ]
    },
    "1507": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%87#0",
        "gtxn_idx%6#0"
      ]
    },
    "1508": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositASA",
      "op": "callsub depositASA",
      "stack_out": []
    },
    "1511": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1512": {
      "op": "return",
      "stack_out": []
    },
    "1513": {
      "block": "main_addNewCollateralType_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "1515": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "1516": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1517": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "1519": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1520": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0"
      ]
    },
    "1523": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0"
      ]
    },
    "1526": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "tmp%81#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "tmp%81#0"
      ]
    },
    "1528": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "tmp%81#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "tmp%81#0",
        "1"
      ]
    },
    "1529": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "gtxn_idx%4#0"
      ]
    },
    "1530": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "1531": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "1533": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "1534": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "1535": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "gtxn_idx%4#0"
      ]
    },
    "1536": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0",
        "reinterpret_bytes[8]%24#0",
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%25#0"
      ]
    },
    "1539": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType",
      "op": "callsub addNewCollateralType",
      "stack_out": []
    },
    "1542": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1543": {
      "op": "return",
      "stack_out": []
    },
    "1544": {
      "block": "main_getOraclePrice_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "1546": {
      "op": "!",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "1547": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1548": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1550": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1551": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%22#0"
      ]
    },
    "1554": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "1557": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "1558": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "1559": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "1560": {
      "op": "concat",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "1561": {
      "op": "log",
      "stack_out": []
    },
    "1562": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1563": {
      "op": "return",
      "stack_out": []
    },
    "1564": {
      "block": "main_getAcceptedCollateralsCount_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "1566": {
      "op": "!",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1567": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1568": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "1570": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1571": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "op": "callsub getAcceptedCollateralsCount",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "1574": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "1575": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "1576": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "1577": {
      "op": "concat",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1578": {
      "op": "log",
      "stack_out": []
    },
    "1579": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1580": {
      "op": "return",
      "stack_out": []
    },
    "1581": {
      "block": "main_getTotalDeposits_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1583": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1584": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1585": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1587": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1588": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits",
      "op": "callsub getTotalDeposits",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1591": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "1592": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "1593": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "1594": {
      "op": "concat",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1595": {
      "op": "log",
      "stack_out": []
    },
    "1596": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1597": {
      "op": "return",
      "stack_out": []
    },
    "1598": {
      "block": "main_getCirculatingLST_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1600": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1601": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1602": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "1604": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1605": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST",
      "op": "callsub getCirculatingLST",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1608": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1609": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1610": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1611": {
      "op": "concat",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1612": {
      "op": "log",
      "stack_out": []
    },
    "1613": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1614": {
      "op": "return",
      "stack_out": []
    },
    "1615": {
      "block": "main_configureLSTToken_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1617": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "1618": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1619": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1621": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1622": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1624": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "1"
      ]
    },
    "1625": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1626": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "1627": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "1629": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "1631": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "1632": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1633": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%21#0"
      ]
    },
    "1636": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%56#0"
      ]
    },
    "1637": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken",
      "op": "callsub configureLSTToken",
      "stack_out": []
    },
    "1640": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1641": {
      "op": "return",
      "stack_out": []
    },
    "1642": {
      "block": "main_optInToLST_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1644": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1645": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1646": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1648": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1649": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%20#0"
      ]
    },
    "1652": {
      "op": "btoi",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1653": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "1655": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%50#0",
        "1"
      ]
    },
    "1656": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "gtxn_idx%2#0"
      ]
    },
    "1657": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "1658": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "1660": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "1661": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "1662": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%49#0",
        "gtxn_idx%2#0"
      ]
    },
    "1663": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST",
      "op": "callsub optInToLST",
      "stack_out": []
    },
    "1666": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1667": {
      "op": "return",
      "stack_out": []
    },
    "1668": {
      "block": "main_generateLSTToken_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1670": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1671": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1672": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1674": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1675": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1677": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "1"
      ]
    },
    "1678": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1679": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "1680": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "1682": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "1683": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "1684": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1685": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken",
      "op": "callsub generateLSTToken",
      "stack_out": []
    },
    "1688": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1689": {
      "op": "return",
      "stack_out": []
    },
    "1690": {
      "block": "main_setRateParams_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1692": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1693": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1694": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1696": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1697": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "1700": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1701": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "1704": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "1705": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "1708": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "1709": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "1712": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "1713": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "1716": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1717": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%12#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "1720": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "1721": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%13#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "1724": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "1725": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%14#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "1728": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "1729": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[8]%15#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "1732": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "1733": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "1736": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "1737": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_bytes[8]%17#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "1740": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "1741": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "1744": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "1745": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "reinterpret_bytes[8]%19#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "1748": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "1749": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setRateParams",
      "op": "callsub setRateParams",
      "stack_out": []
    },
    "1752": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1753": {
      "op": "return",
      "stack_out": []
    },
    "1754": {
      "block": "main_initApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1756": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1757": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1758": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1760": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1761": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1763": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1"
      ]
    },
    "1764": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1765": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "1766": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "1768": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "1769": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1770": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1771": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1774": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ]
    },
    "1775": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1778": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1779": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1782": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1783": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1786": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1787": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%5#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1790": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1791": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[1]%1#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "1794": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1795": {
      "op": "txnas Applications",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "1797": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%6#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1800": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "1801": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication",
      "op": "callsub initApplication",
      "stack_out": []
    },
    "1804": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1805": {
      "op": "return",
      "stack_out": []
    },
    "1806": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1808": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1809": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1810": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1812": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1813": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1814": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "1817": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1818": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1820": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1823": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1824": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "1827": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1828": {
      "op": "return",
      "stack_out": []
    },
    "1829": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication",
      "params": {
        "admin#0": "bytes",
        "baseTokenId#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1832": {
      "op": "bytec 6 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\""
      ],
      "stack_out": [
        "\"admin_account\""
      ]
    },
    "1834": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ]
    },
    "1836": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1837": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseTokenId#0 (copy)"
      ]
    },
    "1839": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1840": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"base_token_id\""
      ]
    },
    "1841": {
      "op": "swap",
      "stack_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "1842": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1843": {
      "retsub": true,
      "op": "retsub"
    },
    "1844": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication",
      "params": {
        "mbrTxn#0": "uint64",
        "ltv_bps#0": "uint64",
        "liq_threshold_bps#0": "uint64",
        "liq_bonus_bps#0": "uint64",
        "origination_fee_bps#0": "uint64",
        "protocol_share_bps#0": "uint64",
        "oracle_app_id#0": "uint64",
        "buyout_token_id#0": "uint64"
      },
      "block": "initApplication",
      "stack_in": [],
      "op": "proto 8 0"
    },
    "1847": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1849": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1850": {
      "op": "bytec 6 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1852": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1853": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1854": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1855": {
      "op": "assert",
      "stack_out": []
    },
    "1856": {
      "op": "frame_dig -8",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1858": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1860": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "1861": {
      "op": "bytec 6 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1863": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1864": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "1865": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1866": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "1869": {
      "op": "frame_dig -8",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1871": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1873": {
      "op": "pushint 400000 // 400000",
      "defined_out": [
        "400000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "400000"
      ]
    },
    "1877": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1878": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "1881": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1882": {
      "block": "initApplication_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "1883": {
      "op": "bytec 21 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\""
      ],
      "stack_out": [
        "\"ltv_bps\""
      ]
    },
    "1885": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ]
    },
    "1887": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1888": {
      "op": "bytec 12 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\""
      ],
      "stack_out": [
        "\"liq_threshold_bps\""
      ]
    },
    "1890": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ]
    },
    "1892": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1893": {
      "op": "bytec 34 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\""
      ],
      "stack_out": [
        "\"origination_fee_bps\""
      ]
    },
    "1895": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ],
      "stack_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ]
    },
    "1897": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1898": {
      "op": "bytec 22 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\""
      ],
      "stack_out": [
        "\"accepted_collaterals_count\""
      ]
    },
    "1900": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ]
    },
    "1901": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1902": {
      "op": "bytec 11 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\""
      ],
      "stack_out": [
        "\"fee_pool\""
      ]
    },
    "1904": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"fee_pool\"",
        "0"
      ]
    },
    "1905": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1906": {
      "op": "bytec 9 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "1908": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"circulating_lst\"",
        "0"
      ]
    },
    "1909": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1910": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\""
      ],
      "stack_out": [
        "\"total_deposits\""
      ]
    },
    "1912": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_deposits\"",
        "0"
      ]
    },
    "1913": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1914": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\""
      ],
      "stack_out": [
        "\"active_loan_records\""
      ]
    },
    "1916": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"active_loan_records\"",
        "0"
      ]
    },
    "1917": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1918": {
      "op": "bytec 35 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\""
      ],
      "stack_out": [
        "\"protocol_share_bps\""
      ]
    },
    "1920": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ],
      "stack_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ]
    },
    "1922": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1923": {
      "op": "bytec 36 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\""
      ],
      "stack_out": [
        "\"oracle_app\""
      ]
    },
    "1925": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ],
      "stack_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ]
    },
    "1927": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1928": {
      "op": "bytec 13 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\""
      ],
      "stack_out": [
        "\"lst_token_id\""
      ]
    },
    "1930": {
      "op": "pushbytes 0x0000000000000063",
      "defined_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ],
      "stack_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ]
    },
    "1940": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1941": {
      "op": "bytec 17 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "1943": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "\"base_bps\"",
        "50"
      ],
      "stack_out": [
        "\"base_bps\"",
        "50"
      ]
    },
    "1945": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1946": {
      "op": "bytec 23 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "1948": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "\"util_cap_bps\"",
        "8000"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "8000"
      ]
    },
    "1951": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1952": {
      "op": "bytec_2 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\""
      ],
      "stack_out": [
        "\"total_borrows\""
      ]
    },
    "1953": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_borrows\"",
        "0"
      ]
    },
    "1954": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1955": {
      "op": "bytec 26 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "1957": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rate_model_type\"",
        "0"
      ]
    },
    "1958": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1959": {
      "op": "bytec 27 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "1961": {
      "op": "pushint 5000 // 5000",
      "defined_out": [
        "\"kink_norm_bps\"",
        "5000"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "5000"
      ]
    },
    "1964": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1965": {
      "op": "bytec 28 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "1967": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "\"slope1_bps\"",
        "1000"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "1000"
      ]
    },
    "1968": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1969": {
      "op": "bytec 29 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "1971": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "\"slope2_bps\"",
        "2000"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "2000"
      ]
    },
    "1974": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1975": {
      "op": "bytec 18 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "1977": {
      "op": "pushint 6000 // 6000",
      "defined_out": [
        "\"max_apr_bps\"",
        "6000"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "6000"
      ]
    },
    "1980": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1981": {
      "op": "bytec 30 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "1983": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"ema_alpha_bps\"",
        "0"
      ]
    },
    "1984": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1985": {
      "op": "bytec 31 // \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\""
      ],
      "stack_out": [
        "\"max_apr_step_bps\""
      ]
    },
    "1987": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"max_apr_step_bps\"",
        "0"
      ]
    },
    "1988": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1989": {
      "op": "bytec 19 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\""
      ],
      "stack_out": [
        "\"prev_apr_bps\""
      ]
    },
    "1991": {
      "op": "pushint 50 // 50",
      "stack_out": [
        "\"prev_apr_bps\"",
        "50"
      ]
    },
    "1993": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1994": {
      "op": "bytec 32 // \"util_ema_bps\"",
      "defined_out": [
        "\"util_ema_bps\""
      ],
      "stack_out": [
        "\"util_ema_bps\""
      ]
    },
    "1996": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"util_ema_bps\"",
        "0"
      ]
    },
    "1997": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1998": {
      "op": "bytec 37 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "2000": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"power_gamma_q16\"",
        "0"
      ]
    },
    "2001": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2002": {
      "op": "bytec 38 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "2004": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"scarcity_K_bps\"",
        "0"
      ]
    },
    "2005": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2006": {
      "op": "bytec 39 // \"last_scaled_down_disbursement\"",
      "defined_out": [
        "\"last_scaled_down_disbursement\""
      ],
      "stack_out": [
        "\"last_scaled_down_disbursement\""
      ]
    },
    "2008": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_scaled_down_disbursement\"",
        "0"
      ]
    },
    "2009": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2010": {
      "op": "bytec 40 // \"last_max_borrow\"",
      "defined_out": [
        "\"last_max_borrow\""
      ],
      "stack_out": [
        "\"last_max_borrow\""
      ]
    },
    "2012": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_max_borrow\"",
        "0"
      ]
    },
    "2013": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2014": {
      "op": "bytec 41 // \"last_requested_loan\"",
      "defined_out": [
        "\"last_requested_loan\""
      ],
      "stack_out": [
        "\"last_requested_loan\""
      ]
    },
    "2016": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_requested_loan\"",
        "0"
      ]
    },
    "2017": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2018": {
      "op": "bytec 42 // \"debug_diff\"",
      "defined_out": [
        "\"debug_diff\""
      ],
      "stack_out": [
        "\"debug_diff\""
      ]
    },
    "2020": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"debug_diff\"",
        "0"
      ]
    },
    "2021": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2022": {
      "op": "bytec 43 // \"params_updated_at\"",
      "defined_out": [
        "\"params_updated_at\""
      ],
      "stack_out": [
        "\"params_updated_at\""
      ]
    },
    "2024": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"params_updated_at\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"params_updated_at\"",
        "new_state_value%0#0"
      ]
    },
    "2026": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2027": {
      "op": "bytec 33 // \"params_update_nonce\"",
      "defined_out": [
        "\"params_update_nonce\""
      ],
      "stack_out": [
        "\"params_update_nonce\""
      ]
    },
    "2029": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"params_update_nonce\"",
        "0"
      ]
    },
    "2030": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2031": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\""
      ],
      "stack_out": [
        "\"borrow_index_wad\""
      ]
    },
    "2033": {
      "op": "intc 5 // 1000000000000",
      "defined_out": [
        "\"borrow_index_wad\"",
        "1000000000000"
      ],
      "stack_out": [
        "\"borrow_index_wad\"",
        "1000000000000"
      ]
    },
    "2035": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2036": {
      "op": "bytec 24 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\""
      ],
      "stack_out": [
        "\"last_accrual_ts\""
      ]
    },
    "2038": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"last_accrual_ts\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"last_accrual_ts\"",
        "new_state_value%1#0"
      ]
    },
    "2040": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2041": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2042": {
      "op": "bytec 17 // \"base_bps\"",
      "stack_out": [
        "0",
        "\"base_bps\""
      ]
    },
    "2044": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2045": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2046": {
      "op": "bytec 8 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "2048": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "maybe_value%2#0"
      ]
    },
    "2049": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2050": {
      "op": "frame_dig -1",
      "defined_out": [
        "buyout_token_id#0 (copy)"
      ],
      "stack_out": [
        "buyout_token_id#0 (copy)"
      ]
    },
    "2052": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2053": {
      "op": "bytec 14 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"buyout_token_id\""
      ]
    },
    "2055": {
      "op": "swap",
      "stack_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2056": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2057": {
      "op": "bytec 25 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\""
      ],
      "stack_out": [
        "\"liq_bonus_bps\""
      ]
    },
    "2059": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ]
    },
    "2061": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2062": {
      "op": "pushbytes \"total_borrows_principal\"",
      "defined_out": [
        "\"total_borrows_principal\""
      ],
      "stack_out": [
        "\"total_borrows_principal\""
      ]
    },
    "2087": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_borrows_principal\"",
        "0"
      ]
    },
    "2088": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2089": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2090": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2091": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2092": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2093": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2094": {
      "op": "bz initApplication_after_if_else@7",
      "stack_out": []
    },
    "2097": {
      "op": "itxn_begin"
    },
    "2098": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2100": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2101": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2102": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2103": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0"
      ]
    },
    "2104": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2105": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "2106": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2108": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2110": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2112": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2114": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2116": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "2117": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2119": {
      "op": "itxn_submit"
    },
    "2120": {
      "block": "initApplication_after_if_else@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2121": {
      "op": "bytec 14 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"buyout_token_id\""
      ]
    },
    "2123": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2124": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "2125": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "2126": {
      "op": "bz initApplication_after_if_else@10",
      "stack_out": []
    },
    "2129": {
      "op": "itxn_begin"
    },
    "2130": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2132": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2133": {
      "op": "bytec 14 // \"buyout_token_id\"",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "2135": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2136": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_value%6#0"
      ]
    },
    "2137": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "2138": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "2139": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "2141": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2143": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2145": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2147": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2149": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2150": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2152": {
      "op": "itxn_submit"
    },
    "2153": {
      "block": "initApplication_after_if_else@10",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2154": {
      "block": "initApplication_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2155": {
      "op": "b initApplication_bool_merge@4"
    },
    "2158": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setRateParams",
      "params": {
        "base_bps#0": "uint64",
        "util_cap_bps#0": "uint64",
        "kink_norm_bps#0": "uint64",
        "slope1_bps#0": "uint64",
        "slope2_bps#0": "uint64",
        "max_apr_bps#0": "uint64",
        "borrow_gate_enabled#0": "uint64",
        "ema_alpha_bps#0": "uint64",
        "max_apr_step_bps#0": "uint64",
        "rate_model_type#0": "uint64",
        "power_gamma_q16#0": "uint64",
        "scarcity_K_bps#0": "uint64",
        "liq_bonus_bps#0": "uint64"
      },
      "block": "setRateParams",
      "stack_in": [],
      "op": "proto 13 0"
    },
    "2161": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2163": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2164": {
      "op": "bytec 6 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2166": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2167": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2168": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2169": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "2170": {
      "op": "frame_dig -12",
      "defined_out": [
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "2172": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "2175": {
      "op": "frame_dig -12",
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "2177": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)",
        "10000"
      ]
    },
    "2178": {
      "op": "<=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2179": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "2182": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2183": {
      "block": "setRateParams_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "BAD_UTIL_CAP",
      "op": "assert // BAD_UTIL_CAP",
      "defined_out": [],
      "stack_out": []
    },
    "2184": {
      "op": "frame_dig -11",
      "defined_out": [
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2186": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "2189": {
      "op": "frame_dig -11",
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2191": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)",
        "10000"
      ]
    },
    "2192": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2193": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "2196": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2197": {
      "block": "setRateParams_bool_merge@8",
      "stack_in": [
        "and_result%1#0"
      ],
      "error": "BAD_KINK",
      "op": "assert // BAD_KINK",
      "defined_out": [],
      "stack_out": []
    },
    "2198": {
      "op": "frame_dig -8",
      "defined_out": [
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "2200": {
      "op": "bz setRateParams_after_if_else@14",
      "stack_out": []
    },
    "2203": {
      "op": "frame_dig -8",
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "2205": {
      "op": "frame_dig -13",
      "defined_out": [
        "base_bps#0 (copy)",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)",
        "base_bps#0 (copy)"
      ]
    },
    "2207": {
      "op": ">=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2208": {
      "error": "BAD_MAX_APR",
      "op": "assert // BAD_MAX_APR",
      "stack_out": []
    },
    "2209": {
      "block": "setRateParams_after_if_else@14",
      "stack_in": [],
      "op": "frame_dig -6",
      "defined_out": [
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "2211": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)",
        "10000"
      ]
    },
    "2212": {
      "op": "<=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2213": {
      "error": "BAD_EMA_ALPHA",
      "op": "assert // BAD_EMA_ALPHA",
      "stack_out": []
    },
    "2214": {
      "op": "frame_dig -4",
      "defined_out": [
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "2216": {
      "op": "bz setRateParams_bool_true@16",
      "stack_out": []
    },
    "2219": {
      "op": "frame_dig -4",
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "2221": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)",
        "255"
      ]
    },
    "2224": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "2225": {
      "op": "bz setRateParams_bool_false@17",
      "stack_out": []
    },
    "2228": {
      "block": "setRateParams_bool_true@16",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2229": {
      "block": "setRateParams_bool_merge@18",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "UNSUPPORTED_MODEL",
      "op": "assert // UNSUPPORTED_MODEL",
      "defined_out": [],
      "stack_out": []
    },
    "2230": {
      "op": "bytec 17 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "2232": {
      "op": "frame_dig -13",
      "defined_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ],
      "stack_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ]
    },
    "2234": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2235": {
      "op": "bytec 23 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "2237": {
      "op": "frame_dig -12",
      "defined_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ]
    },
    "2239": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2240": {
      "op": "bytec 27 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "2242": {
      "op": "frame_dig -11",
      "defined_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2244": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2245": {
      "op": "bytec 28 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "2247": {
      "op": "frame_dig -10",
      "defined_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ]
    },
    "2249": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2250": {
      "op": "bytec 29 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "2252": {
      "op": "frame_dig -9",
      "defined_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ]
    },
    "2254": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2255": {
      "op": "bytec 18 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "2257": {
      "op": "frame_dig -8",
      "defined_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ]
    },
    "2259": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2260": {
      "op": "bytec 30 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "2262": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "2264": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2265": {
      "op": "bytec 31 // \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\""
      ],
      "stack_out": [
        "\"max_apr_step_bps\""
      ]
    },
    "2267": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ]
    },
    "2269": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2270": {
      "op": "bytec 26 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "2272": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ]
    },
    "2274": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2275": {
      "op": "bytec 37 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "2277": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ],
      "stack_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ]
    },
    "2279": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2280": {
      "op": "bytec 38 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "2282": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ],
      "stack_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ]
    },
    "2284": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2285": {
      "op": "bytec 25 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\""
      ],
      "stack_out": [
        "\"liq_bonus_bps\""
      ]
    },
    "2287": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ]
    },
    "2289": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2290": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2291": {
      "op": "bytec 33 // \"params_update_nonce\"",
      "defined_out": [
        "\"params_update_nonce\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"params_update_nonce\""
      ]
    },
    "2293": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2294": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2295": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "2296": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2297": {
      "op": "bytec 33 // \"params_update_nonce\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"params_update_nonce\""
      ]
    },
    "2299": {
      "op": "swap",
      "stack_out": [
        "\"params_update_nonce\"",
        "new_state_value%0#0"
      ]
    },
    "2300": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2301": {
      "op": "bytec 43 // \"params_updated_at\"",
      "defined_out": [
        "\"params_updated_at\""
      ],
      "stack_out": [
        "\"params_updated_at\""
      ]
    },
    "2303": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"params_updated_at\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"params_updated_at\"",
        "new_state_value%1#0"
      ]
    },
    "2305": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2306": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2307": {
      "op": "bytec 18 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2309": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2310": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2311": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2314": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2315": {
      "op": "bytec 19 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "2317": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2318": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2319": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "0"
      ]
    },
    "2320": {
      "op": "bytec 18 // \"max_apr_bps\"",
      "stack_out": [
        "maybe_value%3#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2322": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2323": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "2324": {
      "op": ">",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2325": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2328": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2329": {
      "op": "bytec 18 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2331": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2332": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "2333": {
      "op": "bytec 19 // \"prev_apr_bps\"",
      "stack_out": [
        "maybe_value%5#0",
        "\"prev_apr_bps\""
      ]
    },
    "2335": {
      "op": "swap",
      "stack_out": [
        "\"prev_apr_bps\"",
        "maybe_value%5#0"
      ]
    },
    "2336": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2337": {
      "block": "setRateParams_after_if_else@21",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2338": {
      "block": "setRateParams_bool_false@17",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2339": {
      "op": "b setRateParams_bool_merge@18"
    },
    "2342": {
      "block": "setRateParams_bool_false@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2343": {
      "op": "b setRateParams_bool_merge@8"
    },
    "2346": {
      "block": "setRateParams_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2347": {
      "op": "b setRateParams_bool_merge@4"
    },
    "2350": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken",
      "params": {
        "mbrTxn#0": "uint64"
      },
      "block": "generateLSTToken",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2353": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2355": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2356": {
      "op": "bytec 6 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2358": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2359": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2360": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2361": {
      "op": "assert",
      "stack_out": []
    },
    "2362": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2364": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2366": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2367": {
      "op": "bytec 6 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2369": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2370": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2371": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2372": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2375": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2377": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2379": {
      "op": "pushint 102000 // 102000",
      "defined_out": [
        "102000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "102000"
      ]
    },
    "2383": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2384": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2387": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2388": {
      "block": "generateLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2389": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2390": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2391": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2392": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2393": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2394": {
      "op": "itxn_begin"
    },
    "2395": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2397": {
      "op": "dig 1",
      "defined_out": [
        "baseToken#0",
        "baseToken#0 (copy)",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2399": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "baseToken#0",
        "check%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2401": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2402": {
      "op": "dig 2",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2404": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "baseToken#0",
        "check%1#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2406": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2407": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2409": {
      "op": "dig 4",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2411": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "baseToken#0",
        "check%2#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "2413": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0"
      ]
    },
    "2414": {
      "op": "pushbytes \"c\"",
      "defined_out": [
        "\"c\"",
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "\"c\""
      ]
    },
    "2417": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "\"c\"",
        "value%2#0"
      ]
    },
    "2418": {
      "op": "concat",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2419": {
      "op": "uncover 5",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "baseToken#0"
      ]
    },
    "2421": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%3#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0",
        "check%3#0"
      ]
    },
    "2423": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0"
      ]
    },
    "2424": {
      "op": "pushbytes \"c\"",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0",
        "\"c\""
      ]
    },
    "2427": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "\"c\"",
        "value%3#0"
      ]
    },
    "2428": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "2429": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2431": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2433": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2435": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "0"
      ]
    },
    "2436": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2438": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2440": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2442": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "2444": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "2446": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2448": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2449": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2451": {
      "op": "itxn_submit"
    },
    "2452": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "result.CreatedAssetID#0"
      ],
      "stack_out": [
        "result.CreatedAssetID#0"
      ]
    },
    "2454": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2455": {
      "op": "bytec 13 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2457": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2458": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2459": {
      "retsub": true,
      "op": "retsub"
    },
    "2460": {
      "block": "generateLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2461": {
      "op": "b generateLSTToken_bool_merge@4"
    },
    "2464": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST",
      "params": {
        "lstAssetId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "optInToLST",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2467": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2469": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2470": {
      "op": "bytec 6 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2472": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2473": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2474": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2475": {
      "op": "assert",
      "stack_out": []
    },
    "2476": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2478": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2480": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2481": {
      "op": "bytec 6 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2483": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2484": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2485": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2486": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2489": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2491": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2493": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "2000"
      ]
    },
    "2496": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2497": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2500": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2501": {
      "block": "optInToLST_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2502": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAssetId#0 (copy)"
      ],
      "stack_out": [
        "lstAssetId#0 (copy)"
      ]
    },
    "2504": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2505": {
      "op": "bytec 13 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2507": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2508": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2509": {
      "op": "itxn_begin"
    },
    "2510": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2512": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2513": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2515": {
      "op": "frame_dig -2",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "lstAssetId#0 (copy)"
      ]
    },
    "2517": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2519": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2521": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2523": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2525": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2526": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2528": {
      "op": "itxn_submit"
    },
    "2529": {
      "retsub": true,
      "op": "retsub"
    },
    "2530": {
      "block": "optInToLST_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2531": {
      "op": "b optInToLST_bool_merge@4"
    },
    "2534": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken",
      "params": {
        "axferTxn#0": "uint64",
        "circulating_lst#0": "uint64"
      },
      "block": "configureLSTToken",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2537": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2539": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2540": {
      "op": "bytec 6 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2542": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2543": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2544": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2545": {
      "op": "assert",
      "stack_out": []
    },
    "2546": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2547": {
      "op": "bytec 13 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "2549": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2550": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2551": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2552": {
      "op": "frame_dig -2",
      "defined_out": [
        "axferTxn#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "axferTxn#0 (copy)"
      ]
    },
    "2554": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2556": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2557": {
      "error": "LST token not set",
      "op": "assert // LST token not set",
      "stack_out": []
    },
    "2558": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2560": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2562": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "2563": {
      "op": "bytec 6 // \"admin_account\"",
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2565": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2566": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "2567": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2568": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2571": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2573": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2575": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2577": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2578": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2581": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2582": {
      "block": "configureLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2583": {
      "op": "bytec 9 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "2585": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ],
      "stack_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ]
    },
    "2587": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2588": {
      "retsub": true,
      "op": "retsub"
    },
    "2589": {
      "block": "configureLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2590": {
      "op": "b configureLSTToken_bool_merge@4"
    },
    "2593": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST",
      "params": {},
      "block": "getCirculatingLST",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2594": {
      "op": "bytec 9 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "2596": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2597": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2598": {
      "retsub": true,
      "op": "retsub"
    },
    "2599": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits",
      "params": {},
      "block": "getTotalDeposits",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2600": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "2602": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2603": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2604": {
      "retsub": true,
      "op": "retsub"
    },
    "2605": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "params": {},
      "block": "getAcceptedCollateralsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2606": {
      "op": "bytec 22 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "2608": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2609": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2610": {
      "retsub": true,
      "op": "retsub"
    },
    "2611": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "params": {
        "tokenId#0": "bytes"
      },
      "block": "getOraclePrice",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2614": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2615": {
      "op": "bytec 36 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"oracle_app\""
      ]
    },
    "2617": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "maybe_exists%0#0"
      ]
    },
    "2618": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2619": {
      "op": "dup",
      "defined_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ]
    },
    "2620": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "address#0",
        "check%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "check%0#0"
      ]
    },
    "2622": {
      "op": "bury 1",
      "stack_out": [
        "oracle#0",
        "check%0#0"
      ]
    },
    "2624": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2625": {
      "op": "itxn_begin"
    },
    "2626": {
      "op": "pushbytes 0xac13e004 // method \"getTokenPrice(uint64)(uint64,uint64,uint64)\"",
      "defined_out": [
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))"
      ]
    },
    "2632": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2634": {
      "op": "frame_dig -1",
      "defined_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ]
    },
    "2636": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2638": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2640": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2642": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2644": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2645": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2647": {
      "op": "itxn_submit"
    },
    "2648": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2650": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2651": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2654": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2655": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2656": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2657": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "12"
      ]
    },
    "2659": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2660": {
      "retsub": true,
      "op": "retsub"
    },
    "2661": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "updateCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2664": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "2666": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2668": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2669": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2670": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "2671": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0"
      ]
    },
    "2672": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2673": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)",
        "24"
      ]
    },
    "2675": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "2676": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "2678": {
      "op": "+",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "2679": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "collateral#0 (copy)"
      ]
    },
    "2681": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0"
      ]
    },
    "2684": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "collateral#0 (copy)"
      ]
    },
    "2686": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2689": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0",
        "collateral#0 (copy)"
      ]
    },
    "2691": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2694": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "newTotal#0"
      ]
    },
    "2696": {
      "op": "itob",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2697": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "collateral#0"
      ]
    },
    "2699": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0"
      ]
    },
    "2702": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "tmp%3#0"
      ]
    },
    "2704": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2706": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2707": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%4#0",
        "tmp%5#0"
      ]
    },
    "2709": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2710": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2712": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2713": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%6#0"
      ]
    },
    "2714": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2715": {
      "op": "box_put",
      "stack_out": []
    },
    "2716": {
      "retsub": true,
      "op": "retsub"
    },
    "2717": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "reduceCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2720": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "2722": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2724": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2725": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2726": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "2727": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0"
      ]
    },
    "2728": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2729": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)",
        "24"
      ]
    },
    "2731": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "2732": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2733": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2735": {
      "op": ">=",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2736": {
      "error": "INSUFFICIENT_COLLATERAL",
      "op": "assert // INSUFFICIENT_COLLATERAL",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "2737": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "2739": {
      "op": "-",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "2740": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "collateral#0 (copy)"
      ]
    },
    "2742": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0"
      ]
    },
    "2745": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "collateral#0 (copy)"
      ]
    },
    "2747": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2750": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0",
        "collateral#0 (copy)"
      ]
    },
    "2752": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2755": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "newTotal#0"
      ]
    },
    "2757": {
      "op": "itob",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ]
    },
    "2758": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "collateral#0"
      ]
    },
    "2760": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0"
      ]
    },
    "2763": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "tmp%6#0"
      ]
    },
    "2765": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2767": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2768": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%4#0",
        "tmp%8#0"
      ]
    },
    "2770": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2771": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2773": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2774": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%9#0"
      ]
    },
    "2775": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2776": {
      "op": "box_put",
      "stack_out": []
    },
    "2777": {
      "retsub": true,
      "op": "retsub"
    },
    "2778": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType",
      "params": {
        "collateralTokenId#0": "bytes",
        "collateralBaseTokenId#0": "bytes",
        "mbrTxn#0": "uint64",
        "originatingAppId#0": "bytes"
      },
      "block": "addNewCollateralType",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "2781": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2782": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2783": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2784": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2785": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2786": {
      "op": "txn Sender",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "2788": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0"
      ]
    },
    "2789": {
      "op": "bytec 6 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2791": {
      "op": "app_global_get_ex",
      "defined_out": [
        "baseToken#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2792": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "2793": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%1#0"
      ]
    },
    "2794": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2795": {
      "op": "frame_dig -4",
      "defined_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2797": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "2798": {
      "op": "dup"
    },
    "2799": {
      "op": "uncover 2",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0",
        "baseToken#0"
      ]
    },
    "2801": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2802": {
      "error": "CANNOT_USE_BASE_AS_COLLATERAL",
      "op": "assert // CANNOT_USE_BASE_AS_COLLATERAL",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2803": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\""
      ]
    },
    "2805": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2807": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2808": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2809": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2810": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "2812": {
      "op": "!",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%5#0"
      ]
    },
    "2813": {
      "error": "COLLATERAL_ALREADY_EXISTS",
      "op": "assert // COLLATERAL_ALREADY_EXISTS",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2814": {
      "op": "frame_dig -2",
      "defined_out": [
        "mbrTxn#0 (copy)",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "2816": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0"
      ]
    },
    "2818": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0"
      ]
    },
    "2819": {
      "op": "bytec 6 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2821": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2822": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0"
      ]
    },
    "2823": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%7#0"
      ]
    },
    "2824": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2827": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "2829": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0"
      ]
    },
    "2831": {
      "op": "pushint 101000 // 101000",
      "defined_out": [
        "101000",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0",
        "101000"
      ]
    },
    "2835": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%9#0"
      ]
    },
    "2836": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2839": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "2840": {
      "block": "addNewCollateralType_bool_merge@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ],
      "error": "INSUFFICIENT_MBR",
      "op": "assert // INSUFFICIENT_MBR",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2841": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0"
      ]
    },
    "2842": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0",
        "\"base_token_id\""
      ]
    },
    "2843": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2844": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0"
      ]
    },
    "2845": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2847": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralBaseTokenId#0 (copy)",
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "collateralTokenId#0 (copy)",
        "collateralBaseTokenId#0 (copy)"
      ]
    },
    "2849": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2850": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0"
      ]
    },
    "2851": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2852": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "2862": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2863": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "originatingAppId#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%4#0",
        "originatingAppId#0 (copy)"
      ]
    },
    "2865": {
      "op": "concat",
      "defined_out": [
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0"
      ]
    },
    "2866": {
      "op": "frame_dig 1",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ]
    },
    "2868": {
      "op": "dup"
    },
    "2869": {
      "op": "uncover 2",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "newAcceptedCollateral#0"
      ]
    },
    "2871": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2872": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0"
      ]
    },
    "2873": {
      "op": "bytec 22 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "2875": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2876": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0"
      ]
    },
    "2877": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "1"
      ]
    },
    "2878": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0"
      ]
    },
    "2879": {
      "op": "bytec 22 // \"accepted_collaterals_count\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "2881": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "\"accepted_collaterals_count\"",
        "new_state_value%0#0"
      ]
    },
    "2882": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2883": {
      "op": "itxn_begin"
    },
    "2884": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2886": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2887": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2888": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2890": {
      "op": "frame_dig 0",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%2#0"
      ]
    },
    "2892": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2894": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2896": {
      "op": "itxn_field Sender",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2898": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "4"
      ]
    },
    "2900": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2902": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "1000"
      ]
    },
    "2903": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2905": {
      "op": "itxn_submit"
    },
    "2906": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2907": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "2909": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2910": {
      "retsub": true,
      "op": "retsub"
    },
    "2911": {
      "block": "addNewCollateralType_bool_false@3",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "2912": {
      "op": "b addNewCollateralType_bool_merge@4"
    },
    "2915": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "params": {
        "amount#0": "uint64"
      },
      "block": "calculateLSTDue",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2918": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2919": {
      "op": "bytec 9 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "2921": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2922": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2923": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "10000"
      ]
    },
    "2924": {
      "op": "mulw",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0"
      ]
    },
    "2925": {
      "op": "intc_0 // 0",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0"
      ]
    },
    "2926": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "2928": {
      "op": "app_global_get_ex",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2929": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#0"
      ]
    },
    "2930": {
      "op": "divw",
      "defined_out": [
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0"
      ]
    },
    "2931": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0",
        "amount#0 (copy)"
      ]
    },
    "2933": {
      "op": "mulw",
      "defined_out": [
        "highBits2#0",
        "lowBits2#0"
      ],
      "stack_out": [
        "highBits2#0",
        "lowBits2#0"
      ]
    },
    "2934": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "highBits2#0",
        "lowBits2#0",
        "10000"
      ]
    },
    "2935": {
      "op": "divw",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2936": {
      "retsub": true,
      "op": "retsub"
    },
    "2937": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "depositASA",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2940": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2941": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2942": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2943": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2944": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2945": {
      "op": "frame_dig -3",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2947": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "2949": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2951": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "2952": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2955": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2957": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "2959": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseToken#0",
        "tmp%3#0",
        "baseToken#0"
      ]
    },
    "2961": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "2962": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2965": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2967": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "2969": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "2971": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "2972": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2975": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "2976": {
      "block": "depositASA_bool_merge@5",
      "stack_in": [
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2977": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "2979": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "2981": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0",
        "1000"
      ]
    },
    "2982": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%8#0"
      ]
    },
    "2983": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2984": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "baseToken#0",
        "_interestSlice#0"
      ]
    },
    "2987": {
      "op": "pop",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2988": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "2989": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2990": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2991": {
      "op": "bury 1",
      "stack_out": [
        "baseToken#0",
        "maybe_exists%1#0"
      ]
    },
    "2993": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2994": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "2995": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "2997": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2998": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%2#0"
      ]
    },
    "2999": {
      "op": "bnz depositASA_else_body@7",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3002": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3004": {
      "block": "depositASA_after_if_else@8",
      "stack_in": [
        "baseToken#0",
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "3005": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3007": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3008": {
      "op": "bytec 13 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "3010": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3011": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "3012": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3013": {
      "op": "dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2",
        "lstDue#2 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2 (copy)"
      ]
    },
    "3015": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3017": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3019": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3021": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "4"
      ]
    },
    "3023": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3025": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "1000"
      ]
    },
    "3026": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3028": {
      "op": "itxn_submit"
    },
    "3029": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "0"
      ]
    },
    "3030": {
      "op": "bytec 9 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3032": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstDue#2",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3033": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "maybe_value%4#0"
      ]
    },
    "3034": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%0#0"
      ]
    },
    "3035": {
      "op": "bytec 9 // \"circulating_lst\"",
      "stack_out": [
        "baseToken#0",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "3037": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "3038": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3039": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "3040": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3042": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3043": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0"
      ]
    },
    "3044": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0",
        "amount#0 (copy)"
      ]
    },
    "3046": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%1#0"
      ]
    },
    "3047": {
      "op": "bytec 4 // \"total_deposits\"",
      "stack_out": [
        "baseToken#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "3049": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "3050": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3051": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%2#0"
      ]
    },
    "3054": {
      "op": "bytec 8 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "3056": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "3057": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "3058": {
      "retsub": true,
      "op": "retsub"
    },
    "3059": {
      "block": "depositASA_else_body@7",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "amount#0 (copy)"
      ]
    },
    "3061": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "op": "callsub calculateLSTDue",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "3064": {
      "op": "b depositASA_after_if_else@8"
    },
    "3067": {
      "block": "depositASA_bool_false@4",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "3068": {
      "op": "b depositASA_bool_merge@5"
    },
    "3071": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo",
      "params": {
        "depositTxn#0": "uint64",
        "amount#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "depositAlgo",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "3074": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3075": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "3076": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3077": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3079": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": []
    },
    "3080": {
      "op": "frame_dig -3",
      "defined_out": [
        "depositTxn#0 (copy)"
      ],
      "stack_out": [
        "depositTxn#0 (copy)"
      ]
    },
    "3082": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3084": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3086": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3087": {
      "op": "bz depositAlgo_bool_false@3",
      "stack_out": []
    },
    "3090": {
      "op": "frame_dig -3",
      "stack_out": [
        "depositTxn#0 (copy)"
      ]
    },
    "3092": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3094": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "amount#0 (copy)"
      ]
    },
    "3096": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3097": {
      "op": "bz depositAlgo_bool_false@3",
      "stack_out": []
    },
    "3100": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "3101": {
      "block": "depositAlgo_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "3102": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "3104": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "3106": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "1000"
      ]
    },
    "3107": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "3108": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "3109": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "_interestSlice#0"
      ]
    },
    "3112": {
      "op": "pop",
      "stack_out": []
    },
    "3113": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3114": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "3116": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3117": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3118": {
      "op": "bnz depositAlgo_else_body@6",
      "stack_out": []
    },
    "3121": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3123": {
      "block": "depositAlgo_after_if_else@7",
      "stack_in": [
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "3124": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3126": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3127": {
      "op": "bytec 13 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "3129": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3130": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "3131": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3132": {
      "op": "dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2",
        "lstDue#2 (copy)"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2 (copy)"
      ]
    },
    "3134": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3136": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3138": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3140": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "4"
      ]
    },
    "3142": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3144": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "1000"
      ]
    },
    "3145": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3147": {
      "op": "itxn_submit"
    },
    "3148": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstDue#2",
        "0"
      ]
    },
    "3149": {
      "op": "bytec 9 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3151": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstDue#2",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstDue#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3152": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "maybe_value%3#0"
      ]
    },
    "3153": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "3154": {
      "op": "bytec 9 // \"circulating_lst\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "3156": {
      "op": "swap",
      "stack_out": [
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "3157": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3158": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3159": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "3161": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3162": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "3163": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "3165": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "3166": {
      "op": "bytec 4 // \"total_deposits\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "3168": {
      "op": "swap",
      "stack_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "3169": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3170": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "3173": {
      "op": "bytec 8 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "3175": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "3176": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3177": {
      "retsub": true,
      "op": "retsub"
    },
    "3178": {
      "block": "depositAlgo_else_body@6",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "3180": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "op": "callsub calculateLSTDue",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3183": {
      "op": "b depositAlgo_after_if_else@7"
    },
    "3186": {
      "block": "depositAlgo_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "3187": {
      "op": "b depositAlgo_bool_merge@4"
    },
    "3190": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "lstAppId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "withdrawDeposit",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3193": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3194": {
      "op": "bytec 13 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "3196": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3197": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3198": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3199": {
      "op": "frame_dig -4",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3201": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "lstAsset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#0"
      ]
    },
    "3203": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "lstAsset#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3205": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%2#0"
      ]
    },
    "3206": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3209": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3211": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "lstAsset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%3#0"
      ]
    },
    "3213": {
      "op": "frame_dig 0",
      "stack_out": [
        "lstAsset#0",
        "tmp%3#0",
        "lstAsset#0"
      ]
    },
    "3215": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%4#0"
      ]
    },
    "3216": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3219": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3221": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "lstAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%5#0"
      ]
    },
    "3223": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "lstAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "3225": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%6#0"
      ]
    },
    "3226": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3229": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "3230": {
      "block": "withdrawDeposit_bool_merge@5",
      "stack_in": [
        "lstAsset#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3231": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3233": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%7#0"
      ]
    },
    "3235": {
      "op": "pushint 3000 // 3000",
      "defined_out": [
        "3000",
        "tmp%7#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%7#0",
        "3000"
      ]
    },
    "3238": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%8#0"
      ]
    },
    "3239": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3240": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "_interestSlice#0"
      ]
    },
    "3243": {
      "op": "pop",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3244": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3246": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "lstAppId#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)",
        "tmp%9#0"
      ]
    },
    "3248": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%10#0"
      ]
    },
    "3249": {
      "op": "bz withdrawDeposit_else_body@7",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3252": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0"
      ]
    },
    "3253": {
      "op": "bytec 9 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3255": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ]
    },
    "3256": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3257": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0"
      ]
    },
    "3258": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3260": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%1#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "maybe_exists%1#0"
      ]
    },
    "3261": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3262": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "3264": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3265": {
      "op": "uncover 2",
      "stack_out": [
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "3267": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3268": {
      "block": "withdrawDeposit_after_if_else@8",
      "stack_in": [
        "lstAsset#0",
        "asaDue#1"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0"
      ]
    },
    "3270": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "0"
      ]
    },
    "3271": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3272": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3273": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "maybe_value%1#0"
      ]
    },
    "3274": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "3275": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "3277": {
      "op": "pop",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0"
      ]
    },
    "3278": {
      "op": "dig 1",
      "defined_out": [
        "asaDue#1",
        "asaDue#1 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "asaDue#1 (copy)"
      ]
    },
    "3280": {
      "op": ">=",
      "defined_out": [
        "asaDue#1",
        "tmp%15#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0"
      ]
    },
    "3281": {
      "op": "assert",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3282": {
      "op": "itxn_begin"
    },
    "3283": {
      "op": "txn Sender",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3285": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3286": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3287": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3288": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "3289": {
      "op": "btoi",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3290": {
      "op": "dig 2",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "asaDue#1 (copy)"
      ]
    },
    "3292": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3294": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3296": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3298": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "4"
      ]
    },
    "3300": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3302": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "1000"
      ]
    },
    "3303": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3305": {
      "op": "itxn_submit"
    },
    "3306": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "3307": {
      "op": "bytec 9 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3309": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3310": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0"
      ]
    },
    "3311": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "asaDue#1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "3313": {
      "op": "-",
      "defined_out": [
        "asaDue#1",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0"
      ]
    },
    "3314": {
      "op": "bytec 9 // \"circulating_lst\"",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "3316": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "3317": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3318": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "3319": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"total_deposits\""
      ]
    },
    "3321": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3322": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0"
      ]
    },
    "3323": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "maybe_value%4#0",
        "asaDue#1"
      ]
    },
    "3324": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%1#0"
      ]
    },
    "3325": {
      "op": "bytec 4 // \"total_deposits\"",
      "stack_out": [
        "lstAsset#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "3327": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "3328": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3329": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%2#0"
      ]
    },
    "3332": {
      "op": "bytec 8 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "3334": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "3335": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3336": {
      "retsub": true,
      "op": "retsub"
    },
    "3337": {
      "block": "withdrawDeposit_else_body@7",
      "stack_in": [
        "lstAsset#0"
      ],
      "op": "itxn_begin"
    },
    "3338": {
      "op": "bytec 15 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)"
      ],
      "stack_out": [
        "lstAsset#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "3340": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3342": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3344": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3346": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "lstAsset#0",
        "appl"
      ]
    },
    "3348": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3350": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "lstAsset#0",
        "1000"
      ]
    },
    "3351": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3353": {
      "op": "itxn_submit"
    },
    "3354": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "3356": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3357": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0",
        "tmp%0#1"
      ]
    },
    "3360": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "awst_tmp%0#0"
      ]
    },
    "3361": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "3364": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1",
        "0x151f7c75"
      ]
    },
    "3365": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "3366": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1"
      ]
    },
    "3367": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3368": {
      "op": "itxn_begin"
    },
    "3369": {
      "op": "bytec 16 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "3371": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3373": {
      "op": "frame_dig -2",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3375": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3377": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "3379": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3381": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "3382": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3384": {
      "op": "itxn_submit"
    },
    "3385": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "3387": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3388": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%4#1"
      ]
    },
    "3391": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "awst_tmp%1#0"
      ]
    },
    "3392": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ]
    },
    "3395": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1",
        "0x151f7c75"
      ]
    },
    "3396": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ]
    },
    "3397": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ]
    },
    "3398": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3399": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "3401": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3402": {
      "op": "uncover 2",
      "stack_out": [
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "3404": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3405": {
      "op": "b withdrawDeposit_after_if_else@8"
    },
    "3408": {
      "block": "withdrawDeposit_bool_false@4",
      "stack_in": [
        "lstAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "3409": {
      "op": "b withdrawDeposit_bool_merge@5"
    },
    "3412": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow",
      "params": {
        "assetTransferTxn#0": "uint64",
        "requestedLoanAmount#0": "uint64",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64",
        "collateralTokenId#0": "bytes",
        "mbrTxn#0": "uint64"
      },
      "block": "borrow",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "3415": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralToUse#1"
      ]
    },
    "3417": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3"
      ]
    },
    "3418": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "\"loan_record\""
      ]
    },
    "3419": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "\"loan_record\"",
        "tmp%0#0"
      ]
    },
    "3421": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "tmp%1#0"
      ]
    },
    "3422": {
      "op": "box_len",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "maybe_value%0#0",
        "hasLoan#0"
      ]
    },
    "3423": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "maybe_value%0#0",
        "hasLoan#0",
        "hasLoan#0 (copy)"
      ]
    },
    "3424": {
      "op": "uncover 2",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "hasLoan#0",
        "maybe_value%0#0"
      ]
    },
    "3426": {
      "op": "pop",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3427": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "hasLoan#0",
        "_interestSlice#0"
      ]
    },
    "3430": {
      "op": "pop",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3431": {
      "op": "bz borrow_else_body@2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3434": {
      "op": "txn Sender",
      "defined_out": [
        "hasLoan#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%2#0"
      ]
    },
    "3436": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "hasLoan#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%3#0"
      ]
    },
    "3439": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "hasLoan#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%3#0",
        "40"
      ]
    },
    "3441": {
      "op": "extract_uint64",
      "defined_out": [
        "hasLoan#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%4#0"
      ]
    },
    "3442": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "hasLoan#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%4#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3444": {
      "op": "+",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "3445": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3447": {
      "block": "borrow_after_if_else@3",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3449": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%0#1"
      ]
    },
    "3451": {
      "op": "pushint 4000 // 4000",
      "defined_out": [
        "4000",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%0#1",
        "4000"
      ]
    },
    "3454": {
      "op": "==",
      "defined_out": [
        "tmp%1#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%1#3"
      ]
    },
    "3455": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3456": {
      "op": "frame_dig -6",
      "defined_out": [
        "assetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3458": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%2#0"
      ]
    },
    "3460": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%2#0",
        "tmp%3#2"
      ]
    },
    "3462": {
      "op": "==",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%4#1"
      ]
    },
    "3463": {
      "op": "bz borrow_bool_false@22",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3466": {
      "op": "frame_dig -6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3468": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%5#0"
      ]
    },
    "3470": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%5#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3472": {
      "op": "==",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%6#1"
      ]
    },
    "3473": {
      "op": "bz borrow_bool_false@22",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3476": {
      "op": "frame_dig -6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3478": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%7#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%7#1"
      ]
    },
    "3480": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "tmp%7#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%7#1",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3482": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%7#1",
        "tmp%8#1"
      ]
    },
    "3483": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%9#0"
      ]
    },
    "3484": {
      "op": "bz borrow_bool_false@22",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3487": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "3488": {
      "block": "borrow_bool_merge@23",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3489": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "\"accepted_collaterals\""
      ]
    },
    "3491": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3493": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%0#2"
      ]
    },
    "3494": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#0",
        "maybe_exists%0#1"
      ]
    },
    "3495": {
      "op": "bury 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_exists%0#1"
      ]
    },
    "3497": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3498": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3500": {
      "op": "frame_dig 0",
      "defined_out": [
        "collateralToUse#1",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralToUse#1"
      ]
    },
    "3502": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralToUse#1",
        "collateralTokenId#0 (copy)",
        "lstApp#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralToUse#1",
        "lstApp#0 (copy)"
      ]
    },
    "3504": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralUSD#0"
      ]
    },
    "3507": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralUSD#0",
        "0"
      ]
    },
    "3508": {
      "op": "bytec 21 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralUSD#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "3510": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralUSD#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3511": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralUSD#0",
        "maybe_value%1#0"
      ]
    },
    "3512": {
      "op": "*",
      "defined_out": [
        "collateralToUse#1",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%5#0"
      ]
    },
    "3513": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralToUse#1",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%5#0",
        "10000"
      ]
    },
    "3514": {
      "op": "/",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3515": {
      "op": "bytec 40 // \"last_max_borrow\"",
      "defined_out": [
        "\"last_max_borrow\"",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "\"last_max_borrow\""
      ]
    },
    "3517": {
      "op": "dig 1",
      "defined_out": [
        "\"last_max_borrow\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maxBorrowUSD#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "\"last_max_borrow\"",
        "maxBorrowUSD#0 (copy)"
      ]
    },
    "3519": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3520": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0"
      ]
    },
    "3521": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3522": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3523": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%2#0"
      ]
    },
    "3524": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0"
      ]
    },
    "3527": {
      "op": "frame_dig -5",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3529": {
      "op": "mulw",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ]
    },
    "3530": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0",
        "1000000"
      ]
    },
    "3532": {
      "op": "divw",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3533": {
      "op": "bytec 41 // \"last_requested_loan\"",
      "defined_out": [
        "\"last_requested_loan\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"last_requested_loan\""
      ]
    },
    "3535": {
      "op": "dig 1",
      "defined_out": [
        "\"last_requested_loan\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "requestedLoanUSD#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"last_requested_loan\"",
        "requestedLoanUSD#0 (copy)"
      ]
    },
    "3537": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3538": {
      "op": "dup2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "maxBorrowUSD#0 (copy)",
        "requestedLoanUSD#0 (copy)"
      ]
    },
    "3539": {
      "op": "-",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "new_state_value%0#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "new_state_value%0#0"
      ]
    },
    "3540": {
      "op": "bytec 42 // \"debug_diff\"",
      "defined_out": [
        "\"debug_diff\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "new_state_value%0#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "new_state_value%0#0",
        "\"debug_diff\""
      ]
    },
    "3542": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"debug_diff\"",
        "new_state_value%0#0"
      ]
    },
    "3543": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3544": {
      "op": ">=",
      "defined_out": [
        "collateralToUse#1",
        "tmp%0#5"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%0#5"
      ]
    },
    "3545": {
      "error": "exceeds LTV limit",
      "op": "assert // exceeds LTV limit",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3546": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "0"
      ]
    },
    "3547": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3549": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#0",
        "maybe_exists%0#1"
      ]
    },
    "3550": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#0"
      ]
    },
    "3551": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "3552": {
      "op": "bytec 23 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\"",
        "0",
        "collateralToUse#1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#0",
        "0",
        "\"util_cap_bps\""
      ]
    },
    "3554": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3555": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "3556": {
      "op": "mulw",
      "defined_out": [
        "collateralToUse#1",
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "h#0",
        "l#0"
      ]
    },
    "3557": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "h#0",
        "l#0",
        "10000"
      ]
    },
    "3558": {
      "op": "divw",
      "defined_out": [
        "capBorrow#0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "capBorrow#0"
      ]
    },
    "3559": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "capBorrow#0",
        "0"
      ]
    },
    "3560": {
      "op": "bytec_2 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "capBorrow#0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "capBorrow#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "3561": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#0",
        "maybe_exists%0#1"
      ]
    },
    "3562": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#0"
      ]
    },
    "3563": {
      "op": "frame_dig -5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3565": {
      "op": "+",
      "defined_out": [
        "capBorrow#0",
        "collateralToUse#1",
        "tmp%1#4"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "capBorrow#0",
        "tmp%1#4"
      ]
    },
    "3566": {
      "op": ">=",
      "defined_out": [
        "collateralToUse#1",
        "tmp%2#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%2#3"
      ]
    },
    "3567": {
      "error": "UTIL_CAP_EXCEEDED",
      "op": "assert // UTIL_CAP_EXCEEDED",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3568": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "0"
      ]
    },
    "3569": {
      "op": "bytec 34 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\"",
        "0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "0",
        "\"origination_fee_bps\""
      ]
    },
    "3571": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#0",
        "maybe_exists%0#1"
      ]
    },
    "3572": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#0"
      ]
    },
    "3573": {
      "op": "frame_dig -5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3575": {
      "op": "*",
      "defined_out": [
        "collateralToUse#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%0#1"
      ]
    },
    "3576": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%0#1",
        "10000"
      ]
    },
    "3577": {
      "op": "/",
      "defined_out": [
        "collateralToUse#1",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "fee#1"
      ]
    },
    "3578": {
      "op": "frame_dig -5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3580": {
      "op": "dig 1",
      "defined_out": [
        "collateralToUse#1",
        "fee#1",
        "fee#1 (copy)",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)",
        "fee#1 (copy)"
      ]
    },
    "3582": {
      "op": "-",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "fee#1",
        "disbursement#3"
      ]
    },
    "3583": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "fee#1",
        "disbursement#3",
        "disbursement#3 (copy)"
      ]
    },
    "3584": {
      "op": "cover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "disbursement#3"
      ]
    },
    "3586": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "fee#1"
      ]
    },
    "3588": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "0"
      ]
    },
    "3589": {
      "op": "bytec 11 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "0",
        "\"fee_pool\""
      ]
    },
    "3591": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3592": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "maybe_value%1#0"
      ]
    },
    "3593": {
      "op": "+",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "new_state_value%0#0"
      ]
    },
    "3594": {
      "op": "bytec 11 // \"fee_pool\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "new_state_value%0#0",
        "\"fee_pool\""
      ]
    },
    "3596": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "\"fee_pool\"",
        "new_state_value%0#0"
      ]
    },
    "3597": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3"
      ]
    },
    "3598": {
      "op": "bytec 39 // \"last_scaled_down_disbursement\"",
      "defined_out": [
        "\"last_scaled_down_disbursement\"",
        "collateralToUse#1",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "\"last_scaled_down_disbursement\""
      ]
    },
    "3600": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "\"last_scaled_down_disbursement\"",
        "disbursement#3"
      ]
    },
    "3601": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3602": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3604": {
      "op": "bz borrow_else_body@5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3607": {
      "op": "txn Sender",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3609": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "borrower#0 (copy)",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "borrower#0 (copy)"
      ]
    },
    "3610": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0"
      ]
    },
    "3613": {
      "op": "dig 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "borrower#0 (copy)"
      ]
    },
    "3615": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "op": "callsub syncBorrowerSnapshot",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0"
      ]
    },
    "3618": {
      "op": "frame_dig 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#3"
      ]
    },
    "3620": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "disbursement#3 (copy)",
        "existingLoan#0",
        "hasLoan#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#3 (copy)",
        "disbursement#3 (copy)"
      ]
    },
    "3621": {
      "op": "cover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#3 (copy)"
      ]
    },
    "3623": {
      "op": "+",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "newDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "existingLoan#0",
        "newDebt#0"
      ]
    },
    "3624": {
      "op": "dig 1",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "hasLoan#0",
        "newDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "existingLoan#0",
        "newDebt#0",
        "existingLoan#0 (copy)"
      ]
    },
    "3626": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "existingLoan#0",
        "newDebt#0",
        "tmp%0#2"
      ]
    },
    "3629": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "existingLoan#0"
      ]
    },
    "3631": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "existingLoan#0",
        "40"
      ]
    },
    "3633": {
      "op": "extract_uint64",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2",
        "tmp%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "tmp%2#1"
      ]
    },
    "3634": {
      "op": "frame_dig -4",
      "defined_out": [
        "borrower#0",
        "collateralAmount#0 (copy)",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2",
        "tmp%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "tmp%2#1",
        "collateralAmount#0 (copy)"
      ]
    },
    "3636": {
      "op": "+",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2",
        "to_encode%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "to_encode%0#0"
      ]
    },
    "3637": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ]
    },
    "3638": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3639": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3640": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_exists%0#1",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "3641": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1"
      ]
    },
    "3642": {
      "op": "uncover 4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "disbursement#3"
      ]
    },
    "3644": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0"
      ]
    },
    "3645": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "to_encode%1#0"
      ]
    },
    "3647": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3648": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "3649": {
      "op": "bytec 20 // 0x00",
      "defined_out": [
        "0x00",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0",
        "0x00"
      ]
    },
    "3651": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%2#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3652": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "3653": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3654": {
      "op": "uncover 4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "newDebt#0"
      ]
    },
    "3656": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%3#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1"
      ]
    },
    "3657": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "0"
      ]
    },
    "3658": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%3#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "3660": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3661": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "maybe_value%1#0"
      ]
    },
    "3662": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ]
    },
    "3663": {
      "op": "dig 6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "borrower#0 (copy)"
      ]
    },
    "3665": {
      "op": "uncover 6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "borrower#0 (copy)",
        "tmp%0#2"
      ]
    },
    "3667": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3668": {
      "op": "uncover 5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "3670": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3671": {
      "op": "uncover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3673": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%8#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3674": {
      "op": "uncover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#1"
      ]
    },
    "3676": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%9#0",
        "hasLoan#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3677": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%3#1"
      ]
    },
    "3679": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%10#0",
        "hasLoan#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3680": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "3681": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3682": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "3683": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "borrower#0"
      ]
    },
    "3685": {
      "op": "concat",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "tmp%3#1"
      ]
    },
    "3686": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%3#1",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3687": {
      "op": "box_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3688": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3690": {
      "op": "frame_dig -4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3692": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3695": {
      "block": "borrow_after_if_else@6",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "op": "txn Sender"
    },
    "3697": {
      "op": "intc_0 // 0"
    },
    "3698": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3699": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "maybe_exists%0#1",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "3700": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1"
      ]
    },
    "3701": {
      "op": "btoi",
      "defined_out": [
        "borrower#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1"
      ]
    },
    "3702": {
      "op": "bnz borrow_else_body@10",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3705": {
      "op": "itxn_begin"
    },
    "3706": {
      "op": "frame_dig 1",
      "defined_out": [
        "borrower#0",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3"
      ]
    },
    "3708": {
      "op": "itxn_field Amount",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3710": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3712": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "1"
      ]
    },
    "3713": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3715": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "1000"
      ]
    },
    "3716": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3718": {
      "op": "itxn_submit"
    },
    "3719": {
      "block": "borrow_after_if_else@12",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "0"
      ]
    },
    "3720": {
      "op": "bytec_2 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "3721": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3722": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%3#0"
      ]
    },
    "3723": {
      "op": "frame_dig 1",
      "defined_out": [
        "disbursement#3",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%3#0",
        "disbursement#3"
      ]
    },
    "3725": {
      "op": "+",
      "defined_out": [
        "disbursement#3",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "3726": {
      "op": "bytec_2 // \"total_borrows\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "3727": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "3728": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3729": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "disbursement#3",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "new_state_value%1#0"
      ]
    },
    "3732": {
      "op": "bytec 8 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "disbursement#3",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "3734": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "3735": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3736": {
      "retsub": true,
      "op": "retsub"
    },
    "3737": {
      "block": "borrow_else_body@10",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0"
      ],
      "op": "itxn_begin"
    },
    "3738": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "0"
      ]
    },
    "3739": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3740": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "3741": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%1#1"
      ]
    },
    "3742": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "3743": {
      "op": "frame_dig 1",
      "defined_out": [
        "disbursement#3",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "disbursement#3"
      ]
    },
    "3745": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "3747": {
      "op": "itxn_field XferAsset",
      "defined_out": [
        "borrower#0",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3749": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3751": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "4"
      ]
    },
    "3753": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3755": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "1000"
      ]
    },
    "3756": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3758": {
      "op": "itxn_submit"
    },
    "3759": {
      "op": "b borrow_after_if_else@12"
    },
    "3762": {
      "block": "borrow_else_body@5",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "borrowerAddress#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0"
      ]
    },
    "3764": {
      "op": "frame_dig -4",
      "defined_out": [
        "borrowerAddress#0",
        "collateralAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3766": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ]
    },
    "3767": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3768": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3769": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrowerAddress#0",
        "maybe_exists%0#1",
        "maybe_value%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "3770": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1"
      ]
    },
    "3771": {
      "op": "frame_dig 1",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "disbursement#3"
      ]
    },
    "3773": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0"
      ]
    },
    "3774": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "to_encode%0#0"
      ]
    },
    "3776": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3777": {
      "op": "dig 1",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "3779": {
      "op": "bytec 20 // 0x00",
      "defined_out": [
        "0x00",
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)",
        "0x00"
      ]
    },
    "3781": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%2#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3782": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "3783": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3784": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0"
      ]
    },
    "3785": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "3787": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_exists%1#0",
        "maybe_value%0#1",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3788": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%1#0"
      ]
    },
    "3789": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "3790": {
      "op": "dig 5",
      "defined_out": [
        "borrowerAddress#0",
        "borrowerAddress#0 (copy)",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)"
      ]
    },
    "3792": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3794": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3795": {
      "op": "uncover 5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "3797": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3798": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3800": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3801": {
      "op": "uncover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#1"
      ]
    },
    "3803": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3804": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "3806": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3807": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "3808": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3809": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "3810": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "borrowerAddress#0"
      ]
    },
    "3812": {
      "op": "concat",
      "defined_out": [
        "disbursement#3",
        "encoded_tuple_buffer%11#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "tmp%0#2"
      ]
    },
    "3813": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%0#2",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3814": {
      "op": "box_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3815": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "0"
      ]
    },
    "3816": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "3818": {
      "op": "app_global_get_ex",
      "defined_out": [
        "disbursement#3",
        "maybe_exists%2#0",
        "maybe_value%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%2#1",
        "maybe_exists%2#0"
      ]
    },
    "3819": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%2#1"
      ]
    },
    "3820": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "disbursement#3",
        "maybe_value%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%2#1",
        "1"
      ]
    },
    "3821": {
      "op": "+",
      "defined_out": [
        "disbursement#3",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "3822": {
      "op": "bytec 5 // \"active_loan_records\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "3824": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "3825": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3826": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3828": {
      "op": "frame_dig -4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3830": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3833": {
      "op": "b borrow_after_if_else@6"
    },
    "3836": {
      "block": "borrow_bool_false@22",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "3837": {
      "op": "b borrow_bool_merge@23"
    },
    "3840": {
      "block": "borrow_else_body@2",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "3842": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3844": {
      "op": "b borrow_after_if_else@3"
    },
    "3847": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest",
      "params": {
        "debtor#0": "bytes",
        "templateReserveAddress#0": "bytes"
      },
      "block": "accrueLoanInterest",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3850": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "3851": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "3853": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3854": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3855": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3857": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": []
    },
    "3858": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "{accrueMarket}"
      ],
      "stack_out": [
        "{accrueMarket}"
      ]
    },
    "3861": {
      "op": "pop",
      "stack_out": []
    },
    "3862": {
      "op": "frame_dig -2",
      "stack_out": [
        "debtor#0 (copy)"
      ]
    },
    "3864": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "op": "callsub syncBorrowerSnapshot",
      "defined_out": [
        "{syncBorrowerSnapshot}"
      ],
      "stack_out": [
        "{syncBorrowerSnapshot}"
      ]
    },
    "3867": {
      "op": "pop",
      "stack_out": []
    },
    "3868": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "3871": {
      "op": "bytec 8 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"last_apr_bps\""
      ]
    },
    "3873": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ]
    },
    "3874": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3875": {
      "retsub": true,
      "op": "retsub"
    },
    "3876": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "params": {},
      "block": "current_apr_bps",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3879": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "U_raw#0"
      ]
    },
    "3881": {
      "op": "dupn 12",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0"
      ]
    },
    "3883": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "0"
      ]
    },
    "3884": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3886": {
      "op": "app_global_get_ex",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "3887": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "maybe_exists%0#0",
        "D#0"
      ]
    },
    "3888": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "maybe_exists%0#0",
        "D#0",
        "D#0 (copy)"
      ]
    },
    "3889": {
      "op": "uncover 2",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "3891": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0"
      ]
    },
    "3892": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "0"
      ]
    },
    "3893": {
      "op": "bytec_2 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "3894": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "B#0",
        "maybe_exists%1#0"
      ]
    },
    "3895": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "maybe_exists%1#0",
        "B#0"
      ]
    },
    "3896": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ]
    },
    "3898": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0"
      ]
    },
    "3899": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "0"
      ]
    },
    "3900": {
      "op": "bytec 23 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\"",
        "0",
        "B#0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "0",
        "\"util_cap_bps\""
      ]
    },
    "3902": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "3903": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%2#0",
        "cap_bps#0"
      ]
    },
    "3904": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "maybe_exists%2#0"
      ]
    },
    "3906": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "3907": {
      "op": "bnz current_apr_bps_after_if_else@29",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3910": {
      "op": "intc_0 // 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "3911": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3913": {
      "block": "current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3914": {
      "op": "bytec 30 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"ema_alpha_bps\""
      ]
    },
    "3916": {
      "op": "app_global_get_ex",
      "defined_out": [
        "alpha#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0",
        "maybe_exists%0#0"
      ]
    },
    "3917": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%0#0",
        "alpha#0"
      ]
    },
    "3918": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%0#0",
        "alpha#0",
        "alpha#0 (copy)"
      ]
    },
    "3919": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0",
        "maybe_exists%0#0",
        "alpha#0"
      ]
    },
    "3921": {
      "op": "frame_bury 2",
      "defined_out": [
        "alpha#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0",
        "maybe_exists%0#0"
      ]
    },
    "3923": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0"
      ]
    },
    "3924": {
      "op": "bnz current_apr_bps_else_body@2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3927": {
      "op": "frame_dig 0",
      "defined_out": [
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1"
      ]
    },
    "3929": {
      "op": "frame_bury 1",
      "defined_out": [
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3931": {
      "block": "current_apr_bps_after_if_else@3",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3932": {
      "op": "bytec 26 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"rate_model_type\""
      ]
    },
    "3934": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3935": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%2#0"
      ]
    },
    "3936": {
      "op": "bnz current_apr_bps_ternary_false@5",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3939": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3940": {
      "op": "bytec 17 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "3942": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%0#0"
      ]
    },
    "3943": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0"
      ]
    },
    "3944": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0"
      ]
    },
    "3945": {
      "op": "bytec 27 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\"",
        "0",
        "base_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0",
        "\"kink_norm_bps\""
      ]
    },
    "3947": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "3948": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "3949": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "3950": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "3952": {
      "op": "cover 3",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "3954": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "3955": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "3956": {
      "op": "bytec 28 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope1_bps\""
      ]
    },
    "3958": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "3959": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ]
    },
    "3960": {
      "op": "frame_bury 10",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "3962": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "3963": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "3964": {
      "op": "bytec 29 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope2_bps\""
      ]
    },
    "3966": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope2_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "3967": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope2_bps#0"
      ]
    },
    "3968": {
      "op": "frame_bury 11",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "3970": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "3971": {
      "op": "frame_dig 1",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_used#1"
      ]
    },
    "3973": {
      "op": ">=",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "tmp%0#1"
      ]
    },
    "3974": {
      "op": "bz current_apr_bps_else_body@21",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ]
    },
    "3977": {
      "op": "frame_dig 10",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "3979": {
      "op": "frame_dig 1",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0",
        "U_used#1"
      ]
    },
    "3981": {
      "op": "mulw",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "hi1#0",
        "kink_norm_bps#0",
        "lo1#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0"
      ]
    },
    "3982": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0",
        "kink_norm_bps#0"
      ]
    },
    "3984": {
      "op": "divw",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "tmp%1#0"
      ]
    },
    "3985": {
      "op": "+",
      "defined_out": [
        "U_used#1",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3986": {
      "op": "frame_bury 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3988": {
      "block": "current_apr_bps_after_if_else@22",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3989": {
      "op": "bytec 18 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "3991": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "3992": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "3993": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0",
        "maxCap#0 (copy)"
      ]
    },
    "3994": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "3996": {
      "op": "frame_bury 8",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "3998": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "3999": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "apr#18"
      ]
    },
    "4001": {
      "op": "frame_bury 4",
      "defined_out": [
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "4003": {
      "op": "bz current_apr_bps_after_if_else@25",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4006": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#0",
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4008": {
      "op": "dup",
      "defined_out": [
        "apr#0",
        "apr#0 (copy)",
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)"
      ]
    },
    "4009": {
      "op": "frame_dig 8",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)",
        "maxCap#0"
      ]
    },
    "4011": {
      "op": ">",
      "defined_out": [
        "apr#0",
        "apr#18",
        "maxCap#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "tmp%5#1"
      ]
    },
    "4012": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#1",
        "apr#18"
      ]
    },
    "4013": {
      "op": "frame_bury 4",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#1"
      ]
    },
    "4015": {
      "op": "bz current_apr_bps_after_if_else@25",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4018": {
      "op": "frame_dig 8",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#18"
      ]
    },
    "4020": {
      "op": "frame_bury 4",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4022": {
      "block": "current_apr_bps_after_if_else@25",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4024": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4026": {
      "block": "current_apr_bps_ternary_merge@6",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4027": {
      "op": "bytec 31 // \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"max_apr_step_bps\""
      ]
    },
    "4029": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "maybe_exists%4#0"
      ]
    },
    "4030": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "stepMax#0"
      ]
    },
    "4031": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "stepMax#0",
        "stepMax#0 (copy)"
      ]
    },
    "4032": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "maybe_exists%4#0",
        "stepMax#0"
      ]
    },
    "4034": {
      "op": "frame_bury 12",
      "defined_out": [
        "maybe_exists%4#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "maybe_exists%4#0"
      ]
    },
    "4036": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0"
      ]
    },
    "4037": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "apr#18"
      ]
    },
    "4039": {
      "op": "frame_bury 4",
      "defined_out": [
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0"
      ]
    },
    "4041": {
      "op": "bz current_apr_bps_after_if_else@18",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4044": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4045": {
      "op": "bytec 19 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0",
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "4047": {
      "op": "app_global_get_ex",
      "defined_out": [
        "apr#18",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4048": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%5#0"
      ]
    },
    "4049": {
      "op": "bnz current_apr_bps_ternary_false@9",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4052": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4053": {
      "op": "bytec 17 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0",
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "4055": {
      "op": "app_global_get_ex",
      "defined_out": [
        "apr#18",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "4056": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "apr#18",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "4057": {
      "op": "frame_bury 9",
      "defined_out": [
        "apr#18",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4059": {
      "block": "current_apr_bps_ternary_merge@10",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "4061": {
      "op": "frame_dig 12",
      "defined_out": [
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0",
        "stepMax#0"
      ]
    },
    "4063": {
      "op": ">",
      "defined_out": [
        "prevApr#0",
        "stepMax#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%6#0"
      ]
    },
    "4064": {
      "op": "bz current_apr_bps_ternary_false@12",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4067": {
      "op": "frame_dig 9",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "4069": {
      "op": "frame_dig 12",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0",
        "stepMax#0"
      ]
    },
    "4071": {
      "op": "-",
      "defined_out": [
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "lo#0"
      ]
    },
    "4072": {
      "op": "frame_bury 7",
      "defined_out": [
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4074": {
      "block": "current_apr_bps_ternary_merge@13",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "4076": {
      "op": "frame_dig 12",
      "defined_out": [
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0",
        "stepMax#0"
      ]
    },
    "4078": {
      "op": "+",
      "defined_out": [
        "hi#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hi#0"
      ]
    },
    "4079": {
      "op": "frame_bury 6",
      "defined_out": [
        "hi#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4081": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#0",
        "hi#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4083": {
      "op": "frame_dig 7",
      "defined_out": [
        "apr#0",
        "hi#0",
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "lo#0"
      ]
    },
    "4085": {
      "op": "<",
      "defined_out": [
        "apr#0",
        "hi#0",
        "lo#0",
        "prevApr#0",
        "stepMax#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%7#0"
      ]
    },
    "4086": {
      "op": "bz current_apr_bps_after_if_else@15",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4089": {
      "op": "frame_dig 7",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4091": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0",
        "hi#0",
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4093": {
      "block": "current_apr_bps_after_if_else@15",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4095": {
      "op": "frame_dig 6",
      "defined_out": [
        "apr#0",
        "hi#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "hi#0"
      ]
    },
    "4097": {
      "op": ">",
      "defined_out": [
        "apr#0",
        "hi#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%8#0"
      ]
    },
    "4098": {
      "op": "bz current_apr_bps_after_if_else@17",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4101": {
      "op": "frame_dig 6",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4103": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0",
        "hi#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4105": {
      "block": "current_apr_bps_after_if_else@17",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "apr#18"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#18"
      ]
    },
    "4107": {
      "op": "frame_bury 4",
      "defined_out": [
        "apr#18"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4109": {
      "block": "current_apr_bps_after_if_else@18",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4111": {
      "op": "bytec 19 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "\"prev_apr_bps\""
      ]
    },
    "4113": {
      "op": "dig 1",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0",
        "apr#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "\"prev_apr_bps\"",
        "apr#0 (copy)"
      ]
    },
    "4115": {
      "op": "app_global_put",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4116": {
      "op": "frame_bury 0"
    },
    "4118": {
      "retsub": true,
      "op": "retsub"
    },
    "4119": {
      "block": "current_apr_bps_ternary_false@12",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "lo#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "lo#0"
      ]
    },
    "4120": {
      "op": "frame_bury 7",
      "defined_out": [
        "lo#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4122": {
      "op": "b current_apr_bps_ternary_merge@13"
    },
    "4125": {
      "block": "current_apr_bps_ternary_false@9",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4126": {
      "op": "bytec 19 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "4128": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "4129": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "4130": {
      "op": "frame_bury 9",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4132": {
      "op": "b current_apr_bps_ternary_merge@10"
    },
    "4135": {
      "block": "current_apr_bps_else_body@21",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "U_used#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "U_used#1"
      ]
    },
    "4137": {
      "op": "uncover 2",
      "defined_out": [
        "U_used#1",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_used#1",
        "kink_norm_bps#0"
      ]
    },
    "4139": {
      "op": "dup",
      "defined_out": [
        "U_used#1",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_used#1",
        "kink_norm_bps#0 (copy)",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4140": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_used#1",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4142": {
      "op": "-",
      "defined_out": [
        "U_used#1",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0"
      ]
    },
    "4143": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "U_used#1",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0",
        "10000"
      ]
    },
    "4144": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "10000",
        "kink_norm_bps#0"
      ]
    },
    "4146": {
      "op": "-",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0"
      ]
    },
    "4147": {
      "op": "frame_dig 11",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "over#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0",
        "slope2_bps#0"
      ]
    },
    "4149": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "slope2_bps#0",
        "over#0"
      ]
    },
    "4151": {
      "op": "mulw",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "4152": {
      "op": "uncover 3",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0"
      ]
    },
    "4154": {
      "op": "frame_dig 10",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "4156": {
      "op": "+",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "tmp%2#0"
      ]
    },
    "4157": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "4159": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0",
        "denom#0"
      ]
    },
    "4161": {
      "op": "divw",
      "defined_out": [
        "U_used#1",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "tmp%3#1"
      ]
    },
    "4162": {
      "op": "+",
      "defined_out": [
        "U_used#1",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4163": {
      "op": "frame_bury 3",
      "defined_out": [
        "U_used#1",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4165": {
      "op": "b current_apr_bps_after_if_else@22"
    },
    "4168": {
      "block": "current_apr_bps_ternary_false@5",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4169": {
      "op": "bytec 17 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "4171": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4172": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4173": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4175": {
      "op": "b current_apr_bps_ternary_merge@6"
    },
    "4178": {
      "block": "current_apr_bps_else_body@2",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4179": {
      "op": "bytec 32 // \"util_ema_bps\"",
      "defined_out": [
        "\"util_ema_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"util_ema_bps\""
      ]
    },
    "4181": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "maybe_exists%1#0"
      ]
    },
    "4182": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0"
      ]
    },
    "4183": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "10000"
      ]
    },
    "4184": {
      "op": "frame_dig 2",
      "defined_out": [
        "10000",
        "alpha#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "10000",
        "alpha#0"
      ]
    },
    "4186": {
      "op": "dup",
      "defined_out": [
        "10000",
        "alpha#0",
        "alpha#0 (copy)",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "10000",
        "alpha#0 (copy)",
        "alpha#0 (copy)"
      ]
    },
    "4187": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "alpha#0",
        "10000",
        "alpha#0 (copy)"
      ]
    },
    "4189": {
      "op": "-",
      "defined_out": [
        "alpha#0",
        "oneMinus#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "alpha#0",
        "oneMinus#0"
      ]
    },
    "4190": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "oneMinus#0",
        "alpha#0"
      ]
    },
    "4191": {
      "op": "frame_dig 0",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "oneMinus#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "oneMinus#0",
        "alpha#0",
        "U_raw#0"
      ]
    },
    "4193": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "hiA#0",
        "loA#0",
        "oneMinus#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "oneMinus#0",
        "hiA#0",
        "loA#0"
      ]
    },
    "4194": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "hiA#0",
        "loA#0",
        "oneMinus#0"
      ]
    },
    "4196": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiA#0",
        "loA#0",
        "oneMinus#0",
        "prevU#0"
      ]
    },
    "4198": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "hiA#0",
        "hiB#0",
        "loA#0",
        "loB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiA#0",
        "loA#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "4199": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "loA#0",
        "hiB#0",
        "loB#0",
        "hiA#0"
      ]
    },
    "4201": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiB#0",
        "loB#0",
        "hiA#0",
        "loA#0"
      ]
    },
    "4203": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiB#0",
        "loB#0",
        "hiA#0",
        "loA#0",
        "10000"
      ]
    },
    "4204": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "hiB#0",
        "loB#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiB#0",
        "loB#0",
        "tmp%1#0"
      ]
    },
    "4205": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%1#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "4207": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%1#0",
        "hiB#0",
        "loB#0",
        "10000"
      ]
    },
    "4208": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "4209": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1"
      ]
    },
    "4210": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1",
        "U_used#1"
      ]
    },
    "4211": {
      "op": "frame_bury 1",
      "defined_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1"
      ]
    },
    "4213": {
      "op": "bytec 32 // \"util_ema_bps\"",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1",
        "\"util_ema_bps\""
      ]
    },
    "4215": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"util_ema_bps\"",
        "U_used#1"
      ]
    },
    "4216": {
      "op": "app_global_put",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4217": {
      "op": "b current_apr_bps_after_if_else@3"
    },
    "4220": {
      "block": "current_apr_bps_after_if_else@29",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 13",
      "defined_out": [
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "4222": {
      "op": "frame_dig 15",
      "defined_out": [
        "D#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "cap_bps#0"
      ]
    },
    "4224": {
      "op": "mulw",
      "defined_out": [
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ]
    },
    "4225": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0",
        "10000"
      ]
    },
    "4226": {
      "op": "divw",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "4227": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0"
      ]
    },
    "4228": {
      "op": "frame_bury 5",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "4230": {
      "op": "bnz current_apr_bps_after_if_else@31",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4233": {
      "op": "intc_0 // 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4234": {
      "op": "frame_bury 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4236": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32"
    },
    "4239": {
      "block": "current_apr_bps_after_if_else@31",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 14",
      "defined_out": [
        "B#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0"
      ]
    },
    "4241": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)"
      ]
    },
    "4242": {
      "op": "frame_dig 5",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ]
    },
    "4244": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0",
        "capBorrow#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "4245": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "4247": {
      "op": "<=",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "tmp%2#2"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#2"
      ]
    },
    "4248": {
      "op": "dig 1",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#2",
        "capBorrow#0 (copy)"
      ]
    },
    "4250": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "tmp%2#2",
        "capBorrow#0 (copy)",
        "B#0"
      ]
    },
    "4252": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0 (copy)",
        "B#0",
        "tmp%2#2"
      ]
    },
    "4254": {
      "op": "select",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0"
      ]
    },
    "4255": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0",
        "10000"
      ]
    },
    "4256": {
      "op": "mulw",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ]
    },
    "4257": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiN#0",
        "loN#0",
        "capBorrow#0"
      ]
    },
    "4259": {
      "op": "divw",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4260": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4262": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32"
    },
    "4265": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "params": {
        "rec#0": "bytes"
      },
      "block": "currentDebtFromSnapshot",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "4268": {
      "op": "frame_dig -1",
      "defined_out": [
        "rec#0 (copy)"
      ],
      "stack_out": [
        "rec#0 (copy)"
      ]
    },
    "4270": {
      "op": "pushint 73 // 73",
      "defined_out": [
        "73",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "rec#0 (copy)",
        "73"
      ]
    },
    "4272": {
      "op": "extract_uint64",
      "defined_out": [
        "p#0"
      ],
      "stack_out": [
        "p#0"
      ]
    },
    "4273": {
      "op": "dup",
      "defined_out": [
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "p#0"
      ]
    },
    "4274": {
      "op": "bnz currentDebtFromSnapshot_after_if_else@2",
      "stack_out": [
        "p#0"
      ]
    },
    "4277": {
      "op": "intc_0 // 0",
      "stack_out": [
        "p#0",
        "0"
      ]
    },
    "4278": {
      "op": "frame_dig -1",
      "stack_out": [
        "p#0",
        "0",
        "rec#0 (copy)"
      ]
    },
    "4280": {
      "op": "uncover 2"
    },
    "4282": {
      "retsub": true,
      "op": "retsub"
    },
    "4283": {
      "block": "currentDebtFromSnapshot_after_if_else@2",
      "stack_in": [
        "p#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "p#0",
        "0"
      ]
    },
    "4284": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0"
      ],
      "stack_out": [
        "p#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4286": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "p#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4287": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "p#0",
        "maybe_value%0#0"
      ]
    },
    "4288": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "maybe_value%0#0",
        "p#0"
      ]
    },
    "4290": {
      "op": "mulw",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0"
      ]
    },
    "4291": {
      "op": "frame_dig -1",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "rec#0 (copy)"
      ]
    },
    "4293": {
      "op": "pushint 81 // 81",
      "defined_out": [
        "81",
        "hi#0",
        "lo#0",
        "p#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "rec#0 (copy)",
        "81"
      ]
    },
    "4295": {
      "op": "extract_uint64",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "tmp%3#0"
      ]
    },
    "4296": {
      "op": "divw",
      "defined_out": [
        "p#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "p#0",
        "tmp%4#0"
      ]
    },
    "4297": {
      "op": "frame_dig -1",
      "stack_out": [
        "p#0",
        "tmp%4#0",
        "rec#0 (copy)"
      ]
    },
    "4299": {
      "op": "uncover 2"
    },
    "4301": {
      "retsub": true,
      "op": "retsub"
    },
    "4302": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "syncBorrowerSnapshot",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4305": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4306": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "4308": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4309": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4310": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "maybe_exists%0#0"
      ]
    },
    "4311": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "rec#0"
      ]
    },
    "4312": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4315": {
      "op": "dup",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4316": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0"
      ]
    },
    "4319": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "rec#0 (copy)"
      ]
    },
    "4321": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "4324": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "0"
      ]
    },
    "4325": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4326": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liveDebt#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4327": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "4328": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "rec#0"
      ]
    },
    "4330": {
      "error": "Index access is out of bounds",
      "op": "extract 48 17 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ]
    },
    "4333": {
      "op": "dig 4",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "liveDebt#0 (copy)"
      ]
    },
    "4335": {
      "op": "itob",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "4336": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "4337": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4339": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liveDebt#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4340": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0"
      ]
    },
    "4341": {
      "op": "itob",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4342": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "borrower#0 (copy)"
      ]
    },
    "4344": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "borrower#0 (copy)",
        "tmp%1#0"
      ]
    },
    "4346": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4347": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ]
    },
    "4349": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4350": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "tmp%3#0"
      ]
    },
    "4352": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "4353": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0",
        "maybe_value%1#0"
      ]
    },
    "4355": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "liveDebt#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "4356": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "4358": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "liveDebt#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4359": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%1#0"
      ]
    },
    "4360": {
      "op": "concat",
      "defined_out": [
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "newRec#0"
      ]
    },
    "4361": {
      "op": "uncover 2",
      "stack_out": [
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ]
    },
    "4363": {
      "op": "swap",
      "stack_out": [
        "liveDebt#0",
        "tmp%0#0",
        "newRec#0"
      ]
    },
    "4364": {
      "op": "box_put",
      "stack_out": [
        "liveDebt#0"
      ]
    },
    "4365": {
      "retsub": true,
      "op": "retsub"
    },
    "4366": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "params": {},
      "block": "accrueMarket",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4369": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "deltaT#0"
      ]
    },
    "4371": {
      "op": "dupn 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ]
    },
    "4373": {
      "op": "global LatestTimestamp"
    },
    "4375": {
      "op": "dup"
    },
    "4376": {
      "op": "intc_0 // 0"
    },
    "4377": {
      "op": "bytec 24 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "0",
        "\"last_accrual_ts\""
      ]
    },
    "4379": {
      "op": "app_global_get_ex",
      "defined_out": [
        "last#0",
        "maybe_exists%0#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0"
      ]
    },
    "4380": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "maybe_exists%0#0",
        "last#0"
      ]
    },
    "4381": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "maybe_exists%0#0",
        "last#0",
        "last#0 (copy)"
      ]
    },
    "4382": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0",
        "last#0"
      ]
    },
    "4384": {
      "op": "cover 3",
      "defined_out": [
        "last#0",
        "maybe_exists%0#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0"
      ]
    },
    "4386": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4387": {
      "op": "<=",
      "defined_out": [
        "last#0",
        "now#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp%0#0"
      ]
    },
    "4388": {
      "op": "bz accrueMarket_after_if_else@2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4391": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4392": {
      "op": "frame_bury 0"
    },
    "4394": {
      "retsub": true,
      "op": "retsub"
    },
    "4395": {
      "block": "accrueMarket_after_if_else@2",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0"
      ]
    },
    "4397": {
      "op": "frame_dig 5",
      "defined_out": [
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4399": {
      "op": "-",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4400": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0",
        "deltaT#0"
      ]
    },
    "4401": {
      "op": "frame_bury 0",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4403": {
      "op": "bnz accrueMarket_after_if_else@9",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4406": {
      "op": "intc_0 // 0",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4407": {
      "op": "frame_bury 2",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4409": {
      "block": "accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.sliceFactorWad@10",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "pushbytes \"calculateledSimpleWad\"",
      "defined_out": [
        "\"calculateledSimpleWad\""
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"calculateledSimpleWad\""
      ]
    },
    "4432": {
      "op": "frame_dig 2",
      "defined_out": [
        "\"calculateledSimpleWad\"",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"calculateledSimpleWad\"",
        "simpleWad#0"
      ]
    },
    "4434": {
      "op": "dup",
      "defined_out": [
        "\"calculateledSimpleWad\"",
        "simpleWad#0",
        "simpleWad#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"calculateledSimpleWad\"",
        "simpleWad#0 (copy)",
        "simpleWad#0 (copy)"
      ]
    },
    "4435": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0",
        "\"calculateledSimpleWad\"",
        "simpleWad#0 (copy)"
      ]
    },
    "4437": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4438": {
      "op": "bnz accrueMarket_after_if_else@4",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4441": {
      "op": "bytec 24 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"last_accrual_ts\""
      ]
    },
    "4443": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"last_accrual_ts\"",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"last_accrual_ts\"",
        "now#0"
      ]
    },
    "4445": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4446": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4447": {
      "op": "frame_bury 0"
    },
    "4449": {
      "retsub": true,
      "op": "retsub"
    },
    "4450": {
      "block": "accrueMarket_after_if_else@4",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4451": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4453": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "oldIndex#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "maybe_exists%1#0"
      ]
    },
    "4454": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0"
      ]
    },
    "4455": {
      "op": "dup",
      "defined_out": [
        "oldIndex#0",
        "oldIndex#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "oldIndex#0 (copy)"
      ]
    },
    "4456": {
      "op": "frame_dig 2",
      "defined_out": [
        "oldIndex#0",
        "oldIndex#0 (copy)",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "oldIndex#0 (copy)",
        "simpleWad#0"
      ]
    },
    "4458": {
      "op": "mulw",
      "defined_out": [
        "hiI#0",
        "loI#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "hiI#0",
        "loI#0"
      ]
    },
    "4459": {
      "op": "intc 5 // 1000000000000",
      "defined_out": [
        "1000000000000",
        "hiI#0",
        "loI#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "hiI#0",
        "loI#0",
        "1000000000000"
      ]
    },
    "4461": {
      "op": "divw",
      "defined_out": [
        "incrIndex#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "incrIndex#0"
      ]
    },
    "4462": {
      "op": "+",
      "defined_out": [
        "newIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "newIndex#0"
      ]
    },
    "4463": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "newIndex#0",
        "\"borrow_index_wad\""
      ]
    },
    "4465": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"borrow_index_wad\"",
        "newIndex#0"
      ]
    },
    "4466": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4467": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4468": {
      "op": "bytec_2 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4469": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0"
      ]
    },
    "4470": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_exists%2#0",
        "totalBefore#0"
      ]
    },
    "4471": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_exists%2#0",
        "totalBefore#0",
        "totalBefore#0 (copy)"
      ]
    },
    "4472": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0",
        "totalBefore#0"
      ]
    },
    "4474": {
      "op": "frame_bury 3",
      "defined_out": [
        "maybe_exists%2#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0"
      ]
    },
    "4476": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4477": {
      "op": "intc_0 // 0",
      "defined_out": [
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "interest#0"
      ]
    },
    "4478": {
      "op": "frame_bury 1",
      "defined_out": [
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4480": {
      "op": "bz accrueMarket_after_if_else@6",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4483": {
      "op": "frame_dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4485": {
      "op": "frame_dig 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "simpleWad#0"
      ]
    },
    "4487": {
      "op": "mulw",
      "defined_out": [
        "hiB#0",
        "interest#0",
        "loB#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "4488": {
      "op": "intc 5 // 1000000000000",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "hiB#0",
        "loB#0",
        "1000000000000"
      ]
    },
    "4490": {
      "op": "divw",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4491": {
      "op": "frame_bury 1",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4493": {
      "block": "accrueMarket_after_if_else@6",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4494": {
      "op": "bytec 35 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"protocol_share_bps\""
      ]
    },
    "4496": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "protoBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0",
        "maybe_exists%3#0"
      ]
    },
    "4497": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0"
      ]
    },
    "4498": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "protoBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0",
        "10000"
      ]
    },
    "4499": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "10000",
        "protoBps#0"
      ]
    },
    "4500": {
      "op": "-",
      "defined_out": [
        "deposBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deposBps#0"
      ]
    },
    "4501": {
      "op": "frame_dig 1",
      "defined_out": [
        "deposBps#0",
        "interest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deposBps#0",
        "interest#0"
      ]
    },
    "4503": {
      "op": "dup"
    },
    "4504": {
      "op": "uncover 2",
      "defined_out": [
        "deposBps#0",
        "interest#0",
        "interest#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "interest#0 (copy)",
        "deposBps#0"
      ]
    },
    "4506": {
      "op": "mulw",
      "defined_out": [
        "hiD#0",
        "interest#0",
        "loD#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "hiD#0",
        "loD#0"
      ]
    },
    "4507": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "hiD#0",
        "loD#0",
        "10000"
      ]
    },
    "4508": {
      "op": "divw",
      "defined_out": [
        "depositorInterest#0",
        "interest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0"
      ]
    },
    "4509": {
      "op": "dup2",
      "defined_out": [
        "depositorInterest#0",
        "depositorInterest#0 (copy)",
        "interest#0",
        "interest#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "interest#0 (copy)",
        "depositorInterest#0 (copy)"
      ]
    },
    "4510": {
      "op": "-",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4511": {
      "op": "frame_dig 3",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ]
    },
    "4513": {
      "op": "dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "totalBefore#0",
        "interest#0 (copy)"
      ]
    },
    "4515": {
      "op": "+",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "new_state_value%0#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "new_state_value%0#0"
      ]
    },
    "4516": {
      "op": "bytec_2 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "depositorInterest#0",
        "interest#0",
        "new_state_value%0#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4517": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4518": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4519": {
      "op": "pushbytes \"last_interest_applied\"",
      "defined_out": [
        "\"last_interest_applied\"",
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "\"last_interest_applied\""
      ]
    },
    "4542": {
      "op": "dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "\"last_interest_applied\"",
        "interest#0 (copy)"
      ]
    },
    "4544": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4545": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4546": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "4548": {
      "op": "app_global_get_ex",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4549": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%4#0"
      ]
    },
    "4550": {
      "op": "uncover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%4#0",
        "depositorInterest#0"
      ]
    },
    "4552": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "new_state_value%1#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%1#0"
      ]
    },
    "4553": {
      "op": "bytec 4 // \"total_deposits\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "4555": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "4556": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0"
      ]
    },
    "4557": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4558": {
      "op": "bytec 11 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "4560": {
      "op": "app_global_get_ex",
      "defined_out": [
        "interest#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4561": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%5#0"
      ]
    },
    "4562": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "new_state_value%2#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "new_state_value%2#0"
      ]
    },
    "4563": {
      "op": "bytec 11 // \"fee_pool\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "new_state_value%2#0",
        "\"fee_pool\""
      ]
    },
    "4565": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"fee_pool\"",
        "new_state_value%2#0"
      ]
    },
    "4566": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4567": {
      "op": "bytec 24 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "interest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"last_accrual_ts\""
      ]
    },
    "4569": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"last_accrual_ts\"",
        "interest#0",
        "now#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"last_accrual_ts\"",
        "now#0"
      ]
    },
    "4571": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4572": {
      "op": "frame_bury 0"
    },
    "4574": {
      "retsub": true,
      "op": "retsub"
    },
    "4575": {
      "block": "accrueMarket_after_if_else@9",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4576": {
      "op": "bytec 8 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"last_apr_bps\""
      ]
    },
    "4578": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "4579": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1"
      ]
    },
    "4580": {
      "op": "frame_dig 0",
      "defined_out": [
        "deltaT#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1",
        "deltaT#0"
      ]
    },
    "4582": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "h1#0",
        "l1#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h1#0",
        "l1#0"
      ]
    },
    "4583": {
      "op": "pushint 31536000 // 31536000",
      "defined_out": [
        "31536000",
        "deltaT#0",
        "h1#0",
        "l1#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h1#0",
        "l1#0",
        "31536000"
      ]
    },
    "4588": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "tmp2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp2#0"
      ]
    },
    "4589": {
      "op": "intc 5 // 1000000000000",
      "defined_out": [
        "1000000000000",
        "deltaT#0",
        "tmp2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp2#0",
        "1000000000000"
      ]
    },
    "4591": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "h2#0",
        "l2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h2#0",
        "l2#0"
      ]
    },
    "4592": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "deltaT#0",
        "h2#0",
        "l2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h2#0",
        "l2#0",
        "10000"
      ]
    },
    "4593": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4594": {
      "op": "frame_bury 2",
      "defined_out": [
        "deltaT#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4596": {
      "op": "b accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.sliceFactorWad@10"
    },
    "4599": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "params": {
        "borrowerAddress#0": "bytes"
      },
      "block": "getLoanRecord",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4602": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4603": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4605": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4606": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4607": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4608": {
      "retsub": true,
      "op": "retsub"
    },
    "4609": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "repaymentAmount#0": "uint64"
      },
      "block": "repayLoanASA",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4612": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4614": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4615": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4616": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4617": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0"
      ]
    },
    "4618": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4619": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4621": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "4623": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "4625": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "4626": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4629": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4631": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "4633": {
      "op": "frame_dig 1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%3#0",
        "baseToken#0"
      ]
    },
    "4635": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "4636": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4639": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4641": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "4643": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseToken#0",
        "repaymentAmount#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%5#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4645": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "4646": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4649": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "4650": {
      "block": "repayLoanASA_bool_merge@5",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4651": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "_interestSlice#0"
      ]
    },
    "4654": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4655": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "4657": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ]
    },
    "4660": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4661": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%8#0"
      ]
    },
    "4663": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4666": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4669": {
      "op": "swap",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4670": {
      "op": "frame_dig -1",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4672": {
      "op": "dig 1",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)",
        "liveDebt#0 (copy)"
      ]
    },
    "4674": {
      "op": "<=",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "tmp%9#0"
      ]
    },
    "4675": {
      "op": "assert",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4676": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4678": {
      "op": "-",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4679": {
      "op": "dup",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "remainingDebt#0"
      ]
    },
    "4680": {
      "op": "frame_bury 0",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4682": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "0"
      ]
    },
    "4683": {
      "op": "bytec_2 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4684": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4685": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0"
      ]
    },
    "4686": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4688": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0"
      ]
    },
    "4689": {
      "op": "bytec_2 // \"total_borrows\"",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4690": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4691": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4692": {
      "op": "bnz repayLoanASA_else_body@8",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4695": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"loan_record\""
      ]
    },
    "4696": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"loan_record\"",
        "tmp%11#0"
      ]
    },
    "4698": {
      "op": "concat",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "tmp%12#0"
      ]
    },
    "4699": {
      "op": "box_del",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "{box_del}"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "{box_del}"
      ]
    },
    "4700": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4701": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "0"
      ]
    },
    "4702": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4704": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4705": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%2#0"
      ]
    },
    "4706": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "4707": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "new_state_value%1#0"
      ]
    },
    "4708": {
      "op": "bytec 5 // \"active_loan_records\"",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "4710": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "4711": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4712": {
      "op": "itxn_begin"
    },
    "4713": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4715": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "4716": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4717": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "32"
      ]
    },
    "4719": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4720": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0"
      ]
    },
    "4721": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "40"
      ]
    },
    "4723": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "4724": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4726": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4728": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4730": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "4"
      ]
    },
    "4732": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4734": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "1000"
      ]
    },
    "4735": {
      "op": "itxn_field Fee",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4737": {
      "op": "itxn_submit"
    },
    "4738": {
      "retsub": true,
      "op": "retsub"
    },
    "4739": {
      "block": "repayLoanASA_else_body@8",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "tmp%15#0"
      ]
    },
    "4741": {
      "op": "swap",
      "defined_out": [
        "rec#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "rec#0"
      ]
    },
    "4742": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4743": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "rec#0",
        "tmp%16#0"
      ]
    },
    "4746": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "rec#0"
      ]
    },
    "4747": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "4750": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "0"
      ]
    },
    "4751": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4752": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4753": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0"
      ]
    },
    "4754": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%3#0",
        "repaymentAmount#0 (copy)",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4756": {
      "op": "itob",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "4757": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "4759": {
      "op": "itob",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4760": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "4761": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "4764": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4765": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "4766": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4767": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0"
      ]
    },
    "4769": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "4770": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "4771": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4773": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4774": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0"
      ]
    },
    "4775": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "4776": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%15#0"
      ]
    },
    "4778": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "4780": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4781": {
      "op": "uncover 5",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0",
        "tmp%17#0"
      ]
    },
    "4783": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4784": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4786": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4787": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%3#0"
      ]
    },
    "4789": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4790": {
      "op": "uncover 2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%2#0"
      ]
    },
    "4792": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "remainingDebt#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4793": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%3#0"
      ]
    },
    "4794": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4795": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "4796": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "tmp%18#0"
      ]
    },
    "4798": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "tmp%19#0"
      ]
    },
    "4799": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%19#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4800": {
      "op": "box_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4801": {
      "retsub": true,
      "op": "retsub"
    },
    "4802": {
      "block": "repayLoanASA_bool_false@4",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "4803": {
      "op": "b repayLoanASA_bool_merge@5"
    },
    "4806": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo",
      "params": {
        "paymentTxn#0": "uint64",
        "repaymentAmount#0": "uint64"
      },
      "block": "repayLoanAlgo",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4809": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4811": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4812": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4813": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4814": {
      "op": "bury 1",
      "stack_out": [
        "remainingDebt#0",
        "maybe_exists%0#0"
      ]
    },
    "4816": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4817": {
      "op": "frame_dig -2",
      "defined_out": [
        "paymentTxn#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4819": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%0#0"
      ]
    },
    "4821": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "4823": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%2#0"
      ]
    },
    "4824": {
      "op": "bz repayLoanAlgo_bool_false@3",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4827": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4829": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%3#0"
      ]
    },
    "4831": {
      "op": "frame_dig -1",
      "defined_out": [
        "repaymentAmount#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%3#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4833": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%4#0"
      ]
    },
    "4834": {
      "op": "bz repayLoanAlgo_bool_false@3",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4837": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "and_result%0#0"
      ]
    },
    "4838": {
      "block": "repayLoanAlgo_bool_merge@4",
      "stack_in": [
        "remainingDebt#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4839": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "_interestSlice#0"
      ]
    },
    "4842": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4843": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%5#0"
      ]
    },
    "4845": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0"
      ]
    },
    "4848": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4849": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%6#0"
      ]
    },
    "4851": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4854": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4857": {
      "op": "swap",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4858": {
      "op": "frame_dig -1",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4860": {
      "op": "dig 1",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)",
        "liveDebt#0 (copy)"
      ]
    },
    "4862": {
      "op": "<=",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "tmp%7#0"
      ]
    },
    "4863": {
      "op": "assert",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4864": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4866": {
      "op": "-",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4867": {
      "op": "dup",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "remainingDebt#0"
      ]
    },
    "4868": {
      "op": "frame_bury 0",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4870": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "0"
      ]
    },
    "4871": {
      "op": "bytec_2 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4872": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4873": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0"
      ]
    },
    "4874": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4876": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0"
      ]
    },
    "4877": {
      "op": "bytec_2 // \"total_borrows\"",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4878": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4879": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4880": {
      "op": "bnz repayLoanAlgo_else_body@7",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4883": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"loan_record\""
      ]
    },
    "4884": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"loan_record\"",
        "tmp%9#0"
      ]
    },
    "4886": {
      "op": "concat",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "tmp%10#0"
      ]
    },
    "4887": {
      "op": "box_del",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "{box_del}"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "{box_del}"
      ]
    },
    "4888": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4889": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "0"
      ]
    },
    "4890": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4892": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4893": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%2#0"
      ]
    },
    "4894": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "4895": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "new_state_value%1#0"
      ]
    },
    "4896": {
      "op": "bytec 5 // \"active_loan_records\"",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "4898": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "4899": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4900": {
      "op": "itxn_begin"
    },
    "4901": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4903": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "4904": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4905": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "32"
      ]
    },
    "4907": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4908": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0"
      ]
    },
    "4909": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "40"
      ]
    },
    "4911": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "4912": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4914": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4916": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4918": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "4"
      ]
    },
    "4920": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4922": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "1000"
      ]
    },
    "4923": {
      "op": "itxn_field Fee",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4925": {
      "op": "itxn_submit"
    },
    "4926": {
      "retsub": true,
      "op": "retsub"
    },
    "4927": {
      "block": "repayLoanAlgo_else_body@7",
      "stack_in": [
        "remainingDebt#0",
        "rec#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "tmp%13#0"
      ]
    },
    "4929": {
      "op": "swap",
      "defined_out": [
        "rec#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "rec#0"
      ]
    },
    "4930": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4931": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "rec#0",
        "tmp%14#0"
      ]
    },
    "4934": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "rec#0"
      ]
    },
    "4935": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "4938": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "0"
      ]
    },
    "4939": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4940": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4941": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0"
      ]
    },
    "4942": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%3#0",
        "repaymentAmount#0 (copy)",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4944": {
      "op": "itob",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "4945": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "4947": {
      "op": "itob",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4948": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "4949": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "4952": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4953": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "4954": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4955": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0"
      ]
    },
    "4957": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "4958": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "4959": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4961": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4962": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0"
      ]
    },
    "4963": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "4964": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%13#0"
      ]
    },
    "4966": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "4968": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4969": {
      "op": "uncover 5",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0",
        "tmp%15#0"
      ]
    },
    "4971": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4972": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4974": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4975": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%3#0"
      ]
    },
    "4977": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4978": {
      "op": "uncover 2",
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%2#0"
      ]
    },
    "4980": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "remainingDebt#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4981": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%3#0"
      ]
    },
    "4982": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4983": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "4984": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "tmp%16#0"
      ]
    },
    "4986": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "tmp%17#0"
      ]
    },
    "4987": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%17#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4988": {
      "op": "box_put",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4989": {
      "retsub": true,
      "op": "retsub"
    },
    "4990": {
      "block": "repayLoanAlgo_bool_false@3",
      "stack_in": [
        "remainingDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "and_result%0#0"
      ]
    },
    "4991": {
      "op": "b repayLoanAlgo_bool_merge@4"
    },
    "4994": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawPlatformFees",
      "params": {
        "paymentReceiver#0": "bytes",
        "feeTxn#0": "uint64"
      },
      "block": "withdrawPlatformFees",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4997": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4999": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "5000": {
      "op": "bytec 6 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "5002": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5003": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "5004": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "5005": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "5006": {
      "op": "frame_dig -1",
      "defined_out": [
        "feeTxn#0 (copy)"
      ],
      "stack_out": [
        "feeTxn#0 (copy)"
      ]
    },
    "5008": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "5010": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "5012": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "5013": {
      "op": "bz withdrawPlatformFees_bool_false@3",
      "stack_out": []
    },
    "5016": {
      "op": "frame_dig -1",
      "stack_out": [
        "feeTxn#0 (copy)"
      ]
    },
    "5018": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "5020": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "1000"
      ]
    },
    "5021": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "5022": {
      "op": "bz withdrawPlatformFees_bool_false@3",
      "stack_out": []
    },
    "5025": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "5026": {
      "block": "withdrawPlatformFees_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "5027": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5028": {
      "op": "bytec 11 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"fee_pool\""
      ]
    },
    "5030": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5031": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "5032": {
      "op": "bz withdrawPlatformFees_after_if_else@11",
      "stack_out": []
    },
    "5035": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "5036": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "5037": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5038": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "5039": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "5040": {
      "op": "bnz withdrawPlatformFees_else_body@8",
      "stack_out": []
    },
    "5043": {
      "op": "itxn_begin"
    },
    "5044": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "5045": {
      "op": "bytec 11 // \"fee_pool\"",
      "stack_out": [
        "0",
        "\"fee_pool\""
      ]
    },
    "5047": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5048": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "5049": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "5051": {
      "op": "frame_dig -2",
      "defined_out": [
        "paymentReceiver#0 (copy)"
      ],
      "stack_out": [
        "paymentReceiver#0 (copy)"
      ]
    },
    "5053": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "5055": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "5056": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5058": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "5059": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5061": {
      "op": "itxn_submit"
    },
    "5062": {
      "block": "withdrawPlatformFees_after_if_else@10",
      "stack_in": [],
      "op": "bytec 11 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\""
      ],
      "stack_out": [
        "\"fee_pool\""
      ]
    },
    "5064": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"fee_pool\"",
        "0"
      ],
      "stack_out": [
        "\"fee_pool\"",
        "0"
      ]
    },
    "5065": {
      "op": "app_global_put",
      "stack_out": []
    },
    "5066": {
      "block": "withdrawPlatformFees_after_if_else@11",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "5067": {
      "block": "withdrawPlatformFees_else_body@8",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "5068": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5069": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "5070": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "5071": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "5072": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "5073": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "5074": {
      "op": "bytec 11 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "5076": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5077": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "maybe_value%5#0"
      ]
    },
    "5078": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "5080": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "5082": {
      "op": "frame_dig -2",
      "defined_out": [
        "paymentReceiver#0 (copy)"
      ],
      "stack_out": [
        "paymentReceiver#0 (copy)"
      ]
    },
    "5084": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "5086": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "5088": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5090": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "5091": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5093": {
      "op": "itxn_submit"
    },
    "5094": {
      "op": "b withdrawPlatformFees_after_if_else@10"
    },
    "5097": {
      "block": "withdrawPlatformFees_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "5098": {
      "op": "b withdrawPlatformFees_bool_merge@4"
    },
    "5101": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutSplitASA",
      "params": {
        "buyer#0": "bytes",
        "debtor#0": "bytes",
        "premiumAxferTxn#0": "uint64",
        "repayAxferTxn#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "buyoutSplitASA",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "5104": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "baseAssetId#0"
      ]
    },
    "5106": {
      "op": "dupn 5",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ]
    },
    "5108": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "\"loan_record\""
      ]
    },
    "5109": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "5111": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0"
      ]
    },
    "5112": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5114": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5115": {
      "op": "bury 1",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5117": {
      "error": "NO_LOAN_RECORD",
      "op": "assert // NO_LOAN_RECORD",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5118": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "tmp%0#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "{accrueMarket}"
      ]
    },
    "5121": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5122": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "maybe_exists%1#0"
      ]
    },
    "5123": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "rec#0"
      ]
    },
    "5124": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5125": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "maybe_exists%1#0"
      ]
    },
    "5127": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0"
      ]
    },
    "5128": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5129": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)",
        "40"
      ]
    },
    "5131": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0"
      ]
    },
    "5132": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5133": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0"
      ]
    },
    "5135": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5136": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5139": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5140": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5142": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0"
      ]
    },
    "5144": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#1"
      ]
    },
    "5147": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5148": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5149": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5151": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)"
      ]
    },
    "5152": {
      "error": "NO_DEBT",
      "op": "assert // NO_DEBT",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5153": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "debtBase#0",
        "collateralTokenId#0"
      ]
    },
    "5154": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "5156": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "lstAppId#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5158": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralUSD#0"
      ]
    },
    "5161": {
      "op": "dup"
    },
    "5162": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtBase#0"
      ]
    },
    "5164": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "5167": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)"
      ]
    },
    "5168": {
      "error": "BAD_DEBT_USD",
      "op": "assert // BAD_DEBT_USD",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "5169": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0"
      ]
    },
    "5170": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0",
        "10000"
      ]
    },
    "5171": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0"
      ]
    },
    "5172": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hCR#0",
        "lCR#0",
        "debtUSDv#0"
      ]
    },
    "5174": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0"
      ]
    },
    "5175": {
      "op": "dup",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "CR_bps#0"
      ]
    },
    "5176": {
      "op": "intc_0 // 0",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5177": {
      "op": "swap",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0"
      ]
    },
    "5178": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "0"
      ]
    },
    "5179": {
      "op": "bytec 12 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5181": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5182": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "maybe_value%2#0"
      ]
    },
    "5183": {
      "op": ">",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%5#0"
      ]
    },
    "5184": {
      "op": "bz buyoutSplitASA_after_if_else@2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5187": {
      "op": "frame_dig 12",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0"
      ]
    },
    "5189": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "10000"
      ]
    },
    "5190": {
      "op": "mulw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0"
      ]
    },
    "5191": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "0"
      ]
    },
    "5192": {
      "op": "bytec 12 // \"liq_threshold_bps\"",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5194": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5195": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "maybe_value%3#0"
      ]
    },
    "5196": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "ratio_bps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "ratio_bps#0"
      ]
    },
    "5197": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "ratio_bps#0",
        "10000"
      ]
    },
    "5198": {
      "op": "-",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumRateBps#0"
      ]
    },
    "5199": {
      "op": "frame_bury 13",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5201": {
      "block": "buyoutSplitASA_after_if_else@2",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig 11",
      "defined_out": [
        "collateralUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralUSD#0"
      ]
    },
    "5203": {
      "op": "frame_dig 13",
      "defined_out": [
        "collateralUSD#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralUSD#0",
        "premiumRateBps#0"
      ]
    },
    "5205": {
      "op": "mulw",
      "defined_out": [
        "collateralUSD#0",
        "hP#0",
        "lP#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hP#0",
        "lP#0"
      ]
    },
    "5206": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralUSD#0",
        "hP#0",
        "lP#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hP#0",
        "lP#0",
        "10000"
      ]
    },
    "5207": {
      "op": "divw",
      "defined_out": [
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ]
    },
    "5208": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "5209": {
      "op": "bytec 14 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "5211": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralUSD#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "5212": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%4#0"
      ]
    },
    "5213": {
      "op": "btoi",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenId#0"
      ]
    },
    "5214": {
      "op": "frame_bury 1",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ]
    },
    "5216": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "5217": {
      "op": "bytec 14 // \"buyout_token_id\"",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "5219": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5220": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%5#0"
      ]
    },
    "5221": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5224": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5225": {
      "op": "frame_bury 2",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5227": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0"
      ]
    },
    "5228": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0",
        "1000000"
      ]
    },
    "5230": {
      "op": "mulw",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0"
      ]
    },
    "5231": {
      "op": "frame_bury 4",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "hPT#0"
      ]
    },
    "5233": {
      "op": "frame_bury 3",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5235": {
      "op": "bnz buyoutSplitASA_ternary_false@4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5238": {
      "op": "intc_0 // 0",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5239": {
      "op": "frame_bury 5",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5241": {
      "block": "buyoutSplitASA_ternary_merge@5",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "premiumAxferTxn#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5243": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%7#0"
      ]
    },
    "5245": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%7#0",
        "buyer#0 (copy)"
      ]
    },
    "5247": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%8#0"
      ]
    },
    "5248": {
      "op": "bz buyoutSplitASA_bool_false@10",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5251": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5253": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%9#0"
      ]
    },
    "5255": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "5257": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%11#0"
      ]
    },
    "5258": {
      "op": "bz buyoutSplitASA_bool_false@10",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5261": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5263": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%12#0"
      ]
    },
    "5265": {
      "op": "frame_dig 1",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%12#0",
        "buyoutTokenId#0"
      ]
    },
    "5267": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%13#0"
      ]
    },
    "5268": {
      "op": "bz buyoutSplitASA_bool_false@10",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5271": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5273": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%14#0"
      ]
    },
    "5275": {
      "op": "frame_dig 5",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%14#0",
        "premiumTokens#0"
      ]
    },
    "5277": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%15#0"
      ]
    },
    "5278": {
      "op": "bz buyoutSplitASA_bool_false@10",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5281": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ]
    },
    "5282": {
      "block": "buyoutSplitASA_bool_merge@11",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5283": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0"
      ]
    },
    "5284": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "5285": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "5286": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%6#0"
      ]
    },
    "5287": {
      "op": "btoi",
      "defined_out": [
        "baseAssetId#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "baseAssetId#0"
      ]
    },
    "5288": {
      "op": "frame_bury 0",
      "defined_out": [
        "baseAssetId#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5290": {
      "op": "frame_dig -2",
      "defined_out": [
        "baseAssetId#0",
        "repayAxferTxn#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5292": {
      "op": "gtxns Sender",
      "defined_out": [
        "baseAssetId#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%16#0"
      ]
    },
    "5294": {
      "op": "frame_dig -5",
      "defined_out": [
        "baseAssetId#0",
        "buyer#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%16#0",
        "buyer#0 (copy)"
      ]
    },
    "5296": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%17#0"
      ]
    },
    "5297": {
      "op": "bz buyoutSplitASA_bool_false@16",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5300": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5302": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseAssetId#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%18#0"
      ]
    },
    "5304": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseAssetId#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "5306": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%20#0"
      ]
    },
    "5307": {
      "op": "bz buyoutSplitASA_bool_false@16",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5310": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5312": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseAssetId#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%21#0"
      ]
    },
    "5314": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%21#0",
        "baseAssetId#0"
      ]
    },
    "5316": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%22#0"
      ]
    },
    "5317": {
      "op": "bz buyoutSplitASA_bool_false@16",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5320": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5322": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseAssetId#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%23#0"
      ]
    },
    "5324": {
      "op": "frame_dig 10",
      "defined_out": [
        "baseAssetId#0",
        "debtBase#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%23#0",
        "debtBase#0"
      ]
    },
    "5326": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "debtBase#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0"
      ]
    },
    "5327": {
      "op": "bz buyoutSplitASA_bool_false@16",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5330": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "baseAssetId#0",
        "debtBase#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%1#0"
      ]
    },
    "5331": {
      "block": "buyoutSplitASA_bool_merge@17",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5332": {
      "op": "frame_dig 6",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%0#0"
      ]
    },
    "5334": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "{box_del}"
      ]
    },
    "5335": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5336": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0"
      ]
    },
    "5337": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "5339": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "5340": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%7#0"
      ]
    },
    "5341": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%7#0",
        "1"
      ]
    },
    "5342": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%0#0"
      ]
    },
    "5343": {
      "op": "bytec 5 // \"active_loan_records\"",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "5345": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "5346": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5347": {
      "op": "itxn_begin"
    },
    "5348": {
      "op": "frame_dig 7",
      "defined_out": [
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "rec#0"
      ]
    },
    "5350": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "rec#0",
        "32"
      ]
    },
    "5352": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5353": {
      "op": "frame_dig 8",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "5355": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "5356": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5358": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5360": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5362": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "buyer#0 (copy)"
      ]
    },
    "5364": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5366": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "5368": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5370": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "1000"
      ]
    },
    "5371": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5373": {
      "op": "itxn_submit"
    },
    "5374": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "\"accepted_collaterals\""
      ]
    },
    "5376": {
      "op": "frame_dig 9",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5378": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%26#0"
      ]
    },
    "5379": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ]
    },
    "5380": {
      "op": "box_get",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%8#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%26#0",
        "acVal#0",
        "maybe_exists%8#0"
      ]
    },
    "5381": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%26#0",
        "acVal#0"
      ]
    },
    "5382": {
      "op": "dup",
      "defined_out": [
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%26#0",
        "acVal#0",
        "acVal#0 (copy)"
      ]
    },
    "5383": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%26#0",
        "acVal#0",
        "acVal#0 (copy)",
        "24"
      ]
    },
    "5385": {
      "op": "extract_uint64",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%26#0",
        "acVal#0",
        "tmp%28#0"
      ]
    },
    "5386": {
      "op": "uncover 3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "tmp%28#0",
        "collateralAmount#0"
      ]
    },
    "5388": {
      "op": "-",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "updatedTotal#0"
      ]
    },
    "5389": {
      "op": "dig 1",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "updatedTotal#0",
        "acVal#0 (copy)"
      ]
    },
    "5391": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%29#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%29#0"
      ]
    },
    "5394": {
      "op": "dig 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%29#0",
        "acVal#0 (copy)"
      ]
    },
    "5396": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%29#0",
        "tmp%30#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "5399": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "tmp%29#0",
        "tmp%30#0",
        "updatedTotal#0"
      ]
    },
    "5401": {
      "op": "itob",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0"
      ]
    },
    "5402": {
      "op": "dig 3",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0",
        "acVal#0 (copy)"
      ]
    },
    "5404": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0",
        "tmp%31#0"
      ]
    },
    "5407": {
      "op": "uncover 4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0",
        "tmp%31#0",
        "acVal#0"
      ]
    },
    "5409": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "5412": {
      "op": "uncover 4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "tmp%30#0",
        "val_as_bytes%0#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%29#0"
      ]
    },
    "5414": {
      "op": "uncover 4",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "5416": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%4#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "5417": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%32#0",
        "encoded_tuple_buffer%4#0",
        "tmp%31#0"
      ]
    },
    "5419": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%5#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%32#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%32#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "5420": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "tmp%32#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "5422": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%6#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "tmp%32#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "5423": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "encoded_tuple_buffer%6#0",
        "tmp%32#0"
      ]
    },
    "5424": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%7#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "5425": {
      "op": "box_put",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5426": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0"
      ]
    },
    "5427": {
      "op": "bytec_2 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "5428": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "5429": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%9#0"
      ]
    },
    "5430": {
      "op": "frame_dig 10",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "maybe_value%9#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%9#0",
        "debtBase#0"
      ]
    },
    "5432": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%1#0"
      ]
    },
    "5433": {
      "op": "bytec_2 // \"total_borrows\"",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%1#0",
        "\"total_borrows\""
      ]
    },
    "5434": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "\"total_borrows\"",
        "new_state_value%1#0"
      ]
    },
    "5435": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5436": {
      "op": "frame_dig 5",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5438": {
      "op": "frame_dig 1",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0"
      ]
    },
    "5440": {
      "op": "frame_dig -4",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtor#0 (copy)",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "debtor#0 (copy)"
      ]
    },
    "5442": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.splitPremium",
      "op": "callsub splitPremium",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5445": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%2#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%2#0"
      ]
    },
    "5448": {
      "op": "bytec 8 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%2#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "5450": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "5451": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5452": {
      "retsub": true,
      "op": "retsub"
    },
    "5453": {
      "block": "buyoutSplitASA_bool_false@16",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%1#0"
      ]
    },
    "5454": {
      "op": "b buyoutSplitASA_bool_merge@17"
    },
    "5457": {
      "block": "buyoutSplitASA_bool_false@10",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ]
    },
    "5458": {
      "op": "b buyoutSplitASA_bool_merge@11"
    },
    "5461": {
      "block": "buyoutSplitASA_ternary_false@4",
      "stack_in": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "hPT#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0"
      ]
    },
    "5463": {
      "op": "frame_dig 4",
      "defined_out": [
        "hPT#0",
        "lPT#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0",
        "lPT#0"
      ]
    },
    "5465": {
      "op": "frame_dig 2",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0",
        "lPT#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5467": {
      "op": "divw",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5468": {
      "op": "frame_bury 5",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5470": {
      "op": "b buyoutSplitASA_ternary_merge@5"
    },
    "5473": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutSplitAlgo",
      "params": {
        "buyer#0": "bytes",
        "debtor#0": "bytes",
        "premiumAxferTxn#0": "uint64",
        "repayPayTxn#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "buyoutSplitAlgo",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "5476": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "buyoutTokenId#0"
      ]
    },
    "5478": {
      "op": "dupn 4",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ]
    },
    "5480": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "\"loan_record\""
      ]
    },
    "5481": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "5483": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0"
      ]
    },
    "5484": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5486": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5487": {
      "op": "bury 1",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5489": {
      "error": "NO_LOAN_RECORD",
      "op": "assert // NO_LOAN_RECORD",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5490": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "tmp%0#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "{accrueMarket}"
      ]
    },
    "5493": {
      "op": "pop",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5494": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "maybe_exists%1#0"
      ]
    },
    "5495": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "rec#0"
      ]
    },
    "5496": {
      "op": "dup",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5497": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "maybe_exists%1#0"
      ]
    },
    "5499": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0"
      ]
    },
    "5500": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5501": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)",
        "40"
      ]
    },
    "5503": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0"
      ]
    },
    "5504": {
      "op": "dup",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5505": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0"
      ]
    },
    "5507": {
      "op": "dup",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5508": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5511": {
      "op": "dup",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5512": {
      "op": "cover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5514": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0"
      ]
    },
    "5516": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#1"
      ]
    },
    "5519": {
      "op": "pop",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5520": {
      "op": "dup",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5521": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5523": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)"
      ]
    },
    "5524": {
      "error": "NO_DEBT",
      "op": "assert // NO_DEBT",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5525": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "debtBase#0",
        "collateralTokenId#0"
      ]
    },
    "5526": {
      "op": "uncover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "5528": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "lstAppId#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5530": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralUSD#0"
      ]
    },
    "5533": {
      "op": "dup"
    },
    "5534": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtBase#0"
      ]
    },
    "5536": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "5539": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)"
      ]
    },
    "5540": {
      "error": "BAD_DEBT_USD",
      "op": "assert // BAD_DEBT_USD",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "5541": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0"
      ]
    },
    "5542": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0",
        "10000"
      ]
    },
    "5543": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0"
      ]
    },
    "5544": {
      "op": "uncover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hCR#0",
        "lCR#0",
        "debtUSDv#0"
      ]
    },
    "5546": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0"
      ]
    },
    "5547": {
      "op": "dup",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "CR_bps#0"
      ]
    },
    "5548": {
      "op": "intc_0 // 0",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5549": {
      "op": "swap",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0"
      ]
    },
    "5550": {
      "op": "intc_0 // 0",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "0"
      ]
    },
    "5551": {
      "op": "bytec 12 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5553": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5554": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "maybe_value%2#0"
      ]
    },
    "5555": {
      "op": ">",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%5#0"
      ]
    },
    "5556": {
      "op": "bz buyoutSplitAlgo_after_if_else@2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5559": {
      "op": "frame_dig 11",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0"
      ]
    },
    "5561": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "10000"
      ]
    },
    "5562": {
      "op": "mulw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0"
      ]
    },
    "5563": {
      "op": "intc_0 // 0",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "0"
      ]
    },
    "5564": {
      "op": "bytec 12 // \"liq_threshold_bps\"",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5566": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5567": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "maybe_value%3#0"
      ]
    },
    "5568": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "ratio_bps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "ratio_bps#0"
      ]
    },
    "5569": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "ratio_bps#0",
        "10000"
      ]
    },
    "5570": {
      "op": "-",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumRateBps#0"
      ]
    },
    "5571": {
      "op": "frame_bury 12",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5573": {
      "block": "buyoutSplitAlgo_after_if_else@2",
      "stack_in": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "collateralUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralUSD#0"
      ]
    },
    "5575": {
      "op": "frame_dig 12",
      "defined_out": [
        "collateralUSD#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralUSD#0",
        "premiumRateBps#0"
      ]
    },
    "5577": {
      "op": "mulw",
      "defined_out": [
        "collateralUSD#0",
        "hP#0",
        "lP#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hP#0",
        "lP#0"
      ]
    },
    "5578": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralUSD#0",
        "hP#0",
        "lP#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hP#0",
        "lP#0",
        "10000"
      ]
    },
    "5579": {
      "op": "divw",
      "defined_out": [
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ]
    },
    "5580": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "5581": {
      "op": "bytec 14 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "5583": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralUSD#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "5584": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%4#0"
      ]
    },
    "5585": {
      "op": "btoi",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenId#0"
      ]
    },
    "5586": {
      "op": "frame_bury 0",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ]
    },
    "5588": {
      "op": "intc_0 // 0",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "5589": {
      "op": "bytec 14 // \"buyout_token_id\"",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "5591": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5592": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%5#0"
      ]
    },
    "5593": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5596": {
      "op": "dup",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5597": {
      "op": "frame_bury 1",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5599": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0"
      ]
    },
    "5600": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0",
        "1000000"
      ]
    },
    "5602": {
      "op": "mulw",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0"
      ]
    },
    "5603": {
      "op": "frame_bury 3",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "hPT#0"
      ]
    },
    "5605": {
      "op": "frame_bury 2",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5607": {
      "op": "bnz buyoutSplitAlgo_ternary_false@4",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5610": {
      "op": "intc_0 // 0",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5611": {
      "op": "frame_bury 4",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5613": {
      "block": "buyoutSplitAlgo_ternary_merge@5",
      "stack_in": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "premiumAxferTxn#0 (copy)"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5615": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%7#0"
      ]
    },
    "5617": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%7#0",
        "buyer#0 (copy)"
      ]
    },
    "5619": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%8#0"
      ]
    },
    "5620": {
      "op": "bz buyoutSplitAlgo_bool_false@10",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5623": {
      "op": "frame_dig -3",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5625": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%9#0"
      ]
    },
    "5627": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "5629": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%11#0"
      ]
    },
    "5630": {
      "op": "bz buyoutSplitAlgo_bool_false@10",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5633": {
      "op": "frame_dig -3",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5635": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%12#0"
      ]
    },
    "5637": {
      "op": "frame_dig 0",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%12#0",
        "buyoutTokenId#0"
      ]
    },
    "5639": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%13#0"
      ]
    },
    "5640": {
      "op": "bz buyoutSplitAlgo_bool_false@10",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5643": {
      "op": "frame_dig -3",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5645": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%14#0"
      ]
    },
    "5647": {
      "op": "frame_dig 4",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%14#0",
        "premiumTokens#0"
      ]
    },
    "5649": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%15#0"
      ]
    },
    "5650": {
      "op": "bz buyoutSplitAlgo_bool_false@10",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5653": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ]
    },
    "5654": {
      "block": "buyoutSplitAlgo_bool_merge@11",
      "stack_in": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5655": {
      "op": "frame_dig -2",
      "defined_out": [
        "repayPayTxn#0 (copy)"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayPayTxn#0 (copy)"
      ]
    },
    "5657": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%16#0"
      ]
    },
    "5659": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%16#0",
        "buyer#0 (copy)"
      ]
    },
    "5661": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%17#0"
      ]
    },
    "5662": {
      "op": "bz buyoutSplitAlgo_bool_false@15",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5665": {
      "op": "frame_dig -2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayPayTxn#0 (copy)"
      ]
    },
    "5667": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%18#0"
      ]
    },
    "5669": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "5671": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%20#0"
      ]
    },
    "5672": {
      "op": "bz buyoutSplitAlgo_bool_false@15",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5675": {
      "op": "frame_dig -2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayPayTxn#0 (copy)"
      ]
    },
    "5677": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%21#0"
      ]
    },
    "5679": {
      "op": "frame_dig 9",
      "defined_out": [
        "debtBase#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%21#0",
        "debtBase#0"
      ]
    },
    "5681": {
      "op": "==",
      "defined_out": [
        "debtBase#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%22#0"
      ]
    },
    "5682": {
      "op": "bz buyoutSplitAlgo_bool_false@15",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5685": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "debtBase#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%1#0"
      ]
    },
    "5686": {
      "block": "buyoutSplitAlgo_bool_merge@16",
      "stack_in": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5687": {
      "op": "frame_dig 5",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%0#0"
      ]
    },
    "5689": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "{box_del}"
      ]
    },
    "5690": {
      "op": "pop",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5691": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0"
      ]
    },
    "5692": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "5694": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "5695": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%6#0"
      ]
    },
    "5696": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%6#0",
        "1"
      ]
    },
    "5697": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%0#0"
      ]
    },
    "5698": {
      "op": "bytec 5 // \"active_loan_records\"",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "5700": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "5701": {
      "op": "app_global_put",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5702": {
      "op": "itxn_begin"
    },
    "5703": {
      "op": "frame_dig 6",
      "defined_out": [
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "rec#0"
      ]
    },
    "5705": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "rec#0",
        "32"
      ]
    },
    "5707": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5708": {
      "op": "frame_dig 7",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "5710": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "5711": {
      "op": "cover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5713": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5715": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5717": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "buyer#0 (copy)"
      ]
    },
    "5719": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5721": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "5723": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5725": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "1000"
      ]
    },
    "5726": {
      "op": "itxn_field Fee",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5728": {
      "op": "itxn_submit"
    },
    "5729": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "\"accepted_collaterals\""
      ]
    },
    "5731": {
      "op": "frame_dig 8",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5733": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%24#0"
      ]
    },
    "5734": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ]
    },
    "5735": {
      "op": "box_get",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%7#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%24#0",
        "acVal#0",
        "maybe_exists%7#0"
      ]
    },
    "5736": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%24#0",
        "acVal#0"
      ]
    },
    "5737": {
      "op": "dup",
      "defined_out": [
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%24#0",
        "acVal#0",
        "acVal#0 (copy)"
      ]
    },
    "5738": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%24#0",
        "acVal#0",
        "acVal#0 (copy)",
        "24"
      ]
    },
    "5740": {
      "op": "extract_uint64",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%24#0",
        "acVal#0",
        "tmp%26#0"
      ]
    },
    "5741": {
      "op": "uncover 3",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "acVal#0",
        "tmp%26#0",
        "collateralAmount#0"
      ]
    },
    "5743": {
      "op": "-",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "acVal#0",
        "updatedTotal#0"
      ]
    },
    "5744": {
      "op": "dig 1",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "acVal#0",
        "updatedTotal#0",
        "acVal#0 (copy)"
      ]
    },
    "5746": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0",
        "tmp%27#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%27#0"
      ]
    },
    "5749": {
      "op": "dig 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%27#0",
        "acVal#0 (copy)"
      ]
    },
    "5751": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0",
        "tmp%27#0",
        "tmp%28#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "5754": {
      "op": "uncover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "acVal#0",
        "tmp%27#0",
        "tmp%28#0",
        "updatedTotal#0"
      ]
    },
    "5756": {
      "op": "itob",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0",
        "tmp%27#0",
        "tmp%28#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "acVal#0",
        "tmp%27#0",
        "tmp%28#0",
        "val_as_bytes%0#0"
      ]
    },
    "5757": {
      "op": "dig 3",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "acVal#0",
        "tmp%27#0",
        "tmp%28#0",
        "val_as_bytes%0#0",
        "acVal#0 (copy)"
      ]
    },
    "5759": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "acVal#0",
        "tmp%27#0",
        "tmp%28#0",
        "val_as_bytes%0#0",
        "tmp%29#0"
      ]
    },
    "5762": {
      "op": "uncover 4",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "tmp%27#0",
        "tmp%28#0",
        "val_as_bytes%0#0",
        "tmp%29#0",
        "acVal#0"
      ]
    },
    "5764": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "tmp%27#0",
        "tmp%28#0",
        "val_as_bytes%0#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "5767": {
      "op": "uncover 4",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "tmp%28#0",
        "val_as_bytes%0#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%27#0"
      ]
    },
    "5769": {
      "op": "uncover 4",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "val_as_bytes%0#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "5771": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%4#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "val_as_bytes%0#0",
        "tmp%29#0",
        "tmp%30#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "5772": {
      "op": "uncover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "val_as_bytes%0#0",
        "tmp%30#0",
        "encoded_tuple_buffer%4#0",
        "tmp%29#0"
      ]
    },
    "5774": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%5#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0",
        "tmp%30#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "val_as_bytes%0#0",
        "tmp%30#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "5775": {
      "op": "uncover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "tmp%30#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "5777": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%6#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "tmp%30#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "5778": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "encoded_tuple_buffer%6#0",
        "tmp%30#0"
      ]
    },
    "5779": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%7#0",
        "rec#0",
        "tmp%0#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "5780": {
      "op": "box_put",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5781": {
      "op": "intc_0 // 0",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0"
      ]
    },
    "5782": {
      "op": "bytec_2 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "5783": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "5784": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%8#0"
      ]
    },
    "5785": {
      "op": "frame_dig 9",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "maybe_value%8#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%8#0",
        "debtBase#0"
      ]
    },
    "5787": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%1#0"
      ]
    },
    "5788": {
      "op": "bytec_2 // \"total_borrows\"",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%1#0",
        "\"total_borrows\""
      ]
    },
    "5789": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "\"total_borrows\"",
        "new_state_value%1#0"
      ]
    },
    "5790": {
      "op": "app_global_put",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5791": {
      "op": "frame_dig 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5793": {
      "op": "frame_dig 0",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0"
      ]
    },
    "5795": {
      "op": "frame_dig -4",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtor#0 (copy)",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "debtor#0 (copy)"
      ]
    },
    "5797": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.splitPremium",
      "op": "callsub splitPremium",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5800": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%2#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%2#0"
      ]
    },
    "5803": {
      "op": "bytec 8 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%2#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "5805": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "5806": {
      "op": "app_global_put",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5807": {
      "retsub": true,
      "op": "retsub"
    },
    "5808": {
      "block": "buyoutSplitAlgo_bool_false@15",
      "stack_in": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%1#0"
      ]
    },
    "5809": {
      "op": "b buyoutSplitAlgo_bool_merge@16"
    },
    "5812": {
      "block": "buyoutSplitAlgo_bool_false@10",
      "stack_in": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ]
    },
    "5813": {
      "op": "b buyoutSplitAlgo_bool_merge@11"
    },
    "5816": {
      "block": "buyoutSplitAlgo_ternary_false@4",
      "stack_in": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "hPT#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0"
      ]
    },
    "5818": {
      "op": "frame_dig 3",
      "defined_out": [
        "hPT#0",
        "lPT#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0",
        "lPT#0"
      ]
    },
    "5820": {
      "op": "frame_dig 1",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0",
        "lPT#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5822": {
      "op": "divw",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5823": {
      "op": "frame_bury 4",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5825": {
      "op": "b buyoutSplitAlgo_ternary_merge@5"
    },
    "5828": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.splitPremium",
      "params": {
        "premiumTokens#0": "uint64",
        "buyoutTokenId#0": "uint64",
        "debtor#0": "bytes"
      },
      "block": "splitPremium",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "5831": {
      "op": "frame_dig -3",
      "defined_out": [
        "premiumTokens#0 (copy)"
      ],
      "stack_out": [
        "premiumTokens#0 (copy)"
      ]
    },
    "5833": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "premiumTokens#0 (copy)"
      ],
      "stack_out": [
        "premiumTokens#0 (copy)",
        "2"
      ]
    },
    "5835": {
      "op": "/",
      "defined_out": [
        "halfPremium#0"
      ],
      "stack_out": [
        "halfPremium#0"
      ]
    },
    "5836": {
      "op": "itxn_begin"
    },
    "5837": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "halfPremium#0"
      ],
      "stack_out": [
        "halfPremium#0",
        "0"
      ]
    },
    "5838": {
      "op": "bytec 6 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "halfPremium#0"
      ],
      "stack_out": [
        "halfPremium#0",
        "0",
        "\"admin_account\""
      ]
    },
    "5840": {
      "op": "app_global_get_ex",
      "defined_out": [
        "halfPremium#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "halfPremium#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5841": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "halfPremium#0",
        "maybe_value%0#0"
      ]
    },
    "5842": {
      "op": "dig 1",
      "defined_out": [
        "halfPremium#0",
        "halfPremium#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "halfPremium#0",
        "maybe_value%0#0",
        "halfPremium#0 (copy)"
      ]
    },
    "5844": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "halfPremium#0",
        "maybe_value%0#0"
      ]
    },
    "5846": {
      "op": "frame_dig -2",
      "defined_out": [
        "buyoutTokenId#0 (copy)",
        "halfPremium#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "halfPremium#0",
        "maybe_value%0#0",
        "buyoutTokenId#0 (copy)"
      ]
    },
    "5848": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "halfPremium#0",
        "maybe_value%0#0"
      ]
    },
    "5850": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "halfPremium#0"
      ]
    },
    "5852": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "halfPremium#0"
      ],
      "stack_out": [
        "halfPremium#0",
        "4"
      ]
    },
    "5854": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "halfPremium#0"
      ]
    },
    "5856": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "halfPremium#0"
      ],
      "stack_out": [
        "halfPremium#0",
        "1000"
      ]
    },
    "5857": {
      "op": "itxn_field Fee",
      "stack_out": [
        "halfPremium#0"
      ]
    },
    "5859": {
      "op": "itxn_submit"
    },
    "5860": {
      "op": "itxn_begin"
    },
    "5861": {
      "op": "frame_dig -3",
      "stack_out": [
        "halfPremium#0",
        "premiumTokens#0 (copy)"
      ]
    },
    "5863": {
      "op": "swap",
      "stack_out": [
        "premiumTokens#0 (copy)",
        "halfPremium#0"
      ]
    },
    "5864": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%1%%param_AssetAmount_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetAmount_idx_0#0"
      ]
    },
    "5865": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "5867": {
      "op": "frame_dig -2",
      "stack_out": [
        "buyoutTokenId#0 (copy)"
      ]
    },
    "5869": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "5871": {
      "op": "frame_dig -1",
      "defined_out": [
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "debtor#0 (copy)"
      ]
    },
    "5873": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "5875": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "4"
      ]
    },
    "5877": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5879": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "5880": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5882": {
      "op": "itxn_submit"
    },
    "5883": {
      "retsub": true,
      "op": "retsub"
    },
    "5884": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "params": {
        "debtBaseUnits#0": "uint64"
      },
      "block": "debtUSD",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "5887": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5888": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "5889": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5890": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "5891": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenPrice#0"
      ],
      "stack_out": [
        "baseTokenPrice#0"
      ]
    },
    "5894": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenPrice#0",
        "debtBaseUnits#0 (copy)"
      ],
      "stack_out": [
        "baseTokenPrice#0",
        "debtBaseUnits#0 (copy)"
      ]
    },
    "5896": {
      "op": "mulw",
      "defined_out": [
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "h#0",
        "l#0"
      ]
    },
    "5897": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "h#0",
        "l#0",
        "1000000"
      ]
    },
    "5899": {
      "op": "divw",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5900": {
      "retsub": true,
      "op": "retsub"
    },
    "5901": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLST",
      "params": {
        "lstAppId#0": "uint64"
      },
      "block": "maxWithdrawableCollateralLST",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "5904": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0"
      ]
    },
    "5905": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ]
    },
    "5907": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5908": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\""
      ]
    },
    "5909": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\"",
        "tmp%0#0"
      ]
    },
    "5911": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%1#0"
      ]
    },
    "5912": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5913": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_exists%0#0"
      ]
    },
    "5915": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5916": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "{accrueMarket}"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "{accrueMarket}"
      ]
    },
    "5919": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5920": {
      "op": "bytec_3 // \"loan_record\"",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\""
      ]
    },
    "5921": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\"",
        "tmp%2#0"
      ]
    },
    "5923": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%3#0"
      ]
    },
    "5924": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "maybe_exists%1#0"
      ]
    },
    "5925": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0"
      ]
    },
    "5926": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5927": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5930": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "5932": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5933": {
      "op": "concat",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%0#1"
      ]
    },
    "5934": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "collateralTokenId#0",
        "maybe_exists%0#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "5935": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0"
      ]
    },
    "5936": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateral#0",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0",
        "32"
      ]
    },
    "5938": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%6#0"
      ]
    },
    "5939": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#0",
        "lstAppId#0 (copy)",
        "rec#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%6#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5941": {
      "op": "==",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%7#0"
      ]
    },
    "5942": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0"
      ]
    },
    "5943": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5946": {
      "op": "swap",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5947": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5948": {
      "op": "cover 2",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5950": {
      "op": "bnz maxWithdrawableCollateralLST_after_if_else@2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5953": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "40"
      ]
    },
    "5955": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "tmp%10#0"
      ]
    },
    "5956": {
      "op": "frame_bury 0"
    },
    "5958": {
      "retsub": true,
      "op": "retsub"
    },
    "5959": {
      "block": "maxWithdrawableCollateralLST_after_if_else@2",
      "stack_in": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ],
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5960": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5963": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5964": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5966": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0"
      ]
    },
    "5968": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0",
        "40"
      ]
    },
    "5970": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "tmp%13#0"
      ]
    },
    "5971": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#0",
        "lstAppId#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "tmp%13#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5973": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5976": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "currCollatUSD#0"
      ]
    },
    "5977": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5979": {
      "op": "frame_dig 3",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtBase#0"
      ]
    },
    "5981": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0"
      ]
    },
    "5984": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0",
        "10000"
      ]
    },
    "5985": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0"
      ]
    },
    "5986": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0"
      ]
    },
    "5987": {
      "op": "bytec 21 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "5989": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5990": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%2#0"
      ]
    },
    "5991": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5992": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5993": {
      "op": "frame_bury 2",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5995": {
      "op": "<=",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "tmp%14#0"
      ]
    },
    "5996": {
      "op": "bz maxWithdrawableCollateralLST_after_if_else@4",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0"
      ]
    },
    "5999": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "0"
      ]
    },
    "6000": {
      "op": "frame_bury 0"
    },
    "6002": {
      "retsub": true,
      "op": "retsub"
    },
    "6003": {
      "block": "maxWithdrawableCollateralLST_after_if_else@4",
      "stack_in": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "6005": {
      "op": "frame_dig 2",
      "defined_out": [
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6007": {
      "op": "-",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6008": {
      "op": "itxn_begin"
    },
    "6009": {
      "op": "bytec 15 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "6011": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6013": {
      "op": "frame_dig -1",
      "defined_out": [
        "currCollatUSD#0",
        "lstAppId#0 (copy)",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6015": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6017": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "appl"
      ]
    },
    "6019": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6021": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "1000"
      ]
    },
    "6022": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6024": {
      "op": "itxn_submit"
    },
    "6025": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0"
      ]
    },
    "6027": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6028": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "tmp%15#0"
      ]
    },
    "6031": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#0",
        "awst_tmp%0#0"
      ]
    },
    "6032": {
      "op": "extract 0 4",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "6035": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#0",
        "tmp%16#0",
        "0x151f7c75"
      ]
    },
    "6036": {
      "op": "==",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "6037": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#0"
      ]
    },
    "6038": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6039": {
      "op": "itxn_begin"
    },
    "6040": {
      "op": "bytec 16 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "6042": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6044": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6046": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6048": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "appl"
      ]
    },
    "6050": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6052": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "1000"
      ]
    },
    "6053": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6055": {
      "op": "itxn_submit"
    },
    "6056": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0"
      ]
    },
    "6058": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6059": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ]
    },
    "6062": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "awst_tmp%1#0"
      ]
    },
    "6063": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "6066": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "6067": {
      "op": "==",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "6068": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0"
      ]
    },
    "6069": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0"
      ]
    },
    "6070": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\""
      ]
    },
    "6072": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "6074": {
      "op": "concat",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%0#1",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%0#1"
      ]
    },
    "6075": {
      "op": "box_get",
      "defined_out": [
        "ac#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "maybe_exists%0#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0",
        "maybe_exists%0#0"
      ]
    },
    "6076": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0"
      ]
    },
    "6077": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%24#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%24#0"
      ]
    },
    "6080": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0"
      ]
    },
    "6083": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0"
      ]
    },
    "6085": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0",
        "1000000"
      ]
    },
    "6087": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "hU#0",
        "lU#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "hU#0",
        "lU#0"
      ]
    },
    "6088": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "hU#0",
        "lU#0",
        "basePrice#0"
      ]
    },
    "6090": {
      "op": "divw",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUnderlying#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "removableUnderlying#0"
      ]
    },
    "6091": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "totalDeposits#0",
        "removableUnderlying#0",
        "circulatingLST#0"
      ]
    },
    "6093": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "hL#0",
        "lL#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "totalDeposits#0",
        "hL#0",
        "lL#0"
      ]
    },
    "6094": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "hL#0",
        "lL#0",
        "totalDeposits#0"
      ]
    },
    "6096": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableLST#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableLST#0"
      ]
    },
    "6097": {
      "op": "frame_bury 0"
    },
    "6099": {
      "retsub": true,
      "op": "retsub"
    },
    "6100": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawCollateral",
      "params": {
        "amountLST#0": "uint64",
        "collateralTokenId#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "withdrawCollateral",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "6103": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1"
      ]
    },
    "6104": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ]
    },
    "6106": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6107": {
      "op": "frame_dig -3",
      "defined_out": [
        "amountLST#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "amountLST#0 (copy)"
      ]
    },
    "6109": {
      "error": "ZERO_AMOUNT",
      "op": "assert // ZERO_AMOUNT",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6110": {
      "op": "txn Sender"
    },
    "6112": {
      "op": "bytec_3 // \"loan_record\""
    },
    "6113": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "\"loan_record\"",
        "borrower#0"
      ]
    },
    "6115": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0"
      ]
    },
    "6116": {
      "op": "dupn 2",
      "defined_out": [
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "6118": {
      "op": "box_len",
      "defined_out": [
        "borrower#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6119": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "6121": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "6122": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "borrower#0",
        "tmp%1#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "{accrueMarket}"
      ]
    },
    "6125": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "6126": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "6127": {
      "op": "box_get",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "loan#0",
        "maybe_exists%1#0"
      ]
    },
    "6128": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_exists%1#0",
        "loan#0"
      ]
    },
    "6129": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_exists%1#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "6130": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "loan#0",
        "maybe_exists%1#0",
        "loan#0"
      ]
    },
    "6132": {
      "op": "cover 3",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%1#0",
        "loan#0",
        "maybe_exists%1#0"
      ]
    },
    "6134": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%1#0",
        "loan#0"
      ]
    },
    "6135": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "loan#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%1#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "6136": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0"
      ]
    },
    "6139": {
      "op": "cover 2",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "tmp%1#0",
        "loan#0"
      ]
    },
    "6141": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "borrower#0",
        "loan#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "tmp%1#0",
        "loan#0",
        "32"
      ]
    },
    "6143": {
      "op": "extract_uint64",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6144": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrower#0",
        "collateralTokenId#0 (copy)",
        "loan#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "tmp%1#0",
        "tmp%4#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "6146": {
      "op": "==",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "6147": {
      "error": "WRONG_COLLATERAL",
      "op": "assert // WRONG_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "tmp%1#0"
      ]
    },
    "6148": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "tmp%1#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "6150": {
      "op": "itob",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "tmp%1#0",
        "acKey#0"
      ]
    },
    "6151": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "tmp%1#0",
        "acKey#0",
        "acKey#0"
      ]
    },
    "6152": {
      "op": "cover 2",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "acKey#0"
      ]
    },
    "6154": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "acKey#0",
        "\"accepted_collaterals\""
      ]
    },
    "6156": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "\"accepted_collaterals\"",
        "acKey#0"
      ]
    },
    "6157": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "6158": {
      "op": "dup",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "6159": {
      "op": "box_len",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6160": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "tmp%6#0",
        "maybe_exists%2#0"
      ]
    },
    "6162": {
      "error": "BAD_COLLATERAL",
      "op": "assert // BAD_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "6163": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "acVal#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%3#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "acVal#0",
        "maybe_exists%3#0"
      ]
    },
    "6164": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "acVal#0"
      ]
    },
    "6165": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "acVal#0",
        "32"
      ]
    },
    "6167": {
      "op": "extract_uint64",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "6168": {
      "op": "frame_dig -1",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "lstAppId#0 (copy)",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "tmp%9#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6170": {
      "op": "==",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "tmp%10#0"
      ]
    },
    "6171": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0"
      ]
    },
    "6172": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "6173": {
      "op": "box_len",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6174": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "6176": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0"
      ]
    },
    "6177": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0",
        "{accrueMarket}"
      ]
    },
    "6180": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "tmp%1#0"
      ]
    },
    "6181": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%1#0",
        "rec#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0",
        "maybe_exists%1#0"
      ]
    },
    "6182": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0"
      ]
    },
    "6183": {
      "op": "dup",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6184": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "loan#0",
        "rec#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "6187": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0",
        "collateralTokenId#1",
        "\"accepted_collaterals\""
      ]
    },
    "6189": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#1"
      ]
    },
    "6190": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "loan#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0",
        "tmp%0#0"
      ]
    },
    "6191": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateral#0",
        "collateralTokenId#1",
        "loan#0",
        "maybe_exists%0#0",
        "rec#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "6192": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0",
        "collateral#0"
      ]
    },
    "6193": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0",
        "collateral#0",
        "32"
      ]
    },
    "6195": {
      "op": "extract_uint64",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0",
        "tmp%4#0"
      ]
    },
    "6196": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0",
        "tmp%4#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6198": {
      "op": "==",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0",
        "tmp%5#0"
      ]
    },
    "6199": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0"
      ]
    },
    "6200": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "6203": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "6204": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "rec#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "6205": {
      "op": "cover 2",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "6207": {
      "op": "bnz withdrawCollateral_after_if_else@4",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "6210": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "40"
      ]
    },
    "6212": {
      "op": "extract_uint64",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "maxSafe#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "6213": {
      "block": "withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "amountLST#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0",
        "amountLST#0 (copy)"
      ]
    },
    "6215": {
      "op": ">=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "tmp%11#0"
      ]
    },
    "6216": {
      "error": "EXCEEDS_LIMITS",
      "op": "assert // EXCEEDS_LIMITS",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "6217": {
      "op": "frame_dig 5",
      "defined_out": [
        "loan#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0"
      ]
    },
    "6219": {
      "op": "dup",
      "defined_out": [
        "loan#0",
        "loan#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "6220": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "loan#0",
        "loan#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "loan#0 (copy)",
        "40"
      ]
    },
    "6222": {
      "op": "extract_uint64",
      "defined_out": [
        "loan#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%13#0"
      ]
    },
    "6223": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%13#0",
        "amountLST#0 (copy)"
      ]
    },
    "6225": {
      "op": "dig 1",
      "defined_out": [
        "amountLST#0 (copy)",
        "loan#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%13#0",
        "amountLST#0 (copy)",
        "tmp%13#0 (copy)"
      ]
    },
    "6227": {
      "op": "<",
      "defined_out": [
        "loan#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "6228": {
      "error": "INSUFFICIENT_COLLATERAL",
      "op": "assert // INSUFFICIENT_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%13#0"
      ]
    },
    "6229": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%13#0",
        "amountLST#0 (copy)"
      ]
    },
    "6231": {
      "op": "-",
      "defined_out": [
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "6232": {
      "op": "itxn_begin"
    },
    "6233": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "amountLST#0 (copy)"
      ]
    },
    "6235": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "6237": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "6239": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "6241": {
      "op": "frame_dig 3",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "borrower#0"
      ]
    },
    "6243": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "borrower#0 (copy)",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "borrower#0 (copy)",
        "borrower#0 (copy)"
      ]
    },
    "6244": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "borrower#0 (copy)"
      ]
    },
    "6246": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "6248": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "4"
      ]
    },
    "6250": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "6252": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "1000"
      ]
    },
    "6253": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "6255": {
      "op": "itxn_submit"
    },
    "6256": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0"
      ]
    },
    "6257": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "6258": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6259": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "6260": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0"
      ]
    },
    "6261": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "amountLST#0 (copy)"
      ]
    },
    "6263": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "6264": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%4#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "val_as_bytes%3#0",
        "to_encode%0#0"
      ]
    },
    "6266": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "6267": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "6268": {
      "op": "pushbytes 0x03",
      "defined_out": [
        "0x03",
        "borrower#0",
        "loan#0",
        "maybe_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0",
        "0x03"
      ]
    },
    "6271": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%4#0",
        "loan#0",
        "maybe_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "6272": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%4#0"
      ]
    },
    "6273": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "6274": {
      "op": "dig 4",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%5#0",
        "loan#0 (copy)"
      ]
    },
    "6276": {
      "error": "Index access is out of bounds",
      "op": "extract 73 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%4#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%5#0",
        "tmp%17#0"
      ]
    },
    "6279": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%5#0",
        "tmp%17#0",
        "loan#0"
      ]
    },
    "6281": {
      "error": "Index access is out of bounds",
      "op": "extract 81 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%5#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "6284": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%5#0",
        "tmp%17#0",
        "tmp%18#0",
        "borrower#0"
      ]
    },
    "6286": {
      "op": "frame_dig 7",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%5#0",
        "tmp%17#0",
        "tmp%18#0",
        "borrower#0",
        "acKey#0"
      ]
    },
    "6288": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "loan#0",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%5#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "6289": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%5#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%2#0"
      ]
    },
    "6291": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0",
        "loan#0",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%5#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "6292": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "6294": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%10#0",
        "loan#0",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%4#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "6295": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%10#0",
        "maybe_value%4#0"
      ]
    },
    "6297": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0",
        "loan#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "6298": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "tmp%18#0",
        "encoded_tuple_buffer%11#0",
        "tmp%17#0"
      ]
    },
    "6300": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%12#0",
        "loan#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "tmp%18#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "6301": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "encoded_tuple_buffer%12#0",
        "tmp%18#0"
      ]
    },
    "6302": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "newRec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "newRec#0"
      ]
    },
    "6303": {
      "op": "frame_dig 4",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "newRec#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "newRec#0",
        "tmp%1#0"
      ]
    },
    "6305": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "tmp%1#0",
        "newRec#0"
      ]
    },
    "6306": {
      "op": "box_put",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "6307": {
      "op": "frame_dig 6",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "tmp%3#0"
      ]
    },
    "6309": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "tmp%3#0",
        "amountLST#0 (copy)"
      ]
    },
    "6311": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "6314": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "new_state_value%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "new_state_value%0#0"
      ]
    },
    "6317": {
      "op": "bytec 8 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "acKey#0",
        "borrower#0",
        "loan#0",
        "new_state_value%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "new_state_value%0#0",
        "\"last_apr_bps\""
      ]
    },
    "6319": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ]
    },
    "6320": {
      "op": "app_global_put",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "6321": {
      "retsub": true,
      "op": "retsub"
    },
    "6322": {
      "block": "withdrawCollateral_after_if_else@4",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ],
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6323": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "6326": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#1",
        "collateralTokenId#1 (copy)"
      ]
    },
    "6327": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "6329": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0"
      ]
    },
    "6331": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0",
        "40"
      ]
    },
    "6333": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#1",
        "tmp%11#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "tmp%11#1"
      ]
    },
    "6334": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#1",
        "lstAppId#0 (copy)",
        "tmp%11#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "tmp%11#1",
        "lstAppId#0 (copy)"
      ]
    },
    "6336": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "6339": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "currCollatUSD#0"
      ]
    },
    "6340": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "6342": {
      "op": "frame_dig 8",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtBase#0"
      ]
    },
    "6344": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0"
      ]
    },
    "6347": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0",
        "10000"
      ]
    },
    "6348": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0"
      ]
    },
    "6349": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0"
      ]
    },
    "6350": {
      "op": "bytec 21 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "6352": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6353": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%2#0"
      ]
    },
    "6354": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6355": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6356": {
      "op": "frame_bury 2",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6358": {
      "op": "<=",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0",
        "tmp%12#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "tmp%12#1"
      ]
    },
    "6359": {
      "op": "bz withdrawCollateral_after_if_else@6",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "6362": {
      "op": "intc_0 // 0",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "maxSafe#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "6363": {
      "op": "b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7"
    },
    "6366": {
      "block": "withdrawCollateral_after_if_else@6",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "6368": {
      "op": "frame_dig 2",
      "defined_out": [
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "6370": {
      "op": "-",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6371": {
      "op": "itxn_begin"
    },
    "6372": {
      "op": "bytec 15 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "6374": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6376": {
      "op": "frame_dig -1",
      "defined_out": [
        "currCollatUSD#0",
        "lstAppId#0 (copy)",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6378": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6380": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "appl"
      ]
    },
    "6382": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6384": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "1000"
      ]
    },
    "6385": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "6387": {
      "op": "itxn_submit"
    },
    "6388": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0"
      ]
    },
    "6390": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6391": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%13#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "tmp%13#1"
      ]
    },
    "6394": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%13#1",
        "awst_tmp%0#0"
      ]
    },
    "6395": {
      "op": "extract 0 4",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%13#1",
        "tmp%14#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%13#1",
        "tmp%14#1"
      ]
    },
    "6398": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%13#1",
        "tmp%14#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%13#1",
        "tmp%14#1",
        "0x151f7c75"
      ]
    },
    "6399": {
      "op": "==",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%13#1",
        "tmp%15#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%13#1",
        "tmp%15#1"
      ]
    },
    "6400": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%13#1"
      ]
    },
    "6401": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6402": {
      "op": "itxn_begin"
    },
    "6403": {
      "op": "bytec 16 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "6405": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6407": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6409": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6411": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "appl"
      ]
    },
    "6413": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6415": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "1000"
      ]
    },
    "6416": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6418": {
      "op": "itxn_submit"
    },
    "6419": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0"
      ]
    },
    "6421": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6422": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "tmp%17#0"
      ]
    },
    "6425": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%17#0",
        "awst_tmp%1#0"
      ]
    },
    "6426": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "6429": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%17#0",
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "6430": {
      "op": "==",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0",
        "tmp%19#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%17#0",
        "tmp%19#1"
      ]
    },
    "6431": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%17#0"
      ]
    },
    "6432": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0"
      ]
    },
    "6433": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\""
      ]
    },
    "6435": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#1"
      ]
    },
    "6437": {
      "op": "concat",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%0#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%0#0"
      ]
    },
    "6438": {
      "op": "box_get",
      "defined_out": [
        "ac#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "maybe_exists%0#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0",
        "maybe_exists%0#0"
      ]
    },
    "6439": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0"
      ]
    },
    "6440": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%22#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%22#0"
      ]
    },
    "6443": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0"
      ]
    },
    "6446": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0"
      ]
    },
    "6448": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0",
        "1000000"
      ]
    },
    "6450": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "hU#0",
        "lU#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "hU#0",
        "lU#0"
      ]
    },
    "6451": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "hU#0",
        "lU#0",
        "basePrice#0"
      ]
    },
    "6453": {
      "op": "divw",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUnderlying#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "removableUnderlying#0"
      ]
    },
    "6454": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "totalDeposits#0",
        "removableUnderlying#0",
        "circulatingLST#0"
      ]
    },
    "6456": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "hL#0",
        "lL#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "totalDeposits#0",
        "hL#0",
        "lL#0"
      ]
    },
    "6457": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "hL#0",
        "lL#0",
        "totalDeposits#0"
      ]
    },
    "6459": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "maxSafe#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%3#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "6460": {
      "op": "b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7"
    },
    "6463": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.seizeLSTFromUSD",
      "params": {
        "seizeUSD#0": "uint64",
        "collateralTokenId#0": "bytes",
        "lstAppId#0": "uint64",
        "availableLST#0": "uint64"
      },
      "block": "seizeLSTFromUSD",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "6466": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "6468": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "6470": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6471": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "6472": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6473": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "6474": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%1#0"
      ]
    },
    "6477": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "tmp%0#1",
        "underlyingPrice#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "underlyingPrice#0"
      ]
    },
    "6480": {
      "op": "frame_dig -4",
      "defined_out": [
        "seizeUSD#0 (copy)",
        "tmp%0#1",
        "underlyingPrice#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "underlyingPrice#0",
        "seizeUSD#0 (copy)"
      ]
    },
    "6482": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "seizeUSD#0 (copy)",
        "tmp%0#1",
        "underlyingPrice#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "underlyingPrice#0",
        "seizeUSD#0 (copy)",
        "1000000"
      ]
    },
    "6484": {
      "op": "mulw",
      "defined_out": [
        "hUnd#0",
        "lUnd#0",
        "tmp%0#1",
        "underlyingPrice#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "underlyingPrice#0",
        "hUnd#0",
        "lUnd#0"
      ]
    },
    "6485": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "hUnd#0",
        "lUnd#0",
        "underlyingPrice#0"
      ]
    },
    "6487": {
      "op": "divw",
      "defined_out": [
        "seizeUnderlying#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "seizeUnderlying#0"
      ]
    },
    "6488": {
      "op": "swap",
      "stack_out": [
        "seizeUnderlying#0",
        "tmp%0#1"
      ]
    },
    "6489": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "6490": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "seizeUnderlying#0",
        "collateral#0"
      ]
    },
    "6491": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateral#0",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "collateral#0",
        "32"
      ]
    },
    "6493": {
      "op": "extract_uint64",
      "defined_out": [
        "seizeUnderlying#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "tmp%3#0"
      ]
    },
    "6494": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)",
        "seizeUnderlying#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "tmp%3#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6496": {
      "op": "==",
      "defined_out": [
        "seizeUnderlying#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "tmp%4#0"
      ]
    },
    "6497": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "seizeUnderlying#0"
      ]
    },
    "6498": {
      "op": "itxn_begin"
    },
    "6499": {
      "op": "bytec 15 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "6501": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "seizeUnderlying#0"
      ]
    },
    "6503": {
      "op": "frame_dig -2",
      "stack_out": [
        "seizeUnderlying#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6505": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "seizeUnderlying#0"
      ]
    },
    "6507": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "appl"
      ]
    },
    "6509": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "seizeUnderlying#0"
      ]
    },
    "6511": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "1000"
      ]
    },
    "6512": {
      "op": "itxn_field Fee",
      "stack_out": [
        "seizeUnderlying#0"
      ]
    },
    "6514": {
      "op": "itxn_submit"
    },
    "6515": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "awst_tmp%0#0"
      ]
    },
    "6517": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6518": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "seizeUnderlying#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "awst_tmp%0#0",
        "tmp%5#0"
      ]
    },
    "6521": {
      "op": "swap",
      "stack_out": [
        "seizeUnderlying#0",
        "tmp%5#0",
        "awst_tmp%0#0"
      ]
    },
    "6522": {
      "op": "extract 0 4",
      "defined_out": [
        "seizeUnderlying#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "6525": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "seizeUnderlying#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "tmp%5#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "6526": {
      "op": "==",
      "defined_out": [
        "seizeUnderlying#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "6527": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "seizeUnderlying#0",
        "tmp%5#0"
      ]
    },
    "6528": {
      "op": "btoi",
      "defined_out": [
        "circ#0",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6529": {
      "op": "itxn_begin"
    },
    "6530": {
      "op": "bytec 16 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circ#0",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "6532": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6534": {
      "op": "frame_dig -2",
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6536": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6538": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0",
        "appl"
      ]
    },
    "6540": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6542": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0",
        "1000"
      ]
    },
    "6543": {
      "op": "itxn_field Fee",
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6545": {
      "op": "itxn_submit"
    },
    "6546": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circ#0",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0"
      ]
    },
    "6548": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circ#0",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6549": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circ#0",
        "seizeUnderlying#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0",
        "tmp%9#0"
      ]
    },
    "6552": {
      "op": "swap",
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#0",
        "awst_tmp%1#0"
      ]
    },
    "6553": {
      "op": "extract 0 4",
      "defined_out": [
        "circ#0",
        "seizeUnderlying#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "6556": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#0",
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "6557": {
      "op": "==",
      "defined_out": [
        "circ#0",
        "seizeUnderlying#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "6558": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#0"
      ]
    },
    "6559": {
      "op": "btoi",
      "defined_out": [
        "circ#0",
        "seizeUnderlying#0",
        "total#0"
      ],
      "stack_out": [
        "seizeUnderlying#0",
        "circ#0",
        "total#0"
      ]
    },
    "6560": {
      "op": "cover 2",
      "stack_out": [
        "total#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6562": {
      "op": "mulw",
      "defined_out": [
        "hL#0",
        "lL#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "hL#0",
        "lL#0"
      ]
    },
    "6563": {
      "op": "uncover 2",
      "stack_out": [
        "hL#0",
        "lL#0",
        "total#0"
      ]
    },
    "6565": {
      "op": "divw",
      "defined_out": [
        "seizeLST#0"
      ],
      "stack_out": [
        "seizeLST#0"
      ]
    },
    "6566": {
      "op": "dup",
      "defined_out": [
        "seizeLST#0"
      ],
      "stack_out": [
        "seizeLST#0",
        "seizeLST#0"
      ]
    },
    "6567": {
      "op": "frame_dig -1",
      "defined_out": [
        "availableLST#0 (copy)",
        "seizeLST#0"
      ],
      "stack_out": [
        "seizeLST#0",
        "seizeLST#0",
        "availableLST#0 (copy)"
      ]
    },
    "6569": {
      "op": ">",
      "defined_out": [
        "seizeLST#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "seizeLST#0",
        "tmp%13#0"
      ]
    },
    "6570": {
      "op": "bz seizeLSTFromUSD_after_if_else@4",
      "stack_out": [
        "seizeLST#0"
      ]
    },
    "6573": {
      "op": "frame_dig -1",
      "stack_out": [
        "seizeLST#0",
        "seizeLST#0"
      ]
    },
    "6575": {
      "op": "frame_bury 0",
      "stack_out": [
        "seizeLST#0"
      ]
    },
    "6577": {
      "block": "seizeLSTFromUSD_after_if_else@4",
      "stack_in": [
        "seizeLST#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "seizeLST#0"
      ],
      "stack_out": [
        "seizeLST#0",
        "seizeLST#0"
      ]
    },
    "6579": {
      "op": "swap"
    },
    "6580": {
      "retsub": true,
      "op": "retsub"
    },
    "6581": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidatePartialASA",
      "params": {
        "debtor#0": "bytes",
        "repayAxfer#0": "uint64",
        "repayBaseAmount#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "liquidatePartialASA",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "6584": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "baseAssetId#0"
      ]
    },
    "6586": {
      "op": "dupn 7",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2"
      ]
    },
    "6588": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "\"loan_record\""
      ]
    },
    "6589": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "6591": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0"
      ]
    },
    "6592": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "6594": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6595": {
      "op": "bury 1",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6597": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "6598": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "tmp%0#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "tmp%0#0",
        "{accrueMarket}"
      ]
    },
    "6601": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "6602": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "maybe_exists%1#0"
      ]
    },
    "6603": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "maybe_exists%1#0",
        "rec#0"
      ]
    },
    "6604": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "maybe_exists%1#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6605": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "maybe_exists%1#0"
      ]
    },
    "6607": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "rec#0"
      ]
    },
    "6608": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6609": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collTok#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collTok#0"
      ]
    },
    "6612": {
      "op": "swap",
      "defined_out": [
        "collTok#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "rec#0"
      ]
    },
    "6613": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "6614": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)",
        "40"
      ]
    },
    "6616": {
      "op": "extract_uint64",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "collLSTBal#0"
      ]
    },
    "6617": {
      "op": "swap",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#0"
      ]
    },
    "6618": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "liveDebt#0",
        "rec#1"
      ]
    },
    "6621": {
      "op": "swap",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6622": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "6623": {
      "error": "NO_DEBT",
      "op": "assert // NO_DEBT",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6624": {
      "op": "frame_dig -2",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "repayBaseAmount#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6626": {
      "op": "bz liquidatePartialASA_bool_false@3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6629": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6631": {
      "op": "frame_dig 13",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "liveDebt#0"
      ]
    },
    "6633": {
      "op": "<=",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%5#0"
      ]
    },
    "6634": {
      "op": "bz liquidatePartialASA_bool_false@3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6637": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ]
    },
    "6638": {
      "block": "liquidatePartialASA_bool_merge@4",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ],
      "error": "BAD_REPAY",
      "op": "assert // BAD_REPAY",
      "defined_out": [],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6639": {
      "op": "frame_dig 10",
      "defined_out": [
        "collTok#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0"
      ]
    },
    "6641": {
      "op": "frame_dig 11",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "collLSTBal#0"
      ]
    },
    "6643": {
      "op": "frame_dig -1",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "collLSTBal#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6645": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0"
      ]
    },
    "6648": {
      "op": "frame_dig 13",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "liveDebt#0"
      ]
    },
    "6650": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "6653": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)"
      ]
    },
    "6654": {
      "error": "BAD_DEBT_USD",
      "op": "assert // BAD_DEBT_USD",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "6655": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "collateralUSD#0"
      ]
    },
    "6656": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "collateralUSD#0",
        "10000"
      ]
    },
    "6657": {
      "op": "mulw",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0"
      ]
    },
    "6658": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hCR#0",
        "lCR#0",
        "debtUSDv#0"
      ]
    },
    "6660": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0"
      ]
    },
    "6661": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "0"
      ]
    },
    "6662": {
      "op": "bytec 12 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "6664": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6665": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "maybe_value%2#0"
      ]
    },
    "6666": {
      "op": "<=",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%7#0"
      ]
    },
    "6667": {
      "error": "NOT_LIQUIDATABLE",
      "op": "assert // NOT_LIQUIDATABLE",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6668": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "6669": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6670": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "6671": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%3#0"
      ]
    },
    "6672": {
      "op": "btoi",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "baseAssetId#0"
      ]
    },
    "6673": {
      "op": "frame_bury 0",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6675": {
      "op": "frame_dig -3",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ]
    },
    "6677": {
      "op": "gtxns Sender",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%8#0"
      ]
    },
    "6679": {
      "op": "txn Sender",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "6681": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%10#0"
      ]
    },
    "6682": {
      "op": "bz liquidatePartialASA_bool_false@9",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6685": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ]
    },
    "6687": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%11#0"
      ]
    },
    "6689": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "6691": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%13#0"
      ]
    },
    "6692": {
      "op": "bz liquidatePartialASA_bool_false@9",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6695": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ]
    },
    "6697": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%14#0"
      ]
    },
    "6699": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%14#0",
        "baseAssetId#0"
      ]
    },
    "6701": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%15#0"
      ]
    },
    "6702": {
      "op": "bz liquidatePartialASA_bool_false@9",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6705": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayAxfer#0 (copy)"
      ]
    },
    "6707": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%16#0"
      ]
    },
    "6709": {
      "op": "frame_dig -2",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%16#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6711": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%17#0"
      ]
    },
    "6712": {
      "op": "bz liquidatePartialASA_bool_false@9",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6715": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "baseAssetId#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ]
    },
    "6716": {
      "block": "liquidatePartialASA_bool_merge@10",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6717": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "6718": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6719": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "6720": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%4#0"
      ]
    },
    "6721": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "basePrice#0"
      ]
    },
    "6724": {
      "op": "frame_bury 1",
      "defined_out": [
        "basePrice#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6726": {
      "op": "frame_dig 13",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "6728": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ]
    },
    "6729": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "basePrice#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "2"
      ]
    },
    "6731": {
      "op": "/",
      "defined_out": [
        "basePrice#0",
        "closeFactorHalf#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "closeFactorHalf#0"
      ]
    },
    "6732": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "closeFactorHalf#0",
        "liveDebt#0"
      ]
    },
    "6733": {
      "op": "dig 1",
      "defined_out": [
        "basePrice#0",
        "closeFactorHalf#0",
        "closeFactorHalf#0 (copy)",
        "liveDebt#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "closeFactorHalf#0",
        "liveDebt#0",
        "closeFactorHalf#0 (copy)"
      ]
    },
    "6735": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "closeFactorHalf#0 (copy)",
        "closeFactorHalf#0"
      ]
    },
    "6737": {
      "op": "select",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ]
    },
    "6738": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "maxRepayAllowed#0"
      ]
    },
    "6739": {
      "op": "frame_bury 3",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ]
    },
    "6741": {
      "op": "intc_0 // 0",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ]
    },
    "6742": {
      "op": "frame_bury 5",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ]
    },
    "6744": {
      "op": "frame_dig -2",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "repayBaseAmount#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6746": {
      "op": "<",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%19#0"
      ]
    },
    "6747": {
      "op": "frame_dig -2",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "repayUsed#2",
        "tmp%19#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%19#0",
        "repayUsed#2"
      ]
    },
    "6749": {
      "op": "frame_bury 7",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "repayUsed#2",
        "tmp%19#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%19#0"
      ]
    },
    "6751": {
      "op": "bz liquidatePartialASA_after_if_else@12",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6754": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6756": {
      "op": "frame_dig 3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "maxRepayAllowed#0"
      ]
    },
    "6758": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "maxRepayAllowed#0 (copy)",
        "refundAmount#0",
        "repayBaseAmount#0 (copy)",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "maxRepayAllowed#0 (copy)",
        "maxRepayAllowed#0 (copy)"
      ]
    },
    "6759": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayBaseAmount#0 (copy)",
        "maxRepayAllowed#0 (copy)"
      ]
    },
    "6761": {
      "op": "-",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ]
    },
    "6762": {
      "op": "frame_bury 5",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2"
      ]
    },
    "6764": {
      "op": "frame_bury 7",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6766": {
      "block": "liquidatePartialASA_after_if_else@12",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2"
      ]
    },
    "6768": {
      "op": "dup",
      "defined_out": [
        "repayUsed#2",
        "repayUsed#2 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "repayUsed#2 (copy)"
      ]
    },
    "6769": {
      "op": "frame_dig 1",
      "defined_out": [
        "basePrice#0",
        "repayUsed#2",
        "repayUsed#2 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "repayUsed#2 (copy)",
        "basePrice#0"
      ]
    },
    "6771": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "hRU#0",
        "lRU#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "hRU#0",
        "lRU#0"
      ]
    },
    "6772": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "hRU#0",
        "lRU#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "hRU#0",
        "lRU#0",
        "1000000"
      ]
    },
    "6774": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "repayUSD#0"
      ]
    },
    "6775": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "repayUSD#0",
        "0"
      ]
    },
    "6776": {
      "op": "bytec 25 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "0",
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "repayUSD#0",
        "0",
        "\"liq_bonus_bps\""
      ]
    },
    "6778": {
      "op": "app_global_get_ex",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "maybe_exists%5#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "repayUSD#0",
        "bonusBps#0",
        "maybe_exists%5#0"
      ]
    },
    "6779": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "repayUSD#0",
        "bonusBps#0"
      ]
    },
    "6780": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "basePrice#0",
        "bonusBps#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "repayUSD#0",
        "bonusBps#0",
        "10000"
      ]
    },
    "6781": {
      "op": "+",
      "defined_out": [
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2",
        "tmp%20#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "repayUSD#0",
        "tmp%20#0"
      ]
    },
    "6782": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "hSZ#0",
        "lSZ#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "hSZ#0",
        "lSZ#0"
      ]
    },
    "6783": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "hSZ#0",
        "lSZ#0",
        "10000"
      ]
    },
    "6784": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "seizeUSD#0"
      ]
    },
    "6785": {
      "op": "frame_dig 10",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "seizeUSD#0",
        "collTok#0"
      ]
    },
    "6787": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "collTok#0 (copy)",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "seizeUSD#0",
        "collTok#0 (copy)",
        "collTok#0 (copy)"
      ]
    },
    "6788": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "seizeUSD#0",
        "collTok#0 (copy)"
      ]
    },
    "6790": {
      "op": "frame_dig -1",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "collTok#0 (copy)",
        "lstAppId#0 (copy)",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "seizeUSD#0",
        "collTok#0 (copy)",
        "lstAppId#0 (copy)"
      ]
    },
    "6792": {
      "op": "frame_dig 11",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "collTok#0 (copy)",
        "lstAppId#0 (copy)",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "seizeUSD#0",
        "collTok#0 (copy)",
        "lstAppId#0 (copy)",
        "collLSTBal#0"
      ]
    },
    "6794": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collLSTBal#0 (copy)",
        "collTok#0",
        "collTok#0 (copy)",
        "lstAppId#0 (copy)",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "seizeUSD#0",
        "collTok#0 (copy)",
        "lstAppId#0 (copy)",
        "collLSTBal#0 (copy)",
        "collLSTBal#0 (copy)"
      ]
    },
    "6795": {
      "op": "cover 4",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeUSD#0",
        "collTok#0 (copy)",
        "lstAppId#0 (copy)",
        "collLSTBal#0 (copy)"
      ]
    },
    "6797": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.seizeLSTFromUSD",
      "op": "callsub seizeLSTFromUSD",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0"
      ]
    },
    "6800": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "repayUsed#2",
        "seizeLST#0",
        "seizeLST#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0",
        "seizeLST#0 (copy)"
      ]
    },
    "6801": {
      "error": "NOTHING_TO_SEIZE",
      "op": "assert // NOTHING_TO_SEIZE",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0"
      ]
    },
    "6802": {
      "op": "itxn_begin"
    },
    "6803": {
      "op": "txn Sender",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6805": {
      "op": "frame_dig 9",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "6807": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "32"
      ]
    },
    "6809": {
      "op": "extract_uint64",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6810": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6811": {
      "op": "frame_bury 2",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6813": {
      "op": "dig 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "seizeLST#0 (copy)"
      ]
    },
    "6815": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6817": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6819": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0"
      ]
    },
    "6821": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0",
        "4"
      ]
    },
    "6823": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0"
      ]
    },
    "6825": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0",
        "1000"
      ]
    },
    "6826": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "collLSTBal#0",
        "seizeLST#0"
      ]
    },
    "6828": {
      "op": "itxn_submit"
    },
    "6829": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "seizeLST#0",
        "collLSTBal#0"
      ]
    },
    "6830": {
      "op": "dig 1",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "seizeLST#0",
        "collLSTBal#0",
        "seizeLST#0 (copy)"
      ]
    },
    "6832": {
      "op": "-",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "seizeLST#0",
        "remainingLST#0"
      ]
    },
    "6833": {
      "op": "frame_bury 6",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "seizeLST#0"
      ]
    },
    "6835": {
      "op": "frame_dig 13",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "seizeLST#0",
        "liveDebt#0"
      ]
    },
    "6837": {
      "op": "dig 3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "seizeLST#0",
        "liveDebt#0",
        "repayUsed#2 (copy)"
      ]
    },
    "6839": {
      "op": "-",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "seizeLST#0",
        "newDebtBase#0"
      ]
    },
    "6840": {
      "op": "frame_bury 4",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "collTok#0",
        "seizeLST#0"
      ]
    },
    "6842": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2"
      ]
    },
    "6845": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "0"
      ]
    },
    "6846": {
      "op": "bytec_2 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "0",
        "\"total_borrows\""
      ]
    },
    "6847": {
      "op": "app_global_get_ex",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "newDebtBase#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "6848": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "maybe_value%6#0"
      ]
    },
    "6849": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%6#0",
        "repayUsed#2"
      ]
    },
    "6850": {
      "op": "-",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "new_state_value%0#0",
        "rec#0",
        "remainingLST#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%0#0"
      ]
    },
    "6851": {
      "op": "bytec_2 // \"total_borrows\"",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "6852": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "6853": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6854": {
      "op": "frame_dig 5",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6856": {
      "op": "bz liquidatePartialASA_after_if_else@16",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6859": {
      "op": "itxn_begin"
    },
    "6860": {
      "op": "txn Sender",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6862": {
      "op": "frame_dig 5",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "refundAmount#0"
      ]
    },
    "6864": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6866": {
      "op": "frame_dig 0",
      "defined_out": [
        "baseAssetId#0",
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "rec#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "baseAssetId#0"
      ]
    },
    "6868": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6870": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6872": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "4"
      ]
    },
    "6874": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6876": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "1000"
      ]
    },
    "6877": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6879": {
      "op": "itxn_submit"
    },
    "6880": {
      "block": "liquidatePartialASA_after_if_else@16",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "newDebtBase#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0"
      ]
    },
    "6882": {
      "op": "bnz liquidatePartialASA_else_body@21",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6885": {
      "op": "frame_dig 6",
      "defined_out": [
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6887": {
      "op": "bz liquidatePartialASA_after_if_else@20",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6890": {
      "op": "itxn_begin"
    },
    "6891": {
      "op": "frame_dig 6",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6893": {
      "op": "dup",
      "defined_out": [
        "newDebtBase#0",
        "remainingLST#0",
        "remainingLST#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "remainingLST#0 (copy)"
      ]
    },
    "6894": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6896": {
      "op": "frame_dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6898": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6900": {
      "op": "frame_dig -4",
      "defined_out": [
        "debtor#0 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "debtor#0 (copy)"
      ]
    },
    "6902": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6904": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "4"
      ]
    },
    "6906": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6908": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "1000"
      ]
    },
    "6909": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6911": {
      "op": "itxn_submit"
    },
    "6912": {
      "op": "frame_dig 10",
      "defined_out": [
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "newDebtBase#0",
        "remainingLST#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "collTok#0"
      ]
    },
    "6914": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "remainingLST#0"
      ]
    },
    "6915": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6918": {
      "block": "liquidatePartialASA_after_if_else@20",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#0"
      ]
    },
    "6920": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "{box_del}"
      ]
    },
    "6921": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6922": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "6923": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "6925": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "6926": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%7#0"
      ]
    },
    "6927": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%7#0",
        "1"
      ]
    },
    "6928": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%1#0"
      ]
    },
    "6929": {
      "op": "bytec 5 // \"active_loan_records\"",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "6931": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "6932": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6933": {
      "block": "liquidatePartialASA_after_if_else@22",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%2#0"
      ]
    },
    "6936": {
      "op": "bytec 8 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "6938": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "6939": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6940": {
      "retsub": true,
      "op": "retsub"
    },
    "6941": {
      "block": "liquidatePartialASA_else_body@21",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "rec#1"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1"
      ]
    },
    "6943": {
      "op": "dup",
      "defined_out": [
        "rec#1",
        "rec#1 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1",
        "rec#1 (copy)"
      ]
    },
    "6944": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#1",
        "tmp%26#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1",
        "tmp%26#0"
      ]
    },
    "6947": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "rec#1"
      ]
    },
    "6948": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#1",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "6951": {
      "op": "frame_dig 6",
      "defined_out": [
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "remainingLST#0"
      ]
    },
    "6953": {
      "op": "itob",
      "defined_out": [
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0"
      ]
    },
    "6954": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "6955": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6956": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "6957": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0"
      ]
    },
    "6958": {
      "op": "frame_dig 4",
      "defined_out": [
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "newDebtBase#0"
      ]
    },
    "6960": {
      "op": "itob",
      "defined_out": [
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0"
      ]
    },
    "6961": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "6962": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "6964": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "6965": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "maybe_value%9#0"
      ]
    },
    "6966": {
      "op": "itob",
      "defined_out": [
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "6967": {
      "op": "frame_dig 7",
      "defined_out": [
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "repayUsed#2"
      ]
    },
    "6969": {
      "op": "itob",
      "defined_out": [
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "6970": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%26#0",
        "tmp%27#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "to_encode%0#0"
      ]
    },
    "6972": {
      "op": "itob",
      "defined_out": [
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "6973": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "6974": {
      "op": "pushbytes 0x04",
      "defined_out": [
        "0x04",
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0",
        "0x04"
      ]
    },
    "6977": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "6978": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%4#0"
      ]
    },
    "6979": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "6980": {
      "op": "uncover 6",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%26#0"
      ]
    },
    "6982": {
      "op": "uncover 6",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "6984": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "6985": {
      "op": "uncover 5",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "6987": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "6988": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "6989": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "6990": {
      "op": "uncover 3",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%8#0"
      ]
    },
    "6992": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "6993": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "6995": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "6996": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%2#0"
      ]
    },
    "6997": {
      "op": "concat",
      "defined_out": [
        "newDebtBase#0",
        "newRec#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newRec#0"
      ]
    },
    "6998": {
      "op": "frame_dig 8",
      "defined_out": [
        "newDebtBase#0",
        "newRec#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ]
    },
    "7000": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#0",
        "newRec#0"
      ]
    },
    "7001": {
      "op": "box_put",
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7002": {
      "op": "b liquidatePartialASA_after_if_else@22"
    },
    "7005": {
      "block": "liquidatePartialASA_bool_false@9",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ]
    },
    "7006": {
      "op": "b liquidatePartialASA_bool_merge@10"
    },
    "7009": {
      "block": "liquidatePartialASA_bool_false@3",
      "stack_in": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%0#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ]
    },
    "7010": {
      "op": "b liquidatePartialASA_bool_merge@4"
    },
    "7013": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidatePartialAlgo",
      "params": {
        "debtor#0": "bytes",
        "repayPay#0": "uint64",
        "repayBaseAmount#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "liquidatePartialAlgo",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "7016": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "basePrice#0"
      ]
    },
    "7018": {
      "op": "dupn 7",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ]
    },
    "7020": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "0"
      ]
    },
    "7021": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7022": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7023": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "maybe_value%0#0"
      ]
    },
    "7024": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%0#0"
      ]
    },
    "7025": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%1#0"
      ]
    },
    "7026": {
      "error": "BASE_NOT_ALGO",
      "op": "assert // BASE_NOT_ALGO",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ]
    },
    "7027": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "\"loan_record\""
      ]
    },
    "7028": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "7030": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0"
      ]
    },
    "7031": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "7033": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "7034": {
      "op": "bury 1",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "tmp%2#0",
        "maybe_exists%1#0"
      ]
    },
    "7036": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "7037": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "tmp%2#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "tmp%2#0",
        "{accrueMarket}"
      ]
    },
    "7040": {
      "op": "pop",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "7041": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "7042": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "maybe_exists%2#0",
        "rec#0"
      ]
    },
    "7043": {
      "op": "dup",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "maybe_exists%2#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "7044": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "7046": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "rec#0"
      ]
    },
    "7047": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "7048": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collTok#0",
        "rec#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "rec#0",
        "collTok#0"
      ]
    },
    "7051": {
      "op": "swap",
      "defined_out": [
        "collTok#0",
        "rec#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "rec#0"
      ]
    },
    "7052": {
      "op": "dup",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "7053": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)",
        "40"
      ]
    },
    "7055": {
      "op": "extract_uint64",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "rec#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "collLSTBal#0"
      ]
    },
    "7056": {
      "op": "swap",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "rec#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#0"
      ]
    },
    "7057": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "liveDebt#0",
        "rec#1"
      ]
    },
    "7060": {
      "op": "swap",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7061": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "7062": {
      "error": "NO_DEBT",
      "op": "assert // NO_DEBT",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7063": {
      "op": "frame_dig -2",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "repayBaseAmount#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "7065": {
      "op": "bz liquidatePartialAlgo_bool_false@3",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7068": {
      "op": "frame_dig -2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "7070": {
      "op": "frame_dig 13",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "liveDebt#0"
      ]
    },
    "7072": {
      "op": "<=",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%7#0"
      ]
    },
    "7073": {
      "op": "bz liquidatePartialAlgo_bool_false@3",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7076": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ]
    },
    "7077": {
      "block": "liquidatePartialAlgo_bool_merge@4",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ],
      "error": "BAD_REPAY",
      "op": "assert // BAD_REPAY",
      "defined_out": [],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7078": {
      "op": "frame_dig 10",
      "defined_out": [
        "collTok#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0"
      ]
    },
    "7080": {
      "op": "frame_dig 11",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "collLSTBal#0"
      ]
    },
    "7082": {
      "op": "frame_dig -1",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "collLSTBal#0",
        "lstAppId#0 (copy)"
      ]
    },
    "7084": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0"
      ]
    },
    "7087": {
      "op": "frame_dig 13",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "liveDebt#0"
      ]
    },
    "7089": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "7092": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)"
      ]
    },
    "7093": {
      "error": "BAD_DEBT_USD",
      "op": "assert // BAD_DEBT_USD",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "7094": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "collateralUSD#0"
      ]
    },
    "7095": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "collateralUSD#0",
        "10000"
      ]
    },
    "7096": {
      "op": "mulw",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0"
      ]
    },
    "7097": {
      "op": "uncover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hCR#0",
        "lCR#0",
        "debtUSDv#0"
      ]
    },
    "7099": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0"
      ]
    },
    "7100": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "0"
      ]
    },
    "7101": {
      "op": "bytec 12 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "7103": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "7104": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "maybe_value%3#0"
      ]
    },
    "7105": {
      "op": "<=",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%9#0"
      ]
    },
    "7106": {
      "error": "NOT_LIQUIDATABLE",
      "op": "assert // NOT_LIQUIDATABLE",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7107": {
      "op": "frame_dig -3",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "repayPay#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayPay#0 (copy)"
      ]
    },
    "7109": {
      "op": "gtxns Sender",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%10#0"
      ]
    },
    "7111": {
      "op": "txn Sender",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "7113": {
      "op": "==",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%12#0"
      ]
    },
    "7114": {
      "op": "bz liquidatePartialAlgo_bool_false@8",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7117": {
      "op": "frame_dig -3",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayPay#0 (copy)"
      ]
    },
    "7119": {
      "op": "gtxns Receiver",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%13#0"
      ]
    },
    "7121": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "7123": {
      "op": "==",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%15#0"
      ]
    },
    "7124": {
      "op": "bz liquidatePartialAlgo_bool_false@8",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7127": {
      "op": "frame_dig -3",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayPay#0 (copy)"
      ]
    },
    "7129": {
      "op": "gtxns Amount",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%16#0"
      ]
    },
    "7131": {
      "op": "frame_dig -2",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%16#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "7133": {
      "op": "==",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%17#0"
      ]
    },
    "7134": {
      "op": "bz liquidatePartialAlgo_bool_false@8",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7137": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ]
    },
    "7138": {
      "block": "liquidatePartialAlgo_bool_merge@9",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7139": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "7140": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7141": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "7142": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%4#0"
      ]
    },
    "7143": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "basePrice#0"
      ]
    },
    "7146": {
      "op": "frame_bury 0",
      "defined_out": [
        "basePrice#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7148": {
      "op": "frame_dig 13",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "7150": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ]
    },
    "7151": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "basePrice#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "2"
      ]
    },
    "7153": {
      "op": "/",
      "defined_out": [
        "basePrice#0",
        "closeFactorHalf#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "closeFactorHalf#0"
      ]
    },
    "7154": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "closeFactorHalf#0",
        "liveDebt#0"
      ]
    },
    "7155": {
      "op": "dig 1",
      "defined_out": [
        "basePrice#0",
        "closeFactorHalf#0",
        "closeFactorHalf#0 (copy)",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "closeFactorHalf#0",
        "liveDebt#0",
        "closeFactorHalf#0 (copy)"
      ]
    },
    "7157": {
      "op": "uncover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "closeFactorHalf#0 (copy)",
        "closeFactorHalf#0"
      ]
    },
    "7159": {
      "op": "select",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ]
    },
    "7160": {
      "op": "dup",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "maxRepayAllowed#0"
      ]
    },
    "7161": {
      "op": "frame_bury 2",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ]
    },
    "7163": {
      "op": "intc_0 // 0",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ]
    },
    "7164": {
      "op": "frame_bury 4",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ]
    },
    "7166": {
      "op": "frame_dig -2",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "repayBaseAmount#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "7168": {
      "op": "<",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%19#0"
      ]
    },
    "7169": {
      "op": "frame_dig -2",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "repayUsed#2",
        "tmp%19#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%19#0",
        "repayUsed#2"
      ]
    },
    "7171": {
      "op": "frame_bury 6",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "repayUsed#2",
        "tmp%19#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%19#0"
      ]
    },
    "7173": {
      "op": "bz liquidatePartialAlgo_after_if_else@11",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7176": {
      "op": "frame_dig -2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "7178": {
      "op": "frame_dig 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "maxRepayAllowed#0"
      ]
    },
    "7180": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "maxRepayAllowed#0 (copy)",
        "refundAmount#0",
        "repayBaseAmount#0 (copy)",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "maxRepayAllowed#0 (copy)",
        "maxRepayAllowed#0 (copy)"
      ]
    },
    "7181": {
      "op": "cover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayBaseAmount#0 (copy)",
        "maxRepayAllowed#0 (copy)"
      ]
    },
    "7183": {
      "op": "-",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ]
    },
    "7184": {
      "op": "frame_bury 4",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2"
      ]
    },
    "7186": {
      "op": "frame_bury 6",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7188": {
      "block": "liquidatePartialAlgo_after_if_else@11",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2"
      ]
    },
    "7190": {
      "op": "frame_dig 0",
      "defined_out": [
        "basePrice#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "basePrice#0"
      ]
    },
    "7192": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "hRU#0",
        "lRU#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRU#0",
        "lRU#0"
      ]
    },
    "7193": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "hRU#0",
        "lRU#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRU#0",
        "lRU#0",
        "1000000"
      ]
    },
    "7195": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0"
      ]
    },
    "7196": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "0"
      ]
    },
    "7197": {
      "op": "bytec 25 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "0",
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "0",
        "\"liq_bonus_bps\""
      ]
    },
    "7199": {
      "op": "app_global_get_ex",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "maybe_exists%5#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "bonusBps#0",
        "maybe_exists%5#0"
      ]
    },
    "7200": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "bonusBps#0"
      ]
    },
    "7201": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "basePrice#0",
        "bonusBps#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "bonusBps#0",
        "10000"
      ]
    },
    "7202": {
      "op": "+",
      "defined_out": [
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2",
        "tmp%20#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "tmp%20#0"
      ]
    },
    "7203": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "hSZ#0",
        "lSZ#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSZ#0",
        "lSZ#0"
      ]
    },
    "7204": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSZ#0",
        "lSZ#0",
        "10000"
      ]
    },
    "7205": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0"
      ]
    },
    "7206": {
      "op": "frame_dig 10",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "collTok#0"
      ]
    },
    "7208": {
      "op": "frame_dig -1",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "lstAppId#0 (copy)",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "collTok#0",
        "lstAppId#0 (copy)"
      ]
    },
    "7210": {
      "op": "frame_dig 11",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "lstAppId#0 (copy)",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "collTok#0",
        "lstAppId#0 (copy)",
        "collLSTBal#0"
      ]
    },
    "7212": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.seizeLSTFromUSD",
      "op": "callsub seizeLSTFromUSD",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0"
      ]
    },
    "7215": {
      "op": "dup",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0",
        "seizeLST#0"
      ]
    },
    "7216": {
      "op": "frame_bury 7",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0"
      ]
    },
    "7218": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "repayUsed#2",
        "seizeLST#0",
        "seizeLST#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0",
        "seizeLST#0 (copy)"
      ]
    },
    "7219": {
      "error": "NOTHING_TO_SEIZE",
      "op": "assert // NOTHING_TO_SEIZE",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0"
      ]
    },
    "7220": {
      "op": "itxn_begin"
    },
    "7221": {
      "op": "txn Sender",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "7223": {
      "op": "frame_dig 9",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "7225": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "32"
      ]
    },
    "7227": {
      "op": "extract_uint64",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "7228": {
      "op": "dup",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "7229": {
      "op": "frame_bury 1",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "7231": {
      "op": "uncover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "seizeLST#0"
      ]
    },
    "7233": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "7235": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "7237": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7239": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "4"
      ]
    },
    "7241": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7243": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "1000"
      ]
    },
    "7244": {
      "op": "itxn_field Fee",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7246": {
      "op": "itxn_submit"
    },
    "7247": {
      "op": "frame_dig 4",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "refundAmount#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "7249": {
      "op": "bz liquidatePartialAlgo_after_if_else@15",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7252": {
      "op": "itxn_begin"
    },
    "7253": {
      "op": "txn Sender",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "rec#0",
        "refundAmount#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "7255": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7257": {
      "op": "frame_dig 4",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "7259": {
      "op": "itxn_field Amount",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7261": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "refundAmount#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "1"
      ]
    },
    "7262": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7264": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "1000"
      ]
    },
    "7265": {
      "op": "itxn_field Fee",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7267": {
      "op": "itxn_submit"
    },
    "7268": {
      "block": "liquidatePartialAlgo_after_if_else@15",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 11",
      "defined_out": [
        "collLSTBal#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collLSTBal#0"
      ]
    },
    "7270": {
      "op": "frame_dig 7",
      "defined_out": [
        "collLSTBal#0",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collLSTBal#0",
        "seizeLST#0"
      ]
    },
    "7272": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "seizeLST#0",
        "seizeLST#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collLSTBal#0",
        "seizeLST#0 (copy)",
        "seizeLST#0 (copy)"
      ]
    },
    "7273": {
      "op": "cover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0",
        "collLSTBal#0",
        "seizeLST#0 (copy)"
      ]
    },
    "7275": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "remainingLST#0",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0",
        "remainingLST#0"
      ]
    },
    "7276": {
      "op": "frame_bury 5",
      "defined_out": [
        "collLSTBal#0",
        "remainingLST#0",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0"
      ]
    },
    "7278": {
      "op": "frame_dig 13",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "remainingLST#0",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0",
        "liveDebt#0"
      ]
    },
    "7280": {
      "op": "frame_dig 6",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0",
        "liveDebt#0",
        "repayUsed#2"
      ]
    },
    "7282": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "remainingLST#0",
        "repayUsed#2",
        "repayUsed#2 (copy)",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#0",
        "liveDebt#0",
        "repayUsed#2 (copy)",
        "repayUsed#2 (copy)"
      ]
    },
    "7283": {
      "op": "cover 3",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "seizeLST#0",
        "liveDebt#0",
        "repayUsed#2 (copy)"
      ]
    },
    "7285": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "seizeLST#0",
        "newDebtBase#0"
      ]
    },
    "7286": {
      "op": "dup",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "seizeLST#0",
        "newDebtBase#0",
        "newDebtBase#0 (copy)"
      ]
    },
    "7287": {
      "op": "cover 3",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "seizeLST#0",
        "newDebtBase#0"
      ]
    },
    "7289": {
      "op": "frame_bury 3",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "seizeLST#0"
      ]
    },
    "7291": {
      "op": "frame_dig 10",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "seizeLST#0",
        "collTok#0"
      ]
    },
    "7293": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "collTok#0",
        "seizeLST#0"
      ]
    },
    "7294": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2"
      ]
    },
    "7297": {
      "op": "intc_0 // 0",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "0"
      ]
    },
    "7298": {
      "op": "bytec_2 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "0",
        "\"total_borrows\""
      ]
    },
    "7299": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "7300": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "maybe_value%6#0"
      ]
    },
    "7301": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "maybe_value%6#0",
        "repayUsed#2"
      ]
    },
    "7302": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "newDebtBase#0",
        "new_state_value%0#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "new_state_value%0#0"
      ]
    },
    "7303": {
      "op": "bytec_2 // \"total_borrows\"",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "7304": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "7305": {
      "op": "app_global_put",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0"
      ]
    },
    "7306": {
      "op": "bnz liquidatePartialAlgo_else_body@20",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7309": {
      "op": "frame_dig 5",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "7311": {
      "op": "bz liquidatePartialAlgo_after_if_else@19",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7314": {
      "op": "itxn_begin"
    },
    "7315": {
      "op": "frame_dig 5",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "7317": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "remainingLST#0 (copy)",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "remainingLST#0 (copy)"
      ]
    },
    "7318": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "7320": {
      "op": "frame_dig 1",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "7322": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "7324": {
      "op": "frame_dig -4",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "debtor#0 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "debtor#0 (copy)"
      ]
    },
    "7326": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "7328": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "4"
      ]
    },
    "7330": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "7332": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "1000"
      ]
    },
    "7333": {
      "op": "itxn_field Fee",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "7335": {
      "op": "itxn_submit"
    },
    "7336": {
      "op": "frame_dig 10",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "collTok#0"
      ]
    },
    "7338": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "remainingLST#0"
      ]
    },
    "7339": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7342": {
      "block": "liquidatePartialAlgo_after_if_else@19",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%2#0"
      ]
    },
    "7344": {
      "op": "box_del",
      "defined_out": [
        "tmp%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "{box_del}"
      ]
    },
    "7345": {
      "op": "pop",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7346": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "7347": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "7349": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "7350": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%7#0"
      ]
    },
    "7351": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%7#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%7#0",
        "1"
      ]
    },
    "7352": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%1#0"
      ]
    },
    "7353": {
      "op": "bytec 5 // \"active_loan_records\"",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "7355": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "7356": {
      "op": "app_global_put",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7357": {
      "block": "liquidatePartialAlgo_after_if_else@21",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%2#0"
      ]
    },
    "7360": {
      "op": "bytec 8 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "7362": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "7363": {
      "op": "app_global_put",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7364": {
      "retsub": true,
      "op": "retsub"
    },
    "7365": {
      "block": "liquidatePartialAlgo_else_body@20",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "rec#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1"
      ]
    },
    "7367": {
      "op": "dup",
      "defined_out": [
        "rec#1",
        "rec#1 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1",
        "rec#1 (copy)"
      ]
    },
    "7368": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#1",
        "tmp%26#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1",
        "tmp%26#0"
      ]
    },
    "7371": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "rec#1"
      ]
    },
    "7372": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#1",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "7375": {
      "op": "frame_dig 5",
      "defined_out": [
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "remainingLST#0"
      ]
    },
    "7377": {
      "op": "itob",
      "defined_out": [
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0"
      ]
    },
    "7378": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "7379": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7380": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "7381": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0"
      ]
    },
    "7382": {
      "op": "frame_dig 3",
      "defined_out": [
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "newDebtBase#0"
      ]
    },
    "7384": {
      "op": "itob",
      "defined_out": [
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0"
      ]
    },
    "7385": {
      "op": "intc_0 // 0",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "7386": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "7388": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "7389": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "maybe_value%9#0"
      ]
    },
    "7390": {
      "op": "itob",
      "defined_out": [
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "7391": {
      "op": "frame_dig 6",
      "defined_out": [
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "repayUsed#2"
      ]
    },
    "7393": {
      "op": "itob",
      "defined_out": [
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "7394": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%26#0",
        "tmp%27#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "to_encode%0#0"
      ]
    },
    "7396": {
      "op": "itob",
      "defined_out": [
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "7397": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "7398": {
      "op": "pushbytes 0x04",
      "defined_out": [
        "0x04",
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0",
        "0x04"
      ]
    },
    "7401": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "7402": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%4#0"
      ]
    },
    "7403": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "7404": {
      "op": "uncover 6",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%26#0"
      ]
    },
    "7406": {
      "op": "uncover 6",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "7408": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "7409": {
      "op": "uncover 5",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "7411": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "7412": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "7413": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%8#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "7414": {
      "op": "uncover 3",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%8#0"
      ]
    },
    "7416": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "7417": {
      "op": "uncover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "7419": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "7420": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%2#0"
      ]
    },
    "7421": {
      "op": "concat",
      "defined_out": [
        "newDebtBase#0",
        "newRec#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newRec#0"
      ]
    },
    "7422": {
      "op": "frame_dig 8",
      "defined_out": [
        "newDebtBase#0",
        "newRec#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newRec#0",
        "tmp%2#0"
      ]
    },
    "7424": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%2#0",
        "newRec#0"
      ]
    },
    "7425": {
      "op": "box_put",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "7426": {
      "op": "b liquidatePartialAlgo_after_if_else@21"
    },
    "7429": {
      "block": "liquidatePartialAlgo_bool_false@8",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ]
    },
    "7430": {
      "op": "b liquidatePartialAlgo_bool_merge@9"
    },
    "7433": {
      "block": "liquidatePartialAlgo_bool_false@3",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#0",
        "tmp%2#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ]
    },
    "7434": {
      "op": "b liquidatePartialAlgo_bool_merge@4"
    },
    "7437": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "getLoanStatus",
      "stack_in": [],
      "op": "proto 1 7"
    },
    "7440": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "7441": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "7443": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7444": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "7445": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7446": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7448": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7449": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "7450": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0"
      ]
    },
    "7451": {
      "op": "dup",
      "defined_out": [
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "record#0",
        "record#0 (copy)"
      ]
    },
    "7452": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralTokenId#0"
      ]
    },
    "7455": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "7457": {
      "op": "swap",
      "stack_out": [
        "record#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "7458": {
      "op": "concat",
      "stack_out": [
        "record#0",
        "tmp%0#0"
      ]
    },
    "7459": {
      "op": "box_get",
      "defined_out": [
        "collateralRecord#0",
        "maybe_exists%0#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralRecord#0",
        "maybe_exists%0#0"
      ]
    },
    "7460": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0",
        "collateralRecord#0"
      ]
    },
    "7461": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "collateralRecord#0",
        "record#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "record#0",
        "collateralRecord#0",
        "{accrueMarket}"
      ]
    },
    "7464": {
      "op": "pop",
      "stack_out": [
        "record#0",
        "collateralRecord#0"
      ]
    },
    "7465": {
      "op": "swap",
      "stack_out": [
        "collateralRecord#0",
        "record#0"
      ]
    },
    "7466": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ]
    },
    "7469": {
      "op": "dup",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "7470": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "7472": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "7473": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "7474": {
      "op": "bytec 12 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "7476": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "maybe_exists%2#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "liqBps#0",
        "maybe_exists%2#0"
      ]
    },
    "7477": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "liqBps#0"
      ]
    },
    "7478": {
      "op": "uncover 2",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "record#0"
      ]
    },
    "7480": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0"
      ]
    },
    "7483": {
      "op": "uncover 4",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralRecord#0"
      ]
    },
    "7485": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralRecord#0",
        "32"
      ]
    },
    "7487": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "7488": {
      "op": "dig 3"
    },
    "7490": {
      "op": "swap",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "debt#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralAmount#0 (copy)",
        "tmp%6#0"
      ]
    },
    "7491": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0"
      ]
    },
    "7494": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)"
      ]
    },
    "7495": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "10000"
      ]
    },
    "7496": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%7#0"
      ]
    },
    "7497": {
      "op": "dig 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "debt#0 (copy)",
        "liqBps#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%7#0",
        "debt#0 (copy)"
      ]
    },
    "7499": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0"
      ]
    },
    "7500": {
      "op": "dup",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)"
      ]
    },
    "7501": {
      "op": "dig 3",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "liqBps#0 (copy)"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "7503": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0"
      ]
    },
    "7504": {
      "op": "dig 1",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)"
      ]
    },
    "7506": {
      "op": "dig 4",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "7508": {
      "op": ">",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForBuyout#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "7509": {
      "op": "uncover 6",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0"
      ]
    },
    "7511": {
      "op": "uncover 4",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0"
      ]
    },
    "7513": {
      "op": "uncover 6",
      "stack_out": [
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0"
      ]
    },
    "7515": {
      "op": "uncover 5",
      "stack_out": [
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0"
      ]
    },
    "7517": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0"
      ]
    },
    "7519": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0"
      ]
    },
    "7521": {
      "op": "uncover 6",
      "stack_out": [
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "7523": {
      "retsub": true,
      "op": "retsub"
    },
    "7524": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "params": {
        "collateralTokenId#0": "bytes",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64"
      },
      "block": "calculateCollateralValueUSD",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "7527": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "7529": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "7531": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7532": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "7533": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7534": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "7536": {
      "error": "unknown collateral",
      "op": "assert // unknown collateral",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7537": {
      "op": "dup",
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "7538": {
      "op": "box_get",
      "defined_out": [
        "collateralInfo#0",
        "maybe_exists%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0",
        "maybe_exists%0#0"
      ]
    },
    "7539": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0"
      ]
    },
    "7540": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralInfo#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0",
        "32"
      ]
    },
    "7542": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "7543": {
      "op": "frame_dig -1",
      "defined_out": [
        "lstApp#0 (copy)",
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%2#0",
        "lstApp#0 (copy)"
      ]
    },
    "7545": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%3#0"
      ]
    },
    "7546": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7547": {
      "op": "itxn_begin"
    },
    "7548": {
      "op": "bytec 15 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "7550": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7552": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#1",
        "lstApp#0 (copy)"
      ]
    },
    "7554": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7556": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "appl"
      ]
    },
    "7558": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7560": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "1000"
      ]
    },
    "7561": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7563": {
      "op": "itxn_submit"
    },
    "7564": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0"
      ]
    },
    "7566": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "7567": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "7570": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "7571": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "7574": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "7575": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "7576": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0"
      ]
    },
    "7577": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7578": {
      "op": "itxn_begin"
    },
    "7579": {
      "op": "bytec 16 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "7581": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7583": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "lstApp#0 (copy)"
      ]
    },
    "7585": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7587": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "7589": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7591": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "7592": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "7594": {
      "op": "itxn_submit"
    },
    "7595": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "7597": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "7598": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "7601": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "awst_tmp%1#0"
      ]
    },
    "7602": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "7605": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "7606": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "7607": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0"
      ]
    },
    "7608": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "7609": {
      "op": "frame_dig -2",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateralAmount#0 (copy)",
        "tmp%0#1",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "7611": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0"
      ]
    },
    "7612": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "hC#0",
        "lC#0",
        "circulatingExternalLST#0"
      ]
    },
    "7614": {
      "op": "divw",
      "defined_out": [
        "tmp%0#1",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "underlyingCollateral#0"
      ]
    },
    "7615": {
      "op": "swap",
      "stack_out": [
        "underlyingCollateral#0",
        "tmp%0#1"
      ]
    },
    "7616": {
      "op": "box_get",
      "defined_out": [
        "lstCollateral#0",
        "maybe_exists%0#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "lstCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "7617": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "underlyingCollateral#0",
        "lstCollateral#0"
      ]
    },
    "7618": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "baseTokenId#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "baseTokenId#0"
      ]
    },
    "7621": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenPrice#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "baseTokenPrice#0"
      ]
    },
    "7624": {
      "op": "mulw",
      "defined_out": [
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "hU#0",
        "lU#0"
      ]
    },
    "7625": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "hU#0",
        "lU#0",
        "1000000"
      ]
    },
    "7627": {
      "op": "divw",
      "defined_out": [
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralUSD#0"
      ]
    },
    "7628": {
      "retsub": true,
      "op": "retsub"
    }
  }
}