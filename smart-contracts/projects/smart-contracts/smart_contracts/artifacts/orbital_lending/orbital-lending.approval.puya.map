{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/OrbitalLending.algo.ts",
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/config.algo.ts"
  ],
  "mappingsuCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAowCE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AArCC;;AAAA;AAAA;AAAA;;AAAA;AA/tCH;;;AAAA;AAAA;;AA+tCG;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AA/qCH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+qCG;;;AAAA;;AApDA;;AAAA;AAAA;AAAA;;AAAA;AA3nCH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA2nCG;;;AAAA;;AAvDA;;AAAA;AAAA;AAAA;;AAAA;AApkCH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAokCG;;;AAAA;;AAzDA;;AAAA;AAAA;AAAA;;AAAA;AA3gCH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA2gCG;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AAr8BH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAq8BG;;;AAAA;;AA1DA;;AAAA;AAAA;AAAA;;AAAA;AA34BH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AA24BG;;;AAAA;;AAbD;;AAAA;AAAA;AAAA;;AAAA;AA93BF;;;AAAA;AAAA;;AA83BE;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAlGF;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA3DG;;AAAA;AAAA;AAAA;;AAAA;AAjuBH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAiuBG;;;AAAA;;AA/FA;;AAAA;AAAA;AAAA;;AAAA;AAloBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkoBG;;;AAAA;;AApDA;;AAAA;AAAA;AAAA;;AAAA;AA9kBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8kBG;;;AAAA;;AAvCA;;AAAA;AAAA;AAAA;;AAAA;AAviBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuiBG;;;AAAA;;AA3CA;;AAAA;AAAA;AAAA;;AAAA;AA5fH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4fG;;;AAAA;;AA5EA;;AAAA;AAAA;AAAA;;AAAA;AAhbH;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgbG;;;AAAA;;AA7CD;;AAAA;AAAA;AAAA;;AAAA;AAnYF;;;AAmYE;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA1VF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA0VE;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AAjUF;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiUE;;;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAjSF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiSE;;;AAAA;;AAzDA;;AAAA;AAAA;AAAA;;AAAA;AAxOF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAwOE;;;AAAA;;AA9EC;;AAAA;AAAA;AAAA;;AAAA;AA1JH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AA0JG;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAzIH;;;AAAA;AAAA;;AAAA;;;AAAA;AAyIG;;;AAAA;;AAAD;;;AA3GA;AA6GE;;AAAA;AAC2B;;AAAA;AArI7B;AAqIE;AAAA;;AAcF;;;AAUgB;;AAtIhB;AAAA;AAAA;AAAA;AAsIS;AAAP;AAEA;;AAAA;;AAxIF;AAAA;AAAA;AAAA;AAwIE;AAAA;;;AAAA;;AAAA;;AC3MkC;;;;AD2MlC;AAAA;;;;AAAA;AA9HF;;AAmIE;;AAAA;AAhIF;;AAiIE;;AAAA;AA9HF;;AA+HE;;AAAA;AA/DF;;AAgE0C;AAAxC;AAvJF;;AAwJwB;AAAtB;AA9JF;;AA+J+B;AAA7B;AA5JF;AA6J8B;AAA5B;AAtEF;AAuEmC;AAAjC;AAjIF;;AAkIE;;AAAA;AAlJF;;AAmJE;;AAAA;AA9GF;;AA+GE;;AAAA;AA3KF;;AA4K4B;;;;;;;;;;AAA1B;AAlIF;;AAmIwB;;AAAtB;AAhIF;;AAiI4B;;;AAA1B;AA1FF;;AA2F6B;AAA3B;AApGF;;AAqG+B;AAA7B;AAhIF;;AAiI6B;;;AAA3B;AA9HF;;AA+H0B;;AAAxB;AA5HF;;AA6H0B;;;AAAxB;AA1HF;;AA2H2B;;;AAAzB;AArHF;;AAsH6B;AAA3B;AAnHF;;AAoHgC;AAA9B;AAjHF;;AAkH4B;;AAA1B;AA/GF;;AAgH4B;AAA1B;AA1GF;;AA2G+B;AAA7B;AAxGF;;AAyG8B;AAA5B;AA/EF;;AAgF6C;AAA3C;AA7EF;;AA8E+B;AAA7B;AA3EF;;AA4EmC;AAAjC;AAzEF;;AA0E0B;AAAxB;AAxEF;;AAyEwC;;AAAtC;AAxEF;;AAyEmC;AAAjC;AAnMF;AAAA;AAAA;AAAA;AAqM+B;AAA7B;;;AACE;AAE0B;;AAxM9B;AAAA;AAAA;AAAA;AAyM4C;AACvB;;;;;;;AAJjB;;;AC9OkC;;;;AD8OlC;;;;;;AA2BJ;;;AAcgB;;AAxNhB;AAAA;AAAA;AAAA;AAwNS;AAAP;AAGO;;AAAA;;;AAAqB;;AAAgB;AAAhB;AAArB;;;;AAAP;AACO;;AAAA;;;AAAsB;;AAAgB;AAAhB;AAAtB;;;;AAAP;AAEA;;AAAA;;;AACS;;AAAA;;AAAA;AAAP;AAEK;;AAAiB;AAAjB;AAAP;AAEO;;AAAA;;;AAAsC;;AAAoB;;;AAApB;AAAtC;;;;AAAP;AA7MF;;AAgNE;;AAAA;AA7MF;;AA8ME;;AAAA;AA3MF;;AA4ME;;AAAA;AAzMF;;AA0ME;;AAAA;AAvMF;;AAwME;;AAAA;AArMF;;AAsME;;AAAA;AAnMF;;AAoME;;AAAA;AAjMF;;AAkME;;AAAA;AA/LF;;AAgME;;AAAA;AAvLF;;AAwLE;;AAAA;AArLF;;AAsLE;;AAAA;AAnLF;;AAoLE;;AAAA;AA9IF;AAAA;;AAAA;AAAA;AAgJoC;AAAlC;AAhJF;;AAgJE;AAAA;AAjJF;;AAkJwC;;AAAtC;AA/MF;AAAA;;AAAA;AAAA;AAkNM;;;AAtMN;AAAA;;AAAA;AAAA;AAZA;AAAA;;AAAA;AAAA;AAkNoC;AAA9B;;;AAlNN;AAAA;;AAAA;AAAA;AAYA;;AAuMI;AAAA;;;;;;;;;;;;;;AAWJ;;;AACgB;;AApQhB;AAAA;AAAA;AAAA;AAoQS;AAAP;AACA;;AAAA;;AArQF;AAAA;AAAA;AAAA;AAqQE;AAAA;;;AAAA;;AAAA;;ACvUgC;;;;ADuUhC;AAAA;;;;AAAA;AA5RF;AAAA;AAAA;AAAA;AAmSmD;AAClC;AAEI;;AACE;;AAAA;;AAAA;AACG;;AAAA;;AAAA;AAEJ;;AACiB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;AA3ShB;AAAA;AAAA;AAAA;AA4SiB;;;AAAA;AAAA;;;;;;;AAHI;;;;;;;;;AALJ;;;;AC5UqB;;;;AD4UrB;;;AAYW;AA7S5B;;AA6SE;AAAA;;;;;;AAUF;;;AACgB;;AApShB;AAAA;AAAA;AAAA;AAoSS;AAAP;AACA;;AAAA;;AArSF;AAAA;AAAA;AAAA;AAqSE;AAAA;;;AAAA;;AAAA;;ACtWkC;;;ADsWlC;AAAA;;;;AAAA;AAI0B;;AAAA;AA7T5B;;AA6TE;AAAA;AAGA;AAE0B;;AAET;;;;;;;;;AAJjB;;;AC3WoC;;;;AD2WpC;;;;;;AAgBF;;;AACgB;;AA7ThB;AAAA;AAAA;AAAA;AA6TS;AAAP;AAjVF;AAAA;;AAAA;AAAA;AAkViC;AAAoB;;AAAA;;AAA5C;AAAP;AAEA;;AAAA;;AAhUF;AAAA;AAAA;AAAA;AAgUE;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;;AAAA;AA7UF;;AAiVE;;AAAA;;;;;;AAjVF;AAAA;;AAAA;AAAA;AAyVE;AAtVF;AAAA;AAAA;AAAA;AA8VE;AApQF;AAAA;;AAAA;AAAA;AA4QE;AASF;;;AAlWA;AAAA;;AAAA;AAAA;AAoWyB;AAAA;;AAAA;;AAAA;AAGR;AAAA;;;;;;;;;;;;;;AAAA;;;;ACzaqB;;;;ADyarB;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;;AAMK;AAApB;AAaF;;;AAtTsF;;AAAA;;AAAA;AAAA;AAwTlC;AAAA;AAAA;AAAA;;AAAA;AAEnC;AAAA;;;AAAA;AAAA;AAAQ;AAA6B;;AAAA;AAAhD;AAAJ;;;AACsD;;AAAA;AAAhB;;AAAgB;AAA9C;;AAAmB;AAGC;AAAA;;;AACP;AAAA;AAHoB;;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AAAA;AAAA;;AAeJ;;;AAzaA;AAAA;AAAA;AAAA;AA2amD;AACnC;;AArZhB;AAAA;AAAA;AAAA;AAqZS;AAAP;AACyB;;AAAA;AAAA;AAAA;;AAAlB;AAAP;AA/UoF;;AAAA;;AAAA;AAAA;AA8S9C;AAAA;;AAkC/B;AAAP;AACA;;AAAA;;AAxZF;AAAA;AAAA;AAAA;AAwZE;AAAA;;;AAAA;;AAAA;;ACxdkC;;;;ADwdlC;AAAA;;;;AAAA;AA/aF;AAAA;AAAA;AAAA;AAoboD;;AAAA;AAAA;AAG/B;;;;;;;;;;AAH+B;AAMlD;;AAAA;AAAA;;AAAA;AAnVF;AAAA;;AAAA;AAAA;AAoVkF;AAAxC;AApV1C;;AAoVE;AAAA;AACA;AAEmB;;AACO;AAET;;;;;;;;;;;AALjB;;;ACpeoC;;;;ADoepC;AAhDsC;AAAA;;AA0DtC;;;;;;AAGF;;;AA/bA;AAAA;;AAAA;AAAA;AC/CkC;AD+eF;AA7bhC;AAAA;AAAA;AAAA;AA+bmB;AAEa;;AAAA;ACnfE;ADofzB;AAAP;AAsCF;;;AArfA;AAAA;AAAA;AAAA;AAufmD;AACjD;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAKA;;AAAA;;ACriBoC;;ADqiBpC;AAAA;AA7fF;AAAA;AAAA;AAAA;;AAAA;AAaA;AAAA;AAAA;AAAA;AAyfE;;;;;AAKA;AAE0B;;AA1gB5B;AAAA;;AAAA;AAAA;AA2gByC;;;;;;;;;AAHvC;;;ACnjBoC;;;;ADmjBpC;AAjgBF;AAAA;;AAAA;AAAA;AA0gBE;AA1gBF;;AA0gBE;AAAA;AAvgBF;AAAA;AAAA;AAAA;AAwgBE;;AAAA;AAxgBF;AAwgBE;AAAA;;AAZE;;AAAS;;;;;;;;;;AAuBb;;;AAhiBA;AAAA;AAAA;AAAA;;AAAA;AAmiBE;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAIA;;AAAA;;AC/kBoC;;AD+kBpC;AAAA;AA1hBF;AAAA;AAAA;AAAA;AA+hBE;;;;;AAKA;AAE0B;;AAhjB5B;AAAA;;AAAA;AAAA;AAijByC;;;;;;;;;AAHvC;;;ACzlBoC;;;;ADylBpC;AAviBF;AAAA;;AAAA;AAAA;AAgjBE;AAhjBF;;AAgjBE;AAAA;AA7iBF;AAAA;AAAA;AAAA;AA8iBE;;AAAA;AA9iBF;AA8iBE;AAAA;;AAZE;;AAAS;;;;;;;;;;AAwBb;;;AApkBA;AAAA;;AAAA;AAAA;AA2kBiD;AAC/C;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAMA;;AAAA;;AACU;;;AADV;AAAA;AAMI;;AAAoB;;AAApB;AAAJ;;;AAjlBF;AAAA;;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AA4dmB;;AAAA;AACV;;AAAA;AAuHoC;;AAjmB7C;AAAA;AAAA;AAAA;AAimBiG;AAAxF;;AAAA;AAAA;;AAAA;AAAP;AACA;AAE0B;;AApmB5B;AAAA;AAAA;AAAA;AAqmB0C;;;;;;;;;AAHxC;;;AC1oBoC;;;;AD0oBpC;AAxlBF;AAAA;;AAAA;AAAA;AAimBE;;AAAA;AAjmBF;;AAimBE;AAAA;AA9lBF;AAAA;AAAA;AAAA;AA+lBE;AAAA;AA/lBF;AA+lBE;AAAA;;AAvJ+B;AAAA;;;;;;;;AAAA;;;;AC7fK;;;;AD6fL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;ACjgBM;;;;ADigBN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAMb;;AAAA;AACV;;AAAA;;;;;;;;AA2JT;;;;;;;AA1hBuD;;AAoiBb;;AApiBa;AAoiBL;AAAA;AAAA;;AAAA;AAEhD;;;AACuD;;AAA1B;;;AAAkC;;AACxB;AAArC;;AA4nBF;;AAAA;;AC5yCuC;;;AD4yCvC;AAAA;AAEA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAzqCoF;;AAAA;;AAAA;AA8S9C;AAAA;;AAg4BtC;AAK+B;AAAA;;;;;;;;AAAA;;;;ACzzCK;;;;ADyzCL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAKD;AAAA;;;;;;;;AAAA;;;;AC9zCM;;;;AD8zCN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAMb;;AAAA;AACX;;AAAuB;AAGvB;;AAAwB;;;AACb;ACr0CkB;;ADs0Cb;AAjwCxB;AAAA;;AAAA;AAAA;AA8mBgC;ACprBE;ADorBH;AAAvB;AAAA;;AA9hBR;;AA+hBE;;AAAA;AAhpBF;AAAA;AAAA;AAAA;AAipBuC;;;AAA/B;AAAA;;AAwpBW;;AAAA;AC70CkB;;AD80CV;AAAnB;AAAA;;AAtrCR;;AAyrCE;;AAAA;AACwB;AAAA;AAvrC1B;;AAurCE;AAAA;AAEO;AAAP;AAzwCF;AAAA;;AAAA;AAAA;AA+wCuB;;AAAA;AC31CW;AD21CZ;AACd;;AAAA;;AAAuB;AAAvB;AAAA;;AAAA;;AAvyCR;AAAA;;AAAA;AAAA;AAyyCE;AAzyCF;;AAyyCE;AAAA;AA3sCF;;AA4sCE;AAAA;AArqBA;;AAAA;;;AAEW;;AAirBL;AAAe;;;AACT;;;AAGwB;AAAV;;AAAU;AAAnB;;AAAA;ACh3CkB;;ADi3ChB;AAKb;;AAA4B;AAC3B;;AAAA;AAAP;AAG8D;AAAjB;;AAAiB;AAAxD;;AAA0B;AAEoB;;AAAV;;AAAU;AAA9C;;AAAA;AAAA;;AAAuB;AAjwC/B;AAAA;;AAAA;AAAA;AAkwC6B;;AAAA;AAlwC7B;;AAkwCE;AAAA;AAIY;AAAA;AACsB;;AAAnB;AAFb;AAGc;;AAHd;AAAA;AAAA;AAMa;;AAAA;;;AAPf;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAWA;;AAAA;;AAAA;;;AAnsB0B;;AAnqB5B;AAAA;AAAA;AAAA;AAy2C+B;AAA7B;;;AACE;;;;;;;AAAA;;;ACl5CkC;;;;ADk5ClC;AAnxCJ;AAAA;;AAAA;AAAA;AA6kB6B;;AAAA;AA7kB7B;;AA6kBE;AAAA;;AA8sBE;AAl3CJ;AAAA;AAAA;AAAA;AAq3C4C;;;;;;;;;AAHxC;;;AC15CkC;;;;AD05ClC;;;;AAltB4D;;AAkB1C;;AAAA;AAER;;AAAA;AACsB;;AAAnB;AAFG;;AAGF;;AAHE;AAAA;AAAA;AAnrBpB;AAAA;AAAA;AAAA;AA0rB6C;;AC5tBD;;;;AD4tBN;AAAZ;AAXO;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9kBsB;;AAAA;;AAAA;AA2lBrD;AAAA;AAxlBF;AAAA;AAAA;AAAA;AAylBoE;AAAjC;AAzlBnC;AAylBE;AAAA;;;;;;;;;;;;;;;AAGF;;;AAUsB;;AAAA;AAEP;;AAAA;AA5sBf;AAAA;AAAA;AAAA;AA8sB6C;;AAAnB;AAPO;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtmBsB;;AAAA;;AAAA;AA+mBrD;AAAA;;;;AAUF;;;AAznBuD;;AAAA;;AAAA;AA2nBrB;AAAA;AAAA;;AAAhC;AACmD;AAAA;AAEvC;;;AAIN;;AAAA;;;AACU;;AAAV;;AAAU;AACI;;AAAA;;;AAEiB;;AAAjB;;AAAiB;AALrC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AArtBF;AAAA;AAAA;AAAA;AA4tBiD;AAAP;AAAO;AAA/C;AA5tBF;AA4tBE;AAAA;;AA4CJ;;;;;;;AAxwBE;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA0EA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAvCA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAisBA;;;AAAoB;;;AA/qBpB;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA0tBA;;;;;;;AA9sBA;AAAA;;AAAA;AAAA;AA0tBU;;;AA3vBV;AAAA;;AAAA;AAAA;AAMA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA4sBI;;AAAA;AAAJ;;;AACqB;;AAAA;;AAAA;AACF;;AAAA;AAAX;AAAN;;AA3sBF;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AAotBI;;;AAAc;;AAAA;AAAA;;AAAA;;;;AAAd;;;;;;;;;;;AA3sBJ;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AAyuBA;;;AAtuBA;AAAA;;AAAA;AAAA;AAuuB0B;;;AAlwB1B;AAAA;;AAAA;AAAA;;;AAqwBqB;;AAAA;;AAAA;AAAA;;;AAAoB;;AAAA;;AAAA;;;AACjC;;AAAA;;AAAa;AAAb;;AACF;;AAAA;;AAAA;AAAJ;;;;;;;AACI;;AAAA;;AAAA;AAAJ;;;;;;;;;;;;;AA7uBF;;AAgvBA;;AAAA;AACA;;AAAA;AAP6D;;;;;;AA1uB7D;AAAA;;AAAA;AAAA;;;;;;AAisBQ;;AAAA;;AAAA;AAAA;;AAAe;AC9yBW;AD+yB1B;;AAAgB;AACH;;AAAA;;AAAA;AACb;;AAAA;;AAAA;AAAwB;;AAAA;;AAAA;AAAxB;AAAN;;;;;AA/tBF;AAAA;;AAAA;AAAA;;;;;;AA8BA;AAAA;;AAAA;AAAA;AChHkC;ADq0B1B;;AAAA;AAAA;;AAAmB;AACN;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACV;;AAAA;;ACx0BuB;ADw0BvB;AAA+B;;ACx0BR;ADw0BQ;AAA/B;AAAT;AAAA;;AAxtBF;;AAytBE;AAAA;;;;AAhDqB;;AAAA;;AAAA;ACzxBW;AD0xBhB;AAAZ;AAAA;;AACN;;;AAA4B;;;AAiCN;;;AA/BN;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AC7xBkB;AD8xBf;AACZ;;AAAA;;;AA6Be;;;AAqCtB;;;AACqB;;AAAb;AACA;;AAAc;;AAAqB;AAAnC;AAAA;;AAEF;AAAJ;;;AAIoC;;AAAnB;AAFL;;;;;;;;;;;AAAA;AAAA;AAKU;;AAAA;;;AANb;AAAP;;AAAA;;AAAA;;AAAA;AASI;;AAAA;;AAAiB;AACjB;;AAA2B;;AAAU;AAGnB;;;AAGL;;AAAA;ACt3Ba;ADw3BL;AAER;;AAAA;ACr3BiB;;;;;ADu3BX;AA7yB3B;AAAA;;AAAA;AAAA;AC/EkC;AD+3B1B;AAAuB;AAGN;;AAAA;ACl4BS;ADm4BE;AAG5B;AAA2B;AAp1BnC;AAAA;AAAA;AAAA;AAw1BE;;AAAA;AAx1BF;AAw1BE;AAAA;AAr1BF;AAAA;;AAAA;AAAA;AAu1BE;AAv1BF;;AAu1BE;AAAA;AAIM;AAAA;;AAAuB;AAIjB;AAAA;AACsB;;AAAnB;AAFL;AAGM;;;AAHN;AAAA;AAAA;AAKG;AAAA;AANN;AAAP;;AAAA;;AAAA;;AAAA;AAUF;;;AAtxBuD;;AAAA;;AAAA;AAuxBZ;AAAA;AAAzC;AAYF;;;;;AAp4BA;AAAA;AAAA;AAAA;AA04BmD;AACjD;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAM6C;;AAA1B;;;AACP;;;AAAA;AAGkB;;AAAU;AAAjC;;AAAA;;AAAA;AAAP;AACM;;AAAwB;AAAxB;AAAA;;AA/zBR;AAAA;;AAAA;AAAA;AAg0B6B;;AAAA;AAh0B7B;;AAg0BE;AAAA;AAEA;;;AAxzBqD;;AA0zB3B;;AA1zB2B;AA0zBnB;;AAvzBpC;AAAA;AAAA;AAAA;AAwzBsE;AAAjC;AAxzBrC;AAwzBI;AAAA;AAEA;AAE0B;;AACkB;AAAA;AAAlB;;AAAkB;AACC;AAAjB;;AAAiB;;;;;;;AAJ7C;;;AAAA;;;AAAA;;AAWY;;AAAA;AACsB;;AAAnB;AAFb;AAGc;;;AAHd;AAAA;AAAA;AAMW;AAAA;AAAA;;;AACJ;;AACqB;;AAAjB;;AAAiB;AAT9B;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;;;AAuBJ;;;;;AA97BA;AAAA;AAAA;AAAA;;AAAA;AAi8BE;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAK6C;;AAA1B;;;AACP;;;AAAA;AAEkB;;AAAU;AAAjC;;AAAA;;AAAA;AAAP;AACM;;AAAwB;AAAxB;AAAA;;AAn3BR;AAAA;;AAAA;AAAA;AAo3B6B;;AAAA;AAp3B7B;;AAo3BE;AAAA;AAEA;;;AA52BqD;;AA82B3B;;AA92B2B;AA82BnB;;AA32BpC;AAAA;AAAA;AAAA;AA42BsE;AAAjC;AA52BrC;AA42BI;AAAA;AAEA;AAE0B;;AACkB;AAAA;AAAlB;;AAAkB;AACC;AAAjB;;AAAiB;;;;;;;AAJ7C;;;AAAA;;;AAAA;;AAWY;;AAAA;AACsB;;AAAnB;AAFb;AAGc;;;AAHd;AAAA;AAAA;AAMW;AAAA;AAAA;;;AACJ;;AACqB;;AAAjB;;AAAiB;AAT9B;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;;;AAqBY;;AAz9BhB;AAAA;AAAA;AAAA;AAy9BS;AAAP;AACA;AA19BF;AAAA;AAAA;AAAA;AAvBA;AAAA;AAAA;AAAA;AAo/B0C;AAp+B1C;AAAA;;AAAA;AAAA;;;;;;;AAi+BE;;;AAAA;;;AAAA;AAj+BF;;AAw+BwB;AAAtB;;AAYF;;;AAn6BuD;;AAAA;;AAAA;AAAA;;AAq6BrB;AAAA;;AAAhC;AACmD;AAAA;AAAA;AACnD;AAAA;;AAAA;AAEM;AAAqC;;AAAiB;AAAtD;AAAA;;AACA;AAA+B;;AAAU;AACoC;AAAlB;;AAAkB;AAAhD;AAAA;AAAA;;AA96BiD;;AAAA;;AAAA;AAmT9C;AAAA;AA8nBZ;;AAAgB;AAAA;AAAA;;AAAnC;;AAAA;AAAP;AAG4B;;;AACX;;AAAA;AAC0B;AAAb;AACxB;AAAA;;AAAa;AAj/BrB;AAAA;;AAAA;AAAA;AAk/BS;;AAAA;AAAP;AAEkC;AAAL;AAp/B/B;AAAA;;AAAA;AAAA;AAo/B8B;AAA8C;AAA9C;AACmC;AAAd;AAAJ;AAAA;AAAjB;AAE5B;;AAAA;;AA3hCF;AAAA;AAAA;AAAA;AA4hC8C;AAD5C;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AASyB;;AAAA;;AAh8B3B;AAAA;AAAA;AAAA;AAi8BoE;AAAjC;AAj8BnC;AAi8BE;AAAA;AAGA;AAGiC;;AAAA;AAAA;;;;;;;;;;;;;;AAHjC;;;AAAA;;;AAAA;AAQM;;AAAA;AAAmB;AACzB;;;;;;;;AAYF;;;AA59BuD;;AAAA;;AAAA;AAAA;;AA89BrB;AAAA;;AAAhC;AACmD;AAAA;AAAA;AACnD;AAAA;;AAAA;AAEM;AAAqC;;AAAiB;AAAtD;AAAA;;AACA;AAA+B;;AAAU;AACoC;AAAlB;;AAAkB;AAAhD;AAAA;AAAA;;AAv+BiD;;AAAA;;AAAA;AAmT9C;AAAA;AAurBZ;;AAAgB;AAAA;AAAA;;AAAnC;;AAAA;AAAP;AAG4B;;;AACX;;AAAA;AAC0B;AAAb;AACxB;AAAA;;AAAa;AA1iCrB;AAAA;;AAAA;AAAA;AA2iCS;;AAAA;AAAP;AAEkC;AAAL;AA7iC/B;AAAA;;AAAA;AAAA;AA6iC8B;AAA8C;AAA9C;AACmC;AAAd;AAAJ;AAAA;AAAjB;AAE5B;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAQyB;;AAAA;;AAx/B3B;AAAA;AAAA;AAAA;AAy/BoE;AAAjC;AAz/BnC;AAy/BE;AAAA;AAGA;AAGiC;;AAAA;AAAA;;;;;;;;;;;;;;AAHjC;;;AAAA;;;AAAA;AAQM;;AAAA;AAAmB;AACzB;;;;;;;;AAWF;;;AAnhCuD;;AAAA;;AAAA;AAAA;;AAqhCrB;AAAA;;AAAhC;AAEwC;AAAA;AAAA;AAAA;;AAAA;AAClC;AAA0B;;AAAiB;AAA3C;AAAA;;AACA;AAAoB;;AAAU;AAA9B;AAAA;;AAAA;;AAC2B;;;AAA3B;AAAA;;AA7hC8E;;AAAA;;AAAA;AAmT9C;AAAA;AAAA;;AAAA;AA6uBlB;;;AACL;AACkB;AAAX;AAEhB;AAAa;AA9lCrB;AAAA;;AAAA;AAAA;AA+lCS;AAAP;AAGA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAtoCF;AAAA;AAAA;AAAA;AAwoC8C;AAF5C;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AASyB;;AAAA;;AA3iC3B;AAAA;AAAA;AAAA;AA4iCoE;AAAjC;AA5iCnC;AA4iCE;AAAA;AAGA;AAE0B;;AACO;;AA3BA;;AA2BA;;;;;;;;;;;;AAHjC;;;AAAA;;;AAAA;AAS4D;;AAAhB;;AAAgB;AAAtD;AAAmB;AACzB;;AAAA;AAAA;;;;;;;;AAWF;;;AAvkCuD;;AAAA;;AAAA;AAAA;;AAykCrB;AAAA;;AAAhC;AAEwC;AAAA;AAAA;AAAA;;AAAA;AAClC;AAA0B;;AAAiB;AAA3C;AAAA;;AACA;AAAoB;;AAAU;AAA9B;AAAA;;AAAA;;AAC2B;;;AAA3B;AAAA;;AAjlC8E;;AAAA;;AAAA;AAmT9C;AAAA;AAAA;;AAAA;AAiyBlB;;;AACL;AACkB;AAAX;AAEhB;AAAa;AAlpCrB;AAAA;;AAAA;AAAA;AAmpCS;AAAP;AAGA;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAMyB;;AAAA;;AA5lC3B;AAAA;AAAA;AAAA;AA6lCoE;AAAjC;AA7lCnC;AA6lCE;AAAA;AAGA;AAE0B;;AACO;;AAxBA;;AAwBA;;;;;;;;;;;;AAHjC;;;AAAA;;;AAAA;AAS4D;;AAAhB;;AAAgB;AAAtD;AAAmB;AACzB;;AAAA;AAAA;;;;;;;;AAUF;;;AAvnCuD;;AAAA;;AAAA;AAioCnB;AAAA;AAAA;;AAAlC;AAC0C;AAAA;AAC9B;;;AAEN;AAAmB;;AAAU;AAC7B;;AAAkC;;AAAiB;AAnsC3D;AAAA;;AAAA;AAAA;AAssCiD;;AAAA;;;AAA3B;;;AACH;;AAAA;AACuB;AAAb;AAEP;ACnxCY;ADmxCZ;AAAd;;AAAa;AACb;AAAA;;AAAyB;AACzB;;AAAA;;AAAoB;AAE1B;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 10000 4 1000 1000000"
    },
    "13": {
      "op": "bytecblock \"base_token_id\" \"total_deposits\" \"active_loan_records\" \"admin_account\" 0x151f7c75 \"loan_record\" \"circulating_lst\" \"total_borrows\" \"liq_threshold_bps\" \"fee_pool\" \"lst_token_id\" \"accepted_collaterals\" \"max_apr_bps\" \"prev_apr_bps\" \"base_bps\" 0x00 \"accepted_collaterals_count\" 0x09ef525f 0xae859f3b \"util_cap_bps\" \"rate_model_type\" \"kink_norm_bps\" \"slope1_bps\" \"slope2_bps\" \"ema_alpha_bps\" \"max_apr_step_bps\" \"util_ema_bps\" \"params_update_nonce\" \"ltv_bps\" \"origination_fee_bps\" \"protocol_share_bps\" \"oracle_app\" \"borrow_gate_enabled\" \"power_gamma_q16\" \"scarcity_K_bps\" \"last_scaled_down_disbursement\" \"last_max_borrow\" \"last_requested_loan\" \"debug_diff\" \"params_updated_at\""
    },
    "592": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "594": {
      "op": "bz main_after_if_else@33",
      "stack_out": []
    },
    "597": {
      "op": "pushbytess 0x3b01665e 0x9de42732 0x6ca100cd 0x17c33662 0x5efce39a 0x5cac25a9 // method \"createApplication(account,uint64)void\", method \"initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void\", method \"setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void\", method \"generateLSTToken(pay)void\", method \"optInToLST(uint64,pay)void\", method \"configureLSTToken(axfer,uint64)void\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)"
      ]
    },
    "629": {
      "op": "bytec 17 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "631": {
      "op": "bytec 18 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "633": {
      "op": "pushbytess 0x6c6337c0 0xe596ac73 0x53b5111f 0x72c5c57b 0xbae4c238 0x3e41a49b 0x15a5b25e 0x8553cffa 0xb4a74766 0xae99f45b 0xbe1256e6 0xb95560e0 0x96da416e 0x1dffadde 0xf0eda6a8 0x836dbb73 0xf16507ce 0xdaa7f7f2 0x3172ca9d // method \"getAcceptedCollateralsCount()uint64\", method \"getOraclePrice(uint64)uint64\", method \"addNewCollateralType(uint64,pay)void\", method \"depositASA(axfer,uint64,pay)void\", method \"depositAlgo(pay,uint64,pay)void\", method \"withdrawDeposit(axfer,uint64,uint64,pay)void\", method \"borrow(axfer,uint64,uint64,uint64,uint64,pay)void\", method \"accrueLoanInterest(account,account)void\", method \"current_apr_bps()uint64\", method \"getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)\", method \"repayLoanASA(axfer,uint64,account)void\", method \"repayLoanAlgo(pay,uint64,account)void\", method \"withdrawFees()void\", method \"buyoutASA(account,account,axfer)void\", method \"buyoutAlgo(account,account,pay)void\", method \"liquidateASA(account,axfer)void\", method \"liquidateAlgo(account,pay)void\", method \"getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)\", method \"gas()void\"",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addNewCollateralType(uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutASA(account,account,axfer)void)",
        "Method(buyoutAlgo(account,account,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanASA(axfer,uint64,account)void)",
        "Method(repayLoanAlgo(pay,uint64,account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawFees()void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,pay)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanASA(axfer,uint64,account)void)",
        "Method(repayLoanAlgo(pay,uint64,account)void)",
        "Method(withdrawFees()void)",
        "Method(buyoutASA(account,account,axfer)void)",
        "Method(buyoutAlgo(account,account,pay)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)"
      ]
    },
    "730": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addNewCollateralType(uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutASA(account,account,axfer)void)",
        "Method(buyoutAlgo(account,account,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanASA(axfer,uint64,account)void)",
        "Method(repayLoanAlgo(pay,uint64,account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawFees()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,pay)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanASA(axfer,uint64,account)void)",
        "Method(repayLoanAlgo(pay,uint64,account)void)",
        "Method(withdrawFees()void)",
        "Method(buyoutASA(account,account,axfer)void)",
        "Method(buyoutAlgo(account,account,pay)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "tmp%2#0"
      ]
    },
    "733": {
      "op": "match main_createApplication_route@3 main_initApplication_route@4 main_setRateParams_route@5 main_generateLSTToken_route@6 main_optInToLST_route@7 main_configureLSTToken_route@8 main_getCirculatingLST_route@9 main_getTotalDeposits_route@10 main_getAcceptedCollateralsCount_route@11 main_getOraclePrice_route@12 main_addNewCollateralType_route@13 main_depositASA_route@14 main_depositAlgo_route@15 main_withdrawDeposit_route@16 main_borrow_route@17 main_accrueLoanInterest_route@18 main_current_apr_bps_route@19 main_getLoanRecord_route@20 main_repayLoanASA_route@21 main_repayLoanAlgo_route@22 main_withdrawFees_route@23 main_buyoutASA_route@24 main_buyoutAlgo_route@25 main_liquidateASA_route@26 main_liquidateAlgo_route@27 main_getLoanStatus_route@28 main_gas_route@29",
      "stack_out": []
    },
    "789": {
      "block": "main_after_if_else@33",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "790": {
      "op": "return",
      "stack_out": []
    },
    "791": {
      "block": "main_gas_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0"
      ]
    },
    "793": {
      "op": "!",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "794": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "795": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0"
      ]
    },
    "797": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "798": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "799": {
      "op": "return",
      "stack_out": []
    },
    "800": {
      "block": "main_getLoanStatus_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%184#0"
      ]
    },
    "802": {
      "op": "!",
      "defined_out": [
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0"
      ]
    },
    "803": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "804": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%186#0"
      ],
      "stack_out": [
        "tmp%186#0"
      ]
    },
    "806": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "807": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%13#0"
      ]
    },
    "810": {
      "op": "btoi",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "811": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%189#0"
      ]
    },
    "813": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus",
      "op": "callsub getLoanStatus",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ]
    },
    "816": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%0#0"
      ]
    },
    "818": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0"
      ]
    },
    "819": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "elements_to_encode%1#0"
      ]
    },
    "821": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "822": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "elements_to_encode%2#0"
      ]
    },
    "824": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "825": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%3#0"
      ]
    },
    "827": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "828": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "elements_to_encode%4#0"
      ]
    },
    "830": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "831": {
      "op": "bytec 15 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0x00"
      ]
    },
    "833": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0x00",
        "0"
      ]
    },
    "834": {
      "op": "uncover 8",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0x00",
        "0",
        "elements_to_encode%5#0"
      ]
    },
    "836": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%6#0",
        "encoded_bool%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0"
      ]
    },
    "837": {
      "op": "bytec 15 // 0x00",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "839": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "0x00",
        "0"
      ]
    },
    "840": {
      "op": "uncover 8",
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "0x00",
        "0",
        "elements_to_encode%6#0"
      ]
    },
    "842": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "843": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%5#0"
      ]
    },
    "845": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "847": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "848": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%7#0"
      ]
    },
    "850": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "851": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%8#0"
      ]
    },
    "853": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "854": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%9#0"
      ]
    },
    "856": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "857": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_bool%0#0"
      ]
    },
    "859": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "860": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0"
      ]
    },
    "861": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "862": {
      "op": "getbit",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ]
    },
    "863": {
      "op": "pushint 321 // 321"
    },
    "866": {
      "op": "swap",
      "defined_out": [
        "321",
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "321",
        "is_true%0#0"
      ]
    },
    "867": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "868": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "0x151f7c75"
      ]
    },
    "870": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "871": {
      "op": "concat",
      "defined_out": [
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%190#0"
      ]
    },
    "872": {
      "op": "log",
      "stack_out": []
    },
    "873": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "874": {
      "op": "return",
      "stack_out": []
    },
    "875": {
      "block": "main_liquidateAlgo_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "877": {
      "op": "!",
      "defined_out": [
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%178#0"
      ]
    },
    "878": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "879": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%179#0"
      ]
    },
    "881": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "882": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%12#0"
      ]
    },
    "885": {
      "op": "btoi",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "886": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "888": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%182#0",
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "tmp%183#0"
      ]
    },
    "890": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%182#0",
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "tmp%183#0",
        "1"
      ]
    },
    "891": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%18#0",
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "gtxn_idx%18#0"
      ]
    },
    "892": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)",
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)"
      ]
    },
    "893": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ]
    },
    "895": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "pay",
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "pay"
      ]
    },
    "896": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0",
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0"
      ]
    },
    "897": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%182#0",
        "gtxn_idx%18#0"
      ]
    },
    "898": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateAlgo",
      "op": "callsub liquidateAlgo",
      "stack_out": []
    },
    "901": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "902": {
      "op": "return",
      "stack_out": []
    },
    "903": {
      "block": "main_liquidateASA_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "905": {
      "op": "!",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "906": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "907": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "909": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "910": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%11#0"
      ]
    },
    "913": {
      "op": "btoi",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "914": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "916": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%175#0",
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "tmp%176#0"
      ]
    },
    "918": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%175#0",
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "tmp%176#0",
        "1"
      ]
    },
    "919": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%17#0",
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "gtxn_idx%17#0"
      ]
    },
    "920": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)",
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)"
      ]
    },
    "921": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0"
      ]
    },
    "923": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "axfer"
      ]
    },
    "924": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0",
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0"
      ]
    },
    "925": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%175#0",
        "gtxn_idx%17#0"
      ]
    },
    "926": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateASA",
      "op": "callsub liquidateASA",
      "stack_out": []
    },
    "929": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "930": {
      "op": "return",
      "stack_out": []
    },
    "931": {
      "block": "main_buyoutAlgo_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "933": {
      "op": "!",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "934": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "935": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "937": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "938": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "941": {
      "op": "btoi",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "942": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "944": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%10#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "947": {
      "op": "btoi",
      "defined_out": [
        "tmp%166#0",
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%167#0"
      ]
    },
    "948": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0"
      ]
    },
    "950": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%166#0",
        "tmp%168#0",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "tmp%169#0"
      ]
    },
    "952": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%166#0",
        "tmp%168#0",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "tmp%169#0",
        "1"
      ]
    },
    "953": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%16#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%16#0"
      ]
    },
    "954": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)"
      ]
    },
    "955": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0"
      ]
    },
    "957": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "pay",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "pay"
      ]
    },
    "958": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0"
      ]
    },
    "959": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%16#0"
      ]
    },
    "960": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutAlgo",
      "op": "callsub buyoutAlgo",
      "stack_out": []
    },
    "963": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "964": {
      "op": "return",
      "stack_out": []
    },
    "965": {
      "block": "main_buyoutASA_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "967": {
      "op": "!",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "968": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "969": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "971": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "972": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "975": {
      "op": "btoi",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "976": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "978": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%8#0",
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "981": {
      "op": "btoi",
      "defined_out": [
        "tmp%157#0",
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%158#0"
      ]
    },
    "982": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%157#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0"
      ]
    },
    "984": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%157#0",
        "tmp%159#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "tmp%160#0"
      ]
    },
    "986": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%157#0",
        "tmp%159#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "tmp%160#0",
        "1"
      ]
    },
    "987": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%15#0",
        "tmp%157#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "gtxn_idx%15#0"
      ]
    },
    "988": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)",
        "tmp%157#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)"
      ]
    },
    "989": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "tmp%157#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0"
      ]
    },
    "991": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "tmp%157#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "axfer"
      ]
    },
    "992": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0",
        "tmp%157#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0"
      ]
    },
    "993": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "gtxn_idx%15#0"
      ]
    },
    "994": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutASA",
      "op": "callsub buyoutASA",
      "stack_out": []
    },
    "997": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "998": {
      "op": "return",
      "stack_out": []
    },
    "999": {
      "block": "main_withdrawFees_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "1001": {
      "op": "!",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "1002": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1003": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "1005": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1006": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawFees",
      "op": "callsub withdrawFees"
    },
    "1009": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1010": {
      "op": "return",
      "stack_out": []
    },
    "1011": {
      "block": "main_repayLoanAlgo_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "1013": {
      "op": "!",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "1014": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1015": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "1017": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1018": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "1020": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0",
        "1"
      ]
    },
    "1021": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0"
      ]
    },
    "1022": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)"
      ]
    },
    "1023": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0"
      ]
    },
    "1025": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "pay"
      ]
    },
    "1026": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0"
      ]
    },
    "1027": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%14#0"
      ]
    },
    "1028": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%31#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%31#0"
      ]
    },
    "1031": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%14#0",
        "tmp%145#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "tmp%145#0"
      ]
    },
    "1032": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%14#0",
        "reinterpret_bytes[1]%6#0",
        "tmp%145#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "tmp%145#0",
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "1035": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%14#0",
        "tmp%145#0",
        "tmp%146#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "tmp%145#0",
        "tmp%146#0"
      ]
    },
    "1036": {
      "op": "txnas Accounts",
      "defined_out": [
        "gtxn_idx%14#0",
        "tmp%145#0",
        "tmp%147#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "tmp%145#0",
        "tmp%147#0"
      ]
    },
    "1038": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo",
      "op": "callsub repayLoanAlgo",
      "stack_out": []
    },
    "1041": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1042": {
      "op": "return",
      "stack_out": []
    },
    "1043": {
      "block": "main_repayLoanASA_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "1045": {
      "op": "!",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "1046": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1047": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "1049": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1050": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "1052": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0",
        "1"
      ]
    },
    "1053": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0"
      ]
    },
    "1054": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)"
      ]
    },
    "1055": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ]
    },
    "1057": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "axfer"
      ]
    },
    "1058": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0"
      ]
    },
    "1059": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%13#0"
      ]
    },
    "1060": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%13#0",
        "reinterpret_bytes[8]%30#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "reinterpret_bytes[8]%30#0"
      ]
    },
    "1063": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%137#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "tmp%137#0"
      ]
    },
    "1064": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%13#0",
        "reinterpret_bytes[1]%5#0",
        "tmp%137#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "tmp%137#0",
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "1067": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%137#0",
        "tmp%138#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "tmp%137#0",
        "tmp%138#0"
      ]
    },
    "1068": {
      "op": "txnas Accounts",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%137#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "tmp%137#0",
        "tmp%139#0"
      ]
    },
    "1070": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanASA",
      "op": "callsub repayLoanASA",
      "stack_out": []
    },
    "1073": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1074": {
      "op": "return",
      "stack_out": []
    },
    "1075": {
      "block": "main_getLoanRecord_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "1077": {
      "op": "!",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "1078": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1079": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "1081": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1082": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "1085": {
      "op": "btoi",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "1086": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "1088": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "1091": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0",
        "0x151f7c75"
      ]
    },
    "1093": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%130#0"
      ]
    },
    "1094": {
      "op": "concat",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "1095": {
      "op": "log",
      "stack_out": []
    },
    "1096": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1097": {
      "op": "return",
      "stack_out": []
    },
    "1098": {
      "block": "main_current_apr_bps_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "1100": {
      "op": "!",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "1101": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1102": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "1104": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1105": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "1108": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "1109": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "1111": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "1112": {
      "op": "concat",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "1113": {
      "op": "log",
      "stack_out": []
    },
    "1114": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1115": {
      "op": "return",
      "stack_out": []
    },
    "1116": {
      "block": "main_accrueLoanInterest_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "1118": {
      "op": "!",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "1119": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1120": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "1122": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1123": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "1126": {
      "op": "btoi",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "1127": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "1129": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "1132": {
      "op": "btoi",
      "defined_out": [
        "tmp%116#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "tmp%117#0"
      ]
    },
    "1133": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%116#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "tmp%118#0"
      ]
    },
    "1135": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest",
      "op": "callsub accrueLoanInterest",
      "stack_out": []
    },
    "1138": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1139": {
      "op": "return",
      "stack_out": []
    },
    "1140": {
      "block": "main_borrow_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "1142": {
      "op": "!",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "1143": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1144": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "1146": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1147": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "1149": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0",
        "2"
      ]
    },
    "1151": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1152": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ]
    },
    "1153": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ]
    },
    "1155": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0",
        "axfer"
      ]
    },
    "1156": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ]
    },
    "1157": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1158": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%26#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%26#0"
      ]
    },
    "1161": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0"
      ]
    },
    "1162": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%27#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "reinterpret_bytes[8]%27#0"
      ]
    },
    "1165": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0"
      ]
    },
    "1166": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%107#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "reinterpret_bytes[8]%28#0"
      ]
    },
    "1169": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ]
    },
    "1170": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%29#0"
      ]
    },
    "1173": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%110#0"
      ]
    },
    "1175": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%110#0",
        "1"
      ]
    },
    "1176": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%29#0",
        "gtxn_idx%12#0"
      ]
    },
    "1177": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)",
        "reinterpret_bytes[8]%29#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%29#0",
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)"
      ]
    },
    "1178": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%29#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0"
      ]
    },
    "1180": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay",
        "reinterpret_bytes[8]%29#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%29#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay"
      ]
    },
    "1181": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%29#0",
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0"
      ]
    },
    "1182": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%29#0",
        "gtxn_idx%12#0"
      ]
    },
    "1183": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow",
      "op": "callsub borrow",
      "stack_out": []
    },
    "1186": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1187": {
      "op": "return",
      "stack_out": []
    },
    "1188": {
      "block": "main_withdrawDeposit_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "1190": {
      "op": "!",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "1191": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1192": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "1194": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1195": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "1197": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "2"
      ]
    },
    "1199": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1200": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ]
    },
    "1201": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ]
    },
    "1203": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0",
        "axfer"
      ]
    },
    "1204": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ]
    },
    "1205": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1206": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%24#0"
      ]
    },
    "1209": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0"
      ]
    },
    "1210": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "reinterpret_bytes[8]%25#0"
      ]
    },
    "1213": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0"
      ]
    },
    "1214": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0"
      ]
    },
    "1216": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "1"
      ]
    },
    "1217": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "gtxn_idx%10#0"
      ]
    },
    "1218": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)",
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)"
      ]
    },
    "1219": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0"
      ]
    },
    "1221": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "pay",
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0",
        "pay"
      ]
    },
    "1222": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type_matches%10#0",
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "gtxn_idx%10#0",
        "gtxn_type_matches%10#0"
      ]
    },
    "1223": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "gtxn_idx%10#0"
      ]
    },
    "1224": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit",
      "op": "callsub withdrawDeposit",
      "stack_out": []
    },
    "1227": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1228": {
      "op": "return",
      "stack_out": []
    },
    "1229": {
      "block": "main_depositAlgo_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "1231": {
      "op": "!",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "1232": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1233": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "1235": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1236": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "1238": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0",
        "2"
      ]
    },
    "1240": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1241": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ]
    },
    "1242": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ]
    },
    "1244": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "pay"
      ]
    },
    "1245": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ]
    },
    "1246": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1247": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%23#0"
      ]
    },
    "1250": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0"
      ]
    },
    "1251": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0"
      ]
    },
    "1253": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0",
        "1"
      ]
    },
    "1254": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "gtxn_idx%8#0"
      ]
    },
    "1255": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)"
      ]
    },
    "1256": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0"
      ]
    },
    "1258": {
      "op": "intc_1 // pay",
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "pay"
      ]
    },
    "1259": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0"
      ]
    },
    "1260": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "gtxn_idx%8#0"
      ]
    },
    "1261": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo",
      "op": "callsub depositAlgo",
      "stack_out": []
    },
    "1264": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1265": {
      "op": "return",
      "stack_out": []
    },
    "1266": {
      "block": "main_depositASA_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "1268": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "1269": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1270": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "1272": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1273": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "1275": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "2"
      ]
    },
    "1277": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1278": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ]
    },
    "1279": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ]
    },
    "1281": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "axfer"
      ]
    },
    "1282": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ]
    },
    "1283": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1284": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%22#0"
      ]
    },
    "1287": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0"
      ]
    },
    "1288": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "tmp%86#0"
      ]
    },
    "1290": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%5#0",
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "tmp%86#0",
        "1"
      ]
    },
    "1291": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0"
      ]
    },
    "1292": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)"
      ]
    },
    "1293": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0"
      ]
    },
    "1295": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay"
      ]
    },
    "1296": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0"
      ]
    },
    "1297": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0"
      ]
    },
    "1298": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositASA",
      "op": "callsub depositASA",
      "stack_out": []
    },
    "1301": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1302": {
      "op": "return",
      "stack_out": []
    },
    "1303": {
      "block": "main_addNewCollateralType_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1305": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "1306": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1307": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "1309": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1310": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0"
      ]
    },
    "1313": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[8]%21#0",
        "tmp%79#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "tmp%79#0"
      ]
    },
    "1315": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[8]%21#0",
        "tmp%79#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "tmp%79#0",
        "1"
      ]
    },
    "1316": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "gtxn_idx%4#0"
      ]
    },
    "1317": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)",
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "1318": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "1320": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay",
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "1321": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0",
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "1322": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "gtxn_idx%4#0"
      ]
    },
    "1323": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType",
      "op": "callsub addNewCollateralType",
      "stack_out": []
    },
    "1326": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1327": {
      "op": "return",
      "stack_out": []
    },
    "1328": {
      "block": "main_getOraclePrice_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1330": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1331": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1332": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "1334": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1335": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%20#0"
      ]
    },
    "1338": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "1341": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "1342": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "1344": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "1345": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1346": {
      "op": "log",
      "stack_out": []
    },
    "1347": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1348": {
      "op": "return",
      "stack_out": []
    },
    "1349": {
      "block": "main_getAcceptedCollateralsCount_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1351": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1352": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1353": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "1355": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1356": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "op": "callsub getAcceptedCollateralsCount",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "1359": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "1360": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "1362": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "1363": {
      "op": "concat",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "1364": {
      "op": "log",
      "stack_out": []
    },
    "1365": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1366": {
      "op": "return",
      "stack_out": []
    },
    "1367": {
      "block": "main_getTotalDeposits_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1369": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1370": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1371": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1373": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1374": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits",
      "op": "callsub getTotalDeposits",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1377": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "1378": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "1380": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "1381": {
      "op": "concat",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1382": {
      "op": "log",
      "stack_out": []
    },
    "1383": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1384": {
      "op": "return",
      "stack_out": []
    },
    "1385": {
      "block": "main_getCirculatingLST_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1387": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1388": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1389": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1391": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1392": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST",
      "op": "callsub getCirculatingLST",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1395": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1396": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1398": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1399": {
      "op": "concat",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "1400": {
      "op": "log",
      "stack_out": []
    },
    "1401": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1402": {
      "op": "return",
      "stack_out": []
    },
    "1403": {
      "block": "main_configureLSTToken_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1405": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1406": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1407": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1409": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1410": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1412": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "1"
      ]
    },
    "1413": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1414": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "1415": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "1417": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "1418": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "1419": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1420": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%19#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "1423": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%54#0"
      ]
    },
    "1424": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken",
      "op": "callsub configureLSTToken",
      "stack_out": []
    },
    "1427": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1428": {
      "op": "return",
      "stack_out": []
    },
    "1429": {
      "block": "main_optInToLST_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1431": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1432": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1433": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1435": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1436": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%18#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "1439": {
      "op": "btoi",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1440": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "1442": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "tmp%48#0",
        "1"
      ]
    },
    "1443": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "gtxn_idx%2#0"
      ]
    },
    "1444": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "1445": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "1447": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "1448": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "1449": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%47#0",
        "gtxn_idx%2#0"
      ]
    },
    "1450": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST",
      "op": "callsub optInToLST",
      "stack_out": []
    },
    "1453": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1454": {
      "op": "return",
      "stack_out": []
    },
    "1455": {
      "block": "main_generateLSTToken_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1457": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1458": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1459": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1461": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1462": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1464": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "1"
      ]
    },
    "1465": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1466": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "1467": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "1469": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "1470": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "1471": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1472": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken",
      "op": "callsub generateLSTToken",
      "stack_out": []
    },
    "1475": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1476": {
      "op": "return",
      "stack_out": []
    },
    "1477": {
      "block": "main_setRateParams_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1479": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1480": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1481": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1483": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1484": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1487": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1488": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "1491": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "1492": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "1495": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "1496": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "1499": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "1500": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "1503": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "1504": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "1507": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1508": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%12#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "1511": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "1512": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%13#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "1515": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "1516": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[8]%14#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "1519": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "1520": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[8]%15#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "1523": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "1524": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "1527": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "1528": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_bytes[8]%17#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "1531": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "1532": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setRateParams",
      "op": "callsub setRateParams",
      "stack_out": []
    },
    "1535": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1536": {
      "op": "return",
      "stack_out": []
    },
    "1537": {
      "block": "main_initApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1539": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1540": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1541": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1543": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1544": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1546": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1"
      ]
    },
    "1547": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1548": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "1549": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "1551": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "1552": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1553": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1554": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1557": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ]
    },
    "1558": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1561": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1562": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1565": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1566": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1569": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1570": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%5#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1573": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1574": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[1]%1#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "1577": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1578": {
      "op": "txnas Applications",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "1580": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication",
      "op": "callsub initApplication",
      "stack_out": []
    },
    "1583": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1584": {
      "op": "return",
      "stack_out": []
    },
    "1585": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1587": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1588": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1589": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1591": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1592": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1593": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "1596": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1597": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1599": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1602": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1603": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "1606": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1607": {
      "op": "return",
      "stack_out": []
    },
    "1608": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication",
      "params": {
        "admin#0": "bytes",
        "baseTokenId#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1611": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\""
      ],
      "stack_out": [
        "\"admin_account\""
      ]
    },
    "1612": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ]
    },
    "1614": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1615": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseTokenId#0 (copy)"
      ]
    },
    "1617": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1618": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"base_token_id\""
      ]
    },
    "1619": {
      "op": "swap",
      "stack_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "1620": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1621": {
      "retsub": true,
      "op": "retsub"
    },
    "1622": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication",
      "params": {
        "mbrTxn#0": "uint64",
        "ltv_bps#0": "uint64",
        "liq_threshold_bps#0": "uint64",
        "origination_fee_bps#0": "uint64",
        "protocol_share_bps#0": "uint64",
        "borrow_gate_enabled#0": "uint64",
        "oracle_app_id#0": "uint64"
      },
      "block": "initApplication",
      "stack_in": [],
      "op": "proto 7 0"
    },
    "1625": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1627": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1628": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1629": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1630": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1631": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1632": {
      "op": "assert",
      "stack_out": []
    },
    "1633": {
      "op": "frame_dig -7",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1635": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1637": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "1638": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1639": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1640": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "1641": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1642": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "1645": {
      "op": "frame_dig -7",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1647": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1649": {
      "op": "pushint 400000 // 400000",
      "defined_out": [
        "400000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "400000"
      ]
    },
    "1653": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1654": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "1657": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1658": {
      "block": "initApplication_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "1659": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\""
      ],
      "stack_out": [
        "\"ltv_bps\""
      ]
    },
    "1661": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ]
    },
    "1663": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1664": {
      "op": "bytec 8 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\""
      ],
      "stack_out": [
        "\"liq_threshold_bps\""
      ]
    },
    "1666": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ]
    },
    "1668": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1669": {
      "op": "bytec 29 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\""
      ],
      "stack_out": [
        "\"origination_fee_bps\""
      ]
    },
    "1671": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ],
      "stack_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ]
    },
    "1673": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1674": {
      "op": "bytec 16 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\""
      ],
      "stack_out": [
        "\"accepted_collaterals_count\""
      ]
    },
    "1676": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ]
    },
    "1677": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1678": {
      "op": "bytec 9 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\""
      ],
      "stack_out": [
        "\"fee_pool\""
      ]
    },
    "1680": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"fee_pool\"",
        "0"
      ]
    },
    "1681": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1682": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "1684": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"circulating_lst\"",
        "0"
      ]
    },
    "1685": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1686": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\""
      ],
      "stack_out": [
        "\"total_deposits\""
      ]
    },
    "1687": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_deposits\"",
        "0"
      ]
    },
    "1688": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1689": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\""
      ],
      "stack_out": [
        "\"active_loan_records\""
      ]
    },
    "1690": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"active_loan_records\"",
        "0"
      ]
    },
    "1691": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1692": {
      "op": "bytec 30 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\""
      ],
      "stack_out": [
        "\"protocol_share_bps\""
      ]
    },
    "1694": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ],
      "stack_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ]
    },
    "1696": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1697": {
      "op": "bytec 31 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\""
      ],
      "stack_out": [
        "\"oracle_app\""
      ]
    },
    "1699": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ],
      "stack_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ]
    },
    "1701": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1702": {
      "op": "bytec 32 // \"borrow_gate_enabled\"",
      "defined_out": [
        "\"borrow_gate_enabled\""
      ],
      "stack_out": [
        "\"borrow_gate_enabled\""
      ]
    },
    "1704": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"borrow_gate_enabled\"",
        "borrow_gate_enabled#0 (copy)"
      ],
      "stack_out": [
        "\"borrow_gate_enabled\"",
        "borrow_gate_enabled#0 (copy)"
      ]
    },
    "1706": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1707": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\""
      ],
      "stack_out": [
        "\"lst_token_id\""
      ]
    },
    "1709": {
      "op": "pushbytes 0x0000000000000063",
      "defined_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ],
      "stack_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ]
    },
    "1719": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1720": {
      "op": "bytec 14 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "1722": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "\"base_bps\"",
        "50"
      ],
      "stack_out": [
        "\"base_bps\"",
        "50"
      ]
    },
    "1724": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1725": {
      "op": "bytec 19 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "1727": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "\"util_cap_bps\"",
        "8000"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "8000"
      ]
    },
    "1730": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1731": {
      "op": "bytec 7 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\""
      ],
      "stack_out": [
        "\"total_borrows\""
      ]
    },
    "1733": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_borrows\"",
        "0"
      ]
    },
    "1734": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1735": {
      "op": "bytec 20 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "1737": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rate_model_type\"",
        "0"
      ]
    },
    "1738": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1739": {
      "op": "bytec 21 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "1741": {
      "op": "pushint 5000 // 5000",
      "defined_out": [
        "\"kink_norm_bps\"",
        "5000"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "5000"
      ]
    },
    "1744": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1745": {
      "op": "bytec 22 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "1747": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "\"slope1_bps\"",
        "1000"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "1000"
      ]
    },
    "1749": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1750": {
      "op": "bytec 23 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "1752": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "\"slope2_bps\"",
        "2000"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "2000"
      ]
    },
    "1755": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1756": {
      "op": "bytec 12 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "1758": {
      "op": "pushint 6000 // 6000",
      "defined_out": [
        "\"max_apr_bps\"",
        "6000"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "6000"
      ]
    },
    "1761": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1762": {
      "op": "bytec 24 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "1764": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"ema_alpha_bps\"",
        "0"
      ]
    },
    "1765": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1766": {
      "op": "bytec 25 // \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\""
      ],
      "stack_out": [
        "\"max_apr_step_bps\""
      ]
    },
    "1768": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"max_apr_step_bps\"",
        "0"
      ]
    },
    "1769": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1770": {
      "op": "bytec 13 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\""
      ],
      "stack_out": [
        "\"prev_apr_bps\""
      ]
    },
    "1772": {
      "op": "pushint 50 // 50",
      "stack_out": [
        "\"prev_apr_bps\"",
        "50"
      ]
    },
    "1774": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1775": {
      "op": "bytec 26 // \"util_ema_bps\"",
      "defined_out": [
        "\"util_ema_bps\""
      ],
      "stack_out": [
        "\"util_ema_bps\""
      ]
    },
    "1777": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"util_ema_bps\"",
        "0"
      ]
    },
    "1778": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1779": {
      "op": "bytec 33 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "1781": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"power_gamma_q16\"",
        "0"
      ]
    },
    "1782": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1783": {
      "op": "bytec 34 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "1785": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"scarcity_K_bps\"",
        "0"
      ]
    },
    "1786": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1787": {
      "op": "bytec 35 // \"last_scaled_down_disbursement\"",
      "defined_out": [
        "\"last_scaled_down_disbursement\""
      ],
      "stack_out": [
        "\"last_scaled_down_disbursement\""
      ]
    },
    "1789": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_scaled_down_disbursement\"",
        "0"
      ]
    },
    "1790": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1791": {
      "op": "bytec 36 // \"last_max_borrow\"",
      "defined_out": [
        "\"last_max_borrow\""
      ],
      "stack_out": [
        "\"last_max_borrow\""
      ]
    },
    "1793": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_max_borrow\"",
        "0"
      ]
    },
    "1794": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1795": {
      "op": "bytec 37 // \"last_requested_loan\"",
      "defined_out": [
        "\"last_requested_loan\""
      ],
      "stack_out": [
        "\"last_requested_loan\""
      ]
    },
    "1797": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_requested_loan\"",
        "0"
      ]
    },
    "1798": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1799": {
      "op": "bytec 38 // \"debug_diff\"",
      "defined_out": [
        "\"debug_diff\""
      ],
      "stack_out": [
        "\"debug_diff\""
      ]
    },
    "1801": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"debug_diff\"",
        "0"
      ]
    },
    "1802": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1803": {
      "op": "bytec 39 // \"params_updated_at\"",
      "defined_out": [
        "\"params_updated_at\""
      ],
      "stack_out": [
        "\"params_updated_at\""
      ]
    },
    "1805": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"params_updated_at\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"params_updated_at\"",
        "new_state_value%0#0"
      ]
    },
    "1807": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1808": {
      "op": "bytec 27 // \"params_update_nonce\"",
      "defined_out": [
        "\"params_update_nonce\""
      ],
      "stack_out": [
        "\"params_update_nonce\""
      ]
    },
    "1810": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"params_update_nonce\"",
        "0"
      ]
    },
    "1811": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1812": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1813": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "1814": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1815": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1816": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1817": {
      "op": "bz initApplication_after_if_else@7",
      "stack_out": []
    },
    "1820": {
      "op": "itxn_begin"
    },
    "1821": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1823": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1824": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1825": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1826": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "1827": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1828": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "1829": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1831": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1833": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "1835": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "1836": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1838": {
      "op": "intc 4 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "1840": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1842": {
      "op": "itxn_submit"
    },
    "1843": {
      "block": "initApplication_after_if_else@7",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "1844": {
      "block": "initApplication_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1845": {
      "op": "b initApplication_bool_merge@4"
    },
    "1848": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setRateParams",
      "params": {
        "base_bps#0": "uint64",
        "util_cap_bps#0": "uint64",
        "kink_norm_bps#0": "uint64",
        "slope1_bps#0": "uint64",
        "slope2_bps#0": "uint64",
        "max_apr_bps#0": "uint64",
        "borrow_gate_enabled#0": "uint64",
        "ema_alpha_bps#0": "uint64",
        "max_apr_step_bps#0": "uint64",
        "rate_model_type#0": "uint64",
        "power_gamma_q16#0": "uint64",
        "scarcity_K_bps#0": "uint64"
      },
      "block": "setRateParams",
      "stack_in": [],
      "op": "proto 12 0"
    },
    "1851": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1853": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1854": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1855": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1856": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1857": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1858": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "1859": {
      "op": "frame_dig -11",
      "defined_out": [
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "1861": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "1864": {
      "op": "frame_dig -11",
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "1866": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)",
        "10000"
      ]
    },
    "1867": {
      "op": "<=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1868": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "1871": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1872": {
      "block": "setRateParams_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "BAD_UTIL_CAP",
      "op": "assert // BAD_UTIL_CAP",
      "defined_out": [],
      "stack_out": []
    },
    "1873": {
      "op": "frame_dig -10",
      "defined_out": [
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "1875": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "1878": {
      "op": "frame_dig -10",
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "1880": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)",
        "10000"
      ]
    },
    "1881": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1882": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "1885": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "1886": {
      "block": "setRateParams_bool_merge@8",
      "stack_in": [
        "and_result%1#0"
      ],
      "error": "BAD_KINK",
      "op": "assert // BAD_KINK",
      "defined_out": [],
      "stack_out": []
    },
    "1887": {
      "op": "frame_dig -7",
      "defined_out": [
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "1889": {
      "op": "bz setRateParams_after_if_else@14",
      "stack_out": []
    },
    "1892": {
      "op": "frame_dig -7",
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "1894": {
      "op": "frame_dig -12",
      "defined_out": [
        "base_bps#0 (copy)",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)",
        "base_bps#0 (copy)"
      ]
    },
    "1896": {
      "op": ">=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1897": {
      "error": "BAD_MAX_APR",
      "op": "assert // BAD_MAX_APR",
      "stack_out": []
    },
    "1898": {
      "block": "setRateParams_after_if_else@14",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "1900": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)",
        "10000"
      ]
    },
    "1901": {
      "op": "<=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1902": {
      "error": "BAD_EMA_ALPHA",
      "op": "assert // BAD_EMA_ALPHA",
      "stack_out": []
    },
    "1903": {
      "op": "frame_dig -3",
      "defined_out": [
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "1905": {
      "op": "bz setRateParams_bool_true@16",
      "stack_out": []
    },
    "1908": {
      "op": "frame_dig -3",
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "1910": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)",
        "255"
      ]
    },
    "1913": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1914": {
      "op": "bz setRateParams_bool_false@17",
      "stack_out": []
    },
    "1917": {
      "block": "setRateParams_bool_true@16",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "1918": {
      "block": "setRateParams_bool_merge@18",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "UNSUPPORTED_MODEL",
      "op": "assert // UNSUPPORTED_MODEL",
      "defined_out": [],
      "stack_out": []
    },
    "1919": {
      "op": "bytec 14 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "1921": {
      "op": "frame_dig -12",
      "defined_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ],
      "stack_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ]
    },
    "1923": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1924": {
      "op": "bytec 19 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "1926": {
      "op": "frame_dig -11",
      "defined_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ]
    },
    "1928": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1929": {
      "op": "bytec 21 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "1931": {
      "op": "frame_dig -10",
      "defined_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "1933": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1934": {
      "op": "bytec 22 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "1936": {
      "op": "frame_dig -9",
      "defined_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ]
    },
    "1938": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1939": {
      "op": "bytec 23 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "1941": {
      "op": "frame_dig -8",
      "defined_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ]
    },
    "1943": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1944": {
      "op": "bytec 12 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "1946": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ]
    },
    "1948": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1949": {
      "op": "bytec 32 // \"borrow_gate_enabled\"",
      "defined_out": [
        "\"borrow_gate_enabled\""
      ],
      "stack_out": [
        "\"borrow_gate_enabled\""
      ]
    },
    "1951": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"borrow_gate_enabled\"",
        "borrow_gate_enabled#0 (copy)"
      ],
      "stack_out": [
        "\"borrow_gate_enabled\"",
        "borrow_gate_enabled#0 (copy)"
      ]
    },
    "1953": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1954": {
      "op": "bytec 24 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "1956": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "1958": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1959": {
      "op": "bytec 25 // \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\""
      ],
      "stack_out": [
        "\"max_apr_step_bps\""
      ]
    },
    "1961": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ]
    },
    "1963": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1964": {
      "op": "bytec 20 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "1966": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ]
    },
    "1968": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1969": {
      "op": "bytec 33 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "1971": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ],
      "stack_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ]
    },
    "1973": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1974": {
      "op": "bytec 34 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "1976": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ],
      "stack_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ]
    },
    "1978": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1979": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1980": {
      "op": "bytec 27 // \"params_update_nonce\"",
      "defined_out": [
        "\"params_update_nonce\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"params_update_nonce\""
      ]
    },
    "1982": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1983": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1984": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "1985": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1986": {
      "op": "bytec 27 // \"params_update_nonce\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"params_update_nonce\""
      ]
    },
    "1988": {
      "op": "swap",
      "stack_out": [
        "\"params_update_nonce\"",
        "new_state_value%0#0"
      ]
    },
    "1989": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1990": {
      "op": "bytec 39 // \"params_updated_at\"",
      "defined_out": [
        "\"params_updated_at\""
      ],
      "stack_out": [
        "\"params_updated_at\""
      ]
    },
    "1992": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"params_updated_at\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"params_updated_at\"",
        "new_state_value%1#0"
      ]
    },
    "1994": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1995": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1996": {
      "op": "bytec 12 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "1998": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1999": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2000": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2003": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2004": {
      "op": "bytec 13 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "2006": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2007": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2008": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "0"
      ]
    },
    "2009": {
      "op": "bytec 12 // \"max_apr_bps\"",
      "stack_out": [
        "maybe_value%3#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2011": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2012": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "2013": {
      "op": ">",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2014": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2017": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2018": {
      "op": "bytec 12 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2020": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2021": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "2022": {
      "op": "bytec 13 // \"prev_apr_bps\"",
      "stack_out": [
        "maybe_value%5#0",
        "\"prev_apr_bps\""
      ]
    },
    "2024": {
      "op": "swap",
      "stack_out": [
        "\"prev_apr_bps\"",
        "maybe_value%5#0"
      ]
    },
    "2025": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2026": {
      "block": "setRateParams_after_if_else@21",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2027": {
      "block": "setRateParams_bool_false@17",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2028": {
      "op": "b setRateParams_bool_merge@18"
    },
    "2031": {
      "block": "setRateParams_bool_false@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2032": {
      "op": "b setRateParams_bool_merge@8"
    },
    "2035": {
      "block": "setRateParams_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2036": {
      "op": "b setRateParams_bool_merge@4"
    },
    "2039": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken",
      "params": {
        "mbrTxn#0": "uint64"
      },
      "block": "generateLSTToken",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2042": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2044": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2045": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2046": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2047": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2048": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2049": {
      "op": "assert",
      "stack_out": []
    },
    "2050": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2052": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2054": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2055": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2056": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2057": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2058": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2059": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2062": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2064": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2066": {
      "op": "pushint 102000 // 102000",
      "defined_out": [
        "102000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "102000"
      ]
    },
    "2070": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2071": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2074": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2075": {
      "block": "generateLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2076": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2077": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2078": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2079": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2080": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2081": {
      "op": "itxn_begin"
    },
    "2082": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2084": {
      "op": "dig 1",
      "defined_out": [
        "baseToken#0",
        "baseToken#0 (copy)",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2086": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "baseToken#0",
        "check%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2088": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2089": {
      "op": "dig 2",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2091": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "baseToken#0",
        "check%1#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2093": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2094": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2096": {
      "op": "uncover 4",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "baseToken#0"
      ]
    },
    "2098": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%2#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "2100": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0"
      ]
    },
    "2101": {
      "op": "pushbytes \"c\"",
      "defined_out": [
        "\"c\"",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "\"c\""
      ]
    },
    "2104": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "\"c\"",
        "value%2#0"
      ]
    },
    "2105": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2106": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "0"
      ]
    },
    "2107": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2108": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2109": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "2110": {
      "op": "pushbytes \"c\"",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "maybe_value%3#0",
        "\"c\""
      ]
    },
    "2113": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "\"c\"",
        "maybe_value%3#0"
      ]
    },
    "2114": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "2115": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2117": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2119": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2121": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "0"
      ]
    },
    "2122": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2124": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2126": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2128": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "2130": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "2132": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2134": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2136": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2138": {
      "op": "itxn_submit"
    },
    "2139": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "result.CreatedAssetID#0"
      ],
      "stack_out": [
        "result.CreatedAssetID#0"
      ]
    },
    "2141": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2142": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2144": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2145": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2146": {
      "retsub": true,
      "op": "retsub"
    },
    "2147": {
      "block": "generateLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2148": {
      "op": "b generateLSTToken_bool_merge@4"
    },
    "2151": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST",
      "params": {
        "lstAssetId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "optInToLST",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2154": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2156": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2157": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2158": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2159": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2160": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2161": {
      "op": "assert",
      "stack_out": []
    },
    "2162": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2164": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2166": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2167": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2168": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2169": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2170": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2171": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2174": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2176": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2178": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "2000"
      ]
    },
    "2181": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2182": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2185": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2186": {
      "block": "optInToLST_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2187": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAssetId#0 (copy)"
      ],
      "stack_out": [
        "lstAssetId#0 (copy)"
      ]
    },
    "2189": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2190": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2192": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2193": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2194": {
      "op": "itxn_begin"
    },
    "2195": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2197": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2198": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2200": {
      "op": "frame_dig -2",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "lstAssetId#0 (copy)"
      ]
    },
    "2202": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2204": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2206": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2207": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2209": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2211": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2213": {
      "op": "itxn_submit"
    },
    "2214": {
      "retsub": true,
      "op": "retsub"
    },
    "2215": {
      "block": "optInToLST_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2216": {
      "op": "b optInToLST_bool_merge@4"
    },
    "2219": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken",
      "params": {
        "axferTxn#0": "uint64",
        "circulating_lst#0": "uint64"
      },
      "block": "configureLSTToken",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2222": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2224": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2225": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2226": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2227": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2228": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2229": {
      "op": "assert",
      "stack_out": []
    },
    "2230": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2231": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "2233": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2234": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2235": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2236": {
      "op": "frame_dig -2",
      "defined_out": [
        "axferTxn#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "axferTxn#0 (copy)"
      ]
    },
    "2238": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2240": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2241": {
      "error": "LST token not set",
      "op": "assert // LST token not set",
      "stack_out": []
    },
    "2242": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2244": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2246": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "2247": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2248": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2249": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "2250": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2251": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2254": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2256": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2258": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2260": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2261": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2264": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2265": {
      "block": "configureLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2266": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "2268": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ],
      "stack_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ]
    },
    "2270": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2271": {
      "retsub": true,
      "op": "retsub"
    },
    "2272": {
      "block": "configureLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2273": {
      "op": "b configureLSTToken_bool_merge@4"
    },
    "2276": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST",
      "params": {},
      "block": "getCirculatingLST",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2277": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "2279": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2280": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2281": {
      "retsub": true,
      "op": "retsub"
    },
    "2282": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits",
      "params": {},
      "block": "getTotalDeposits",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2283": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "2284": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2285": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2286": {
      "retsub": true,
      "op": "retsub"
    },
    "2287": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "params": {},
      "block": "getAcceptedCollateralsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2288": {
      "op": "bytec 16 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "2290": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2291": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2292": {
      "retsub": true,
      "op": "retsub"
    },
    "2293": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "params": {
        "tokenId#0": "bytes"
      },
      "block": "getOraclePrice",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2296": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2297": {
      "op": "bytec 31 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"oracle_app\""
      ]
    },
    "2299": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "maybe_exists%0#0"
      ]
    },
    "2300": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2301": {
      "op": "dup",
      "defined_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ]
    },
    "2302": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "address#0",
        "check%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "check%0#0"
      ]
    },
    "2304": {
      "op": "bury 1",
      "stack_out": [
        "oracle#0",
        "check%0#0"
      ]
    },
    "2306": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2307": {
      "op": "itxn_begin"
    },
    "2308": {
      "op": "pushbytes 0xac13e004 // method \"getTokenPrice(uint64)(uint64,uint64,uint64)\"",
      "defined_out": [
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))"
      ]
    },
    "2314": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2316": {
      "op": "frame_dig -1",
      "defined_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ]
    },
    "2318": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2320": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2322": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2324": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2326": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2328": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2330": {
      "op": "itxn_submit"
    },
    "2331": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2333": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2334": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2337": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2339": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2340": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2341": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "12"
      ]
    },
    "2343": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2344": {
      "retsub": true,
      "op": "retsub"
    },
    "2345": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "updateCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2348": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "2350": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2352": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2353": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2354": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "2355": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0",
        "collateral#0"
      ]
    },
    "2356": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2357": {
      "op": "uncover 2",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "2359": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0"
      ]
    },
    "2360": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2361": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0",
        "tmp%1#0"
      ]
    },
    "2364": {
      "op": "swap",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0"
      ]
    },
    "2365": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "0"
      ]
    },
    "2366": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "2367": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%2#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2369": {
      "op": "btoi",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2370": {
      "op": "==",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "2371": {
      "op": "bz updateCollateralTotal_after_if_else@2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0"
      ]
    },
    "2374": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0"
      ]
    },
    "2376": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2377": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "collateral#0 (copy)",
        "16"
      ]
    },
    "2379": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "tmp%6#0"
      ]
    },
    "2380": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "tmp%6#0",
        "amount#0 (copy)"
      ]
    },
    "2382": {
      "op": "+",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "2383": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "newTotal#0",
        "collateral#0"
      ]
    },
    "2384": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "newTotal#0",
        "tmp%8#0"
      ]
    },
    "2387": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%8#0",
        "newTotal#0"
      ]
    },
    "2388": {
      "op": "itob",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ]
    },
    "2389": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "2391": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ]
    },
    "2393": {
      "op": "concat",
      "defined_out": [
        "collateral#0",
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2394": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "2395": {
      "op": "concat",
      "defined_out": [
        "collateral#0",
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2396": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0",
        "tmp%0#0"
      ]
    },
    "2398": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2399": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0"
      ]
    },
    "2400": {
      "block": "updateCollateralTotal_after_if_else@2",
      "stack_in": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "2401": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType",
      "params": {
        "collateralTokenId#0": "bytes",
        "mbrTxn#0": "uint64"
      },
      "block": "addNewCollateralType",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2404": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2405": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2406": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2407": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2408": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2409": {
      "op": "txn Sender",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "2411": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0"
      ]
    },
    "2412": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2413": {
      "op": "app_global_get_ex",
      "defined_out": [
        "baseToken#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2414": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "2415": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%1#0"
      ]
    },
    "2416": {
      "op": "assert",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2417": {
      "op": "frame_dig -2",
      "defined_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2419": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "2420": {
      "op": "dup"
    },
    "2421": {
      "op": "uncover 2",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0",
        "baseToken#0"
      ]
    },
    "2423": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2424": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2425": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\""
      ]
    },
    "2427": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2429": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2430": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2431": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2432": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "2434": {
      "op": "!",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%5#0"
      ]
    },
    "2435": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2436": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "2438": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0"
      ]
    },
    "2440": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0"
      ]
    },
    "2441": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2442": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2443": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0"
      ]
    },
    "2444": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%7#0"
      ]
    },
    "2445": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2448": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "2450": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0"
      ]
    },
    "2452": {
      "op": "pushint 101000 // 101000",
      "defined_out": [
        "101000",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0",
        "101000"
      ]
    },
    "2456": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%9#0"
      ]
    },
    "2457": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2460": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "2461": {
      "block": "addNewCollateralType_bool_merge@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2462": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0"
      ]
    },
    "2463": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0",
        "\"base_token_id\""
      ]
    },
    "2464": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2465": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0"
      ]
    },
    "2466": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2468": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ]
    },
    "2469": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2470": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "2480": {
      "op": "concat",
      "defined_out": [
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0"
      ]
    },
    "2481": {
      "op": "frame_dig 1",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ]
    },
    "2483": {
      "op": "dup"
    },
    "2484": {
      "op": "uncover 2",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "newAcceptedCollateral#0"
      ]
    },
    "2486": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2487": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0"
      ]
    },
    "2488": {
      "op": "bytec 16 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "2490": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2491": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0"
      ]
    },
    "2492": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "1"
      ]
    },
    "2493": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0"
      ]
    },
    "2494": {
      "op": "bytec 16 // \"accepted_collaterals_count\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "2496": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "\"accepted_collaterals_count\"",
        "new_state_value%0#0"
      ]
    },
    "2497": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2498": {
      "op": "itxn_begin"
    },
    "2499": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2501": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2502": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2503": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2505": {
      "op": "frame_dig 0",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%2#0"
      ]
    },
    "2507": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2509": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2511": {
      "op": "itxn_field Sender",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2513": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "4"
      ]
    },
    "2514": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2516": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "1000"
      ]
    },
    "2518": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2520": {
      "op": "itxn_submit"
    },
    "2521": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2522": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "2524": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2525": {
      "retsub": true,
      "op": "retsub"
    },
    "2526": {
      "block": "addNewCollateralType_bool_false@3",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "2527": {
      "op": "b addNewCollateralType_bool_merge@4"
    },
    "2530": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "params": {
        "amount#0": "uint64"
      },
      "block": "calculateLSTDue",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2533": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2534": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "2536": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2537": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2538": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "10000"
      ]
    },
    "2539": {
      "op": "mulw",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0"
      ]
    },
    "2540": {
      "op": "intc_0 // 0",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0"
      ]
    },
    "2541": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "2542": {
      "op": "app_global_get_ex",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2543": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#0"
      ]
    },
    "2544": {
      "op": "divw",
      "defined_out": [
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0"
      ]
    },
    "2545": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0",
        "amount#0 (copy)"
      ]
    },
    "2547": {
      "op": "mulw",
      "defined_out": [
        "highBits2#0",
        "lowBits2#0"
      ],
      "stack_out": [
        "highBits2#0",
        "lowBits2#0"
      ]
    },
    "2548": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "highBits2#0",
        "lowBits2#0",
        "10000"
      ]
    },
    "2549": {
      "op": "divw",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2550": {
      "retsub": true,
      "op": "retsub"
    },
    "2551": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "depositASA",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2554": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2555": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2556": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2557": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2558": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2559": {
      "op": "frame_dig -3",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2561": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "2563": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2565": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "2566": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2569": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2571": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "2573": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseToken#0",
        "tmp%3#0",
        "baseToken#0"
      ]
    },
    "2575": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "2576": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2579": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2581": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "2583": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "2585": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "2586": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2589": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "2590": {
      "block": "depositASA_bool_merge@5",
      "stack_in": [
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2591": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "2593": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "2595": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0",
        "1000"
      ]
    },
    "2597": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%8#0"
      ]
    },
    "2598": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2599": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "2600": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2601": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2602": {
      "op": "bury 1",
      "stack_out": [
        "baseToken#0",
        "maybe_exists%1#0"
      ]
    },
    "2604": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2605": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "2606": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "2607": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2608": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%2#0"
      ]
    },
    "2609": {
      "op": "bnz depositASA_else_body@7",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2612": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2614": {
      "block": "depositASA_after_if_else@8",
      "stack_in": [
        "baseToken#0",
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "2615": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2617": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2618": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "2620": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2621": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "2622": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2623": {
      "op": "dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2",
        "lstDue#2 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2 (copy)"
      ]
    },
    "2625": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2627": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2629": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2631": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "4"
      ]
    },
    "2632": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2634": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "1000"
      ]
    },
    "2636": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2638": {
      "op": "itxn_submit"
    },
    "2639": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "0"
      ]
    },
    "2640": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "0",
        "\"circulating_lst\""
      ]
    },
    "2642": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstDue#2",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2643": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "maybe_value%4#0"
      ]
    },
    "2644": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%0#0"
      ]
    },
    "2645": {
      "op": "bytec 6 // \"circulating_lst\"",
      "stack_out": [
        "baseToken#0",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "2647": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "2648": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2649": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "2650": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "2651": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2652": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0"
      ]
    },
    "2653": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0",
        "amount#0 (copy)"
      ]
    },
    "2655": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%1#0"
      ]
    },
    "2656": {
      "op": "bytec_1 // \"total_deposits\"",
      "stack_out": [
        "baseToken#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "2657": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "2658": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2659": {
      "retsub": true,
      "op": "retsub"
    },
    "2660": {
      "block": "depositASA_else_body@7",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "amount#0 (copy)"
      ]
    },
    "2662": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "op": "callsub calculateLSTDue",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2665": {
      "op": "b depositASA_after_if_else@8"
    },
    "2668": {
      "block": "depositASA_bool_false@4",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "2669": {
      "op": "b depositASA_bool_merge@5"
    },
    "2672": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo",
      "params": {
        "depositTxn#0": "uint64",
        "amount#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "depositAlgo",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2675": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2676": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2677": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2678": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2680": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": []
    },
    "2681": {
      "op": "frame_dig -3",
      "defined_out": [
        "depositTxn#0 (copy)"
      ],
      "stack_out": [
        "depositTxn#0 (copy)"
      ]
    },
    "2683": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2685": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2687": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2688": {
      "op": "bz depositAlgo_bool_false@3",
      "stack_out": []
    },
    "2691": {
      "op": "frame_dig -3",
      "stack_out": [
        "depositTxn#0 (copy)"
      ]
    },
    "2693": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2695": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "amount#0 (copy)"
      ]
    },
    "2697": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2698": {
      "op": "bz depositAlgo_bool_false@3",
      "stack_out": []
    },
    "2701": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2702": {
      "block": "depositAlgo_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2703": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2705": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2707": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "1000"
      ]
    },
    "2709": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2710": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "2711": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2712": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "2713": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2714": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2715": {
      "op": "bnz depositAlgo_else_body@6",
      "stack_out": []
    },
    "2718": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2720": {
      "block": "depositAlgo_after_if_else@7",
      "stack_in": [
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "2721": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2723": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2724": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "2726": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2727": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "2728": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2729": {
      "op": "dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2",
        "lstDue#2 (copy)"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2 (copy)"
      ]
    },
    "2731": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2733": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2735": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2737": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "4"
      ]
    },
    "2738": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2740": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "1000"
      ]
    },
    "2742": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2744": {
      "op": "itxn_submit"
    },
    "2745": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstDue#2",
        "0"
      ]
    },
    "2746": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "0",
        "\"circulating_lst\""
      ]
    },
    "2748": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstDue#2",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstDue#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2749": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "maybe_value%3#0"
      ]
    },
    "2750": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2751": {
      "op": "bytec 6 // \"circulating_lst\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "2753": {
      "op": "swap",
      "stack_out": [
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "2754": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2755": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2756": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "2757": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2758": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "2759": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "2761": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "2762": {
      "op": "bytec_1 // \"total_deposits\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "2763": {
      "op": "swap",
      "stack_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "2764": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2765": {
      "retsub": true,
      "op": "retsub"
    },
    "2766": {
      "block": "depositAlgo_else_body@6",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2768": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "op": "callsub calculateLSTDue",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2771": {
      "op": "b depositAlgo_after_if_else@7"
    },
    "2774": {
      "block": "depositAlgo_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2775": {
      "op": "b depositAlgo_bool_merge@4"
    },
    "2778": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "lstAppId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "withdrawDeposit",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "2781": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2782": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "2784": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2785": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2786": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2787": {
      "op": "frame_dig -4",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2789": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "lstAsset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#0"
      ]
    },
    "2791": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "lstAsset#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2793": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%2#0"
      ]
    },
    "2794": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2797": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2799": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "lstAsset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%3#0"
      ]
    },
    "2801": {
      "op": "frame_dig 0",
      "stack_out": [
        "lstAsset#0",
        "tmp%3#0",
        "lstAsset#0"
      ]
    },
    "2803": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%4#0"
      ]
    },
    "2804": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2807": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2809": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "lstAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%5#0"
      ]
    },
    "2811": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "lstAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "2813": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%6#0"
      ]
    },
    "2814": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2817": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "2818": {
      "block": "withdrawDeposit_bool_merge@5",
      "stack_in": [
        "lstAsset#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2819": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "2821": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%7#0"
      ]
    },
    "2823": {
      "op": "pushint 3000 // 3000",
      "defined_out": [
        "3000",
        "tmp%7#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%7#0",
        "3000"
      ]
    },
    "2826": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%8#0"
      ]
    },
    "2827": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2828": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "2830": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "lstAppId#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)",
        "tmp%9#0"
      ]
    },
    "2832": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%10#0"
      ]
    },
    "2833": {
      "op": "bz withdrawDeposit_else_body@7",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2836": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0"
      ]
    },
    "2837": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "2839": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ]
    },
    "2840": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "2841": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0"
      ]
    },
    "2842": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "2843": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%1#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "maybe_exists%1#0"
      ]
    },
    "2844": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "2845": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "2847": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "2848": {
      "op": "uncover 2",
      "stack_out": [
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "2850": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "2851": {
      "block": "withdrawDeposit_after_if_else@8",
      "stack_in": [
        "lstAsset#0",
        "asaDue#1"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0"
      ]
    },
    "2853": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "0"
      ]
    },
    "2854": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2855": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2856": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "maybe_value%1#0"
      ]
    },
    "2857": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "2858": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "2860": {
      "op": "pop",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0"
      ]
    },
    "2861": {
      "op": "dig 1",
      "defined_out": [
        "asaDue#1",
        "asaDue#1 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "asaDue#1 (copy)"
      ]
    },
    "2863": {
      "op": ">=",
      "defined_out": [
        "asaDue#1",
        "tmp%15#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0"
      ]
    },
    "2864": {
      "op": "assert",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "2865": {
      "op": "itxn_begin"
    },
    "2866": {
      "op": "txn Sender",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2868": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2869": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2870": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2871": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "2872": {
      "op": "btoi",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2873": {
      "op": "dig 2",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "asaDue#1 (copy)"
      ]
    },
    "2875": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2877": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2879": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "2881": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "4"
      ]
    },
    "2882": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "2884": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "1000"
      ]
    },
    "2886": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "2888": {
      "op": "itxn_submit"
    },
    "2889": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "2890": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"circulating_lst\""
      ]
    },
    "2892": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2893": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0"
      ]
    },
    "2894": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "asaDue#1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "2896": {
      "op": "-",
      "defined_out": [
        "asaDue#1",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0"
      ]
    },
    "2897": {
      "op": "bytec 6 // \"circulating_lst\"",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "2899": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "2900": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "2901": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "2902": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"total_deposits\""
      ]
    },
    "2903": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2904": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0"
      ]
    },
    "2905": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "maybe_value%4#0",
        "asaDue#1"
      ]
    },
    "2906": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%1#0"
      ]
    },
    "2907": {
      "op": "bytec_1 // \"total_deposits\"",
      "stack_out": [
        "lstAsset#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "2908": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "2909": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2910": {
      "retsub": true,
      "op": "retsub"
    },
    "2911": {
      "block": "withdrawDeposit_else_body@7",
      "stack_in": [
        "lstAsset#0"
      ],
      "op": "itxn_begin"
    },
    "2912": {
      "op": "bytec 17 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)"
      ],
      "stack_out": [
        "lstAsset#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "2914": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2916": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "2918": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2920": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "lstAsset#0",
        "appl"
      ]
    },
    "2922": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2924": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "lstAsset#0",
        "1000"
      ]
    },
    "2926": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2928": {
      "op": "itxn_submit"
    },
    "2929": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "2931": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2932": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0",
        "tmp%0#1"
      ]
    },
    "2935": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "awst_tmp%0#0"
      ]
    },
    "2936": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "2939": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1",
        "0x151f7c75"
      ]
    },
    "2941": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "2942": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1"
      ]
    },
    "2943": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "2944": {
      "op": "itxn_begin"
    },
    "2945": {
      "op": "bytec 18 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "2947": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "2949": {
      "op": "frame_dig -2",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "2951": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "2953": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "2955": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "2957": {
      "op": "intc 4 // 1000",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "2959": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "2961": {
      "op": "itxn_submit"
    },
    "2962": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "2964": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2965": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%4#1"
      ]
    },
    "2968": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "awst_tmp%1#0"
      ]
    },
    "2969": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ]
    },
    "2972": {
      "op": "bytec 4 // 0x151f7c75",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1",
        "0x151f7c75"
      ]
    },
    "2974": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ]
    },
    "2975": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ]
    },
    "2976": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "2977": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "2979": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "2980": {
      "op": "uncover 2",
      "stack_out": [
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "2982": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "2983": {
      "op": "b withdrawDeposit_after_if_else@8"
    },
    "2986": {
      "block": "withdrawDeposit_bool_false@4",
      "stack_in": [
        "lstAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "2987": {
      "op": "b withdrawDeposit_bool_merge@5"
    },
    "2990": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow",
      "params": {
        "assetTransferTxn#0": "uint64",
        "requestedLoanAmount#0": "uint64",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64",
        "collateralTokenId#0": "bytes",
        "mbrTxn#0": "uint64"
      },
      "block": "borrow",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "2993": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "baseTokenOraclePrice#0"
      ]
    },
    "2995": {
      "op": "dupn 4",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "2997": {
      "op": "bytec 5 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"loan_record\""
      ]
    },
    "2999": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"loan_record\"",
        "tmp%0#0"
      ]
    },
    "3001": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "tmp%1#0"
      ]
    },
    "3002": {
      "op": "box_len",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "maybe_value%0#0",
        "hasLoan#0"
      ]
    },
    "3003": {
      "op": "dup",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "maybe_value%0#0",
        "hasLoan#0",
        "hasLoan#0 (copy)"
      ]
    },
    "3004": {
      "op": "uncover 2",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "hasLoan#0",
        "maybe_value%0#0"
      ]
    },
    "3006": {
      "op": "pop",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3007": {
      "op": "bz borrow_else_body@2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3010": {
      "op": "txn Sender",
      "defined_out": [
        "hasLoan#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%2#0"
      ]
    },
    "3012": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "hasLoan#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%3#0"
      ]
    },
    "3015": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "hasLoan#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%3#0",
        "40"
      ]
    },
    "3017": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "3018": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3020": {
      "block": "borrow_after_if_else@3",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3022": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#1"
      ]
    },
    "3024": {
      "op": "pushint 4000 // 4000",
      "defined_out": [
        "4000",
        "tmp%0#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#1",
        "4000"
      ]
    },
    "3027": {
      "op": "==",
      "defined_out": [
        "tmp%1#4"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%1#4"
      ]
    },
    "3028": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3029": {
      "op": "frame_dig -6",
      "defined_out": [
        "assetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3031": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%2#0"
      ]
    },
    "3033": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%2#0",
        "tmp%3#2"
      ]
    },
    "3035": {
      "op": "==",
      "defined_out": [
        "tmp%4#2"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%4#2"
      ]
    },
    "3036": {
      "op": "bz borrow_bool_false@21",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3039": {
      "op": "frame_dig -6",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3041": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%5#2"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%5#2"
      ]
    },
    "3043": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "tmp%5#2"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%5#2",
        "collateralAmount#0 (copy)"
      ]
    },
    "3045": {
      "op": "==",
      "defined_out": [
        "tmp%6#2"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%6#2"
      ]
    },
    "3046": {
      "op": "bz borrow_bool_false@21",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3049": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "3050": {
      "block": "borrow_bool_merge@22",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3051": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "\"accepted_collaterals\""
      ]
    },
    "3053": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3055": {
      "op": "concat",
      "defined_out": [
        "tmp%0#5"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#5"
      ]
    },
    "3056": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "maybe_exists%0#1"
      ]
    },
    "3057": {
      "op": "bury 1",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_exists%0#1"
      ]
    },
    "3059": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3060": {
      "op": "itxn_begin"
    },
    "3061": {
      "op": "bytec 17 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "3063": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3065": {
      "op": "frame_dig -3",
      "defined_out": [
        "lstApp#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "lstApp#0 (copy)"
      ]
    },
    "3067": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3069": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "appl"
      ]
    },
    "3071": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3073": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "1000"
      ]
    },
    "3075": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3077": {
      "op": "itxn_submit"
    },
    "3078": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "awst_tmp%0#1"
      ]
    },
    "3080": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#1",
        "awst_tmp%0#1 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "awst_tmp%0#1",
        "awst_tmp%0#1 (copy)"
      ]
    },
    "3081": {
      "op": "extract 4 0",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "awst_tmp%0#1",
        "tmp%0#5"
      ]
    },
    "3084": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#5",
        "awst_tmp%0#1"
      ]
    },
    "3085": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#5",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#5",
        "tmp%1#0"
      ]
    },
    "3088": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#5",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#5",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "3090": {
      "op": "==",
      "defined_out": [
        "tmp%0#5",
        "tmp%2#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#5",
        "tmp%2#1"
      ]
    },
    "3091": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#5"
      ]
    },
    "3092": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0"
      ]
    },
    "3093": {
      "op": "itxn_begin"
    },
    "3094": {
      "op": "bytec 18 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "3096": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0"
      ]
    },
    "3098": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "lstApp#0 (copy)"
      ]
    },
    "3100": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0"
      ]
    },
    "3102": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "3104": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0"
      ]
    },
    "3106": {
      "op": "intc 4 // 1000",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "3108": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0"
      ]
    },
    "3110": {
      "op": "itxn_submit"
    },
    "3111": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#1",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#1"
      ]
    },
    "3113": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#1",
        "awst_tmp%1#1 (copy)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#1",
        "awst_tmp%1#1 (copy)"
      ]
    },
    "3114": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#1",
        "circulatingExternalLST#0",
        "tmp%4#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#1",
        "tmp%4#3"
      ]
    },
    "3117": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "tmp%4#3",
        "awst_tmp%1#1"
      ]
    },
    "3118": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#3",
        "tmp%5#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "tmp%4#3",
        "tmp%5#3"
      ]
    },
    "3121": {
      "op": "bytec 4 // 0x151f7c75",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "tmp%4#3",
        "tmp%5#3",
        "0x151f7c75"
      ]
    },
    "3123": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#3",
        "tmp%6#2"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "tmp%4#3",
        "tmp%6#2"
      ]
    },
    "3124": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "tmp%4#3"
      ]
    },
    "3125": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3126": {
      "op": "frame_dig 1",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateralToUse#1",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "collateralToUse#1"
      ]
    },
    "3128": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateralToUse#1",
        "hC#0",
        "lC#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0"
      ]
    },
    "3129": {
      "op": "uncover 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "hC#0",
        "lC#0",
        "circulatingExternalLST#0"
      ]
    },
    "3131": {
      "op": "divw",
      "defined_out": [
        "collateralToUse#1",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "underlyingCollateral#0"
      ]
    },
    "3132": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "underlyingCollateral#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3134": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "collateralOraclePrice#0",
        "collateralToUse#1",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "underlyingCollateral#0",
        "collateralOraclePrice#0"
      ]
    },
    "3137": {
      "op": "mulw",
      "defined_out": [
        "collateralToUse#1",
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "hU#0",
        "lU#0"
      ]
    },
    "3138": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "collateralToUse#1",
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "hU#0",
        "lU#0",
        "1000000"
      ]
    },
    "3140": {
      "op": "divw",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralUSD#1"
      ]
    },
    "3141": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralToUse#1",
        "collateralUSD#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralUSD#1",
        "0"
      ]
    },
    "3142": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralToUse#1",
        "collateralUSD#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralUSD#1",
        "0",
        "\"ltv_bps\""
      ]
    },
    "3144": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#1",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralUSD#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3145": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralUSD#1",
        "maybe_value%1#0"
      ]
    },
    "3146": {
      "op": "*",
      "defined_out": [
        "collateralToUse#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%4#0"
      ]
    },
    "3147": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "collateralToUse#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%4#0",
        "10000"
      ]
    },
    "3148": {
      "op": "/",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3149": {
      "op": "dup",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maxBorrowUSD#0"
      ]
    },
    "3150": {
      "op": "frame_bury 3",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3152": {
      "op": "bytec 36 // \"last_max_borrow\"",
      "defined_out": [
        "\"last_max_borrow\"",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "\"last_max_borrow\""
      ]
    },
    "3154": {
      "op": "dig 1",
      "defined_out": [
        "\"last_max_borrow\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maxBorrowUSD#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "\"last_max_borrow\"",
        "maxBorrowUSD#0 (copy)"
      ]
    },
    "3156": {
      "op": "app_global_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3157": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0"
      ]
    },
    "3158": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3159": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3160": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%2#0"
      ]
    },
    "3161": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0"
      ]
    },
    "3164": {
      "op": "dup",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0",
        "baseTokenOraclePrice#0"
      ]
    },
    "3165": {
      "op": "frame_bury 0",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0"
      ]
    },
    "3167": {
      "op": "frame_dig -5",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3169": {
      "op": "mulw",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ]
    },
    "3170": {
      "op": "intc 5 // 1000000",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0",
        "1000000"
      ]
    },
    "3172": {
      "op": "divw",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3173": {
      "op": "dup",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3174": {
      "op": "frame_bury 4",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3176": {
      "op": "bytec 37 // \"last_requested_loan\"",
      "defined_out": [
        "\"last_requested_loan\"",
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"last_requested_loan\""
      ]
    },
    "3178": {
      "op": "dig 1",
      "defined_out": [
        "\"last_requested_loan\"",
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "requestedLoanUSD#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"last_requested_loan\"",
        "requestedLoanUSD#0 (copy)"
      ]
    },
    "3180": {
      "op": "app_global_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3181": {
      "op": "dup2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "maxBorrowUSD#0 (copy)",
        "requestedLoanUSD#0 (copy)"
      ]
    },
    "3182": {
      "op": "-",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "new_state_value%0#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "new_state_value%0#0"
      ]
    },
    "3183": {
      "op": "bytec 38 // \"debug_diff\"",
      "defined_out": [
        "\"debug_diff\"",
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "new_state_value%0#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "new_state_value%0#0",
        "\"debug_diff\""
      ]
    },
    "3185": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"debug_diff\"",
        "new_state_value%0#0"
      ]
    },
    "3186": {
      "op": "app_global_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3187": {
      "op": ">=",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "tmp%0#6"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#6"
      ]
    },
    "3188": {
      "error": "exceeds LTV limit",
      "op": "assert // exceeds LTV limit",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3189": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "0"
      ]
    },
    "3190": {
      "op": "bytec 29 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\"",
        "0",
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "0",
        "\"origination_fee_bps\""
      ]
    },
    "3192": {
      "op": "app_global_get_ex",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "maybe_exists%0#1"
      ]
    },
    "3193": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%0#0"
      ]
    },
    "3194": {
      "op": "frame_dig -5",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3196": {
      "op": "*",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#1"
      ]
    },
    "3197": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%0#1",
        "10000"
      ]
    },
    "3198": {
      "op": "/",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "fee#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "fee#1"
      ]
    },
    "3199": {
      "op": "frame_dig -5",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3201": {
      "op": "dig 1",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "fee#1",
        "fee#1 (copy)",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)",
        "fee#1 (copy)"
      ]
    },
    "3203": {
      "op": "-",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "fee#1",
        "disbursement#3"
      ]
    },
    "3204": {
      "op": "dup",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "fee#1",
        "disbursement#3",
        "disbursement#3 (copy)"
      ]
    },
    "3205": {
      "op": "cover 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "disbursement#3"
      ]
    },
    "3207": {
      "op": "frame_bury 2",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "fee#1"
      ]
    },
    "3209": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "0"
      ]
    },
    "3210": {
      "op": "bytec 9 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "0",
        "\"fee_pool\""
      ]
    },
    "3212": {
      "op": "app_global_get_ex",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3213": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "maybe_value%1#0"
      ]
    },
    "3214": {
      "op": "+",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "new_state_value%0#0"
      ]
    },
    "3215": {
      "op": "bytec 9 // \"fee_pool\"",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "new_state_value%0#0",
        "\"fee_pool\""
      ]
    },
    "3217": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "\"fee_pool\"",
        "new_state_value%0#0"
      ]
    },
    "3218": {
      "op": "app_global_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3"
      ]
    },
    "3219": {
      "op": "bytec 35 // \"last_scaled_down_disbursement\"",
      "defined_out": [
        "\"last_scaled_down_disbursement\"",
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "disbursement#3",
        "\"last_scaled_down_disbursement\""
      ]
    },
    "3221": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "\"last_scaled_down_disbursement\"",
        "disbursement#3"
      ]
    },
    "3222": {
      "op": "app_global_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3223": {
      "op": "frame_dig 5",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3225": {
      "op": "bz borrow_else_body@5",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3228": {
      "op": "txn Sender",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3230": {
      "op": "dup",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "borrower#0 (copy)",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "borrower#0 (copy)"
      ]
    },
    "3231": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0"
      ]
    },
    "3234": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest",
      "op": "callsub accrueInterest",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "iar#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "iar#0",
        "existingLoan#0"
      ]
    },
    "3237": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "iar#0"
      ]
    },
    "3238": {
      "op": "pushint 17 // 17",
      "defined_out": [
        "17",
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "iar#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "iar#0",
        "17"
      ]
    },
    "3240": {
      "op": "extract_uint64",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "tmp%1#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "tmp%1#3"
      ]
    },
    "3241": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "tmp%1#3",
        "baseTokenOraclePrice#0"
      ]
    },
    "3243": {
      "op": "mulw",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "h1#0",
        "hasLoan#0",
        "l1#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "h1#0",
        "l1#0"
      ]
    },
    "3244": {
      "op": "intc 5 // 1000000",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "h1#0",
        "l1#0",
        "1000000"
      ]
    },
    "3246": {
      "op": "divw",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "oldLoanUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "oldLoanUSD#0"
      ]
    },
    "3247": {
      "op": "frame_dig 4",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "oldLoanUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3249": {
      "op": "+",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "totalRequestedUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalRequestedUSD#0"
      ]
    },
    "3250": {
      "op": "frame_dig 3",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalRequestedUSD#0",
        "maxBorrowUSD#0"
      ]
    },
    "3252": {
      "op": "<=",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "tmp%2#1"
      ]
    },
    "3253": {
      "error": "exceeds LTV limit with existing debt",
      "op": "assert // exceeds LTV limit with existing debt",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0"
      ]
    },
    "3254": {
      "op": "dup",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "existingLoan#0 (copy)"
      ]
    },
    "3255": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "40"
      ]
    },
    "3257": {
      "op": "extract_uint64",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "tmp%4#0"
      ]
    },
    "3258": {
      "op": "frame_dig -4",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralAmount#0 (copy)",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "tmp%4#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3260": {
      "op": "+",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0"
      ]
    },
    "3261": {
      "op": "dig 1",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "existingLoan#0 (copy)"
      ]
    },
    "3263": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "existingLoan#0 (copy)",
        "65"
      ]
    },
    "3265": {
      "op": "extract_uint64",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "tmp%8#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "tmp%8#0"
      ]
    },
    "3266": {
      "op": "frame_dig 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "tmp%8#0",
        "disbursement#3"
      ]
    },
    "3268": {
      "op": "dup",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "disbursement#3 (copy)",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "tmp%8#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "tmp%8#0",
        "disbursement#3 (copy)",
        "disbursement#3 (copy)"
      ]
    },
    "3269": {
      "op": "cover 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "disbursement#3",
        "tmp%8#0",
        "disbursement#3 (copy)"
      ]
    },
    "3271": {
      "op": "+",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "disbursement#3",
        "newTotalDisb#0"
      ]
    },
    "3272": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "disbursement#3",
        "newTotalDisb#0",
        "0"
      ]
    },
    "3273": {
      "op": "bytec 7 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "disbursement#3",
        "newTotalDisb#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "3275": {
      "op": "app_global_get_ex",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "disbursement#3",
        "newTotalDisb#0",
        "maybe_value%0#0",
        "maybe_exists%0#1"
      ]
    },
    "3276": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "disbursement#3",
        "newTotalDisb#0",
        "maybe_value%0#0"
      ]
    },
    "3277": {
      "op": "dig 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "disbursement#3",
        "newTotalDisb#0",
        "maybe_value%0#0",
        "disbursement#3 (copy)"
      ]
    },
    "3279": {
      "op": "+",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "disbursement#3",
        "newTotalDisb#0",
        "new_state_value%0#0"
      ]
    },
    "3280": {
      "op": "bytec 7 // \"total_borrows\"",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "disbursement#3",
        "newTotalDisb#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "3282": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "disbursement#3",
        "newTotalDisb#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "3283": {
      "op": "app_global_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "disbursement#3",
        "newTotalDisb#0"
      ]
    },
    "3284": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "disbursement#3"
      ]
    },
    "3285": {
      "op": "itob",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "totalCollateral#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "val_as_bytes%0#0"
      ]
    },
    "3286": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "to_encode%0#0",
        "totalCollateral#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "3288": {
      "op": "itob",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "totalCollateral#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3289": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "3290": {
      "op": "bytec 15 // 0x00",
      "defined_out": [
        "0x00",
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "totalCollateral#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x00"
      ]
    },
    "3292": {
      "op": "concat",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%2#0",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "totalCollateral#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3293": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "3294": {
      "op": "concat",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "existingLoan#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3295": {
      "op": "uncover 3",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "encoded_tuple_buffer%3#0",
        "existingLoan#0"
      ]
    },
    "3297": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "newTotalDisb#0",
        "requestedLoanUSD#0",
        "tmp%9#0",
        "totalCollateral#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "encoded_tuple_buffer%3#0",
        "tmp%9#0"
      ]
    },
    "3300": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "totalCollateral#0",
        "newTotalDisb#0",
        "tmp%9#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3301": {
      "op": "cover 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "totalCollateral#0",
        "encoded_tuple_buffer%3#0",
        "newTotalDisb#0",
        "tmp%9#0"
      ]
    },
    "3303": {
      "op": "uncover 4",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "totalCollateral#0",
        "encoded_tuple_buffer%3#0",
        "newTotalDisb#0",
        "tmp%9#0",
        "borrower#0"
      ]
    },
    "3305": {
      "op": "uncover 4",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "encoded_tuple_buffer%3#0",
        "newTotalDisb#0",
        "tmp%9#0",
        "borrower#0",
        "totalCollateral#0"
      ]
    },
    "3307": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateLoanRecord",
      "op": "callsub updateLoanRecord",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "updateLoanRecord%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "updateLoanRecord%0#0"
      ]
    },
    "3310": {
      "op": "pop",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3311": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3313": {
      "op": "frame_dig -4",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3315": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3318": {
      "block": "borrow_after_if_else@6",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ],
      "op": "txn Sender"
    },
    "3320": {
      "op": "intc_0 // 0"
    },
    "3321": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3322": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "maybe_exists%0#1",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "3323": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1"
      ]
    },
    "3324": {
      "op": "btoi",
      "defined_out": [
        "borrower#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1"
      ]
    },
    "3325": {
      "op": "bnz borrow_else_body@10",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3328": {
      "op": "itxn_begin"
    },
    "3329": {
      "op": "frame_dig 2",
      "defined_out": [
        "borrower#0",
        "disbursement#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3"
      ]
    },
    "3331": {
      "op": "itxn_field Amount",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3333": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3335": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "disbursement#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "1"
      ]
    },
    "3336": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3338": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "disbursement#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "1000"
      ]
    },
    "3340": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3342": {
      "op": "itxn_submit"
    },
    "3343": {
      "block": "borrow_after_if_else@12",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "0"
      ]
    },
    "3344": {
      "op": "bytec 7 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "3346": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3347": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%3#0"
      ]
    },
    "3348": {
      "op": "frame_dig 2",
      "defined_out": [
        "disbursement#3",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%3#0",
        "disbursement#3"
      ]
    },
    "3350": {
      "op": "+",
      "defined_out": [
        "disbursement#3",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "3351": {
      "op": "bytec 7 // \"total_borrows\"",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "3353": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "3354": {
      "op": "app_global_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3355": {
      "retsub": true,
      "op": "retsub"
    },
    "3356": {
      "block": "borrow_else_body@10",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0"
      ],
      "op": "itxn_begin"
    },
    "3357": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "0"
      ]
    },
    "3358": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3359": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "3360": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%1#1"
      ]
    },
    "3361": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "3362": {
      "op": "frame_dig 2",
      "defined_out": [
        "disbursement#3",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "disbursement#3"
      ]
    },
    "3364": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "3366": {
      "op": "itxn_field XferAsset",
      "defined_out": [
        "borrower#0",
        "disbursement#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3368": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3370": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "disbursement#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "4"
      ]
    },
    "3371": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3373": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "disbursement#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "1000"
      ]
    },
    "3375": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3377": {
      "op": "itxn_submit"
    },
    "3378": {
      "op": "b borrow_after_if_else@12"
    },
    "3381": {
      "block": "borrow_else_body@5",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "borrowerAddress#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0"
      ]
    },
    "3383": {
      "op": "frame_dig -4",
      "defined_out": [
        "borrowerAddress#0",
        "collateralAmount#0 (copy)"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3385": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ]
    },
    "3386": {
      "op": "frame_dig 2",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "disbursement#3"
      ]
    },
    "3388": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3389": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "to_encode%0#0"
      ]
    },
    "3391": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3392": {
      "op": "dig 1",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "3394": {
      "op": "bytec 15 // 0x00",
      "defined_out": [
        "0x00",
        "borrowerAddress#0",
        "disbursement#3",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)",
        "0x00"
      ]
    },
    "3396": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3397": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "3398": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3399": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0"
      ]
    },
    "3400": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3401": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_exists%0#1",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "3402": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1"
      ]
    },
    "3403": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "tmp%0#1"
      ]
    },
    "3405": {
      "op": "pushint 1728000 // 1728000",
      "defined_out": [
        "1728000",
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "tmp%0#1",
        "1728000"
      ]
    },
    "3409": {
      "op": "-",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "to_encode%1#0"
      ]
    },
    "3410": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0"
      ]
    },
    "3411": {
      "op": "dig 5",
      "defined_out": [
        "borrowerAddress#0",
        "borrowerAddress#0 (copy)",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)"
      ]
    },
    "3413": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3415": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3416": {
      "op": "uncover 5",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "3418": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3419": {
      "op": "uncover 3",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%1#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3421": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%1#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3422": {
      "op": "uncover 3",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%1#0"
      ]
    },
    "3424": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%9#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3425": {
      "op": "uncover 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "maybe_value%0#1"
      ]
    },
    "3427": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3428": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "3429": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "loanRecord#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "loanRecord#0"
      ]
    },
    "3430": {
      "op": "bytec 5 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "borrowerAddress#0",
        "disbursement#3",
        "loanRecord#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "borrowerAddress#0",
        "loanRecord#0",
        "\"loan_record\""
      ]
    },
    "3432": {
      "op": "uncover 2",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "loanRecord#0",
        "\"loan_record\"",
        "borrowerAddress#0"
      ]
    },
    "3434": {
      "op": "concat",
      "defined_out": [
        "disbursement#3",
        "loanRecord#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "loanRecord#0",
        "tmp%1#0"
      ]
    },
    "3435": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "tmp%1#0",
        "loanRecord#0"
      ]
    },
    "3436": {
      "op": "box_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3437": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "0"
      ]
    },
    "3438": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "disbursement#3"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "3439": {
      "op": "app_global_get_ex",
      "defined_out": [
        "disbursement#3",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3440": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%1#0"
      ]
    },
    "3441": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "disbursement#3",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "3442": {
      "op": "+",
      "defined_out": [
        "disbursement#3",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "3443": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "3444": {
      "op": "swap",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "3445": {
      "op": "app_global_put",
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3446": {
      "op": "b borrow_after_if_else@6"
    },
    "3449": {
      "block": "borrow_bool_false@21",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "3450": {
      "op": "b borrow_bool_merge@22"
    },
    "3453": {
      "block": "borrow_else_body@2",
      "stack_in": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "3455": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "disbursement#3",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "hasLoan#0"
      ]
    },
    "3457": {
      "op": "b borrow_after_if_else@3"
    },
    "3460": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateLoanRecord",
      "params": {
        "debtChange#0": "bytes",
        "totalDebt#0": "uint64",
        "collateralTokenId#0": "bytes",
        "borrowerAddress#0": "bytes",
        "collateralAmount#0": "uint64"
      },
      "block": "updateLoanRecord",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "3463": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralAmount#0 (copy)"
      ]
    },
    "3465": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3466": {
      "op": "frame_dig -4",
      "defined_out": [
        "totalDebt#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "totalDebt#0 (copy)"
      ]
    },
    "3468": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3469": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "3470": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3471": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3472": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0"
      ]
    },
    "3473": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%0#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "to_encode%0#0"
      ]
    },
    "3475": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0"
      ]
    },
    "3476": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "borrowerAddress#0 (copy)"
      ]
    },
    "3478": {
      "op": "frame_dig -3",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3480": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3481": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "3483": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3484": {
      "op": "frame_dig -5",
      "defined_out": [
        "debtChange#0 (copy)",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "debtChange#0 (copy)"
      ]
    },
    "3486": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3487": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%1#0"
      ]
    },
    "3489": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3490": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%5#0",
        "maybe_value%0#0"
      ]
    },
    "3492": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3493": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%2#0"
      ]
    },
    "3494": {
      "op": "concat",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "loanRecord#0"
      ]
    },
    "3495": {
      "op": "bytec 5 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "loanRecord#0"
      ],
      "stack_out": [
        "loanRecord#0",
        "\"loan_record\""
      ]
    },
    "3497": {
      "op": "frame_dig -2",
      "stack_out": [
        "loanRecord#0",
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "3499": {
      "op": "concat",
      "defined_out": [
        "loanRecord#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "loanRecord#0",
        "tmp%0#0"
      ]
    },
    "3500": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "loanRecord#0"
      ]
    },
    "3501": {
      "op": "box_put",
      "stack_out": []
    },
    "3502": {
      "op": "frame_dig -5",
      "stack_out": [
        "debtChange#0 (copy)"
      ]
    },
    "3504": {
      "retsub": true,
      "op": "retsub"
    },
    "3505": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest",
      "params": {
        "debtor#0": "bytes",
        "templateReserveAddress#0": "bytes"
      },
      "block": "accrueLoanInterest",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3508": {
      "op": "bytec 5 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "3510": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "3512": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3513": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3514": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3515": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3517": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3518": {
      "op": "box_get",
      "defined_out": [
        "currentLoanRecord#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "currentLoanRecord#0",
        "maybe_exists%1#0"
      ]
    },
    "3519": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "currentLoanRecord#0"
      ]
    },
    "3520": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest",
      "op": "callsub accrueInterest",
      "defined_out": [
        "currentLoanRecord#0",
        "iar#0"
      ],
      "stack_out": [
        "iar#0",
        "currentLoanRecord#0"
      ]
    },
    "3523": {
      "op": "dig 1",
      "defined_out": [
        "currentLoanRecord#0",
        "iar#0",
        "iar#0 (copy)"
      ],
      "stack_out": [
        "iar#0",
        "currentLoanRecord#0",
        "iar#0 (copy)"
      ]
    },
    "3525": {
      "error": "Index access is out of bounds",
      "op": "extract 0 17 // on error: Index access is out of bounds",
      "defined_out": [
        "currentLoanRecord#0",
        "iar#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "iar#0",
        "currentLoanRecord#0",
        "tmp%2#0"
      ]
    },
    "3528": {
      "op": "uncover 2",
      "stack_out": [
        "currentLoanRecord#0",
        "tmp%2#0",
        "iar#0"
      ]
    },
    "3530": {
      "op": "pushint 17 // 17",
      "defined_out": [
        "17",
        "currentLoanRecord#0",
        "iar#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "currentLoanRecord#0",
        "tmp%2#0",
        "iar#0",
        "17"
      ]
    },
    "3532": {
      "op": "extract_uint64",
      "defined_out": [
        "currentLoanRecord#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "currentLoanRecord#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "3533": {
      "op": "dig 2",
      "defined_out": [
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "currentLoanRecord#0",
        "tmp%2#0",
        "tmp%4#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "3535": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "currentLoanRecord#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "currentLoanRecord#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "3538": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "currentLoanRecord#0"
      ]
    },
    "3540": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "currentLoanRecord#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "currentLoanRecord#0",
        "40"
      ]
    },
    "3542": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "3543": {
      "op": "dig 3",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3545": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%2#0 (copy)",
        "tmp%4#0"
      ]
    },
    "3547": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%2#0 (copy)",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "3549": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%2#0",
        "tmp%7#0",
        "tmp%2#0 (copy)",
        "tmp%4#0",
        "tmp%5#0",
        "debtor#0 (copy)"
      ]
    },
    "3551": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%4#0",
        "tmp%5#0",
        "debtor#0 (copy)",
        "tmp%7#0"
      ]
    },
    "3553": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateLoanRecord",
      "op": "callsub updateLoanRecord",
      "defined_out": [
        "tmp%2#0",
        "updateLoanRecord%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "updateLoanRecord%0#0"
      ]
    },
    "3556": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3557": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "3558": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3559": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3560": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%2#0"
      ]
    },
    "3561": {
      "op": "swap",
      "stack_out": [
        "maybe_value%2#0",
        "tmp%2#0"
      ]
    },
    "3562": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "tmp%2#0",
        "0"
      ]
    },
    "3563": {
      "op": "extract_uint64",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%10#0"
      ]
    },
    "3564": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "3565": {
      "op": "bytec_1 // \"total_deposits\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"total_deposits\""
      ]
    },
    "3566": {
      "op": "swap",
      "stack_out": [
        "\"total_deposits\"",
        "new_state_value%0#0"
      ]
    },
    "3567": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3568": {
      "retsub": true,
      "op": "retsub"
    },
    "3569": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "params": {},
      "block": "current_apr_bps",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3572": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "U_raw#0"
      ]
    },
    "3574": {
      "op": "dupn 12",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0"
      ]
    },
    "3576": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "0"
      ]
    },
    "3577": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3578": {
      "op": "app_global_get_ex",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "3579": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "maybe_exists%0#0",
        "D#0"
      ]
    },
    "3580": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "maybe_exists%0#0",
        "D#0",
        "D#0 (copy)"
      ]
    },
    "3581": {
      "op": "uncover 2",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "3583": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0"
      ]
    },
    "3584": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "0"
      ]
    },
    "3585": {
      "op": "bytec 7 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "3587": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "B#0",
        "maybe_exists%1#0"
      ]
    },
    "3588": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "maybe_exists%1#0",
        "B#0"
      ]
    },
    "3589": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ]
    },
    "3591": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0"
      ]
    },
    "3592": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "0"
      ]
    },
    "3593": {
      "op": "bytec 19 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\"",
        "0",
        "B#0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "0",
        "\"util_cap_bps\""
      ]
    },
    "3595": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "3596": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%2#0",
        "cap_bps#0"
      ]
    },
    "3597": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "maybe_exists%2#0"
      ]
    },
    "3599": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "3600": {
      "op": "bnz current_apr_bps_after_if_else@29",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3603": {
      "op": "intc_0 // 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "3604": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3606": {
      "block": "current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3607": {
      "op": "bytec 24 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"ema_alpha_bps\""
      ]
    },
    "3609": {
      "op": "app_global_get_ex",
      "defined_out": [
        "alpha#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0",
        "maybe_exists%0#0"
      ]
    },
    "3610": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%0#0",
        "alpha#0"
      ]
    },
    "3611": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%0#0",
        "alpha#0",
        "alpha#0 (copy)"
      ]
    },
    "3612": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0",
        "maybe_exists%0#0",
        "alpha#0"
      ]
    },
    "3614": {
      "op": "frame_bury 2",
      "defined_out": [
        "alpha#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0",
        "maybe_exists%0#0"
      ]
    },
    "3616": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0"
      ]
    },
    "3617": {
      "op": "bnz current_apr_bps_else_body@2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3620": {
      "op": "frame_dig 0",
      "defined_out": [
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1"
      ]
    },
    "3622": {
      "op": "frame_bury 1",
      "defined_out": [
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3624": {
      "block": "current_apr_bps_after_if_else@3",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3625": {
      "op": "bytec 20 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"rate_model_type\""
      ]
    },
    "3627": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3628": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%2#0"
      ]
    },
    "3629": {
      "op": "bnz current_apr_bps_ternary_false@5",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3632": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3633": {
      "op": "bytec 14 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "3635": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%0#0"
      ]
    },
    "3636": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0"
      ]
    },
    "3637": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0"
      ]
    },
    "3638": {
      "op": "bytec 21 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\"",
        "0",
        "base_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0",
        "\"kink_norm_bps\""
      ]
    },
    "3640": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "3641": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "3642": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "3643": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "3645": {
      "op": "cover 3",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "3647": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "3648": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "3649": {
      "op": "bytec 22 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope1_bps\""
      ]
    },
    "3651": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "3652": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ]
    },
    "3653": {
      "op": "frame_bury 10",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "3655": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "3656": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "3657": {
      "op": "bytec 23 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope2_bps\""
      ]
    },
    "3659": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope2_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "3660": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope2_bps#0"
      ]
    },
    "3661": {
      "op": "frame_bury 11",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "3663": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "3664": {
      "op": "frame_dig 1",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_used#1"
      ]
    },
    "3666": {
      "op": ">=",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "tmp%0#1"
      ]
    },
    "3667": {
      "op": "bz current_apr_bps_else_body@21",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ]
    },
    "3670": {
      "op": "frame_dig 10",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "3672": {
      "op": "frame_dig 1",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0",
        "U_used#1"
      ]
    },
    "3674": {
      "op": "mulw",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "hi1#0",
        "kink_norm_bps#0",
        "lo1#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0"
      ]
    },
    "3675": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0",
        "kink_norm_bps#0"
      ]
    },
    "3677": {
      "op": "divw",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "tmp%1#0"
      ]
    },
    "3678": {
      "op": "+",
      "defined_out": [
        "U_used#1",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3679": {
      "op": "frame_bury 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3681": {
      "block": "current_apr_bps_after_if_else@22",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3682": {
      "op": "bytec 12 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "3684": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "3685": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "3686": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0",
        "maxCap#0 (copy)"
      ]
    },
    "3687": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "3689": {
      "op": "frame_bury 8",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "3691": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "3692": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "apr#18"
      ]
    },
    "3694": {
      "op": "frame_bury 4",
      "defined_out": [
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "3696": {
      "op": "bz current_apr_bps_after_if_else@25",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3699": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#0",
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3701": {
      "op": "dup",
      "defined_out": [
        "apr#0",
        "apr#0 (copy)",
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)"
      ]
    },
    "3702": {
      "op": "frame_dig 8",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)",
        "maxCap#0"
      ]
    },
    "3704": {
      "op": ">",
      "defined_out": [
        "apr#0",
        "apr#18",
        "maxCap#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "tmp%5#1"
      ]
    },
    "3705": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#1",
        "apr#18"
      ]
    },
    "3706": {
      "op": "frame_bury 4",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#1"
      ]
    },
    "3708": {
      "op": "bz current_apr_bps_after_if_else@25",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3711": {
      "op": "frame_dig 8",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#18"
      ]
    },
    "3713": {
      "op": "frame_bury 4",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3715": {
      "block": "current_apr_bps_after_if_else@25",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3717": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3719": {
      "block": "current_apr_bps_ternary_merge@6",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3720": {
      "op": "bytec 25 // \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"max_apr_step_bps\""
      ]
    },
    "3722": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "maybe_exists%4#0"
      ]
    },
    "3723": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "stepMax#0"
      ]
    },
    "3724": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "stepMax#0",
        "stepMax#0 (copy)"
      ]
    },
    "3725": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "maybe_exists%4#0",
        "stepMax#0"
      ]
    },
    "3727": {
      "op": "frame_bury 12",
      "defined_out": [
        "maybe_exists%4#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "maybe_exists%4#0"
      ]
    },
    "3729": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0"
      ]
    },
    "3730": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "apr#18"
      ]
    },
    "3732": {
      "op": "frame_bury 4",
      "defined_out": [
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0"
      ]
    },
    "3734": {
      "op": "bz current_apr_bps_after_if_else@18",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3737": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3738": {
      "op": "bytec 13 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0",
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "3740": {
      "op": "app_global_get_ex",
      "defined_out": [
        "apr#18",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3741": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%5#0"
      ]
    },
    "3742": {
      "op": "bnz current_apr_bps_ternary_false@9",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3745": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3746": {
      "op": "bytec 14 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0",
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "3748": {
      "op": "app_global_get_ex",
      "defined_out": [
        "apr#18",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3749": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "apr#18",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3750": {
      "op": "frame_bury 9",
      "defined_out": [
        "apr#18",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3752": {
      "block": "current_apr_bps_ternary_merge@10",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3754": {
      "op": "frame_dig 12",
      "defined_out": [
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0",
        "stepMax#0"
      ]
    },
    "3756": {
      "op": ">",
      "defined_out": [
        "prevApr#0",
        "stepMax#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%6#0"
      ]
    },
    "3757": {
      "op": "bz current_apr_bps_ternary_false@12",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3760": {
      "op": "frame_dig 9",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3762": {
      "op": "frame_dig 12",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0",
        "stepMax#0"
      ]
    },
    "3764": {
      "op": "-",
      "defined_out": [
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "lo#0"
      ]
    },
    "3765": {
      "op": "frame_bury 7",
      "defined_out": [
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3767": {
      "block": "current_apr_bps_ternary_merge@13",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3769": {
      "op": "frame_dig 12",
      "defined_out": [
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0",
        "stepMax#0"
      ]
    },
    "3771": {
      "op": "+",
      "defined_out": [
        "hi#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hi#0"
      ]
    },
    "3772": {
      "op": "frame_bury 6",
      "defined_out": [
        "hi#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3774": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#0",
        "hi#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3776": {
      "op": "frame_dig 7",
      "defined_out": [
        "apr#0",
        "hi#0",
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "lo#0"
      ]
    },
    "3778": {
      "op": "<",
      "defined_out": [
        "apr#0",
        "hi#0",
        "lo#0",
        "prevApr#0",
        "stepMax#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%7#0"
      ]
    },
    "3779": {
      "op": "bz current_apr_bps_after_if_else@15",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3782": {
      "op": "frame_dig 7",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3784": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0",
        "hi#0",
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3786": {
      "block": "current_apr_bps_after_if_else@15",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3788": {
      "op": "frame_dig 6",
      "defined_out": [
        "apr#0",
        "hi#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "hi#0"
      ]
    },
    "3790": {
      "op": ">",
      "defined_out": [
        "apr#0",
        "hi#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%8#0"
      ]
    },
    "3791": {
      "op": "bz current_apr_bps_after_if_else@17",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3794": {
      "op": "frame_dig 6",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3796": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0",
        "hi#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3798": {
      "block": "current_apr_bps_after_if_else@17",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "apr#18"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#18"
      ]
    },
    "3800": {
      "op": "frame_bury 4",
      "defined_out": [
        "apr#18"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3802": {
      "block": "current_apr_bps_after_if_else@18",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3804": {
      "op": "bytec 13 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "\"prev_apr_bps\""
      ]
    },
    "3806": {
      "op": "dig 1",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0",
        "apr#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "\"prev_apr_bps\"",
        "apr#0 (copy)"
      ]
    },
    "3808": {
      "op": "app_global_put",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3809": {
      "op": "frame_bury 0"
    },
    "3811": {
      "retsub": true,
      "op": "retsub"
    },
    "3812": {
      "block": "current_apr_bps_ternary_false@12",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "lo#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "lo#0"
      ]
    },
    "3813": {
      "op": "frame_bury 7",
      "defined_out": [
        "lo#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3815": {
      "op": "b current_apr_bps_ternary_merge@13"
    },
    "3818": {
      "block": "current_apr_bps_ternary_false@9",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3819": {
      "op": "bytec 13 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "3821": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "3822": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3823": {
      "op": "frame_bury 9",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3825": {
      "op": "b current_apr_bps_ternary_merge@10"
    },
    "3828": {
      "block": "current_apr_bps_else_body@21",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "U_used#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "U_used#1"
      ]
    },
    "3830": {
      "op": "uncover 2",
      "defined_out": [
        "U_used#1",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_used#1",
        "kink_norm_bps#0"
      ]
    },
    "3832": {
      "op": "dup",
      "defined_out": [
        "U_used#1",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_used#1",
        "kink_norm_bps#0 (copy)",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "3833": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_used#1",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "3835": {
      "op": "-",
      "defined_out": [
        "U_used#1",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0"
      ]
    },
    "3836": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "U_used#1",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0",
        "10000"
      ]
    },
    "3837": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "10000",
        "kink_norm_bps#0"
      ]
    },
    "3839": {
      "op": "-",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0"
      ]
    },
    "3840": {
      "op": "frame_dig 11",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "over#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0",
        "slope2_bps#0"
      ]
    },
    "3842": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "slope2_bps#0",
        "over#0"
      ]
    },
    "3844": {
      "op": "mulw",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "3845": {
      "op": "uncover 3",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0"
      ]
    },
    "3847": {
      "op": "frame_dig 10",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "3849": {
      "op": "+",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "tmp%2#0"
      ]
    },
    "3850": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "3852": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0",
        "denom#0"
      ]
    },
    "3854": {
      "op": "divw",
      "defined_out": [
        "U_used#1",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "tmp%3#1"
      ]
    },
    "3855": {
      "op": "+",
      "defined_out": [
        "U_used#1",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3856": {
      "op": "frame_bury 3",
      "defined_out": [
        "U_used#1",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3858": {
      "op": "b current_apr_bps_after_if_else@22"
    },
    "3861": {
      "block": "current_apr_bps_ternary_false@5",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3862": {
      "op": "bytec 14 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "3864": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3865": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3866": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3868": {
      "op": "b current_apr_bps_ternary_merge@6"
    },
    "3871": {
      "block": "current_apr_bps_else_body@2",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3872": {
      "op": "bytec 26 // \"util_ema_bps\"",
      "defined_out": [
        "\"util_ema_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"util_ema_bps\""
      ]
    },
    "3874": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "maybe_exists%1#0"
      ]
    },
    "3875": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0"
      ]
    },
    "3876": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "10000"
      ]
    },
    "3877": {
      "op": "frame_dig 2",
      "defined_out": [
        "10000",
        "alpha#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "10000",
        "alpha#0"
      ]
    },
    "3879": {
      "op": "dup",
      "defined_out": [
        "10000",
        "alpha#0",
        "alpha#0 (copy)",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "10000",
        "alpha#0 (copy)",
        "alpha#0 (copy)"
      ]
    },
    "3880": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "alpha#0",
        "10000",
        "alpha#0 (copy)"
      ]
    },
    "3882": {
      "op": "-",
      "defined_out": [
        "alpha#0",
        "oneMinus#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "alpha#0",
        "oneMinus#0"
      ]
    },
    "3883": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "oneMinus#0",
        "alpha#0"
      ]
    },
    "3884": {
      "op": "frame_dig 0",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "oneMinus#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "oneMinus#0",
        "alpha#0",
        "U_raw#0"
      ]
    },
    "3886": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "hiA#0",
        "loA#0",
        "oneMinus#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "oneMinus#0",
        "hiA#0",
        "loA#0"
      ]
    },
    "3887": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "hiA#0",
        "loA#0",
        "oneMinus#0"
      ]
    },
    "3889": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiA#0",
        "loA#0",
        "oneMinus#0",
        "prevU#0"
      ]
    },
    "3891": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "hiA#0",
        "hiB#0",
        "loA#0",
        "loB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiA#0",
        "loA#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "3892": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "loA#0",
        "hiB#0",
        "loB#0",
        "hiA#0"
      ]
    },
    "3894": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiB#0",
        "loB#0",
        "hiA#0",
        "loA#0"
      ]
    },
    "3896": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiB#0",
        "loB#0",
        "hiA#0",
        "loA#0",
        "10000"
      ]
    },
    "3897": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "hiB#0",
        "loB#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiB#0",
        "loB#0",
        "tmp%1#0"
      ]
    },
    "3898": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%1#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "3900": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%1#0",
        "hiB#0",
        "loB#0",
        "10000"
      ]
    },
    "3901": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "3902": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1"
      ]
    },
    "3903": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1",
        "U_used#1"
      ]
    },
    "3904": {
      "op": "frame_bury 1",
      "defined_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1"
      ]
    },
    "3906": {
      "op": "bytec 26 // \"util_ema_bps\"",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1",
        "\"util_ema_bps\""
      ]
    },
    "3908": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"util_ema_bps\"",
        "U_used#1"
      ]
    },
    "3909": {
      "op": "app_global_put",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3910": {
      "op": "b current_apr_bps_after_if_else@3"
    },
    "3913": {
      "block": "current_apr_bps_after_if_else@29",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 13",
      "defined_out": [
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "3915": {
      "op": "frame_dig 15",
      "defined_out": [
        "D#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "cap_bps#0"
      ]
    },
    "3917": {
      "op": "mulw",
      "defined_out": [
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ]
    },
    "3918": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0",
        "10000"
      ]
    },
    "3919": {
      "op": "divw",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "3920": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0"
      ]
    },
    "3921": {
      "op": "frame_bury 5",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "3923": {
      "op": "bnz current_apr_bps_after_if_else@31",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3926": {
      "op": "intc_0 // 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "3927": {
      "op": "frame_bury 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3929": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32"
    },
    "3932": {
      "block": "current_apr_bps_after_if_else@31",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 14",
      "defined_out": [
        "B#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0"
      ]
    },
    "3934": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)"
      ]
    },
    "3935": {
      "op": "frame_dig 5",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ]
    },
    "3937": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0",
        "capBorrow#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "3938": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "3940": {
      "op": "<=",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "tmp%2#2"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#2"
      ]
    },
    "3941": {
      "op": "dig 1",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#2",
        "capBorrow#0 (copy)"
      ]
    },
    "3943": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "tmp%2#2",
        "capBorrow#0 (copy)",
        "B#0"
      ]
    },
    "3945": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0 (copy)",
        "B#0",
        "tmp%2#2"
      ]
    },
    "3947": {
      "op": "select",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0"
      ]
    },
    "3948": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0",
        "10000"
      ]
    },
    "3949": {
      "op": "mulw",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ]
    },
    "3950": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiN#0",
        "loN#0",
        "capBorrow#0"
      ]
    },
    "3952": {
      "op": "divw",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "3953": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3955": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32"
    },
    "3958": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest",
      "params": {
        "record#0": "bytes"
      },
      "block": "accrueInterest",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "3961": {
      "op": "global LatestTimestamp"
    },
    "3963": {
      "op": "dup"
    },
    "3964": {
      "op": "frame_dig -1"
    },
    "3966": {
      "op": "pushint 81 // 81",
      "defined_out": [
        "81",
        "now#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "now#0",
        "now#0",
        "record#0 (copy)",
        "81"
      ]
    },
    "3968": {
      "op": "extract_uint64",
      "defined_out": [
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "now#0",
        "last#0"
      ]
    },
    "3969": {
      "op": "dup",
      "stack_out": [
        "now#0",
        "now#0",
        "last#0",
        "last#0"
      ]
    },
    "3970": {
      "op": "cover 2",
      "defined_out": [
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "3972": {
      "op": "<=",
      "defined_out": [
        "last#0",
        "now#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "tmp%1#0"
      ]
    },
    "3973": {
      "op": "bz accrueInterest_after_if_else@2",
      "stack_out": [
        "now#0",
        "last#0"
      ]
    },
    "3976": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "last#0",
        "now#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "to_encode%0#0"
      ]
    },
    "3978": {
      "op": "itob",
      "defined_out": [
        "last#0",
        "now#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "val_as_bytes%0#0"
      ]
    },
    "3979": {
      "op": "pushbytes 0x000000000000000001",
      "defined_out": [
        "0x000000000000000001",
        "last#0",
        "now#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "val_as_bytes%0#0",
        "0x000000000000000001"
      ]
    },
    "3990": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "0x000000000000000001",
        "val_as_bytes%0#0"
      ]
    },
    "3991": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3992": {
      "op": "frame_dig -1",
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%3#0",
        "record#0 (copy)"
      ]
    },
    "3994": {
      "error": "Index access is out of bounds",
      "op": "extract 65 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "last#0",
        "now#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%3#0",
        "tmp%2#0"
      ]
    },
    "3997": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3998": {
      "op": "frame_dig -1",
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%6#0",
        "record#0 (copy)"
      ]
    },
    "4000": {
      "op": "uncover 3"
    },
    "4002": {
      "op": "uncover 3"
    },
    "4004": {
      "retsub": true,
      "op": "retsub"
    },
    "4005": {
      "block": "accrueInterest_after_if_else@2",
      "stack_in": [
        "now#0",
        "last#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "now#0"
      ]
    },
    "4007": {
      "op": "frame_dig 1",
      "defined_out": [
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4009": {
      "op": "-",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4010": {
      "op": "frame_dig -1",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "record#0 (copy)"
      ]
    },
    "4012": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "deltaT#0",
        "last#0",
        "now#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "record#0 (copy)",
        "65"
      ]
    },
    "4014": {
      "op": "extract_uint64",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0"
      ]
    },
    "4015": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "principal#0",
        "rateBps#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0",
        "rateBps#0"
      ]
    },
    "4018": {
      "op": "dig 1",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "principal#0",
        "principal#0 (copy)",
        "rateBps#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0",
        "rateBps#0",
        "principal#0 (copy)"
      ]
    },
    "4020": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "hi1#0",
        "last#0",
        "lo1#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0",
        "hi1#0",
        "lo1#0"
      ]
    },
    "4021": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "deltaT#0",
        "hi1#0",
        "last#0",
        "lo1#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0",
        "hi1#0",
        "lo1#0",
        "10000"
      ]
    },
    "4022": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "principal#0",
        "rateScaled#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "deltaT#0",
        "principal#0",
        "rateScaled#0"
      ]
    },
    "4023": {
      "op": "uncover 2",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "rateScaled#0",
        "deltaT#0"
      ]
    },
    "4025": {
      "op": "mulw",
      "defined_out": [
        "hi2#0",
        "last#0",
        "lo2#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "4026": {
      "op": "pushint 31536000 // 31536000",
      "defined_out": [
        "31536000",
        "hi2#0",
        "last#0",
        "lo2#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "hi2#0",
        "lo2#0",
        "31536000"
      ]
    },
    "4031": {
      "op": "divw",
      "defined_out": [
        "interest#0",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0"
      ]
    },
    "4032": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "interest#0",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "0"
      ]
    },
    "4033": {
      "op": "bytec 30 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\"",
        "0",
        "interest#0",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "0",
        "\"protocol_share_bps\""
      ]
    },
    "4035": {
      "op": "app_global_get_ex",
      "defined_out": [
        "interest#0",
        "last#0",
        "maybe_exists%0#0",
        "now#0",
        "principal#0",
        "protoBps#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protoBps#0",
        "maybe_exists%0#0"
      ]
    },
    "4036": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protoBps#0"
      ]
    },
    "4037": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protoBps#0",
        "10000"
      ]
    },
    "4038": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "10000",
        "protoBps#0"
      ]
    },
    "4039": {
      "op": "-",
      "defined_out": [
        "depositorBps#0",
        "interest#0",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorBps#0"
      ]
    },
    "4040": {
      "op": "dig 1",
      "defined_out": [
        "depositorBps#0",
        "interest#0",
        "interest#0 (copy)",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorBps#0",
        "interest#0 (copy)"
      ]
    },
    "4042": {
      "op": "mulw",
      "defined_out": [
        "hiDep#0",
        "interest#0",
        "last#0",
        "loDep#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "hiDep#0",
        "loDep#0"
      ]
    },
    "4043": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "hiDep#0",
        "loDep#0",
        "10000"
      ]
    },
    "4044": {
      "op": "divw",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorInterest#0"
      ]
    },
    "4045": {
      "op": "dup2",
      "defined_out": [
        "depositorInterest#0",
        "depositorInterest#0 (copy)",
        "interest#0",
        "interest#0 (copy)",
        "last#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorInterest#0",
        "interest#0 (copy)",
        "depositorInterest#0 (copy)"
      ]
    },
    "4046": {
      "op": "-",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "last#0",
        "now#0",
        "principal#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4047": {
      "op": "intc_0 // 0",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4048": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "depositorInterest#0",
        "interest#0",
        "last#0",
        "now#0",
        "principal#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "4049": {
      "op": "app_global_get_ex",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "last#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "now#0",
        "principal#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4050": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%1#0"
      ]
    },
    "4051": {
      "op": "uncover 2",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%1#0",
        "depositorInterest#0"
      ]
    },
    "4053": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "last#0",
        "new_state_value%0#0",
        "now#0",
        "principal#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%0#0"
      ]
    },
    "4054": {
      "op": "bytec_1 // \"total_deposits\"",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%0#0",
        "\"total_deposits\""
      ]
    },
    "4055": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "\"total_deposits\"",
        "new_state_value%0#0"
      ]
    },
    "4056": {
      "op": "app_global_put",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0"
      ]
    },
    "4057": {
      "op": "intc_0 // 0",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4058": {
      "op": "bytec 9 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "interest#0",
        "last#0",
        "now#0",
        "principal#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "4060": {
      "op": "app_global_get_ex",
      "defined_out": [
        "interest#0",
        "last#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "now#0",
        "principal#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4061": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%2#0"
      ]
    },
    "4062": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "last#0",
        "new_state_value%1#0",
        "now#0",
        "principal#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "new_state_value%1#0"
      ]
    },
    "4063": {
      "op": "bytec 9 // \"fee_pool\"",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "new_state_value%1#0",
        "\"fee_pool\""
      ]
    },
    "4065": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0",
        "\"fee_pool\"",
        "new_state_value%1#0"
      ]
    },
    "4066": {
      "op": "app_global_put",
      "stack_out": [
        "now#0",
        "last#0",
        "principal#0",
        "interest#0"
      ]
    },
    "4067": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "interest#0",
        "principal#0"
      ]
    },
    "4068": {
      "op": "dig 1",
      "stack_out": [
        "now#0",
        "last#0",
        "interest#0",
        "principal#0",
        "interest#0 (copy)"
      ]
    },
    "4070": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "last#0",
        "newPrincipal#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "interest#0",
        "newPrincipal#0"
      ]
    },
    "4071": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "interest#0"
      ]
    },
    "4072": {
      "op": "itob",
      "defined_out": [
        "last#0",
        "newPrincipal#0",
        "now#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "val_as_bytes%1#0"
      ]
    },
    "4073": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "last#0",
        "newPrincipal#0",
        "now#0",
        "to_encode%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "val_as_bytes%1#0",
        "to_encode%1#0"
      ]
    },
    "4075": {
      "op": "itob",
      "defined_out": [
        "last#0",
        "newPrincipal#0",
        "now#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "4076": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "4077": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "last#0",
        "newPrincipal#0",
        "now#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0",
        "0x01"
      ]
    },
    "4080": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "last#0",
        "newPrincipal#0",
        "now#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4081": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%2#0"
      ]
    },
    "4082": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "last#0",
        "newPrincipal#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "newPrincipal#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4083": {
      "op": "swap",
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%10#0",
        "newPrincipal#0"
      ]
    },
    "4084": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "last#0",
        "now#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%3#0"
      ]
    },
    "4085": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "4086": {
      "op": "frame_dig -1",
      "stack_out": [
        "now#0",
        "last#0",
        "encoded_tuple_buffer%13#0",
        "record#0 (copy)"
      ]
    },
    "4088": {
      "op": "uncover 3"
    },
    "4090": {
      "op": "uncover 3"
    },
    "4092": {
      "retsub": true,
      "op": "retsub"
    },
    "4093": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "params": {
        "borrowerAddress#0": "bytes"
      },
      "block": "getLoanRecord",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4096": {
      "op": "bytec 5 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4098": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4100": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4101": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4102": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4103": {
      "retsub": true,
      "op": "retsub"
    },
    "4104": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "repaymentAmount#0": "uint64",
        "templateReserveAddress#0": "bytes"
      },
      "block": "repayLoanASA",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "4107": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4109": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4110": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4111": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4112": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0"
      ]
    },
    "4113": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4114": {
      "op": "frame_dig -3",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4116": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "4118": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "4120": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "4121": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4124": {
      "op": "frame_dig -3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4126": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "4128": {
      "op": "frame_dig 1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%3#0",
        "baseToken#0"
      ]
    },
    "4130": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "4131": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4134": {
      "op": "frame_dig -3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4136": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "4138": {
      "op": "frame_dig -2",
      "defined_out": [
        "baseToken#0",
        "repaymentAmount#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%5#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4140": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "4141": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4144": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "4145": {
      "block": "repayLoanASA_bool_merge@5",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4146": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "4148": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ]
    },
    "4151": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest",
      "op": "callsub accrueInterest",
      "defined_out": [
        "iar#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "iar#0",
        "loanRecord#0"
      ]
    },
    "4154": {
      "op": "swap",
      "defined_out": [
        "iar#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "iar#0"
      ]
    },
    "4155": {
      "op": "pushint 17 // 17",
      "defined_out": [
        "17",
        "iar#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "iar#0",
        "17"
      ]
    },
    "4157": {
      "op": "extract_uint64",
      "defined_out": [
        "loanRecord#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "tmp%9#0"
      ]
    },
    "4158": {
      "op": "frame_dig -2",
      "defined_out": [
        "loanRecord#0",
        "repaymentAmount#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "tmp%9#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4160": {
      "op": "dig 1",
      "defined_out": [
        "loanRecord#0",
        "repaymentAmount#0 (copy)",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "tmp%9#0",
        "repaymentAmount#0 (copy)",
        "tmp%9#0 (copy)"
      ]
    },
    "4162": {
      "op": "<=",
      "defined_out": [
        "loanRecord#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "4163": {
      "op": "assert",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "tmp%9#0"
      ]
    },
    "4164": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "tmp%9#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4166": {
      "op": "-",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0"
      ]
    },
    "4167": {
      "op": "dup",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0",
        "remainingDebt#0"
      ]
    },
    "4168": {
      "op": "frame_bury 0",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0"
      ]
    },
    "4170": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0",
        "0"
      ]
    },
    "4171": {
      "op": "bytec 7 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4173": {
      "op": "app_global_get_ex",
      "defined_out": [
        "loanRecord#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4174": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0",
        "maybe_value%1#0"
      ]
    },
    "4175": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4177": {
      "op": "-",
      "defined_out": [
        "loanRecord#0",
        "new_state_value%0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0",
        "new_state_value%0#0"
      ]
    },
    "4178": {
      "op": "bytec 7 // \"total_borrows\"",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4180": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4181": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "remainingDebt#0"
      ]
    },
    "4182": {
      "op": "bnz repayLoanASA_else_body@8",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ]
    },
    "4185": {
      "op": "bytec 5 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "\"loan_record\""
      ]
    },
    "4187": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "loanRecord#0",
        "remainingDebt#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "\"loan_record\"",
        "tmp%14#0"
      ]
    },
    "4189": {
      "op": "concat",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "tmp%15#0"
      ]
    },
    "4190": {
      "op": "box_del",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0",
        "{box_del}"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "{box_del}"
      ]
    },
    "4191": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ]
    },
    "4192": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "0"
      ]
    },
    "4193": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4194": {
      "op": "app_global_get_ex",
      "defined_out": [
        "loanRecord#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4195": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "maybe_value%2#0"
      ]
    },
    "4196": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "loanRecord#0",
        "maybe_value%2#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "4197": {
      "op": "-",
      "defined_out": [
        "loanRecord#0",
        "new_state_value%1#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "new_state_value%1#0"
      ]
    },
    "4198": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "4199": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "4200": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ]
    },
    "4201": {
      "op": "itxn_begin"
    },
    "4202": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4204": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0"
      ]
    },
    "4205": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)"
      ]
    },
    "4206": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)",
        "32"
      ]
    },
    "4208": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4209": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0"
      ]
    },
    "4210": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0",
        "40"
      ]
    },
    "4212": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "4213": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4215": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4217": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4219": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "4"
      ]
    },
    "4220": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4222": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "0"
      ]
    },
    "4223": {
      "op": "itxn_field Fee",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4225": {
      "op": "itxn_submit"
    },
    "4226": {
      "retsub": true,
      "op": "retsub"
    },
    "4227": {
      "block": "repayLoanASA_else_body@8",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4229": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "val_as_bytes%0#0"
      ]
    },
    "4230": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "4232": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4233": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "4234": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "4237": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4238": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "4239": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4240": {
      "op": "swap",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0"
      ]
    },
    "4241": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "loanRecord#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "loanRecord#0 (copy)"
      ]
    },
    "4242": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%18#0"
      ]
    },
    "4245": {
      "op": "txn Sender",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "4247": {
      "op": "uncover 2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "tmp%18#0",
        "tmp%19#0",
        "loanRecord#0"
      ]
    },
    "4249": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "tmp%18#0",
        "tmp%19#0",
        "loanRecord#0",
        "40"
      ]
    },
    "4251": {
      "op": "extract_uint64",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "4252": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4254": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0"
      ]
    },
    "4256": {
      "op": "cover 4"
    },
    "4258": {
      "op": "cover 4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "4260": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateLoanRecord",
      "op": "callsub updateLoanRecord",
      "defined_out": [
        "remainingDebt#0",
        "updateLoanRecord%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "updateLoanRecord%0#0"
      ]
    },
    "4263": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4264": {
      "retsub": true,
      "op": "retsub"
    },
    "4265": {
      "block": "repayLoanASA_bool_false@4",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "4266": {
      "op": "b repayLoanASA_bool_merge@5"
    },
    "4269": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo",
      "params": {
        "paymentTxn#0": "uint64",
        "repaymentAmount#0": "uint64",
        "templateReserveAddress#0": "bytes"
      },
      "block": "repayLoanAlgo",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "4272": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4274": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4275": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4276": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4277": {
      "op": "bury 1",
      "stack_out": [
        "remainingDebt#0",
        "maybe_exists%0#0"
      ]
    },
    "4279": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4280": {
      "op": "frame_dig -3",
      "defined_out": [
        "paymentTxn#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4282": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%0#0"
      ]
    },
    "4284": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "4286": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%2#0"
      ]
    },
    "4287": {
      "op": "bz repayLoanAlgo_bool_false@3",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4290": {
      "op": "frame_dig -3",
      "stack_out": [
        "remainingDebt#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4292": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%3#0"
      ]
    },
    "4294": {
      "op": "frame_dig -2",
      "defined_out": [
        "repaymentAmount#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%3#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4296": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%4#0"
      ]
    },
    "4297": {
      "op": "bz repayLoanAlgo_bool_false@3",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4300": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "and_result%0#0"
      ]
    },
    "4301": {
      "block": "repayLoanAlgo_bool_merge@4",
      "stack_in": [
        "remainingDebt#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4302": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%5#0"
      ]
    },
    "4304": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0"
      ]
    },
    "4307": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest",
      "op": "callsub accrueInterest",
      "defined_out": [
        "iar#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "iar#0",
        "loanRecord#0"
      ]
    },
    "4310": {
      "op": "swap",
      "defined_out": [
        "iar#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "iar#0"
      ]
    },
    "4311": {
      "op": "pushint 17 // 17",
      "defined_out": [
        "17",
        "iar#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "iar#0",
        "17"
      ]
    },
    "4313": {
      "op": "extract_uint64",
      "defined_out": [
        "loanRecord#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "tmp%7#0"
      ]
    },
    "4314": {
      "op": "frame_dig -2",
      "defined_out": [
        "loanRecord#0",
        "repaymentAmount#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "tmp%7#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4316": {
      "op": "dig 1",
      "defined_out": [
        "loanRecord#0",
        "repaymentAmount#0 (copy)",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "tmp%7#0",
        "repaymentAmount#0 (copy)",
        "tmp%7#0 (copy)"
      ]
    },
    "4318": {
      "op": "<=",
      "defined_out": [
        "loanRecord#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "4319": {
      "op": "assert",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "tmp%7#0"
      ]
    },
    "4320": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "tmp%7#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4322": {
      "op": "-",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0"
      ]
    },
    "4323": {
      "op": "dup",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0",
        "remainingDebt#0"
      ]
    },
    "4324": {
      "op": "frame_bury 0",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0"
      ]
    },
    "4326": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0",
        "0"
      ]
    },
    "4327": {
      "op": "bytec 7 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4329": {
      "op": "app_global_get_ex",
      "defined_out": [
        "loanRecord#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4330": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0",
        "maybe_value%1#0"
      ]
    },
    "4331": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4333": {
      "op": "-",
      "defined_out": [
        "loanRecord#0",
        "new_state_value%0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0",
        "new_state_value%0#0"
      ]
    },
    "4334": {
      "op": "bytec 7 // \"total_borrows\"",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4336": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4337": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "remainingDebt#0"
      ]
    },
    "4338": {
      "op": "bnz repayLoanAlgo_else_body@7",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0"
      ]
    },
    "4341": {
      "op": "bytec 5 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "\"loan_record\""
      ]
    },
    "4343": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "loanRecord#0",
        "remainingDebt#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "\"loan_record\"",
        "tmp%12#0"
      ]
    },
    "4345": {
      "op": "concat",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "tmp%13#0"
      ]
    },
    "4346": {
      "op": "box_del",
      "defined_out": [
        "loanRecord#0",
        "remainingDebt#0",
        "{box_del}"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "{box_del}"
      ]
    },
    "4347": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0"
      ]
    },
    "4348": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "0"
      ]
    },
    "4349": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4350": {
      "op": "app_global_get_ex",
      "defined_out": [
        "loanRecord#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4351": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "maybe_value%2#0"
      ]
    },
    "4352": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "loanRecord#0",
        "maybe_value%2#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "4353": {
      "op": "-",
      "defined_out": [
        "loanRecord#0",
        "new_state_value%1#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "new_state_value%1#0"
      ]
    },
    "4354": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "4355": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "4356": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0"
      ]
    },
    "4357": {
      "op": "itxn_begin"
    },
    "4358": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4360": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0"
      ]
    },
    "4361": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)"
      ]
    },
    "4362": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "loanRecord#0 (copy)",
        "32"
      ]
    },
    "4364": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "loanRecord#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4365": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0"
      ]
    },
    "4366": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "loanRecord#0",
        "40"
      ]
    },
    "4368": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "4369": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4371": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4373": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4375": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "4"
      ]
    },
    "4376": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4378": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4379": {
      "op": "itxn_field Fee",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4381": {
      "op": "itxn_submit"
    },
    "4382": {
      "retsub": true,
      "op": "retsub"
    },
    "4383": {
      "block": "repayLoanAlgo_else_body@7",
      "stack_in": [
        "remainingDebt#0",
        "loanRecord#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4385": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "val_as_bytes%0#0"
      ]
    },
    "4386": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "4388": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4389": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "4390": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "4393": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4394": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "4395": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4396": {
      "op": "swap",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0"
      ]
    },
    "4397": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "loanRecord#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "loanRecord#0 (copy)"
      ]
    },
    "4398": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%16#0"
      ]
    },
    "4401": {
      "op": "txn Sender",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "4403": {
      "op": "uncover 2",
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "tmp%16#0",
        "tmp%17#0",
        "loanRecord#0"
      ]
    },
    "4405": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "encoded_tuple_buffer%3#0",
        "loanRecord#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "tmp%16#0",
        "tmp%17#0",
        "loanRecord#0",
        "40"
      ]
    },
    "4407": {
      "op": "extract_uint64",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "4408": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%19#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4410": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%19#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0"
      ]
    },
    "4412": {
      "op": "cover 4"
    },
    "4414": {
      "op": "cover 4",
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "4416": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateLoanRecord",
      "op": "callsub updateLoanRecord",
      "defined_out": [
        "remainingDebt#0",
        "updateLoanRecord%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "updateLoanRecord%0#0"
      ]
    },
    "4419": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4420": {
      "retsub": true,
      "op": "retsub"
    },
    "4421": {
      "block": "repayLoanAlgo_bool_false@3",
      "stack_in": [
        "remainingDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "and_result%0#0"
      ]
    },
    "4422": {
      "op": "b repayLoanAlgo_bool_merge@4"
    },
    "4425": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawFees",
      "params": {},
      "block": "withdrawFees",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4427": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "4428": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "4429": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4430": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4431": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4432": {
      "op": "assert",
      "stack_out": []
    },
    "4433": {
      "op": "itxn_begin"
    },
    "4434": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4435": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "0",
        "\"admin_account\""
      ]
    },
    "4436": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4437": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4438": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "4439": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4440": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4441": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "4442": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4443": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "4444": {
      "op": "bytec 9 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "4446": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4447": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "4448": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4450": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4452": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "4454": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "4455": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4457": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4458": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4460": {
      "op": "itxn_submit"
    },
    "4461": {
      "op": "bytec 9 // \"fee_pool\"",
      "stack_out": [
        "\"fee_pool\""
      ]
    },
    "4463": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"fee_pool\"",
        "0"
      ]
    },
    "4464": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4465": {
      "retsub": true,
      "op": "retsub"
    },
    "4466": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutASA",
      "params": {
        "buyer#0": "bytes",
        "debtor#0": "bytes",
        "axferTxn#0": "uint64"
      },
      "block": "buyoutASA",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "4469": {
      "op": "bytec 5 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4471": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "4473": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4474": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4476": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4477": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4479": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4480": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4481": {
      "op": "box_get",
      "defined_out": [
        "currentLoanRecord#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "currentLoanRecord#0",
        "maybe_exists%1#0"
      ]
    },
    "4482": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "currentLoanRecord#0"
      ]
    },
    "4483": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ]
    },
    "4484": {
      "op": "dig 1",
      "defined_out": [
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "tmp%0#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "4486": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0"
      ]
    },
    "4487": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "4488": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "40"
      ]
    },
    "4490": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "collateralAmount#0"
      ]
    },
    "4491": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4492": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0"
      ]
    },
    "4494": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "4495": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "65"
      ]
    },
    "4497": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0"
      ]
    },
    "4498": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "currentLoanRecord#0"
      ]
    },
    "4499": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "currentLoanRecord#0",
        "32"
      ]
    },
    "4501": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "tmp%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "to_encode%0#0"
      ]
    },
    "4502": {
      "op": "itob",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4503": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0"
      ]
    },
    "4504": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4506": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "4508": {
      "op": "dig 1",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4510": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%0#1"
      ]
    },
    "4511": {
      "op": "box_get",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "4512": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4513": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "16"
      ]
    },
    "4515": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0"
      ]
    },
    "4516": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "4517": {
      "op": "cover 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0"
      ]
    },
    "4519": {
      "op": "dig 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4521": {
      "op": ">=",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%8#0"
      ]
    },
    "4522": {
      "error": "Collateral amount exceeds current total",
      "op": "assert // Collateral amount exceeds current total",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4523": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "oraclePrice#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "oraclePrice#0"
      ]
    },
    "4526": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "oraclePrice#0",
        "collateralAmount#0"
      ]
    },
    "4528": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "hU#0",
        "lU#0"
      ]
    },
    "4529": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "1"
      ]
    },
    "4530": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralUSD#0"
      ]
    },
    "4531": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)"
      ]
    },
    "4532": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtAmount#0"
      ]
    },
    "4534": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0"
      ]
    },
    "4535": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "0"
      ]
    },
    "4536": {
      "op": "bytec 8 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4538": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4539": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0"
      ]
    },
    "4540": {
      "op": "dig 1",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0",
        "CR#0 (copy)"
      ]
    },
    "4542": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "tmp%9#0"
      ]
    },
    "4543": {
      "error": "loan is not eligible for buyout",
      "op": "assert // loan is not eligible for buyout",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0"
      ]
    },
    "4544": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "10000"
      ]
    },
    "4545": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0"
      ]
    },
    "4546": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "0"
      ]
    },
    "4547": {
      "op": "bytec 8 // \"liq_threshold_bps\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4549": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4550": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "maybe_value%3#0"
      ]
    },
    "4551": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%11#0"
      ]
    },
    "4552": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%11#0",
        "10000"
      ]
    },
    "4553": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "premiumRate#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "premiumRate#0"
      ]
    },
    "4554": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "premiumRate#0",
        "10000"
      ]
    },
    "4555": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%12#0"
      ]
    },
    "4556": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%12#0",
        "1"
      ]
    },
    "4557": {
      "op": "+",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%13#0"
      ]
    },
    "4558": {
      "op": "*",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4559": {
      "op": "frame_dig -1",
      "defined_out": [
        "axferTxn#0 (copy)",
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "axferTxn#0 (copy)"
      ]
    },
    "4561": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0"
      ]
    },
    "4563": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0",
        "0"
      ]
    },
    "4564": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4565": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4566": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0",
        "maybe_value%4#0"
      ]
    },
    "4567": {
      "op": "btoi",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "4568": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%16#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%16#0"
      ]
    },
    "4569": {
      "op": "bz buyoutASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4572": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "axferTxn#0 (copy)"
      ]
    },
    "4574": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%17#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%17#0"
      ]
    },
    "4576": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "4578": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%19#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%19#0"
      ]
    },
    "4579": {
      "op": "bz buyoutASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4582": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "axferTxn#0 (copy)"
      ]
    },
    "4584": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%20#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%20#0"
      ]
    },
    "4586": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%20#0",
        "buyoutPrice#0"
      ]
    },
    "4588": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%21#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%21#0"
      ]
    },
    "4589": {
      "op": "bz buyoutASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4592": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ]
    },
    "4593": {
      "block": "buyoutASA_bool_merge@5",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4594": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%0#0"
      ]
    },
    "4596": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "{box_del}"
      ]
    },
    "4597": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4598": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "0"
      ]
    },
    "4599": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4600": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4601": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%5#0"
      ]
    },
    "4602": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%5#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%5#0",
        "1"
      ]
    },
    "4603": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "new_state_value%0#0"
      ]
    },
    "4604": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "4605": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "4606": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4607": {
      "op": "itxn_begin"
    },
    "4608": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0"
      ]
    },
    "4610": {
      "op": "dup",
      "defined_out": [
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4611": {
      "op": "btoi",
      "defined_out": [
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4612": {
      "op": "frame_dig 1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "4614": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "4615": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4617": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4619": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "4621": {
      "op": "frame_dig -3",
      "defined_out": [
        "buyer#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "buyer#0 (copy)"
      ]
    },
    "4623": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "4625": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "4626": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "4628": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "4629": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "4631": {
      "op": "itxn_submit"
    },
    "4632": {
      "op": "frame_dig 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "tmp%7#0"
      ]
    },
    "4634": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0"
      ]
    },
    "4635": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "newTotal#0"
      ]
    },
    "4636": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4639": {
      "retsub": true,
      "op": "retsub"
    },
    "4640": {
      "block": "buyoutASA_bool_false@4",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ]
    },
    "4641": {
      "op": "b buyoutASA_bool_merge@5"
    },
    "4644": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutAlgo",
      "params": {
        "buyer#0": "bytes",
        "debtor#0": "bytes",
        "paymentTxn#0": "uint64"
      },
      "block": "buyoutAlgo",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "4647": {
      "op": "bytec 5 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4649": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "4651": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4652": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4654": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4655": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4657": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4658": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4659": {
      "op": "box_get",
      "defined_out": [
        "currentLoanRecord#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "currentLoanRecord#0",
        "maybe_exists%1#0"
      ]
    },
    "4660": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "currentLoanRecord#0"
      ]
    },
    "4661": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ]
    },
    "4662": {
      "op": "dig 1",
      "defined_out": [
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "tmp%0#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "4664": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0"
      ]
    },
    "4665": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "4666": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "40"
      ]
    },
    "4668": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "collateralAmount#0"
      ]
    },
    "4669": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4670": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0"
      ]
    },
    "4672": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "4673": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "65"
      ]
    },
    "4675": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0"
      ]
    },
    "4676": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "currentLoanRecord#0"
      ]
    },
    "4677": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "currentLoanRecord#0",
        "32"
      ]
    },
    "4679": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "tmp%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "to_encode%0#0"
      ]
    },
    "4680": {
      "op": "itob",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4681": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0"
      ]
    },
    "4682": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4684": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "4686": {
      "op": "dig 1",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4688": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%0#1"
      ]
    },
    "4689": {
      "op": "box_get",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "4690": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4691": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "16"
      ]
    },
    "4693": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0"
      ]
    },
    "4694": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "4695": {
      "op": "cover 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0"
      ]
    },
    "4697": {
      "op": "dig 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4699": {
      "op": ">=",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%8#0"
      ]
    },
    "4700": {
      "error": "Collateral amount exceeds current total",
      "op": "assert // Collateral amount exceeds current total",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4701": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "oraclePrice#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0",
        "debtAmount#0",
        "oraclePrice#0"
      ]
    },
    "4704": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "oraclePrice#0",
        "collateralAmount#0"
      ]
    },
    "4706": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "hU#0",
        "lU#0"
      ]
    },
    "4707": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "1"
      ]
    },
    "4708": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralUSD#0"
      ]
    },
    "4709": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)"
      ]
    },
    "4710": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtAmount#0"
      ]
    },
    "4712": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0"
      ]
    },
    "4713": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "0"
      ]
    },
    "4714": {
      "op": "bytec 8 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4716": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4717": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0"
      ]
    },
    "4718": {
      "op": "dig 1",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0",
        "CR#0 (copy)"
      ]
    },
    "4720": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "tmp%9#0"
      ]
    },
    "4721": {
      "error": "loan is not eligible for buyout",
      "op": "assert // loan is not eligible for buyout",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0"
      ]
    },
    "4722": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "10000"
      ]
    },
    "4723": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0"
      ]
    },
    "4724": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "0"
      ]
    },
    "4725": {
      "op": "bytec 8 // \"liq_threshold_bps\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4727": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4728": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "maybe_value%3#0"
      ]
    },
    "4729": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%11#0"
      ]
    },
    "4730": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%11#0",
        "10000"
      ]
    },
    "4731": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "premiumRate#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "premiumRate#0"
      ]
    },
    "4732": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "premiumRate#0",
        "10000"
      ]
    },
    "4733": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%12#0"
      ]
    },
    "4734": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%12#0",
        "1"
      ]
    },
    "4735": {
      "op": "+",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%13#0"
      ]
    },
    "4736": {
      "op": "*",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4737": {
      "op": "frame_dig -1",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "paymentTxn#0 (copy)",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4739": {
      "op": "gtxns Receiver",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0"
      ]
    },
    "4741": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "4743": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%16#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%16#0"
      ]
    },
    "4744": {
      "op": "bz buyoutAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4747": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4749": {
      "op": "gtxns Amount",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%17#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%17#0"
      ]
    },
    "4751": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%17#0",
        "buyoutPrice#0"
      ]
    },
    "4753": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%18#0"
      ]
    },
    "4754": {
      "op": "bz buyoutAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4757": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ]
    },
    "4758": {
      "block": "buyoutAlgo_bool_merge@4",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4759": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%0#0"
      ]
    },
    "4761": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "{box_del}"
      ]
    },
    "4762": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4763": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "0"
      ]
    },
    "4764": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4765": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4766": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%4#0"
      ]
    },
    "4767": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%4#0",
        "1"
      ]
    },
    "4768": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "new_state_value%0#0"
      ]
    },
    "4769": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "4770": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "4771": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4772": {
      "op": "itxn_begin"
    },
    "4773": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0"
      ]
    },
    "4775": {
      "op": "dup",
      "defined_out": [
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4776": {
      "op": "btoi",
      "defined_out": [
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4777": {
      "op": "frame_dig 1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "4779": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "4780": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4782": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4784": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "4786": {
      "op": "frame_dig -3",
      "defined_out": [
        "buyer#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "buyer#0 (copy)"
      ]
    },
    "4788": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "4790": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "4791": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "4793": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "4794": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "4796": {
      "op": "itxn_submit"
    },
    "4797": {
      "op": "frame_dig 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "tmp%7#0"
      ]
    },
    "4799": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0"
      ]
    },
    "4800": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "newTotal#0"
      ]
    },
    "4801": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4804": {
      "retsub": true,
      "op": "retsub"
    },
    "4805": {
      "block": "buyoutAlgo_bool_false@3",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ]
    },
    "4806": {
      "op": "b buyoutAlgo_bool_merge@4"
    },
    "4809": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateASA",
      "params": {
        "debtor#0": "bytes",
        "axferTxn#0": "uint64"
      },
      "block": "liquidateASA",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4812": {
      "op": "bytec 5 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4814": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "4816": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4817": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4819": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4820": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4822": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4823": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "4824": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "record#0"
      ]
    },
    "4825": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "4826": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "4828": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0"
      ]
    },
    "4829": {
      "op": "dup",
      "defined_out": [
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "4830": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "4832": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "4833": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4834": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "4836": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "4837": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "collateralAmount#0",
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "record#0 (copy)",
        "65"
      ]
    },
    "4839": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "4840": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0 (copy)"
      ]
    },
    "4841": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "4843": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "4845": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4848": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0"
      ]
    },
    "4849": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4851": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "4853": {
      "op": "dig 1",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4855": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#1"
      ]
    },
    "4856": {
      "op": "box_get",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "4857": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%0#0",
        "acceptedCollateral#0"
      ]
    },
    "4858": {
      "op": "cover 4",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%0#0"
      ]
    },
    "4860": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4861": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "oraclePrice#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "oraclePrice#0"
      ]
    },
    "4864": {
      "op": "mulw",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "h#0",
        "l#0"
      ]
    },
    "4865": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "1"
      ]
    },
    "4866": {
      "op": "divw",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralUSD#0"
      ]
    },
    "4867": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralUSD#0",
        "debtAmount#0"
      ]
    },
    "4868": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0"
      ]
    },
    "4869": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "0"
      ]
    },
    "4870": {
      "op": "bytec 8 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4872": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4873": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "maybe_value%2#0"
      ]
    },
    "4874": {
      "op": "<=",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%4#0"
      ]
    },
    "4875": {
      "error": "loan is not liquidatable",
      "op": "assert // loan is not liquidatable",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4876": {
      "op": "frame_dig -1",
      "defined_out": [
        "acceptedCollateral#0",
        "axferTxn#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "axferTxn#0 (copy)"
      ]
    },
    "4878": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%5#0"
      ]
    },
    "4880": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "4882": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%7#0"
      ]
    },
    "4883": {
      "op": "bz liquidateASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4886": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "axferTxn#0 (copy)"
      ]
    },
    "4888": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0"
      ]
    },
    "4890": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0",
        "0"
      ]
    },
    "4891": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4892": {
      "op": "app_global_get_ex",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "record#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4893": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0",
        "maybe_value%3#0"
      ]
    },
    "4894": {
      "op": "btoi",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "4895": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%10#0"
      ]
    },
    "4896": {
      "op": "bz liquidateASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4899": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "axferTxn#0 (copy)"
      ]
    },
    "4901": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%11#0"
      ]
    },
    "4903": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%11#0",
        "debtAmount#0"
      ]
    },
    "4905": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%12#0"
      ]
    },
    "4906": {
      "op": "bz liquidateASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4909": {
      "op": "intc_1 // 1",
      "defined_out": [
        "acceptedCollateral#0",
        "and_result%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ]
    },
    "4910": {
      "block": "liquidateASA_bool_merge@5",
      "stack_in": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4911": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%0#0"
      ]
    },
    "4913": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "{box_del}"
      ]
    },
    "4914": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4915": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "0"
      ]
    },
    "4916": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4917": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4918": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%4#0"
      ]
    },
    "4919": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%4#0",
        "1"
      ]
    },
    "4920": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%0#0"
      ]
    },
    "4921": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "4922": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "4923": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4924": {
      "op": "itxn_begin"
    },
    "4925": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4927": {
      "op": "frame_dig 1",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0"
      ]
    },
    "4929": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "32"
      ]
    },
    "4931": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4932": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "4934": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "4935": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4937": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4939": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4941": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "4943": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "4944": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "4946": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "4947": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "4949": {
      "op": "itxn_submit"
    },
    "4950": {
      "op": "frame_dig 5",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "acceptedCollateral#0"
      ]
    },
    "4952": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "acceptedCollateral#0",
        "16"
      ]
    },
    "4954": {
      "op": "extract_uint64",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "tmp%15#0"
      ]
    },
    "4955": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%15#0",
        "collateralAmount#0"
      ]
    },
    "4956": {
      "op": "-",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "newTotal#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "newTotal#0"
      ]
    },
    "4957": {
      "op": "frame_dig 4",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "newTotal#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "newTotal#0",
        "collateralTokenId#0"
      ]
    },
    "4959": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralTokenId#0",
        "newTotal#0"
      ]
    },
    "4960": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4963": {
      "retsub": true,
      "op": "retsub"
    },
    "4964": {
      "block": "liquidateASA_bool_false@4",
      "stack_in": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ]
    },
    "4965": {
      "op": "b liquidateASA_bool_merge@5"
    },
    "4968": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateAlgo",
      "params": {
        "debtor#0": "bytes",
        "paymentTxn#0": "uint64"
      },
      "block": "liquidateAlgo",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4971": {
      "op": "bytec 5 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4973": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "4975": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4976": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4978": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4979": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4981": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4982": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "4983": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "record#0"
      ]
    },
    "4984": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "4985": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "4987": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0"
      ]
    },
    "4988": {
      "op": "dup",
      "defined_out": [
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "4989": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "4991": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "4992": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4993": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "4995": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "4996": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "collateralAmount#0",
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "record#0 (copy)",
        "65"
      ]
    },
    "4998": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "4999": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0 (copy)"
      ]
    },
    "5000": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "5002": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "5004": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "5007": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0"
      ]
    },
    "5008": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "5010": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "5012": {
      "op": "dig 1",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5014": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#1"
      ]
    },
    "5015": {
      "op": "box_get",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "5016": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%0#0",
        "acceptedCollateral#0"
      ]
    },
    "5017": {
      "op": "cover 4",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%0#0"
      ]
    },
    "5019": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "5020": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "oraclePrice#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "oraclePrice#0"
      ]
    },
    "5023": {
      "op": "mulw",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "h#0",
        "l#0"
      ]
    },
    "5024": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "1"
      ]
    },
    "5025": {
      "op": "divw",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralUSD#0"
      ]
    },
    "5026": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralUSD#0",
        "debtAmount#0"
      ]
    },
    "5027": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0"
      ]
    },
    "5028": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "0"
      ]
    },
    "5029": {
      "op": "bytec 8 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5031": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5032": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "maybe_value%2#0"
      ]
    },
    "5033": {
      "op": "<=",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%4#0"
      ]
    },
    "5034": {
      "error": "loan is not liquidatable",
      "op": "assert // loan is not liquidatable",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5035": {
      "op": "frame_dig -1",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "paymentTxn#0 (copy)",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "5037": {
      "op": "gtxns Receiver",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%5#0"
      ]
    },
    "5039": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "5041": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%7#0"
      ]
    },
    "5042": {
      "op": "bz liquidateAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5045": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "5047": {
      "op": "gtxns Amount",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0"
      ]
    },
    "5049": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0",
        "debtAmount#0"
      ]
    },
    "5051": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%9#0"
      ]
    },
    "5052": {
      "op": "bz liquidateAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5055": {
      "op": "intc_1 // 1",
      "defined_out": [
        "acceptedCollateral#0",
        "and_result%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ]
    },
    "5056": {
      "block": "liquidateAlgo_bool_merge@4",
      "stack_in": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5057": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%0#0"
      ]
    },
    "5059": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "{box_del}"
      ]
    },
    "5060": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5061": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "0"
      ]
    },
    "5062": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "5063": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5064": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%3#0"
      ]
    },
    "5065": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "5066": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%0#0"
      ]
    },
    "5067": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "5068": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "5069": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5070": {
      "op": "itxn_begin"
    },
    "5071": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "5073": {
      "op": "frame_dig 1",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0"
      ]
    },
    "5075": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "32"
      ]
    },
    "5077": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5078": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "5080": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "5081": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5083": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5085": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "5087": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "5089": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "5090": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "5092": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "5093": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "5095": {
      "op": "itxn_submit"
    },
    "5096": {
      "op": "frame_dig 5",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "acceptedCollateral#0"
      ]
    },
    "5098": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "acceptedCollateral#0",
        "16"
      ]
    },
    "5100": {
      "op": "extract_uint64",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "tmp%12#0"
      ]
    },
    "5101": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%12#0",
        "collateralAmount#0"
      ]
    },
    "5102": {
      "op": "-",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "newTotal#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "newTotal#0"
      ]
    },
    "5103": {
      "op": "frame_dig 4",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "newTotal#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "newTotal#0",
        "collateralTokenId#0"
      ]
    },
    "5105": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralTokenId#0",
        "newTotal#0"
      ]
    },
    "5106": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5109": {
      "retsub": true,
      "op": "retsub"
    },
    "5110": {
      "block": "liquidateAlgo_bool_false@3",
      "stack_in": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ]
    },
    "5111": {
      "op": "b liquidateAlgo_bool_merge@4"
    },
    "5114": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "getLoanStatus",
      "stack_in": [],
      "op": "proto 1 7"
    },
    "5117": {
      "op": "bytec 5 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "5119": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "5121": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5122": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5123": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5124": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5126": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5127": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "5128": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0"
      ]
    },
    "5129": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueInterest",
      "op": "callsub accrueInterest",
      "defined_out": [
        "iar#0",
        "record#0"
      ],
      "stack_out": [
        "iar#0",
        "record#0"
      ]
    },
    "5132": {
      "op": "swap",
      "stack_out": [
        "record#0",
        "iar#0"
      ]
    },
    "5133": {
      "op": "pushint 17 // 17",
      "defined_out": [
        "17",
        "iar#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "iar#0",
        "17"
      ]
    },
    "5135": {
      "op": "extract_uint64",
      "defined_out": [
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "debt#0"
      ]
    },
    "5136": {
      "op": "dig 1",
      "defined_out": [
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "record#0",
        "debt#0",
        "record#0 (copy)"
      ]
    },
    "5138": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "record#0",
        "debt#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "5140": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "debt#0",
        "collateralAmount#0"
      ]
    },
    "5141": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralAmount#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "debt#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "5142": {
      "op": "bytec 8 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "collateralAmount#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "debt#0",
        "collateralAmount#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5144": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "maybe_exists%2#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "maybe_exists%2#0"
      ]
    },
    "5145": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "record#0",
        "debt#0",
        "collateralAmount#0",
        "liqBps#0"
      ]
    },
    "5146": {
      "op": "uncover 3",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "record#0"
      ]
    },
    "5148": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0"
      ]
    },
    "5151": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "oraclePrice#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "oraclePrice#0"
      ]
    },
    "5154": {
      "op": "dig 2",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "debt#0",
        "liqBps#0",
        "oraclePrice#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "oraclePrice#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5156": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "hi#0",
        "liqBps#0",
        "lo#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "hi#0",
        "lo#0"
      ]
    },
    "5157": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "collateralAmount#0",
        "debt#0",
        "hi#0",
        "liqBps#0",
        "lo#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "hi#0",
        "lo#0",
        "1"
      ]
    },
    "5158": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0"
      ]
    },
    "5159": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)"
      ]
    },
    "5160": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "10000"
      ]
    },
    "5161": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%5#0"
      ]
    },
    "5162": {
      "op": "dig 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "debt#0 (copy)",
        "liqBps#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%5#0",
        "debt#0 (copy)"
      ]
    },
    "5164": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0"
      ]
    },
    "5165": {
      "op": "dup",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)"
      ]
    },
    "5166": {
      "op": "dig 3",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "liqBps#0 (copy)"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "5168": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0"
      ]
    },
    "5169": {
      "op": "dig 1",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)"
      ]
    },
    "5171": {
      "op": "dig 4",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "5173": {
      "op": ">",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForBuyout#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "5174": {
      "op": "uncover 6",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0"
      ]
    },
    "5176": {
      "op": "uncover 4",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0"
      ]
    },
    "5178": {
      "op": "uncover 6",
      "stack_out": [
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0"
      ]
    },
    "5180": {
      "op": "uncover 5",
      "stack_out": [
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0"
      ]
    },
    "5182": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0"
      ]
    },
    "5184": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0"
      ]
    },
    "5186": {
      "op": "uncover 6",
      "stack_out": [
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "5188": {
      "retsub": true,
      "op": "retsub"
    }
  }
}