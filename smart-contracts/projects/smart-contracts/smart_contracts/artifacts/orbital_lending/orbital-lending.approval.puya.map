{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/OrbitalLending.algo.ts",
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/config.algo.ts"
  ],
  "mappingsiDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA2iEE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AA3gEF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA2gEE;;;AAAA;;AA1DC;;AAAA;AAAA;AAAA;;AAAA;AAj9DH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAi9DG;;;AAAA;;AA9EA;;AAAA;AAAA;AAAA;;AAAA;AAn4DH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAm4DG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnBD;;AAAA;AAAA;AAAA;;AAAA;AAh3DF;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAg3DE;;;AAAA;;AA7BC;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAnJD;;AAAA;AAAA;AAAA;;AAAA;AAhsDF;;;AAAA;;;AAAA;AAAA;;;AAAA;AAgsDE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA1CC;;AAAA;AAAA;AAAA;;AAAA;AArnDH;;;AAAA;AAAA;;AAqnDG;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3HA;;AAAA;AAAA;AAAA;;AAAA;AA1/CH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA0/CG;;;AAAA;;AAZD;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/FC;;AAAA;AAAA;AAAA;;AAAA;AA/3CH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA+3CG;;;AAAA;;AA9HA;;AAAA;AAAA;AAAA;;AAAA;AAjwCH;;;AAAA;AAiwCG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzIA;;AAAA;AAAA;AAAA;;AAAA;AAxnCH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAwnCG;;;AAAA;;AAnCA;;AAAA;AAAA;AAAA;;AAAA;AArlCH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqlCG;;;AAAA;;AAxDA;;AAAA;AAAA;AAAA;;AAAA;AA7hCH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA6hCG;;;AAAA;;AAbD;;AAAA;AAAA;AAAA;;AAAA;AAhhCF;;;AAAA;AAAA;;AAghCE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5JA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjEC;;AAAA;AAAA;AAAA;;AAAA;AAnzBH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAmzBG;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAryBH;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAqyBG;;;AAAA;;AAjFA;;AAAA;AAAA;AAAA;;AAAA;AAptBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAotBG;;;AAAA;;AAzDA;;AAAA;AAAA;AAAA;;AAAA;AA3pBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA2pBG;;;AAAA;;AA5CA;;AAAA;AAAA;AAAA;;AAAA;AA/mBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+mBG;;;AAAA;;AAvGA;;AAAA;AAAA;AAAA;;AAAA;AAxgBH;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAwgBG;;;AAAA;;AAjFD;;AAAA;AAAA;AAAA;;AAAA;AAvbF;;;AAubE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAtaF;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAsaE;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AA7YF;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6YE;;;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AA9WF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8WE;;;AAAA;;AAXC;;AAAA;AAAA;AAAA;;AAAA;AAnWH;;;AAAA;AAAA;;AAmWG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAxVH;;;AAAA;AAwVG;;;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AAxSH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAwSG;;;AAAA;;AApGA;;AAAA;AAAA;AAAA;;AAAA;AApMH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAoMG;;;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAjLH;;;AAAA;AAAA;;AAAA;;;AAAA;AAiLG;;;AAAA;;AAAD;;;AAnJA;;AAqJE;;AAAA;AAC2B;;AAAA;AA7K7B;AA6KE;AAAA;AAtCF;;AAuCE;;AAAA;AAZF;;AAa8B;;AAA5B;;AAcF;;;AAYgB;;AAlLhB;AAAA;;AAAA;AAAA;AAkLS;AAAP;AAEA;;AAAA;;AApLF;AAAA;;AAAA;AAAA;AAoLE;AAAA;;;AAAA;;AAAA;;ACjQkC;;;;ADiQlC;AAAA;;;;AAAA;AAKO;;AAA4C;;AAA5C;AAAP;AA/KF;;AAiLE;;AAAA;AA9KF;;AA+KE;;AAAA;AA5KF;;AA6KE;;AAAA;AAxGF;;AAyG0C;AAAxC;AArMF;;AAsMwB;AAAtB;AA5MF;;AA6M+B;AAA7B;AA1MF;AA2M8B;AAA5B;AA/GF;;AAgHmC;AAAjC;AA/KF;;AAgLE;;AAAA;AAhMF;;AAiME;;AAAA;AAxNF;;AAyN4B;;;;;;;;;;AAA1B;AA/KF;;AAgLwB;;AAAtB;AA7KF;;AA8K4B;;;AAA1B;AA3IF;AA4I6B;AAA3B;AArJF;;AAsJ+B;AAA7B;AA7KF;;AA8K6B;;;AAA3B;AA3KF;;AA4K0B;AAAxB;AAzKF;;AA0K0B;;;AAAxB;AAvKF;;AAwK2B;;;AAAzB;AAtFF;;AAuF6C;AAA3C;AAvKF;;AAwK6B;AAA3B;AAlKF;;AAmK4B;;AAA1B;AAhKF;;;;;;;;;;;;;;AAiK4B;AAA1B;AA3JF;;AA4J+B;AAA7B;AAzJF;;AA0J8B;AAA5B;AAzFF;;AA0F+B;AAA7B;AAvFF;;AAwFmC;AAAjC;AArFF;;;;;;;;;;;;AAsF0B;AAAxB;AApFF;;AAqFwC;;AAAtC;AApFF;;AAqFmC;AAAjC;AAzJF;;ACpIiC;;AD8R/B;AAvJF;;AAwJsC;;AAApC;AApMF;AAAA;;AAAA;AAAA;AA+CA;;AAsJE;AAAA;AAC6B;;AAAA;AApI/B;;AAoIE;AAAA;AAjIF;;AAkIE;;AAAA;AAxHF;;AAyHuC;AAArC;AA3HF;;AA4H8C;AAA5C;AA9HF;;AA+HE;;AAAA;AAvHF;;AAwH4B;AAA1B;AA1HF;;AA2HwC;AAAtC;AAzPF;AAAA;AAAA;AAAA;AA2P+B;AAA7B;;;AACE;AAE0B;;AA9P9B;AAAA;AAAA;AAAA;AA+P4C;AACvB;;;;;;;AAJjB;;;;AC9SkC;;;AD8SlC;AA7IJ;AAAA;;AAAA;AAAA;AAsJiC;AAA/B;;;AACE;AAE0B;;AAzJ9B;AAAA;;AAAA;AAAA;AA0J8C;AACzB;;;;;;;AAJjB;;;;ACxTkC;;;ADwTlC;;;;;;AA2BJ;;;AAegB;;AAzRhB;AAAA;;AAAA;AAAA;AAyRS;AAAP;AAGO;;AAAA;;;AAAqB;;AAAgB;AAAhB;AAArB;;;;AAAP;AACO;;AAAA;;;AAAsB;;AAAgB;AAAhB;AAAtB;;;;AAAP;AAEA;;AAAA;;;AACS;;AAAA;;AAAA;AAAP;AAEK;;AAAiB;AAAjB;AAAP;AAGO;;AAAA;;;AAAsC;;AAAoB;;;AAApB;AAAtC;;;;AAAP;AA/QF;;AAgRE;;AAAA;AA7QF;;AA8QE;;AAAA;AA3QF;;AA4QE;;AAAA;AAzQF;;AA0QE;;AAAA;AAvQF;;AAwQE;;AAAA;AArQF;;AAsQE;;AAAA;AAjQF;;;;;;;;;;;;;;;;;;AAkQE;;AAAA;AAzPF;;AA0PE;;AAAA;AAlNF;;AAmNE;;AAAA;AA3KF;AAAA;;AAAA;AAAA;AA4KoC;AAAlC;AA5KF;;AA4KE;AAAA;AA7KF;;AA8KwC;;AAAtC;AAzQF;;AA0QE;;AAAA;AA3PF;;AA4PE;;AAAA;AAzPF;;AA0PE;;AAAA;AA9QF;AAAA;;AAAA;AAAA;AAgRM;;;AAxQN;AAAA;;AAAA;AAAA;AARA;AAAA;;AAAA;AAAA;AAgRoC;AAA9B;;;AAhRN;AAAA;;AAAA;AAAA;AAQA;;AAyQI;AAAA;;;;;;;;;;;;;;AAIJ;;;AAI8B;;AAAA;AAnL9B;;AAmLE;AAAA;;AAOF;;;AAEgB;;AAvUhB;AAAA;;AAAA;AAAA;AAuUS;AAAP;AAvNF;;AAwNE;;AAAA;;AAQF;;;AACgB;;AAjVhB;AAAA;;AAAA;AAAA;AAiVS;AAAP;AACA;;AAAA;;AAlVF;AAAA;;AAAA;AAAA;AAkVE;AAAA;;;AAAA;;AAAA;;AC9ZgC;;;;AD8ZhC;AAAA;;;;AAAA;AAzWF;AAAA;AAAA;AAAA;AAgXmD;AAClC;AAEI;;AACE;;AAAA;;AAAA;AACG;;AAAA;;AAAA;AAEJ;;AACiB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;AACwB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;;;;;;;AAHI;;;;;;;;;AALJ;;;;ACnaqB;;;ADmarB;;;AAYW;AA1X5B;;AA0XE;AAAA;;;;;;AASF;;;AACgB;;AAhXhB;AAAA;;AAAA;AAAA;AAgXS;AAAP;AACA;;AAAA;;AAjXF;AAAA;;AAAA;AAAA;AAiXE;AAAA;;;AAAA;;AAAA;;AC5bkC;;;AD4blC;AAAA;;;;AAAA;AAI0B;;AAAA;AAzY5B;;AAyYE;AAAA;AAGA;AAE0B;;AAET;;;;;;;;;AAJjB;;;;ACjcoC;;;ADicpC;;;;;;AAgBF;;;AACgB;;AAzYhB;AAAA;;AAAA;AAAA;AAyYS;AAAP;AA7ZF;AAAA;;AAAA;AAAA;AA8ZiC;AAAoB;;AAAA;;AAA5C;AAAP;AAEA;;AAAA;;AA5YF;AAAA;;AAAA;AAAA;AA4YE;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;;AAAA;AAzZF;;AA6ZE;;AAAA;;;;;;AASF;;;AAtZA;AAAA;;AAAA;AAAA;AAwZyB;AAAA;;AAAA;;AAAA;AAGR;AAAA;;;;;;;;;;;;;;AAAA;;;;ACveqB;;;ADuerB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAMK;AAApB;AA4BF;;;AApXsF;;AAAA;;AAAA;AAsXlC;AAAA;AAAA;AAEE;AAAhB;;AAAgB;AAA9C;;AAAmB;AAEH;;AAAA;;;AACI;;AAAA;;;AACM;;AAAA;;;AACb;;AAAA;AACY;;AAAA;;;AALQ;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AAeF;;;AAxYsF;;AAAA;;AAAA;AA0YlC;AAAA;AAAA;AAEhB;AAAhB;;AAAgB;AAA3B;AAAA;;AAAA;AAAP;AACM;;AAAmB;AAEH;;AAAA;;;AACI;;AAAA;;;AACM;;AAAA;;;AACb;;AAAA;AACY;;AAAA;;;AALQ;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AAgBF;;;AAjgBA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAqhBoD;;AAAA;;AAAA;AAAA;AAAA;AAI/B;;AAJ+B;AAAA;;AAAA;AAlbkC;;AAAA;;AAAA;AA0bpF;AAAA;;AAAA;AAjbF;AAAA;;AAAA;AAAA;AAkbkF;AAAxC;AAlb1C;;AAkbE;AAAA;AACA;AAEmB;;AACO;AACO;;AAAA;AAChB;;;;;;;;;AALjB;;;;ACjlBoC;;;ADilBpC;AA1FsC;AAAA;;AAoGtC;;AA+DF;;;AAxmBA;AAAA;AAAA;AAAA;;AAAA;AAkKA;AAAA;;AAAA;AAAA;AAycmC;AAAW;AAArC;AAAP;AACA;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAIA;;AAAA;;AClqBoC;ADkqBpC;AAAA;AAGA;;AAAA;;;AAEuB;;;AAAjB;AAxmBR;AAAA;AAAA;AAAA;AA2mBE;;;;;AAKA;AAE0B;;AA5nB5B;AAAA;;AAAA;AAAA;AA6nByC;;;;;;;;;AAHvC;;;;AC/qBoC;;;AD+qBpC;AAnnBF;AAAA;;AAAA;AAAA;AA4nBE;AA5nBF;;AA4nBE;AAAA;AAznBF;AAAA;AAAA;AAAA;AA0nBE;;AAAA;AA1nBF;AA0nBE;AAAA;AAC0B;;;AA5iB5B;;AA4iBE;AAAA;;AA9nBF;AAAA;;AAAA;AAAA;AC1DkC;ADkmBF;AAriBhC;AAAA;AAAA;AAAA;AAuiBmB;AAEa;;AAAA;ACtmBE;ADumBzB;;;;;;;;AA6FT;;;AAjpBA;AAAA;;AAAA;AAAA;AAwpBiD;AAzfjD;AAAA;;AAAA;AAAA;AA0fmC;AAAW;AAArC;AAAP;AACA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAMA;;AAAA;;AACU;;;AADV;AAAA;AAIuB;;;AAAjB;AAIF;;AAAoB;;AAApB;AAAJ;;;AAjqBF;AAAA;;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AA+kBmB;;AAAA;AACV;;AAAA;AAmFP;AAAA;;;AAE2C;;AAlrB7C;AAAA;AAAA;AAAA;AAkrBiG;AAAxF;;AAAA;AAAA;;AAAA;AAAP;AAEA;AAEqB;;;;;;;;AAFrB;;;ACtuBoC;;;ADsuBpC;AA1qBF;AAAA;;AAAA;AAAA;AAkrBE;;AAAA;AAlrBF;;AAkrBE;AAAA;AA/qBF;AAAA;AAAA;AAAA;AAgrBE;AAAA;AAhrBF;AAgrBE;AAAA;AAC0B;;;AAlmB5B;;AAkmBE;AAAA;;AA3H+B;AAAA;;;;;;;;AAAA;;;;ACrnBK;;;ADqnBL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;ACznBM;;;ADynBN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAMb;;AAAA;AACV;;AAAA;;;;;;;;AA+HT;;;;;;AA3iBA;AAAA;;AAAA;AAAA;AAojBmC;AAAW;AAArC;AAAP;AAhnBqD;;AAknBb;;AAlnBa;AAknBL;AAAA;AAAA;;AAAA;AACzB;;;AAAjB;AAEN;;;AACuD;;AAA1B;;;AAAkC;;AACxB;AAArC;;AAAkB;AAAlB;;AA08BF;;AAAA;;ACxtDuC;;;ADwtDvC;AAAA;AAEA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAGqC;;AAAA;AAHrC;AAAA;;;;AAAA;AAtkDoF;;AAAA;;AAAA;AAkW9C;AAAA;;AA0uCtC;AA78BM;;AAAA;;AAAA;;AAAgB;;;AAjsBxB;AAAA;;AAAA;AAAA;AAksBgC;ACnxBE;ADmxBH;AAllB/B;;AAmlBE;;AAAA;AApuBF;AAAA;AAAA;AAAA;AAquBuC;;;AA8/BpB;;AAAA;AClxDkB;;ADmxDV;AAhlD3B;;AAmlDE;;AAAA;AAEO;AAAP;AA5tDF;AAAA;AAAA;AAAA;AAmCA;AAAA;;AAAA;AAAA;AAqsDiB;ACryDiB;ADsyDzB;AAnqDT;AAAA;AAAA;AAAA;AAwpDS;;AAAA;AAAA;AAAP;AApsDF;AAAA;;AAAA;AAAA;AAwtDuB;;AAAA;AC/yDW;AD+yDZ;AACd;;AAAA;;AAAuB;AAAvB;AAAA;;AAAA;;AAhvDR;AAAA;;AAAA;AAAA;AAkvDE;AAlvDF;;AAkvDE;AAAA;AApnDF;;AAqnDE;AAAA;AA1hCA;;AAAA;;;AAEW;;AAgjCL;AAAe;;;AAEf;;AAAmB;;;AAQnB;;AAAA;AAAA;;AAAkB;AAKU;;AAAA;;;AAC4B;;AAAjB;;AAAiB;AAA9B;;AAAA;AAAZ;AA3yDtB;AAAA;AAAA;AAAA;AA8yDc;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;AAHE;AAAA;AAAA;AAKL;;AAAA;AA5tDf;AAAA;;AAAA;AAAA;AA6tDkB;AAXmB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlsDkB;;AAAA;;AAAA;AAksDrD;AAAA;AAeA;;AAAA;;AAAA;;;AA/jC0B;;AAukC1B;;;;;;;;;;AAAA;;;ACj3DoC;;;ADi3DpC;AAtkCA;AAAA;;;AAtqBF;AAAA;AAAA;AAAA;AAuqB6B;AAvqB7B;AAuqBE;AAAA;AAC0B;;;AA/pB5B;;AA+pBE;AAAA;;AAP8D;;AAA5D;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;AAgBJ;;;AAWsB;;AAAA;AAhxBtB;AAAA;AAAA;AAAA;AAmxBc;;AAAA;AACsB;;AAAnB;AAFG;;AAGF;;AAHE;AAAA;AAAA;AA5rBpB;AAAA;;AAAA;AAAA;AAksBkB;AAX0B;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvqBW;;AAAA;;AAAA;AAuqBrD;AAAA;AApqBF;AAAA;;AAAA;AAAA;AAkrBoE;AAAjC;AAlrBnC;;AAkrBE;AAAA;;AAGF;;;AAQE;;AAAA;;AAAA;;AAAA;;AAAA;;;AACA;;AAAA;;AAAA;;;AAptBF;AAAA;AAAA;AAAA;AAqtB6B;;AAAA;AArtB7B;AAqtBE;AAAA;AAC0B;;;AA7sB5B;;AA6sBE;AAAA;;AAGF;;;AAtsBuD;;AAAA;;AAAA;AAwsBrB;AAAA;;AAAhC;AA5oBF;AAAA;;AAAA;AAAA;AA6oBmC;AAAW;AAArC;AAAP;AACA;;;;AAEA;;AAAA;;;;AAE0B;;;AAxtB5B;;AAwtBE;AAAA;;AAyDF;;;;;;;AAh2BA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAsEA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAnCA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAgxBE;;;AAAoB;;;AAtvBtB;AAAA;;AAAA;AAAA;AA0yBc;;;AAv0Bd;AAAA;;AAAA;AAAA;AAMA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAgyBM;;AAAA;AAAJ;;;AACqB;;AAAA;;AAAA;AACF;;AAAA;AAAX;AAAN;;AA/xBJ;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AAwyBM;;;AAAc;;AAAA;AAAA;;AAAA;;;;AAAd;;;;;;;;;;;AAhyBN;;AA4zBE;;AAAA;AAAA;;AAAA;AACA;;AAAA;AApCQ;;AAAA;;AAAA;AAAA;;AAAe;AC74BS;AD84BxB;;AAAgB;AACH;;AAAA;;AAAA;AACb;;AAAA;;AAAA;AAAwB;;AAAA;;AAAA;AAAxB;AAAN;;;;;AAnzBJ;AAAA;;AAAA;AAAA;;;;;;AAsxByB;;AAAA;;AAAA;ACn3BS;ADo3Bd;AAAZ;AAAA;;AACN;;;AAA4B;;;AA0CN;;;AAxCN;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;ACv3BgB;ADw3Bb;AACZ;;AAAA;;;AAsCe;;;AA+CxB;;;AACQ;;AAAgB;;AAAU;AAA1B;AACN;;;AAAoB;AAAP;;AAAA;;AAAA;AA10Bf;AAAA;;AAAA;AAAA;AA20BmB;;AAAA;AACoB;;AAAb;;AAAa;AAA9B;AAAP;;AAAA;;AAAA;AASF;;;AAr0BuD;;AAAA;;AAAA;AAs0Bd;AAAA;AAAA;AACd;;;AAGA;AAAA;;;AACD;;AAAA;;;AAj7B1B;AAAA;AAAA;AAAA;AAm7BwB;;AAAA;;;AACT;;AAAA;AA91Bf;AAAA;;AAAA;AAAA;AA+1BkB;AAPD;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AASf;;AAAA;AAAA;AACA;AASF;;;;;;;AAC6B;;AAArB;AAz2BR;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA22BM;AAAJ;;;AAAwB;AAAP;;AAAA;AAEX;;AAAA;;AAAiB;AAAjB;AAAA;;AA1DN;;;AAAyB;;;AA5uB3B;;;;;;;;;;;;;;;;;;;;;;;AAgzBE;;AAAA;AAAA;;AAAA;AACA;;;AAx3BF;;AAy3BI;;AAAA;AACO;AAAP;;AAAA;AA73BJ;AAAA;;AAAA;AAAA;AAm4BqB;AAAA;;AAAA;ACvgCY;;ADwgCL;AACD;AAr4B3B;;AAs4BE;AAAA;AAz4BF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA+4ByB;AAAnB;;AACJ;;;AACqB;;AAAA;;AAAA;AClhCU;;ADmhClB;AAAX;;AA37BJ;AAAA;;AAAA;AAAA;AC1FkC;AD0hC1B;AAAmB;AAGN;;AAAA;AAAA;;AAAA;AC7hCa;AD8hCE;AAC5B;AAA2B;AAIN;;AAAA;;AAAA;AAh6B7B;AAg6BE;AAAA;AAv1BF;;;;;;;;;;;;;;;;;;;;;;;AAw1BE;;AAAA;AAv+BF;AAAA;AAAA;AAAA;AA0+BE;;AAAA;AA1+BF;AA0+BE;AAAA;AAv+BF;AAAA;;AAAA;AAAA;AA0+BE;AA1+BF;;AA0+BE;AAAA;AAj6BF;;AAo6BE;;AAAA;AAIA;;AAAA;AAr6BF;AAAA;;AAAA;AAAA;AAmzBmB;;AAAA;AC37BmB;;;;;AD67Bf;AC/7BU;;ADk8Bd;ACp8Be;ADq8BN;AAApB;;AA0DoB;;;AA0D5B;;;AAn6BuD;;AAAA;;AAAA;AAo6BZ;AAAA;AAAzC;AAYF;;;;;AAthCA;AAAA;AAAA;AAAA;;AAAA;AAkKA;AAAA;;AAAA;AAAA;AAu3BmC;AAAW;AAArC;AAAP;AACA;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAIuB;;;AAAjB;AACuC;;AAA1B;;;AAAb;AACgC;;AAA1B;;;AACa;;;AAAA;AAElB;;AAAA;;AAAA;AAAP;AAEM;;AAAwB;AAAxB;AAAA;;AAl9BR;AAAA;AAAA;AAAA;AAq9BE;;AAAA;AAr9BF;AAq9BE;AAAA;AACA;;AAAA;;;AAEA;;;AAr8BqD;;AAs8B3B;;AAt8B2B;AAs8BnB;;AAn8BpC;AAAA;;AAAA;AAAA;AAo8BsC;AAAlC;AAp8BJ;;AAo8BI;AAAA;AAEA;AAE0B;;AACW;AAAA;AAAlB;;AAAkB;AACC;AAAjB;;AAAiB;;;;;;;AAJtC;;;;ACjmCkC;;;ADimClC;;AAWsC;;AACb;AAAA;AAAA;;;AACD;AAAA;;;AA5jC5B;AAAA;AAAA;AAAA;AA+jCgB;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKL;;AAAA;AA7+BjB;AAAA;;AAAA;AAAA;AA8+BoB;AAXwB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAn9BW;;AAm9B3B;;AAn9B2B;AAm9BnD;AAAA;;;;;;AAqBJ;;;;;AAEgB;;AAzjChB;AAAA;;AAAA;AAAA;AAyjCS;AAAP;AA96BF;AAAA;;AAAA;AAAA;AA+6BmC;AAAW;AAArC;AAAP;AACA;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;ACpoCoC;ADooCpC;AAAA;;;;AAAA;AAlkCF;AAAA;;AAAA;AAAA;AA0GA;AAAA;;AAAA;AAAA;AA49ByB;AAAjB;AAAA;;AACN;;;AACE;;;;;;;;;;AAAA;;;AC1oCkC;;;AD0oClC;AAQA;;;AAhlCJ;;AAilC0B;AAAtB;AAv+BJ;;AAw+BgD;AAA5C;;;;;;AAeJ;;;;;;;AA3gCuD;;AAAA;;AAAA;AAAA;;AAmhCrB;AAAA;;AAAhC;AAv9BF;AAAA;;AAAA;AAAA;AAw9BmC;AAAW;AAArC;AAAP;AAGA;;;;AAEqC;AAAA;AAAA;AAAA;;AAAA;AAC/B;AAA+B;;AAAiB;AAAhD;AAAA;;AACA;AAAiC;;;AAAjC;AAAA;;AAAA;;AAEmB;;;AAAA;AAAA;AAAA;;AACzB;AAAA;AAGM;AAAA;;AAAA;;AAAwB;;;AAAxB;AAAA;;AACmB;;;AACzB;AAAA;AAEmB;AC3rCa;AD2rCb;AACb;;AAAiB;AAAjB;AAEuB;AAAzB;AA1mCN;AAAA;;AAAA;AAAA;AA2mCM;AAAJ;;;AACmB;;AChsCa;ADgsCb;AA5mCrB;AAAA;;AAAA;AAAA;AA6mC8B;ACjsCI;ADksCb;AAAjB;;AAGe;;AAAA;;AAAA;ACrsCe;ADssCL;AAviC7B;AAAA;;AAAA;AAAA;AA0iC2D;AAAnD;;AA1iCR;AAAA;;AAAA;AAAA;AA2iCmC;;;AAA3B;AAAA;;AAEa;AC3sCgB;;AD2sChB;AAAA;;AAAA;;AACW;;;AAAyB;;;AAEvD;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAQA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEmB;;AAFnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAOyB;;AAAA;;AArkC3B;AAAA;;AAAA;AAAA;AAskCoE;AAAjC;AAtkCnC;;AAskCE;AAAA;AAEA;AAGiC;;AAnDM;;AAmDN;;;;;;;;;;;;;;AAHjC;;;;ACnuCoC;;;ADmuCpC;AA9kCoF;;AAAA;;AAAA;AAwlCrC;AAAA;AAAA;AACI;AAAhB;;AAAgB;AAA7C;;AAAuB;AAEZ;;AAAA;;;AACI;;AAAA;;;AACF;;AAAA;AACQ;;AAAA;;;AACD;;AAAA;;;AALe;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAzC;AA1mCF;AAAA;AAAA;AAAA;AAknC6B;;AAAA;AAAA;;AAAA;AAlnC7B;AAknCE;AAAA;AACA;;;AAeM;;AAAA;AAAsC;;AAAhB;AAE5B;AAhsCF;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;AAgsCE;;;;ACzwCoC;;;ADywCpC;AASA;AAIiB;;AAAA;AAAA;;;;;;;;;AAJjB;;;;AClxCoC;;;ADkxCpC;AAtB0B;;;AA9mC5B;;AA8mCE;AAAA;;;;;;;;;;AA7C2D;;AAAA;;AAAA;;AAAA;;;;;;AAkF7D;;;AA/uCA;AAAA;AAAA;AAAA;AAgvCiC;;;AAChB;;AAAA;AChyCoB;;ADiyC5B;AAAP;AAQF;;;;;;;AAppCuD;;AAspCtB;;AAtpCsB;AAspCd;AAAA;;AAAvC;AA1lCF;AAAA;;AAAA;AAAA;AA2lCmC;AAAW;AAArC;AAAP;AACA;;;;AAxpCqD;;AA0pCjB;;AA1pCiB;AA0pCT;AAAA;AACF;AAAA;;;AA9pC0C;;AAAA;AAAA;AA4W9C;AAAA;AAmzBpB;;AAAiB;AAA5B;;AAAA;AAAP;AAEyB;;;AAAA;AAAA;AAAA;;AACzB;;;AAA+B;;AAAiB;AAA5B;;AAAA;AAId;AAAA;;;AAAA;AAAA;;AAAA;;AACA;;AAAiB;AAFjB;;AAAwB;;;AAAxB;AAAA;;AAOA;;AAAmB;;;AC/zCO;ADi0CX;AAhvCvB;AAAA;;AAAA;AAAA;AAivCwC;AAAhC;AAAA;;AAGF;AAAJ;;;AAAmD;AAAP;;AAAA;AAGtC;;AAAA;;AAAuB;AAIN;AAAA;;;;;;;;AAAA;;;;AC90Ca;;;AD80Cb;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;ACl1Cc;;;ADk1Cd;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AA7rC8D;;AAAA;;AAAA;AA4W9C;AAAA;AAw1BG;;;AAAvB;;;AAGD;;ACz1CkB;;ADy1ClB;AACX;;AAA8B;AAGnB;;AAAA;AACX;;AAAuB;AAE7B;;AAAA;AAuEF;;;;;;;AAEE;;AAAA;AAxtCF;AAAA;;AAAA;AAAA;AAytCmC;AAAW;AAArC;AAAP;AACwB;;AAtxC6B;;AAsxC/C;;AAtxC+C;AAAA;;AAuxCnB;AAAA;;AAAlC;AACA;;;;AACwC;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAE5B;AAAA;;;AAAA;;AAAA;;AAAkB;AAAvB;;AAAA;AAAP;AAEmD;;AAAA;AAAA;AAAA;;AAhyCiC;;AAAA;AAAA;AAiyC5C;AAAA;AAAA;;AAAxC;AAC+C;AAAA;AAClC;;AAAiB;AAAvB;;AAAA;AAAP;AA3EkC;AAAA;AAAA;;AAAlC;AAzpCF;AAAA;;AAAA;AAAA;AA0pCmC;AAAW;AAArC;AAAP;AACA;;;;AAEuC;AAAA;AACG;AAAA;;;AA7tC0C;;AAAA;AAAA;AA4W9C;AAAA;AAk3BpB;;AAAiB;AAA5B;;AAAA;AAAP;AACyB;;;AAAA;AAAA;AAAA;;AACzB;;;AAA+B;;AAAiB;AAsEzC;;AAAA;AAAP;AACyC;;AAAA;AAAjB;;AAAiB;AAAlC;;AAAA;;AAAA;AAAP;AACM;;AAAoB;AAG1B;;;;;;;;;;;;;;;;AAAA;;;;ACh8CoC;;;ADg8CpC;AAaoB;AA35CtB;AAAA;AAAA;AAAA;AA85Cc;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKA;;AAAA;;;AACG;;AAAA;;;AAXN;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaf;;AAAA;AAAA;AAGA;;AAAA;;AAAA;;;AAG0B;;;AA/0C5B;;AA+0CE;AAAA;;AApGM;AAAA;;;AAAA;AAAA;;AAAA;;AACA;;AAAiB;AAFjB;;AAAwB;;;AAAxB;AAAA;;AAOA;;AAAmB;;;AC73CO;AD+3CX;AA9yCvB;AAAA;;AAAA;AAAA;AA+yCwC;AAAhC;AAAA;;AAGF;AAAJ;;;AAAmD;AAqDnC;;;AAlDV;;AAAA;;AAAuB;AAIN;AAAA;;;;;;;;AAAA;;;;AC54Ca;;;AD44Cb;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;ACh5Cc;;;ADg5Cd;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AA3vC8D;;AAAA;;AAAA;AA4W9C;AAAA;AAs5BG;;;AAAvB;;;AAGD;;ACv5CkB;;ADu5ClB;AACX;;AAA8B;AAGnB;;AAAA;AACX;;AAAuB;AA2Bb;;;AA93ClB;AAAA;;AAAA;AAAA;AA88CE;AA38CF;AAAA;AAAA;AAAA;AAm9CE;AAp3CF;AAAA;;AAAA;AAAA;AA43CE;AAWF;;;;;;;AAn/CA;AAAA;AAAA;AAAA;AA0/CkC;AAAzB;AAAP;AAx1CF;AAAA;;AAAA;AAAA;AAy1CmC;AAAW;AAArC;AAAP;AAr5CqD;;AAAA;;AAAA;AAAA;;AAs5CrB;AAAA;;AAAhC;AACA;;;;AAEqC;AAAA;AAAA;AAAA;;AAAA;AAC/B;AAAuB;;;AAAvB;AACA;AAAyB;;AAAiB;AAA1C;AACmB;;;AAAA;AAAA;AACzB;AACO;;AAAA;;;AAAuB;;AAAA;;AAAA;AAAvB;;;;AAAP;AAEM;;AAAA;;AAAA;;AAAwB;;;AACxB;;AAAmB;;;AACzB;AAAA;AAEmB;AC1jDa;AD0jDb;AACb;;AAAiB;AAv+CzB;AAAA;;AAAA;AAAA;AAw+CS;AAAP;AAGA;;AAAA;;AACiB;;AADjB;AAAA;;;AAAA;;AAAA;;AAEmB;;AAFnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AA/gDF;AAAA;AAAA;AAAA;AAqhDoB;;;AAAZ;;AACA;;AAAA;AAAqC;;AAAX;AACA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAGL;AAAvB;;AACA;;AAAA;;;;;AAAJ;;;AACE;;AAAA;;AAAA;AAAA;;AAAe;AAAf;;;;AAIiB;;AAAA;;AAAA;AC/kDgB;;ADglDV;AA/6C3B;AAAA;;AAAA;AAAA;AClKkC;ADolDE;AAAf;ACplDa;ADqlDP;AAl8C2D;;AAAA;;AAAA;AA4W9C;AAAA;AAAA;AA6+B4C;;;AAA1D;;;AACH;;AC5+Cc;;AD4+Cd;AACf;;AAA0B;AA/+BM;AAAA;AAAA;AAk/BpB;;AAAiB;AAA5B;;AAAA;AAAP;AAGa;AAAA;;;;;;;;AAAA;;;;ACt/CuB;;;ADs/CvB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIC;AAAA;;;;;;;;AAAA;;;;AC1/CsB;;;AD0/CtB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIG;;AAAA;AACb;;AAAmB;AAAnB;AAAA;;AAEA;;AAAA;AAAJ;;;;;;;AAyFA;;AAAA;AAAA;AAEA;AAE0B;;AACH;;AA7CM;;AA6CN;AAAA;AAAA;;;;;;;;;;AAHvB;;;;AC5lDoC;;;AD4lDpC;AASA;;AAAA;;;AACE;AAGqB;;;;;;;;;AAHrB;;;ACtmDkC;;;ADsmDlC;AAOA;;;AAGI;;AAAA;;AAAA;AAAA;;AAAuB;AAAvB;;AACA;;AAAA;;AAAA;AAAA;;AAAsB;AAAtB;AAAA;;AAAA;;AAEN;;AAAA;AAAA;;;AA9+CF;AAAA;AAAA;AAAA;AA++C6B;;AAAA;AA/+C7B;AA++CE;AAAA;AACA;;;AAEA;;;AACE;;AAAA;;;AACE;;;;;;;;;;;;;;AAAA;;;;ACznDgC;;;ADynDhC;AAQA;;AAAA;AAAA;;;AAEuB;;AAAA;;AAx+C7B;AAAA;;AAAA;AAAA;AAy+CsE;AAAjC;AAz+CrC;;AAy+CI;AAAA;AAkBwB;;;AAxgD5B;;AAwgDE;AAAA;;AAfyB;;AAAA;AAAA;;;AACE;AAAA;;;AACL;;AAAA;AAvlDxB;AAAA;AAAA;AAAA;AAylDiB;;AAAA;AAngDjB;AAAA;;AAAA;AAAA;AAogDoB;AAEJ;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAPH;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaf;;AAAA;AAAA;;;;;;;;;;;;AAaJ;;;AAxgDuD;;AAAA;;AAAA;AAkhDnB;AAAA;AAAA;;AAAlC;AAC0C;AAAA;AACS;AAAA;;;AAvhDiC;;AAAA;AAAA;AA4W9C;AAAA;AA4qCtC;;;;AACqB;AAAA;;;AACf;AAAkC;;AAAiB;AAzlD3D;AAAA;;AAAA;AAAA;AA6lDW;;AAAA;;;AAE2B;;AAAjB;;AAAiB;AAH9B;;AAAA;AAA6B;;;AAMf;ACtrDY;ADsrDZ;AAAd;;AAAa;AACb;AAAA;;AAAyB;AACzB;;AAAA;;AAAoB;AAE1B;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AA+CF;;;AAtlDsF;;AAAA;;AAAA;AAkW9C;AAAA;AAAA;;AAsvCtC;AA5uCsC;AAAA;AAAA;AA8uChB;;AAAiB;AAAhC;;AAAA;AAAP;AAE+B;AAAA;;;;;;;;AAAA;;;;ACjvDK;;;ADivDL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAKD;AAAA;;;;;;;;AAAA;;;;ACtvDM;;;ADsvDN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAMb;;AAAA;AACX;;AAAuB;AA5vCS;AAAA;AAAA;AAgwCJ;;;AAEX;;;AAGN;ACnwDkB;;ADowDb;AAEtB;AAqHF;;;;;AAEgB;;AAvzDhB;AAAA;;AAAA;AAAA;AAuzDS;AAAP;AA5qDF;AAAA;;AAAA;AAAA;AA6qDmC;AAAW;AAArC;AAAP;AAEiC;;AAA0B;;AAAA;AAAiB;;AAA0B;;AAAA;AAA5E;AAApB;AAjtDR;AAAA;;AAAA;AAAA;AAmtDM;AAAJ;;;AACE;AAptDJ;AAAA;;AAAA;AAAA;AAutDQ;;AAAA;AAAoB;AAApB;AAAA;;ACl4DuC;ADm4DzC;AAAJ;;;AACE;AAGF;;AAAA;AAAA;;;AApuDF;AAAA;;AAAA;AAAA;AAsuDmB;;AAAA;AACuB;;AAAb;AAruD7B;AAAA;;AAAA;AAAA;AAuuDE;;AAAA;AAvuDF;;AAuuDE;AAAA;AAruDF;AAAA;;AAAA;AAAA;AAsuDE;;AAAA;AAtuDF;;AAsuDE;AAAA;AAE0B;AAtuD5B;AAAA;;AAAA;AAAA;AAuuDE;;AAAA;AAvuDF;;AAuuDE;AAAA;AAx1DF;AAAA;AAAA;AAAA;AAy1DE;AAz1DF;AAy1DE;AAAA;;AAGF;;;AACgB;;AAnuDhB;AAAA;;AAAA;AAAA;AAmuDS;AAAP;AACkE;;AAAxC;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAC1B;;;AACE;AAtuDJ;AAAA;;AAAA;AAAA;;;;;;;;;;;AAsuDI;;;;AC/5DkC;;;AD+5DlC;;AAeJ;;;;;;AAEgB;;AAvvDhB;AAAA;;AAAA;AAAA;AAuvDS;AAAP;AACsB;;AAAtB;;;AAEA;;;AA93DF;AAAA;;AAAA;AAAA;AAi4DiD;AACJ;;AAAxB;AAAA;;AAAA;AAGnB;AAjwDF;AAAA;;AAAA;AAAA;AApIA;AAAA;;AAAA;AAAA;AAw4DyC;;;;;;;;;AAHvC;;;;AC17DoC;;;AD07DpC;AAx4DF;AAAA;AAAA;AAAA;AAi5D+B;AAA7B;;;AAGW;;AAA0B;;AAAA;AAAiB;;AAA0B;;AAAA;AAA5E;ACt8DgC;ADs8DhC;AADI;AAAA;;AAEN;;;AACE;AA/wDN;AAAA;;AAAA;AAAA;;;;;;;AA+wDM;;;ACx8DgC;;;ADw8DhC;AA1yDN;AAAA;;AAAA;AAAA;AAm0DgC;AA/yDhC;AAAA;;AAAA;AAAA;AAgzDkB;AAt6DlB;AAAA;;AAAA;AAAA;AAu6DqB;AAp6DrB;AAAA;AAAA;AAAA;AAq6DoB;AA/1DpB;AAAA;AAAA;AAAA;AAg2DmB;AArzDnB;AAAA;;AAAA;AAAA;AAszD8B;AAxzD9B;AAAA;;AAAA;AAAA;AAyzD6B;AA3zD7B;AAAA;;AAAA;AAAA;AA4zDoC;AAt6DpC;AAAA;;AAAA;AAAA;AAu6Dc;AAj2Dd;AAAA;;AAAA;AAAA;AAk2DoB;AAx7DpB;AAAA;AAAA;AAAA;AAy7DwD;AAArC;AAt7DnB;AAAA;;AAAA;AAAA;AAu7DsD;AAApC;AA30DlB;AAAA;;AAAA;AAAA;AA40D4D;AAAvC;AAn0DrB;AAAA;;AAAA;AAAA;AAo0D2B;AA10D3B;AAAA;;AAAA;AAAA;AA20DmB;AAp1DnB;AAAA;;AAAA;AAAA;AAq1DyB;AAhBhB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;;AAAA;AA96DF;AAAA;AAAA;AAAA;AAg6DqD;AACH;;AAAzB;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACrB;;;AACE;AA5xDN;AAAA;;AAAA;AAAA;AAvIA;AAAA;AAAA;AAAA;AAs6D8C;;;;;;;;;AAHxC;;;;ACr9DgC;;;ADq9DhC;;;;AAuCN;;;AASE;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAh9DF;AAAA;;AAAA;AAAA;AAm9D6C;AAH3C;AAAA;;;;AAAA;AAKA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEmB;;AAFnB;AAAA;;;;AAAA;AAKgD;;AAAb;;AAAa;AA71DlD;;AA61DE;AAAA;AACoD;;AAAf;AAAe;AAj9DtD;AAi9DE;AAAA;AACsD;;AAAhB;;AAAgB;AAr9DxD;;AAq9DE;AAAA;AACkD;;AAAd;;AAAc;AA74DpD;AA64DE;AAAA;AACwE;;AAAzB;;AAAyB;AAn2D1E;;AAm2DE;AAAA;AACsE;;AAAxB;;AAAwB;AAt2DxE;;AAs2DE;AAAA;AACoF;;AAA/B;;AAA+B;AAz2DtF;;AAy2DE;AAAA;AACwC;;AAAT;;AAAS;AAp9D1C;;AAo9DE;AAAA;AACsD;;AAAf;;AAAe;AA/4DxD;;AA+4DE;AAAA;AAC4E;;AAA3B;;AAA2B;AA13D9E;;AA03DE;AAAA;AAC8D;;AAAd;;AAAc;AAAnC;AAv+D7B;AAu+DE;AAAA;AAC4D;;AAAb;;AAAa;AAAlC;AAr+D5B;;AAq+DE;AAAA;AACkE;;AAAhB;;AAAgB;AAArC;AA13D/B;;AA03DE;AAAA;AACkE;;AAAtB;;AAAsB;AAl3DpE;;AAk3DE;AAAA;AACkD;;AAAd;;AAAc;AAz3DpD;;AAy3DE;AAAA;AAC8D;;AAApB;;AAAoB;AAn4DhE;;AAm4DE;AAAA;AA10DF;;AA40D8B;;;;;;;;;;AAA5B;;;;;;;;;;AAsBF;;;AASgB;;AAt/DhB;AAAA;;AAAA;AAAA;AAs/DS;AAAP;AAtBc;;AAyBd;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;AAqBA;AAAA;;;;AC3lEoC;;;AD2lEpC;;AAOF;;;AAh7DA;AAAA;;AAAA;AAAA;AAi7D4B;;AAAA;AAj7D5B;;AAi7DE;AAAA;;AAQF;;;AAz7DA;AAAA;;AAAA;AAAA;AA07DS;;AAAA;AAAP;AA17DF;AAAA;;AAAA;AAAA;AA27D4B;;AAAA;AA37D5B;;AA27DE;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000 10000 1000000 1000000000000"
    },
    "18": {
      "op": "bytecblock \"base_token_id\" 0x151f7c75 \"total_deposits\" \"total_borrows\" \"admin_account\" \"contract_state\" \"loan_record\" \"accepted_collaterals\" \"circulating_lst\" \"active_loan_records\" \"lst_token_id\" \"borrow_index_wad\" \"last_apr_bps\" \"cash_on_hand\" \"fee_pool\" \"migration_admin\" \"buyout_token_id\" \"current_accumulated_commission\" 0x09ef525f 0xae859f3b \"accepted_collaterals_count\" \"max_apr_bps\" \"liq_threshold_bps\" \"base_bps\" \"liq_bonus_bps\" \"total_commission_earned\" \"total_additional_rewards\" 0x00 \"ltv_bps\" \"util_cap_bps\" \"prev_apr_bps\" \"last_accrual_ts\" \"commission_percentage\" \"rate_model_type\" \"kink_norm_bps\" \"slope1_bps\" \"slope2_bps\" \"params_update_nonce\" 0x0000000000000000 \"origination_fee_bps\" \"protocol_share_bps\" \"oracle_app\" \"last_scaled_down_disbursement\" \"ema_alpha_bps\" \"power_gamma_q16\" \"scarcity_K_bps\" \"last_max_borrow\" \"last_requested_loan\" \"params_updated_at\""
    },
    "767": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "769": {
      "op": "bz main_after_if_else@41",
      "stack_out": []
    },
    "772": {
      "op": "pushbytess 0x3b01665e 0x023f1033 0x6ca100cd 0x34b8343e 0xca7a1795 0x17c33662 0x5efce39a 0x5cac25a9 0xe596ac73 0x86a6b1bb 0xbae4c238 0x3e41a49b 0x15a5b25e 0xc0799344 0x8553cffa 0xb4a74766 0xae99f45b 0xbed00024 0xd217f842 0xb0d6e8eb 0xd0e69812 0x5f0d6f03 // method \"createApplication(account,uint64)void\", method \"initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void\", method \"setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void\", method \"setContractState(uint64)void\", method \"setMigrationAdmin(account)void\", method \"generateLSTToken(pay)void\", method \"optInToLST(uint64,pay)void\", method \"configureLSTToken(axfer,uint64)void\", method \"getOraclePrice(uint64)uint64\", method \"addNewCollateralType(uint64,uint64,pay,uint64)void\", method \"depositAlgo(pay,uint64,pay)void\", method \"withdrawDeposit(axfer,uint64,uint64,pay)void\", method \"borrow(axfer,uint64,uint64,uint64,uint64,pay)void\", method \"addLoanRecordExternal(uint64,uint64,account,uint64)void\", method \"accrueLoanInterest(account,account)void\", method \"current_apr_bps()uint64\", method \"getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)\", method \"repayLoanAlgo(pay,uint64)void\", method \"withdrawPlatformFees(account,pay)void\", method \"buyoutSplitAlgo(account,account,axfer,pay,uint64)void\", method \"maxWithdrawableCollateralLST(uint64)uint64\", method \"withdrawCollateral(uint64,uint64,uint64)void\"",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)"
      ]
    },
    "884": {
      "op": "bytec 18 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "886": {
      "op": "bytec 19 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "888": {
      "op": "pushbytess 0x6c6337c0 0x70d451f7 0xdaa7f7f2 0x3172ca9d 0xef0bd27a 0x71757509 0x0ac83b5d 0xd0b8a7de 0x4d658379 0x400e14fb 0x51ef3b21 // method \"getAcceptedCollateralsCount()uint64\", method \"liquidatePartialAlgo(account,pay,uint64,uint64)void\", method \"getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)\", method \"gas()void\", method \"calculateCollateralValueUSD(uint64,uint64,uint64)uint64\", method \"pickupAlgoRewards()void\", method \"migrateCollateralTokenId(uint64,pay)void\", method \"migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)\", method \"acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void\", method \"goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void\", method \"goOffline()void\"",
      "defined_out": [
        "Method(acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64)void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(goOffline()void)",
        "Method(goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(liquidatePartialAlgo(account,pay,uint64,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(optInToLST(uint64,pay)void)",
        "Method(pickupAlgoRewards()void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(liquidatePartialAlgo(account,pay,uint64,uint64)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(pickupAlgoRewards()void)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)",
        "Method(goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void)",
        "Method(goOffline()void)"
      ]
    },
    "945": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64)void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(goOffline()void)",
        "Method(goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(liquidatePartialAlgo(account,pay,uint64,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(optInToLST(uint64,pay)void)",
        "Method(pickupAlgoRewards()void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(setContractState(uint64)void)",
        "Method(setMigrationAdmin(account)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay,uint64)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(addLoanRecordExternal(uint64,uint64,account,uint64)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(withdrawPlatformFees(account,pay)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,pay,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(liquidatePartialAlgo(account,pay,uint64,uint64)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(pickupAlgoRewards()void)",
        "Method(migrateCollateralTokenId(uint64,pay)void)",
        "Method(migrateContract(pay)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(acceptMigrationAlgoContract(axfer,pay,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64),account)void)",
        "Method(goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void)",
        "Method(goOffline()void)",
        "tmp%2#0"
      ]
    },
    "948": {
      "op": "match main_createApplication_route@3 main_initApplication_route@4 main_setRateParams_route@5 main_setContractState_route@6 main_setMigrationAdmin_route@7 main_generateLSTToken_route@8 main_optInToLST_route@9 main_configureLSTToken_route@10 main_getOraclePrice_route@11 main_addNewCollateralType_route@12 main_depositAlgo_route@13 main_withdrawDeposit_route@14 main_borrow_route@15 main_addLoanRecordExternal_route@16 main_accrueLoanInterest_route@17 main_current_apr_bps_route@18 main_getLoanRecord_route@19 main_repayLoanAlgo_route@20 main_withdrawPlatformFees_route@21 main_buyoutSplitAlgo_route@22 main_maxWithdrawableCollateralLST_route@23 main_withdrawCollateral_route@24 main_getCirculatingLST_route@25 main_getTotalDeposits_route@26 main_getAcceptedCollateralsCount_route@27 main_liquidatePartialAlgo_route@28 main_getLoanStatus_route@29 main_gas_route@30 main_calculateCollateralValueUSD_route@31 main_pickupAlgoRewards_route@32 main_migrateCollateralTokenId_route@33 main_migrateContract_route@34 main_acceptMigrationAlgoContract_route@35 main_goOnline_route@36 main_goOffline_route@37",
      "stack_out": []
    },
    "1020": {
      "block": "main_after_if_else@41",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1021": {
      "op": "return",
      "stack_out": []
    },
    "1022": {
      "block": "main_goOffline_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%249#0"
      ],
      "stack_out": [
        "tmp%249#0"
      ]
    },
    "1024": {
      "op": "!",
      "defined_out": [
        "tmp%250#0"
      ],
      "stack_out": [
        "tmp%250#0"
      ]
    },
    "1025": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1026": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%251#0"
      ],
      "stack_out": [
        "tmp%251#0"
      ]
    },
    "1028": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1029": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.goOffline",
      "op": "callsub goOffline"
    },
    "1032": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1033": {
      "op": "return",
      "stack_out": []
    },
    "1034": {
      "block": "main_goOnline_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%235#0"
      ],
      "stack_out": [
        "tmp%235#0"
      ]
    },
    "1036": {
      "op": "!",
      "defined_out": [
        "tmp%236#0"
      ],
      "stack_out": [
        "tmp%236#0"
      ]
    },
    "1037": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1038": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%237#0"
      ],
      "stack_out": [
        "tmp%237#0"
      ]
    },
    "1040": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1041": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%239#0"
      ],
      "stack_out": [
        "tmp%239#0"
      ]
    },
    "1043": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%239#0"
      ],
      "stack_out": [
        "tmp%239#0",
        "1"
      ]
    },
    "1044": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%20#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0"
      ]
    },
    "1045": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%20#0",
        "gtxn_idx%20#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "gtxn_idx%20#0 (copy)"
      ]
    },
    "1046": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%20#0",
        "gtxn_type%20#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "gtxn_type%20#0"
      ]
    },
    "1048": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%20#0",
        "gtxn_type%20#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "gtxn_type%20#0",
        "pay"
      ]
    },
    "1049": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%20#0",
        "gtxn_type_matches%20#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "gtxn_type_matches%20#0"
      ]
    },
    "1050": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%20#0"
      ]
    },
    "1051": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%20#0",
        "tmp%240#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "tmp%240#0"
      ]
    },
    "1054": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%20#0",
        "tmp%241#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "tmp%241#0"
      ]
    },
    "1057": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%242#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%242#0"
      ]
    },
    "1060": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0"
      ]
    },
    "1063": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%244#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%244#0"
      ]
    },
    "1066": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%245#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%245#0"
      ]
    },
    "1069": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%20#0",
        "reinterpret_bytes[8]%49#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%245#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%245#0",
        "reinterpret_bytes[8]%49#0"
      ]
    },
    "1072": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%245#0",
        "tmp%246#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%245#0",
        "tmp%246#0"
      ]
    },
    "1073": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "gtxn_idx%20#0",
        "reinterpret_bytes[8]%50#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%245#0",
        "tmp%246#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%245#0",
        "tmp%246#0",
        "reinterpret_bytes[8]%50#0"
      ]
    },
    "1076": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%245#0",
        "tmp%246#0",
        "tmp%247#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%245#0",
        "tmp%246#0",
        "tmp%247#0"
      ]
    },
    "1077": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "gtxn_idx%20#0",
        "reinterpret_bytes[8]%51#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%245#0",
        "tmp%246#0",
        "tmp%247#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%245#0",
        "tmp%246#0",
        "tmp%247#0",
        "reinterpret_bytes[8]%51#0"
      ]
    },
    "1080": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%245#0",
        "tmp%246#0",
        "tmp%247#0",
        "tmp%248#0"
      ],
      "stack_out": [
        "gtxn_idx%20#0",
        "tmp%241#0",
        "tmp%243#0",
        "tmp%245#0",
        "tmp%246#0",
        "tmp%247#0",
        "tmp%248#0"
      ]
    },
    "1081": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.goOnline",
      "op": "callsub goOnline",
      "stack_out": []
    },
    "1084": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1085": {
      "op": "return",
      "stack_out": []
    },
    "1086": {
      "block": "main_acceptMigrationAlgoContract_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%227#0"
      ],
      "stack_out": [
        "tmp%227#0"
      ]
    },
    "1088": {
      "op": "!",
      "defined_out": [
        "tmp%228#0"
      ],
      "stack_out": [
        "tmp%228#0"
      ]
    },
    "1089": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1090": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%229#0"
      ],
      "stack_out": [
        "tmp%229#0"
      ]
    },
    "1092": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1093": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%231#0"
      ],
      "stack_out": [
        "tmp%231#0"
      ]
    },
    "1095": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%231#0"
      ],
      "stack_out": [
        "tmp%231#0",
        "2"
      ]
    },
    "1097": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%18#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0"
      ]
    },
    "1098": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)"
      ]
    },
    "1099": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ]
    },
    "1101": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "axfer"
      ]
    },
    "1103": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0"
      ]
    },
    "1104": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%18#0"
      ]
    },
    "1105": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%18#0",
        "tmp%232#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "tmp%232#0"
      ]
    },
    "1107": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%18#0",
        "tmp%232#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "tmp%232#0",
        "1"
      ]
    },
    "1108": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0"
      ]
    },
    "1109": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%19#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_idx%19#0 (copy)"
      ]
    },
    "1110": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type%19#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type%19#0"
      ]
    },
    "1112": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type%19#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type%19#0",
        "pay"
      ]
    },
    "1113": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type_matches%19#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "gtxn_type_matches%19#0"
      ]
    },
    "1114": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0"
      ]
    },
    "1115": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "reinterpret_bytes[128]%0#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "reinterpret_bytes[128]%0#0"
      ]
    },
    "1118": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "reinterpret_bytes[128]%0#0",
        "reinterpret_bytes[1]%12#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "reinterpret_bytes[128]%0#0",
        "reinterpret_bytes[1]%12#0"
      ]
    },
    "1121": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%233#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%233#0"
      ]
    },
    "1122": {
      "op": "txnas Accounts",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%234#0"
      ],
      "stack_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%19#0",
        "reinterpret_bytes[128]%0#0",
        "tmp%234#0"
      ]
    },
    "1124": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.acceptMigrationAlgoContract",
      "op": "callsub acceptMigrationAlgoContract",
      "stack_out": []
    },
    "1127": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1128": {
      "op": "return",
      "stack_out": []
    },
    "1129": {
      "block": "main_migrateContract_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%220#0"
      ],
      "stack_out": [
        "tmp%220#0"
      ]
    },
    "1131": {
      "op": "!",
      "defined_out": [
        "tmp%221#0"
      ],
      "stack_out": [
        "tmp%221#0"
      ]
    },
    "1132": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1133": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%222#0"
      ],
      "stack_out": [
        "tmp%222#0"
      ]
    },
    "1135": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1136": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%224#0"
      ],
      "stack_out": [
        "tmp%224#0"
      ]
    },
    "1138": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%224#0"
      ],
      "stack_out": [
        "tmp%224#0",
        "1"
      ]
    },
    "1139": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%17#0"
      ],
      "stack_out": [
        "gtxn_idx%17#0"
      ]
    },
    "1140": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)"
      ]
    },
    "1141": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0"
      ],
      "stack_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0"
      ]
    },
    "1143": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "pay"
      ]
    },
    "1144": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0"
      ],
      "stack_out": [
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0"
      ]
    },
    "1145": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%17#0"
      ]
    },
    "1146": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.migrateContract",
      "op": "callsub migrateContract",
      "defined_out": [
        "tmp%225#0"
      ],
      "stack_out": [
        "tmp%225#0"
      ]
    },
    "1149": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%225#0"
      ],
      "stack_out": [
        "tmp%225#0",
        "0x151f7c75"
      ]
    },
    "1150": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%225#0"
      ]
    },
    "1151": {
      "op": "concat",
      "defined_out": [
        "tmp%226#0"
      ],
      "stack_out": [
        "tmp%226#0"
      ]
    },
    "1152": {
      "op": "log",
      "stack_out": []
    },
    "1153": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1154": {
      "op": "return",
      "stack_out": []
    },
    "1155": {
      "block": "main_migrateCollateralTokenId_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%214#0"
      ],
      "stack_out": [
        "tmp%214#0"
      ]
    },
    "1157": {
      "op": "!",
      "defined_out": [
        "tmp%215#0"
      ],
      "stack_out": [
        "tmp%215#0"
      ]
    },
    "1158": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1159": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%216#0"
      ],
      "stack_out": [
        "tmp%216#0"
      ]
    },
    "1161": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1162": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%48#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%48#0"
      ]
    },
    "1165": {
      "op": "btoi",
      "defined_out": [
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0"
      ]
    },
    "1166": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%218#0",
        "tmp%219#0"
      ],
      "stack_out": [
        "tmp%218#0",
        "tmp%219#0"
      ]
    },
    "1168": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%218#0",
        "tmp%219#0"
      ],
      "stack_out": [
        "tmp%218#0",
        "tmp%219#0",
        "1"
      ]
    },
    "1169": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%16#0",
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0",
        "gtxn_idx%16#0"
      ]
    },
    "1170": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)",
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0",
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)"
      ]
    },
    "1171": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0"
      ]
    },
    "1173": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "pay",
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "pay"
      ]
    },
    "1174": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0",
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0",
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0"
      ]
    },
    "1175": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%218#0",
        "gtxn_idx%16#0"
      ]
    },
    "1176": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.migrateCollateralTokenId",
      "op": "callsub migrateCollateralTokenId",
      "stack_out": []
    },
    "1179": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1180": {
      "op": "return",
      "stack_out": []
    },
    "1181": {
      "block": "main_pickupAlgoRewards_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%210#0"
      ],
      "stack_out": [
        "tmp%210#0"
      ]
    },
    "1183": {
      "op": "!",
      "defined_out": [
        "tmp%211#0"
      ],
      "stack_out": [
        "tmp%211#0"
      ]
    },
    "1184": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1185": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%212#0"
      ],
      "stack_out": [
        "tmp%212#0"
      ]
    },
    "1187": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1188": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.pickupAlgoRewards",
      "op": "callsub pickupAlgoRewards"
    },
    "1191": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1192": {
      "op": "return",
      "stack_out": []
    },
    "1193": {
      "block": "main_calculateCollateralValueUSD_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%203#0"
      ]
    },
    "1195": {
      "op": "!",
      "defined_out": [
        "tmp%204#0"
      ],
      "stack_out": [
        "tmp%204#0"
      ]
    },
    "1196": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1197": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%205#0"
      ],
      "stack_out": [
        "tmp%205#0"
      ]
    },
    "1199": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1200": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%45#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0"
      ]
    },
    "1203": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "reinterpret_bytes[8]%46#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "reinterpret_bytes[8]%46#0"
      ]
    },
    "1206": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%207#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%207#0"
      ]
    },
    "1207": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "reinterpret_bytes[8]%47#0",
        "tmp%207#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%207#0",
        "reinterpret_bytes[8]%47#0"
      ]
    },
    "1210": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%207#0",
        "tmp%208#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%45#0",
        "tmp%207#0",
        "tmp%208#0"
      ]
    },
    "1211": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "1214": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0"
      ]
    },
    "1215": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0",
        "0x151f7c75"
      ]
    },
    "1216": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ]
    },
    "1217": {
      "op": "concat",
      "defined_out": [
        "tmp%209#0"
      ],
      "stack_out": [
        "tmp%209#0"
      ]
    },
    "1218": {
      "op": "log",
      "stack_out": []
    },
    "1219": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1220": {
      "op": "return",
      "stack_out": []
    },
    "1221": {
      "block": "main_gas_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%199#0"
      ],
      "stack_out": [
        "tmp%199#0"
      ]
    },
    "1223": {
      "op": "!",
      "defined_out": [
        "tmp%200#0"
      ],
      "stack_out": [
        "tmp%200#0"
      ]
    },
    "1224": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1225": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%201#0"
      ],
      "stack_out": [
        "tmp%201#0"
      ]
    },
    "1227": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1228": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1229": {
      "op": "return",
      "stack_out": []
    },
    "1230": {
      "block": "main_getLoanStatus_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "1232": {
      "op": "!",
      "defined_out": [
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0"
      ]
    },
    "1233": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1234": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%194#0"
      ]
    },
    "1236": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1237": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%11#0"
      ]
    },
    "1240": {
      "op": "btoi",
      "defined_out": [
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0"
      ]
    },
    "1241": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%197#0"
      ],
      "stack_out": [
        "tmp%197#0"
      ]
    },
    "1243": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus",
      "op": "callsub getLoanStatus",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ]
    },
    "1246": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%0#0"
      ]
    },
    "1248": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0"
      ]
    },
    "1249": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "elements_to_encode%1#0"
      ]
    },
    "1251": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "1252": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%2#0"
      ]
    },
    "1254": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "1255": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "elements_to_encode%3#0"
      ]
    },
    "1257": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "1258": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "elements_to_encode%4#0"
      ]
    },
    "1260": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "1261": {
      "op": "bytec 27 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00"
      ]
    },
    "1263": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00",
        "0"
      ]
    },
    "1264": {
      "op": "uncover 8",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00",
        "0",
        "elements_to_encode%5#0"
      ]
    },
    "1266": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%6#0",
        "encoded_bool%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0"
      ]
    },
    "1267": {
      "op": "bytec 27 // 0x00",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "1269": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00",
        "0"
      ]
    },
    "1270": {
      "op": "uncover 8",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00",
        "0",
        "elements_to_encode%6#0"
      ]
    },
    "1272": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "1273": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%6#0"
      ]
    },
    "1275": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "1277": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%10#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1278": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%8#0"
      ]
    },
    "1280": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%10#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1281": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%9#0"
      ]
    },
    "1283": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1284": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%10#0"
      ]
    },
    "1286": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1287": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_bool%0#0"
      ]
    },
    "1289": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1290": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0"
      ]
    },
    "1291": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "1292": {
      "op": "getbit",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ]
    },
    "1293": {
      "op": "pushint 321 // 321"
    },
    "1296": {
      "op": "swap",
      "defined_out": [
        "321",
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "321",
        "is_true%0#0"
      ]
    },
    "1297": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1298": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "0x151f7c75"
      ]
    },
    "1299": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1300": {
      "op": "concat",
      "defined_out": [
        "tmp%198#0"
      ],
      "stack_out": [
        "tmp%198#0"
      ]
    },
    "1301": {
      "op": "log",
      "stack_out": []
    },
    "1302": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1303": {
      "op": "return",
      "stack_out": []
    },
    "1304": {
      "block": "main_liquidatePartialAlgo_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%183#0"
      ]
    },
    "1306": {
      "op": "!",
      "defined_out": [
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%184#0"
      ]
    },
    "1307": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1308": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0"
      ]
    },
    "1310": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1311": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "1314": {
      "op": "btoi",
      "defined_out": [
        "tmp%187#0"
      ],
      "stack_out": [
        "tmp%187#0"
      ]
    },
    "1315": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "1317": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%188#0",
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "tmp%189#0"
      ]
    },
    "1319": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%188#0",
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "tmp%189#0",
        "1"
      ]
    },
    "1320": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%15#0",
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0"
      ]
    },
    "1321": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)",
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)"
      ]
    },
    "1322": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0"
      ]
    },
    "1324": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "pay",
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "pay"
      ]
    },
    "1325": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0",
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0"
      ]
    },
    "1326": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0"
      ]
    },
    "1327": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%15#0",
        "reinterpret_bytes[8]%43#0",
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "reinterpret_bytes[8]%43#0"
      ]
    },
    "1330": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%15#0",
        "tmp%188#0",
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "tmp%190#0"
      ]
    },
    "1331": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%15#0",
        "reinterpret_bytes[8]%44#0",
        "tmp%188#0",
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "tmp%190#0",
        "reinterpret_bytes[8]%44#0"
      ]
    },
    "1334": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%15#0",
        "tmp%188#0",
        "tmp%190#0",
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%188#0",
        "gtxn_idx%15#0",
        "tmp%190#0",
        "tmp%191#0"
      ]
    },
    "1335": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidatePartialAlgo",
      "op": "callsub liquidatePartialAlgo",
      "stack_out": []
    },
    "1338": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1339": {
      "op": "return",
      "stack_out": []
    },
    "1340": {
      "block": "main_getAcceptedCollateralsCount_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%178#0"
      ]
    },
    "1342": {
      "op": "!",
      "defined_out": [
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%179#0"
      ]
    },
    "1343": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1344": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%180#0"
      ],
      "stack_out": [
        "tmp%180#0"
      ]
    },
    "1346": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1347": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "op": "callsub getAcceptedCollateralsCount",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "1350": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "1351": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "1352": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "1353": {
      "op": "concat",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "1354": {
      "op": "log",
      "stack_out": []
    },
    "1355": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1356": {
      "op": "return",
      "stack_out": []
    },
    "1357": {
      "block": "main_getTotalDeposits_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "1359": {
      "op": "!",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "1360": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1361": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "1363": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1364": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits",
      "op": "callsub getTotalDeposits",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "1367": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "1368": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "1369": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "1370": {
      "op": "concat",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "1371": {
      "op": "log",
      "stack_out": []
    },
    "1372": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1373": {
      "op": "return",
      "stack_out": []
    },
    "1374": {
      "block": "main_getCirculatingLST_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0"
      ]
    },
    "1376": {
      "op": "!",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "1377": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1378": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "1380": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1381": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST",
      "op": "callsub getCirculatingLST",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "1384": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "1385": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "1386": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "1387": {
      "op": "concat",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "1388": {
      "op": "log",
      "stack_out": []
    },
    "1389": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1390": {
      "op": "return",
      "stack_out": []
    },
    "1391": {
      "block": "main_withdrawCollateral_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "1393": {
      "op": "!",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "1394": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1395": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "1397": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1398": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%40#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%40#0"
      ]
    },
    "1401": {
      "op": "btoi",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "1402": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%41#0",
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0",
        "reinterpret_bytes[8]%41#0"
      ]
    },
    "1405": {
      "op": "btoi",
      "defined_out": [
        "tmp%165#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%165#0",
        "tmp%166#0"
      ]
    },
    "1406": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%42#0",
        "tmp%165#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%165#0",
        "tmp%166#0",
        "reinterpret_bytes[8]%42#0"
      ]
    },
    "1409": {
      "op": "btoi",
      "defined_out": [
        "tmp%165#0",
        "tmp%166#0",
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%165#0",
        "tmp%166#0",
        "tmp%167#0"
      ]
    },
    "1410": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawCollateral",
      "op": "callsub withdrawCollateral",
      "stack_out": []
    },
    "1413": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1414": {
      "op": "return",
      "stack_out": []
    },
    "1415": {
      "block": "main_maxWithdrawableCollateralLST_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "1417": {
      "op": "!",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "1418": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1419": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "1421": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1422": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%39#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%39#0"
      ]
    },
    "1425": {
      "op": "btoi",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "1426": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLST",
      "op": "callsub maxWithdrawableCollateralLST",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "1429": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "1430": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "1431": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "1432": {
      "op": "concat",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "1433": {
      "op": "log",
      "stack_out": []
    },
    "1434": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1435": {
      "op": "return",
      "stack_out": []
    },
    "1436": {
      "block": "main_buyoutSplitAlgo_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "1438": {
      "op": "!",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "1439": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1440": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "1442": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1443": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "1446": {
      "op": "btoi",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "1447": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "1449": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%9#0",
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "1452": {
      "op": "btoi",
      "defined_out": [
        "tmp%149#0",
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%150#0"
      ]
    },
    "1453": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%149#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0"
      ]
    },
    "1455": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%149#0",
        "tmp%151#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "tmp%152#0"
      ]
    },
    "1457": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%149#0",
        "tmp%151#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "tmp%152#0",
        "2"
      ]
    },
    "1459": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%149#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0"
      ]
    },
    "1460": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)",
        "tmp%149#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)"
      ]
    },
    "1461": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "tmp%149#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ]
    },
    "1463": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "tmp%149#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "axfer"
      ]
    },
    "1465": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0",
        "tmp%149#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0"
      ]
    },
    "1466": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0"
      ]
    },
    "1467": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%149#0",
        "tmp%151#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0",
        "tmp%153#0"
      ]
    },
    "1469": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%13#0",
        "tmp%149#0",
        "tmp%151#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0",
        "tmp%153#0",
        "1"
      ]
    },
    "1470": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%149#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0"
      ]
    },
    "1471": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)",
        "tmp%149#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)"
      ]
    },
    "1472": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "tmp%149#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type%14#0"
      ]
    },
    "1474": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "pay",
        "tmp%149#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "pay"
      ]
    },
    "1475": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0",
        "tmp%149#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0"
      ]
    },
    "1476": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0"
      ]
    },
    "1477": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%38#0",
        "tmp%149#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%38#0"
      ]
    },
    "1480": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%149#0",
        "tmp%151#0",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "tmp%151#0",
        "gtxn_idx%13#0",
        "gtxn_idx%14#0",
        "tmp%154#0"
      ]
    },
    "1481": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutSplitAlgo",
      "op": "callsub buyoutSplitAlgo",
      "stack_out": []
    },
    "1484": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1485": {
      "op": "return",
      "stack_out": []
    },
    "1486": {
      "block": "main_withdrawPlatformFees_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "1488": {
      "op": "!",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "1489": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1490": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "1492": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1493": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "1496": {
      "op": "btoi",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "1497": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "1499": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%142#0",
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%142#0",
        "tmp%143#0"
      ]
    },
    "1501": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%142#0",
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%142#0",
        "tmp%143#0",
        "1"
      ]
    },
    "1502": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%12#0",
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0",
        "gtxn_idx%12#0"
      ]
    },
    "1503": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)",
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0",
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)"
      ]
    },
    "1504": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0"
      ]
    },
    "1506": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay",
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay"
      ]
    },
    "1507": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0",
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0",
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0"
      ]
    },
    "1508": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%142#0",
        "gtxn_idx%12#0"
      ]
    },
    "1509": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawPlatformFees",
      "op": "callsub withdrawPlatformFees",
      "stack_out": []
    },
    "1512": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1513": {
      "op": "return",
      "stack_out": []
    },
    "1514": {
      "block": "main_repayLoanAlgo_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "1516": {
      "op": "!",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "1517": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1518": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "1520": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1521": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "1523": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0",
        "1"
      ]
    },
    "1524": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1525": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ]
    },
    "1526": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ]
    },
    "1528": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0",
        "pay"
      ]
    },
    "1529": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ]
    },
    "1530": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1531": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%37#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%37#0"
      ]
    },
    "1534": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%136#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%136#0"
      ]
    },
    "1535": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo",
      "op": "callsub repayLoanAlgo",
      "stack_out": []
    },
    "1538": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1539": {
      "op": "return",
      "stack_out": []
    },
    "1540": {
      "block": "main_getLoanRecord_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "1542": {
      "op": "!",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "1543": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1544": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "1546": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1547": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "1550": {
      "op": "btoi",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "1551": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "1553": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "1556": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0",
        "0x151f7c75"
      ]
    },
    "1557": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%129#0"
      ]
    },
    "1558": {
      "op": "concat",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "1559": {
      "op": "log",
      "stack_out": []
    },
    "1560": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1561": {
      "op": "return",
      "stack_out": []
    },
    "1562": {
      "block": "main_current_apr_bps_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "1564": {
      "op": "!",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "1565": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1566": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "1568": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1569": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1572": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "1573": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "1574": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "1575": {
      "op": "concat",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "1576": {
      "op": "log",
      "stack_out": []
    },
    "1577": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1578": {
      "op": "return",
      "stack_out": []
    },
    "1579": {
      "block": "main_accrueLoanInterest_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "1581": {
      "op": "!",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "1582": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1583": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "1585": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1586": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "1589": {
      "op": "btoi",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "1590": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "1592": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%5#0",
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0",
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "1595": {
      "op": "btoi",
      "defined_out": [
        "tmp%115#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%115#0",
        "tmp%116#0"
      ]
    },
    "1596": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%115#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%115#0",
        "tmp%117#0"
      ]
    },
    "1598": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest",
      "op": "callsub accrueLoanInterest",
      "stack_out": []
    },
    "1601": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1602": {
      "op": "return",
      "stack_out": []
    },
    "1603": {
      "block": "main_addLoanRecordExternal_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "1605": {
      "op": "!",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "1606": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1607": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "1609": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1610": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%34#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%34#0"
      ]
    },
    "1613": {
      "op": "btoi",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "1614": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%35#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0",
        "reinterpret_bytes[8]%35#0"
      ]
    },
    "1617": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0",
        "reinterpret_bytes[8]%35#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "1620": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%35#0",
        "tmp%106#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%106#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%107#0"
      ]
    },
    "1621": {
      "op": "txnas Accounts",
      "defined_out": [
        "reinterpret_bytes[8]%35#0",
        "tmp%106#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%106#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%108#0"
      ]
    },
    "1623": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%35#0",
        "reinterpret_bytes[8]%36#0",
        "tmp%106#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%106#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%108#0",
        "reinterpret_bytes[8]%36#0"
      ]
    },
    "1626": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%35#0",
        "tmp%106#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%106#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%108#0",
        "tmp%109#0"
      ]
    },
    "1627": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addLoanRecordExternal",
      "op": "callsub addLoanRecordExternal",
      "stack_out": []
    },
    "1630": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1631": {
      "op": "return",
      "stack_out": []
    },
    "1632": {
      "block": "main_borrow_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "1634": {
      "op": "!",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "1635": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1636": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "1638": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1639": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "1641": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0",
        "2"
      ]
    },
    "1643": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1644": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ]
    },
    "1645": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ]
    },
    "1647": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0",
        "axfer"
      ]
    },
    "1649": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ]
    },
    "1650": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1651": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%30#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%30#0"
      ]
    },
    "1654": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%98#0"
      ]
    },
    "1655": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%31#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%98#0",
        "reinterpret_bytes[8]%31#0"
      ]
    },
    "1658": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%98#0",
        "tmp%99#0"
      ]
    },
    "1659": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%32#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%98#0",
        "tmp%99#0",
        "reinterpret_bytes[8]%32#0"
      ]
    },
    "1662": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0"
      ]
    },
    "1663": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "reinterpret_bytes[8]%33#0"
      ]
    },
    "1666": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%101#0"
      ]
    },
    "1668": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%101#0",
        "1"
      ]
    },
    "1669": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%10#0"
      ]
    },
    "1670": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)",
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)"
      ]
    },
    "1671": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0"
      ]
    },
    "1673": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "pay",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0",
        "pay"
      ]
    },
    "1674": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type_matches%10#0",
        "reinterpret_bytes[8]%33#0",
        "tmp%100#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%10#0",
        "gtxn_type_matches%10#0"
      ]
    },
    "1675": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%100#0",
        "reinterpret_bytes[8]%33#0",
        "gtxn_idx%10#0"
      ]
    },
    "1676": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow",
      "op": "callsub borrow",
      "stack_out": []
    },
    "1679": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1680": {
      "op": "return",
      "stack_out": []
    },
    "1681": {
      "block": "main_withdrawDeposit_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "1683": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "1684": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1685": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "1687": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1688": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "1690": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "2"
      ]
    },
    "1692": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1693": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ]
    },
    "1694": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ]
    },
    "1696": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "axfer"
      ]
    },
    "1698": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ]
    },
    "1699": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1700": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%28#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%28#0"
      ]
    },
    "1703": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%90#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%90#0"
      ]
    },
    "1704": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%90#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%90#0",
        "reinterpret_bytes[8]%29#0"
      ]
    },
    "1707": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%90#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%90#0",
        "tmp%91#0"
      ]
    },
    "1708": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0"
      ]
    },
    "1710": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%7#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%90#0",
        "tmp%91#0",
        "tmp%92#0",
        "1"
      ]
    },
    "1711": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "tmp%90#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%90#0",
        "tmp%91#0",
        "gtxn_idx%8#0"
      ]
    },
    "1712": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)",
        "tmp%90#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%90#0",
        "tmp%91#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)"
      ]
    },
    "1713": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "tmp%90#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%90#0",
        "tmp%91#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0"
      ]
    },
    "1715": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "pay",
        "tmp%90#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%90#0",
        "tmp%91#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "pay"
      ]
    },
    "1716": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0",
        "tmp%90#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%90#0",
        "tmp%91#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0"
      ]
    },
    "1717": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%90#0",
        "tmp%91#0",
        "gtxn_idx%8#0"
      ]
    },
    "1718": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit",
      "op": "callsub withdrawDeposit",
      "stack_out": []
    },
    "1721": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1722": {
      "op": "return",
      "stack_out": []
    },
    "1723": {
      "block": "main_depositAlgo_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "1725": {
      "op": "!",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "1726": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1727": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "1729": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1730": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "1732": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "2"
      ]
    },
    "1734": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1735": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ]
    },
    "1736": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ]
    },
    "1738": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "pay"
      ]
    },
    "1739": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ]
    },
    "1740": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1741": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%27#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%27#0"
      ]
    },
    "1744": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%83#0"
      ]
    },
    "1745": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%83#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%83#0",
        "tmp%84#0"
      ]
    },
    "1747": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%5#0",
        "tmp%83#0",
        "tmp%84#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%83#0",
        "tmp%84#0",
        "1"
      ]
    },
    "1748": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%83#0",
        "gtxn_idx%6#0"
      ]
    },
    "1749": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)",
        "tmp%83#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%83#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)"
      ]
    },
    "1750": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%83#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0"
      ]
    },
    "1752": {
      "op": "intc_1 // pay",
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%83#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay"
      ]
    },
    "1753": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0",
        "tmp%83#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%83#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0"
      ]
    },
    "1754": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%83#0",
        "gtxn_idx%6#0"
      ]
    },
    "1755": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo",
      "op": "callsub depositAlgo",
      "stack_out": []
    },
    "1758": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1759": {
      "op": "return",
      "stack_out": []
    },
    "1760": {
      "block": "main_addNewCollateralType_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "1762": {
      "op": "!",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1763": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1764": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1766": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1767": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0"
      ]
    },
    "1770": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ]
    },
    "1773": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%77#0"
      ]
    },
    "1775": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "tmp%77#0",
        "1"
      ]
    },
    "1776": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0"
      ]
    },
    "1777": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "1778": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "1780": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "1781": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "1782": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0"
      ]
    },
    "1783": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "reinterpret_bytes[8]%26#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0",
        "reinterpret_bytes[8]%25#0",
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%26#0"
      ]
    },
    "1786": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType",
      "op": "callsub addNewCollateralType",
      "stack_out": []
    },
    "1789": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1790": {
      "op": "return",
      "stack_out": []
    },
    "1791": {
      "block": "main_getOraclePrice_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1793": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "1794": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1795": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1797": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1798": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%23#0"
      ]
    },
    "1801": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1804": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1805": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1806": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1807": {
      "op": "concat",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "1808": {
      "op": "log",
      "stack_out": []
    },
    "1809": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1810": {
      "op": "return",
      "stack_out": []
    },
    "1811": {
      "block": "main_configureLSTToken_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1813": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1814": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1815": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1817": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1818": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1820": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "1"
      ]
    },
    "1821": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1822": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "1823": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "1825": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "1827": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "1828": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1829": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%22#0"
      ]
    },
    "1832": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%67#0"
      ]
    },
    "1833": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken",
      "op": "callsub configureLSTToken",
      "stack_out": []
    },
    "1836": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1837": {
      "op": "return",
      "stack_out": []
    },
    "1838": {
      "block": "main_optInToLST_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1840": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1841": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1842": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1844": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1845": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0"
      ]
    },
    "1848": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1849": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%60#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0"
      ]
    },
    "1851": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%60#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0",
        "1"
      ]
    },
    "1852": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "gtxn_idx%2#0"
      ]
    },
    "1853": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "1854": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "1856": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "1857": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "1858": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%60#0",
        "gtxn_idx%2#0"
      ]
    },
    "1859": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST",
      "op": "callsub optInToLST",
      "stack_out": []
    },
    "1862": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1863": {
      "op": "return",
      "stack_out": []
    },
    "1864": {
      "block": "main_generateLSTToken_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1866": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "1867": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1868": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1870": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1871": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1873": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "1"
      ]
    },
    "1874": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1875": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "1876": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "1878": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "1879": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "1880": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1881": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken",
      "op": "callsub generateLSTToken",
      "stack_out": []
    },
    "1884": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1885": {
      "op": "return",
      "stack_out": []
    },
    "1886": {
      "block": "main_setMigrationAdmin_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1888": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1889": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1890": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1892": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1893": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "1896": {
      "op": "btoi",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1897": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1899": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setMigrationAdmin",
      "op": "callsub setMigrationAdmin",
      "stack_out": []
    },
    "1902": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1903": {
      "op": "return",
      "stack_out": []
    },
    "1904": {
      "block": "main_setContractState_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1906": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1907": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1908": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1910": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1911": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%20#0"
      ]
    },
    "1914": {
      "op": "btoi",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1915": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setContractState",
      "op": "callsub setContractState",
      "stack_out": []
    },
    "1918": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1919": {
      "op": "return",
      "stack_out": []
    },
    "1920": {
      "block": "main_setRateParams_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1922": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1923": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1924": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1926": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1927": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "1930": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1931": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "1934": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "1935": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "1938": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "1939": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "1942": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1943": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%12#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "1946": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "1947": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%13#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "1950": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "1951": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%14#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "1954": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "1955": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%15#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "1958": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "1959": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "1962": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "1963": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[8]%17#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "1966": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "1967": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "1970": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "1971": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_bytes[8]%19#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "1974": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "1975": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setRateParams",
      "op": "callsub setRateParams",
      "stack_out": []
    },
    "1978": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1979": {
      "op": "return",
      "stack_out": []
    },
    "1980": {
      "block": "main_initApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1982": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1983": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1984": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1986": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1987": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1989": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1"
      ]
    },
    "1990": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1991": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "1992": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "1994": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "1995": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1996": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1997": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "2000": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ]
    },
    "2001": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "2004": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "2005": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "2008": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "2009": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "2012": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "2013": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%5#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "2016": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "2017": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[1]%1#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "2020": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "2021": {
      "op": "txnas Applications",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "2023": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%6#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "2026": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "2027": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%7#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "2030": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "2031": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication",
      "op": "callsub initApplication",
      "stack_out": []
    },
    "2034": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2035": {
      "op": "return",
      "stack_out": []
    },
    "2036": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2038": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2039": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2040": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2042": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2043": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "2044": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "2047": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2048": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "2050": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "2053": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "2054": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "2057": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2058": {
      "op": "return",
      "stack_out": []
    },
    "2059": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication",
      "params": {
        "admin#0": "bytes",
        "baseTokenId#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2062": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\""
      ],
      "stack_out": [
        "\"admin_account\""
      ]
    },
    "2064": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ]
    },
    "2066": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2067": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseTokenId#0 (copy)"
      ]
    },
    "2069": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2070": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"base_token_id\""
      ]
    },
    "2071": {
      "op": "swap",
      "stack_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2072": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2073": {
      "op": "bytec 15 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\""
      ],
      "stack_out": [
        "\"migration_admin\""
      ]
    },
    "2075": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"migration_admin\"",
        "admin#0 (copy)"
      ]
    },
    "2077": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2078": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\""
      ],
      "stack_out": [
        "\"contract_state\""
      ]
    },
    "2080": {
      "op": "bytec 38 // 0x0000000000000000",
      "defined_out": [
        "\"contract_state\"",
        "0x0000000000000000"
      ],
      "stack_out": [
        "\"contract_state\"",
        "0x0000000000000000"
      ]
    },
    "2082": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2083": {
      "retsub": true,
      "op": "retsub"
    },
    "2084": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication",
      "params": {
        "mbrTxn#0": "uint64",
        "ltv_bps#0": "uint64",
        "liq_threshold_bps#0": "uint64",
        "liq_bonus_bps#0": "uint64",
        "origination_fee_bps#0": "uint64",
        "protocol_share_bps#0": "uint64",
        "oracle_app_id#0": "uint64",
        "buyout_token_id#0": "uint64",
        "additional_rewards_commission_percentage#0": "uint64"
      },
      "block": "initApplication",
      "stack_in": [],
      "op": "proto 9 0"
    },
    "2087": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2089": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2090": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2092": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2093": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2094": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2095": {
      "op": "assert",
      "stack_out": []
    },
    "2096": {
      "op": "frame_dig -9",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2098": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2100": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2101": {
      "op": "bytec 4 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2103": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2104": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2105": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2106": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "2109": {
      "op": "frame_dig -9",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2111": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2113": {
      "op": "pushint 400000 // 400000",
      "defined_out": [
        "400000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "400000"
      ]
    },
    "2117": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2118": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "2121": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2122": {
      "block": "initApplication_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2123": {
      "op": "frame_dig -1",
      "defined_out": [
        "additional_rewards_commission_percentage#0 (copy)"
      ],
      "stack_out": [
        "additional_rewards_commission_percentage#0 (copy)"
      ]
    },
    "2125": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "additional_rewards_commission_percentage#0 (copy)"
      ],
      "stack_out": [
        "additional_rewards_commission_percentage#0 (copy)",
        "100"
      ]
    },
    "2127": {
      "op": "<=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2128": {
      "error": "COMMISSION_TOO_HIGH",
      "op": "assert // COMMISSION_TOO_HIGH",
      "stack_out": []
    },
    "2129": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\""
      ],
      "stack_out": [
        "\"ltv_bps\""
      ]
    },
    "2131": {
      "op": "frame_dig -8",
      "defined_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ]
    },
    "2133": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2134": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\""
      ],
      "stack_out": [
        "\"liq_threshold_bps\""
      ]
    },
    "2136": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ]
    },
    "2138": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2139": {
      "op": "bytec 39 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\""
      ],
      "stack_out": [
        "\"origination_fee_bps\""
      ]
    },
    "2141": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ],
      "stack_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ]
    },
    "2143": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2144": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\""
      ],
      "stack_out": [
        "\"accepted_collaterals_count\""
      ]
    },
    "2146": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ]
    },
    "2147": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2148": {
      "op": "bytec 14 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\""
      ],
      "stack_out": [
        "\"fee_pool\""
      ]
    },
    "2150": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"fee_pool\"",
        "0"
      ]
    },
    "2151": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2152": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "2154": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"circulating_lst\"",
        "0"
      ]
    },
    "2155": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2156": {
      "op": "bytec_2 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\""
      ],
      "stack_out": [
        "\"total_deposits\""
      ]
    },
    "2157": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_deposits\"",
        "0"
      ]
    },
    "2158": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2159": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\""
      ],
      "stack_out": [
        "\"active_loan_records\""
      ]
    },
    "2161": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"active_loan_records\"",
        "0"
      ]
    },
    "2162": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2163": {
      "op": "bytec 40 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\""
      ],
      "stack_out": [
        "\"protocol_share_bps\""
      ]
    },
    "2165": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ],
      "stack_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ]
    },
    "2167": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2168": {
      "op": "bytec 41 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\""
      ],
      "stack_out": [
        "\"oracle_app\""
      ]
    },
    "2170": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ],
      "stack_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ]
    },
    "2172": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2173": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\""
      ],
      "stack_out": [
        "\"lst_token_id\""
      ]
    },
    "2175": {
      "op": "pushbytes 0x0000000000000063",
      "defined_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ],
      "stack_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ]
    },
    "2185": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2186": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "2188": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "\"base_bps\"",
        "50"
      ],
      "stack_out": [
        "\"base_bps\"",
        "50"
      ]
    },
    "2190": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2191": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "2193": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "\"util_cap_bps\"",
        "8000"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "8000"
      ]
    },
    "2196": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2197": {
      "op": "bytec_3 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\""
      ],
      "stack_out": [
        "\"total_borrows\""
      ]
    },
    "2198": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_borrows\"",
        "0"
      ]
    },
    "2199": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2200": {
      "op": "bytec 33 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "2202": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rate_model_type\"",
        "0"
      ]
    },
    "2203": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2204": {
      "op": "bytec 34 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "2206": {
      "op": "pushint 5000 // 5000",
      "defined_out": [
        "\"kink_norm_bps\"",
        "5000"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "5000"
      ]
    },
    "2209": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2210": {
      "op": "bytec 35 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "2212": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "\"slope1_bps\"",
        "1000"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "1000"
      ]
    },
    "2213": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2214": {
      "op": "bytec 36 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "2216": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "\"slope2_bps\"",
        "2000"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "2000"
      ]
    },
    "2219": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2220": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "2222": {
      "op": "pushint 6000 // 6000",
      "defined_out": [
        "\"max_apr_bps\"",
        "6000"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "6000"
      ]
    },
    "2225": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2226": {
      "op": "bytec 42 // \"last_scaled_down_disbursement\"",
      "defined_out": [
        "\"last_scaled_down_disbursement\""
      ],
      "stack_out": [
        "\"last_scaled_down_disbursement\""
      ]
    },
    "2228": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_scaled_down_disbursement\"",
        "0"
      ]
    },
    "2229": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2230": {
      "op": "bytec 43 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "2232": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"ema_alpha_bps\"",
        "0"
      ]
    },
    "2233": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2234": {
      "op": "bytec 30 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\""
      ],
      "stack_out": [
        "\"prev_apr_bps\""
      ]
    },
    "2236": {
      "op": "pushint 50 // 50",
      "stack_out": [
        "\"prev_apr_bps\"",
        "50"
      ]
    },
    "2238": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2239": {
      "op": "pushbytes \"util_ema_bps\"",
      "defined_out": [
        "\"util_ema_bps\""
      ],
      "stack_out": [
        "\"util_ema_bps\""
      ]
    },
    "2253": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"util_ema_bps\"",
        "0"
      ]
    },
    "2254": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2255": {
      "op": "bytec 44 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "2257": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"power_gamma_q16\"",
        "0"
      ]
    },
    "2258": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2259": {
      "op": "bytec 45 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "2261": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"scarcity_K_bps\"",
        "0"
      ]
    },
    "2262": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2263": {
      "op": "bytec 46 // \"last_max_borrow\"",
      "defined_out": [
        "\"last_max_borrow\""
      ],
      "stack_out": [
        "\"last_max_borrow\""
      ]
    },
    "2265": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_max_borrow\"",
        "0"
      ]
    },
    "2266": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2267": {
      "op": "bytec 47 // \"last_requested_loan\"",
      "defined_out": [
        "\"last_requested_loan\""
      ],
      "stack_out": [
        "\"last_requested_loan\""
      ]
    },
    "2269": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_requested_loan\"",
        "0"
      ]
    },
    "2270": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2271": {
      "op": "pushbytes \"debug_diff\"",
      "defined_out": [
        "\"debug_diff\""
      ],
      "stack_out": [
        "\"debug_diff\""
      ]
    },
    "2283": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"debug_diff\"",
        "0"
      ]
    },
    "2284": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2285": {
      "op": "bytec 48 // \"params_updated_at\"",
      "defined_out": [
        "\"params_updated_at\""
      ],
      "stack_out": [
        "\"params_updated_at\""
      ]
    },
    "2287": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"params_updated_at\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"params_updated_at\"",
        "new_state_value%0#0"
      ]
    },
    "2289": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2290": {
      "op": "bytec 37 // \"params_update_nonce\"",
      "defined_out": [
        "\"params_update_nonce\""
      ],
      "stack_out": [
        "\"params_update_nonce\""
      ]
    },
    "2292": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"params_update_nonce\"",
        "0"
      ]
    },
    "2293": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2294": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\""
      ],
      "stack_out": [
        "\"borrow_index_wad\""
      ]
    },
    "2296": {
      "op": "intc 5 // 1000000000000",
      "defined_out": [
        "\"borrow_index_wad\"",
        "1000000000000"
      ],
      "stack_out": [
        "\"borrow_index_wad\"",
        "1000000000000"
      ]
    },
    "2298": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2299": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\""
      ],
      "stack_out": [
        "\"last_accrual_ts\""
      ]
    },
    "2301": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"last_accrual_ts\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"last_accrual_ts\"",
        "new_state_value%1#0"
      ]
    },
    "2303": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2304": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2305": {
      "op": "bytec 23 // \"base_bps\"",
      "stack_out": [
        "0",
        "\"base_bps\""
      ]
    },
    "2307": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2308": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2309": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "2311": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "maybe_value%2#0"
      ]
    },
    "2312": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2313": {
      "op": "frame_dig -2",
      "defined_out": [
        "buyout_token_id#0 (copy)"
      ],
      "stack_out": [
        "buyout_token_id#0 (copy)"
      ]
    },
    "2315": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2316": {
      "op": "bytec 16 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"buyout_token_id\""
      ]
    },
    "2318": {
      "op": "swap",
      "stack_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2319": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2320": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\""
      ],
      "stack_out": [
        "\"liq_bonus_bps\""
      ]
    },
    "2322": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ]
    },
    "2324": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2325": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\""
      ],
      "stack_out": [
        "\"total_commission_earned\""
      ]
    },
    "2327": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_commission_earned\"",
        "0"
      ]
    },
    "2328": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2329": {
      "op": "bytec 17 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\""
      ],
      "stack_out": [
        "\"current_accumulated_commission\""
      ]
    },
    "2331": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"current_accumulated_commission\"",
        "0"
      ]
    },
    "2332": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2333": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\""
      ],
      "stack_out": [
        "\"commission_percentage\""
      ]
    },
    "2335": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"commission_percentage\"",
        "additional_rewards_commission_percentage#0 (copy)"
      ]
    },
    "2337": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2338": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\""
      ],
      "stack_out": [
        "\"cash_on_hand\""
      ]
    },
    "2340": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"cash_on_hand\"",
        "0"
      ]
    },
    "2341": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2342": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\""
      ],
      "stack_out": [
        "\"total_additional_rewards\""
      ]
    },
    "2344": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_additional_rewards\"",
        "0"
      ]
    },
    "2345": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2346": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2347": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2348": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2349": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2350": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2351": {
      "op": "bz initApplication_after_if_else@7",
      "stack_out": []
    },
    "2354": {
      "op": "itxn_begin"
    },
    "2355": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2357": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2358": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2359": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2360": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0"
      ]
    },
    "2361": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2362": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "2363": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2365": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2367": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2369": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2371": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2373": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "2374": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2376": {
      "op": "itxn_submit"
    },
    "2377": {
      "block": "initApplication_after_if_else@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2378": {
      "op": "bytec 16 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"buyout_token_id\""
      ]
    },
    "2380": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2381": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "2382": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2383": {
      "op": "bz initApplication_after_if_else@10",
      "stack_out": []
    },
    "2386": {
      "op": "itxn_begin"
    },
    "2387": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2389": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2390": {
      "op": "bytec 16 // \"buyout_token_id\"",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "2392": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2393": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "maybe_value%6#0"
      ]
    },
    "2394": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "2395": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "2396": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "2398": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2400": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2402": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2404": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2406": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2407": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2409": {
      "op": "itxn_submit"
    },
    "2410": {
      "block": "initApplication_after_if_else@10",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2411": {
      "block": "initApplication_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2412": {
      "op": "b initApplication_bool_merge@4"
    },
    "2415": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setRateParams",
      "params": {
        "base_bps#0": "uint64",
        "util_cap_bps#0": "uint64",
        "kink_norm_bps#0": "uint64",
        "slope1_bps#0": "uint64",
        "slope2_bps#0": "uint64",
        "max_apr_bps#0": "uint64",
        "max_apr_step_bps#0": "uint64",
        "ema_alpha_bps#0": "uint64",
        "power_gamma_q16#0": "uint64",
        "scarcity_K_bps#0": "uint64",
        "rate_model_type#0": "uint64",
        "liq_bonus_bps#0": "uint64"
      },
      "block": "setRateParams",
      "stack_in": [],
      "op": "proto 12 0"
    },
    "2418": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2420": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2421": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2423": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2424": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2425": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2426": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "2427": {
      "op": "frame_dig -11",
      "defined_out": [
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "2429": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "2432": {
      "op": "frame_dig -11",
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "2434": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)",
        "10000"
      ]
    },
    "2435": {
      "op": "<=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2436": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "2439": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2440": {
      "block": "setRateParams_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "BAD_UTIL_CAP",
      "op": "assert // BAD_UTIL_CAP",
      "defined_out": [],
      "stack_out": []
    },
    "2441": {
      "op": "frame_dig -10",
      "defined_out": [
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2443": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "2446": {
      "op": "frame_dig -10",
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2448": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)",
        "10000"
      ]
    },
    "2449": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2450": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "2453": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2454": {
      "block": "setRateParams_bool_merge@8",
      "stack_in": [
        "and_result%1#0"
      ],
      "error": "BAD_KINK",
      "op": "assert // BAD_KINK",
      "defined_out": [],
      "stack_out": []
    },
    "2455": {
      "op": "frame_dig -7",
      "defined_out": [
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "2457": {
      "op": "bz setRateParams_after_if_else@14",
      "stack_out": []
    },
    "2460": {
      "op": "frame_dig -7",
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "2462": {
      "op": "frame_dig -12",
      "defined_out": [
        "base_bps#0 (copy)",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)",
        "base_bps#0 (copy)"
      ]
    },
    "2464": {
      "op": ">=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2465": {
      "error": "BAD_MAX_APR",
      "op": "assert // BAD_MAX_APR",
      "stack_out": []
    },
    "2466": {
      "block": "setRateParams_after_if_else@14",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "2468": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)",
        "10000"
      ]
    },
    "2469": {
      "op": "<=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2470": {
      "error": "BAD_EMA_ALPHA",
      "op": "assert // BAD_EMA_ALPHA",
      "stack_out": []
    },
    "2471": {
      "op": "frame_dig -2",
      "defined_out": [
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "2473": {
      "op": "bz setRateParams_bool_true@16",
      "stack_out": []
    },
    "2476": {
      "op": "frame_dig -2",
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "2478": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)",
        "255"
      ]
    },
    "2481": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "2482": {
      "op": "bz setRateParams_bool_false@17",
      "stack_out": []
    },
    "2485": {
      "block": "setRateParams_bool_true@16",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2486": {
      "block": "setRateParams_bool_merge@18",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "UNSUPPORTED_MODEL",
      "op": "assert // UNSUPPORTED_MODEL",
      "defined_out": [],
      "stack_out": []
    },
    "2487": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "2489": {
      "op": "frame_dig -12",
      "defined_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ],
      "stack_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ]
    },
    "2491": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2492": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "2494": {
      "op": "frame_dig -11",
      "defined_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ]
    },
    "2496": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2497": {
      "op": "bytec 34 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "2499": {
      "op": "frame_dig -10",
      "defined_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2501": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2502": {
      "op": "bytec 35 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "2504": {
      "op": "frame_dig -9",
      "defined_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ]
    },
    "2506": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2507": {
      "op": "bytec 36 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "2509": {
      "op": "frame_dig -8",
      "defined_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ]
    },
    "2511": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2512": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "2514": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ]
    },
    "2516": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2517": {
      "op": "pushbytes \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\""
      ],
      "stack_out": [
        "\"max_apr_step_bps\""
      ]
    },
    "2535": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ]
    },
    "2537": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2538": {
      "op": "bytec 33 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "2540": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ]
    },
    "2542": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2543": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\""
      ],
      "stack_out": [
        "\"liq_bonus_bps\""
      ]
    },
    "2545": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_bonus_bps\"",
        "liq_bonus_bps#0 (copy)"
      ]
    },
    "2547": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2548": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2549": {
      "op": "bytec 37 // \"params_update_nonce\"",
      "defined_out": [
        "\"params_update_nonce\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"params_update_nonce\""
      ]
    },
    "2551": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2552": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2553": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "2554": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2555": {
      "op": "bytec 37 // \"params_update_nonce\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"params_update_nonce\""
      ]
    },
    "2557": {
      "op": "swap",
      "stack_out": [
        "\"params_update_nonce\"",
        "new_state_value%0#0"
      ]
    },
    "2558": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2559": {
      "op": "bytec 48 // \"params_updated_at\"",
      "defined_out": [
        "\"params_updated_at\""
      ],
      "stack_out": [
        "\"params_updated_at\""
      ]
    },
    "2561": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"params_updated_at\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"params_updated_at\"",
        "new_state_value%1#0"
      ]
    },
    "2563": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2564": {
      "op": "bytec 43 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "2566": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "2568": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2569": {
      "op": "bytec 44 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "2571": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ],
      "stack_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ]
    },
    "2573": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2574": {
      "op": "bytec 45 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "2576": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ],
      "stack_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ]
    },
    "2578": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2579": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2580": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2582": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2583": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2584": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2587": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2588": {
      "op": "bytec 30 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "2590": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2591": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2592": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "0"
      ]
    },
    "2593": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "stack_out": [
        "maybe_value%3#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2595": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2596": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "2597": {
      "op": ">",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2598": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2601": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2602": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2604": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2605": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "2606": {
      "op": "bytec 30 // \"prev_apr_bps\"",
      "stack_out": [
        "maybe_value%5#0",
        "\"prev_apr_bps\""
      ]
    },
    "2608": {
      "op": "swap",
      "stack_out": [
        "\"prev_apr_bps\"",
        "maybe_value%5#0"
      ]
    },
    "2609": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2610": {
      "block": "setRateParams_after_if_else@21",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2611": {
      "block": "setRateParams_bool_false@17",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2612": {
      "op": "b setRateParams_bool_merge@18"
    },
    "2615": {
      "block": "setRateParams_bool_false@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2616": {
      "op": "b setRateParams_bool_merge@8"
    },
    "2619": {
      "block": "setRateParams_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2620": {
      "op": "b setRateParams_bool_merge@4"
    },
    "2623": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setContractState",
      "params": {
        "state#0": "uint64"
      },
      "block": "setContractState",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2626": {
      "op": "frame_dig -1",
      "defined_out": [
        "state#0 (copy)"
      ],
      "stack_out": [
        "state#0 (copy)"
      ]
    },
    "2628": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2629": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"contract_state\""
      ]
    },
    "2631": {
      "op": "swap",
      "stack_out": [
        "\"contract_state\"",
        "val_as_bytes%0#0"
      ]
    },
    "2632": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2633": {
      "retsub": true,
      "op": "retsub"
    },
    "2634": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setMigrationAdmin",
      "params": {
        "migrationAdmin#0": "bytes"
      },
      "block": "setMigrationAdmin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2637": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2639": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2640": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2642": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2643": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2644": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2645": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "2646": {
      "op": "bytec 15 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\""
      ],
      "stack_out": [
        "\"migration_admin\""
      ]
    },
    "2648": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"migration_admin\"",
        "migrationAdmin#0 (copy)"
      ],
      "stack_out": [
        "\"migration_admin\"",
        "migrationAdmin#0 (copy)"
      ]
    },
    "2650": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2651": {
      "retsub": true,
      "op": "retsub"
    },
    "2652": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken",
      "params": {
        "mbrTxn#0": "uint64"
      },
      "block": "generateLSTToken",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2655": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2657": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2658": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2660": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2661": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2662": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2663": {
      "op": "assert",
      "stack_out": []
    },
    "2664": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2666": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2668": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2669": {
      "op": "bytec 4 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2671": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2672": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2673": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2674": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2677": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2679": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2681": {
      "op": "pushint 102000 // 102000",
      "defined_out": [
        "102000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "102000"
      ]
    },
    "2685": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2686": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2689": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2690": {
      "block": "generateLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2691": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2692": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2693": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2694": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2695": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2696": {
      "op": "itxn_begin"
    },
    "2697": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2699": {
      "op": "dig 1",
      "defined_out": [
        "baseToken#0",
        "baseToken#0 (copy)",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2701": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "baseToken#0",
        "check%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2703": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2704": {
      "op": "dig 2",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2706": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "baseToken#0",
        "check%1#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2708": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2709": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2711": {
      "op": "dig 4",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2713": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "baseToken#0",
        "check%2#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "2715": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0"
      ]
    },
    "2716": {
      "op": "pushbytes \"c\"",
      "defined_out": [
        "\"c\"",
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "\"c\""
      ]
    },
    "2719": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "\"c\"",
        "value%2#0"
      ]
    },
    "2720": {
      "op": "concat",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2721": {
      "op": "uncover 5",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "baseToken#0"
      ]
    },
    "2723": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%3#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0",
        "check%3#0"
      ]
    },
    "2725": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0"
      ]
    },
    "2726": {
      "op": "pushbytes \"c\"",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0",
        "\"c\""
      ]
    },
    "2729": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "\"c\"",
        "value%3#0"
      ]
    },
    "2730": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "2731": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2733": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2735": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2737": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "0"
      ]
    },
    "2738": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2740": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2742": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2744": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "2746": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "2748": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2750": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2751": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2753": {
      "op": "itxn_submit"
    },
    "2754": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "result.CreatedAssetID#0"
      ],
      "stack_out": [
        "result.CreatedAssetID#0"
      ]
    },
    "2756": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2757": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2759": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2760": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2761": {
      "retsub": true,
      "op": "retsub"
    },
    "2762": {
      "block": "generateLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2763": {
      "op": "b generateLSTToken_bool_merge@4"
    },
    "2766": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST",
      "params": {
        "lstAssetId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "optInToLST",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2769": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2771": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2772": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2774": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2775": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2776": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2777": {
      "op": "assert",
      "stack_out": []
    },
    "2778": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2780": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2782": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2783": {
      "op": "bytec 4 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2785": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2786": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2787": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2788": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2791": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2793": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2795": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "2000"
      ]
    },
    "2798": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2799": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2802": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2803": {
      "block": "optInToLST_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2804": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAssetId#0 (copy)"
      ],
      "stack_out": [
        "lstAssetId#0 (copy)"
      ]
    },
    "2806": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2807": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2809": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2810": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2811": {
      "op": "itxn_begin"
    },
    "2812": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2814": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2815": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2817": {
      "op": "frame_dig -2",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "lstAssetId#0 (copy)"
      ]
    },
    "2819": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2821": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2823": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2825": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2827": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2828": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2830": {
      "op": "itxn_submit"
    },
    "2831": {
      "retsub": true,
      "op": "retsub"
    },
    "2832": {
      "block": "optInToLST_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2833": {
      "op": "b optInToLST_bool_merge@4"
    },
    "2836": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken",
      "params": {
        "axferTxn#0": "uint64",
        "circulating_lst#0": "uint64"
      },
      "block": "configureLSTToken",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2839": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2841": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2842": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2844": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2845": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2846": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2847": {
      "op": "assert",
      "stack_out": []
    },
    "2848": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2849": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "2851": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2852": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2853": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2854": {
      "op": "frame_dig -2",
      "defined_out": [
        "axferTxn#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "axferTxn#0 (copy)"
      ]
    },
    "2856": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2858": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2859": {
      "error": "LST token not set",
      "op": "assert // LST token not set",
      "stack_out": []
    },
    "2860": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2862": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2864": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "2865": {
      "op": "bytec 4 // \"admin_account\"",
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2867": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2868": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "2869": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2870": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2873": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2875": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2877": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2879": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2880": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2883": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2884": {
      "block": "configureLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2885": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "2887": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ],
      "stack_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ]
    },
    "2889": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2890": {
      "retsub": true,
      "op": "retsub"
    },
    "2891": {
      "block": "configureLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2892": {
      "op": "b configureLSTToken_bool_merge@4"
    },
    "2895": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "params": {
        "tokenId#0": "bytes"
      },
      "block": "getOraclePrice",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2898": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2899": {
      "op": "bytec 41 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"oracle_app\""
      ]
    },
    "2901": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "maybe_exists%0#0"
      ]
    },
    "2902": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2903": {
      "op": "dup",
      "defined_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ]
    },
    "2904": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "address#0",
        "check%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "check%0#0"
      ]
    },
    "2906": {
      "op": "bury 1",
      "stack_out": [
        "oracle#0",
        "check%0#0"
      ]
    },
    "2908": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2909": {
      "op": "itxn_begin"
    },
    "2910": {
      "op": "pushbytes 0xac13e004 // method \"getTokenPrice(uint64)(uint64,uint64,uint64)\"",
      "defined_out": [
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))"
      ]
    },
    "2916": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2918": {
      "op": "frame_dig -1",
      "defined_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ]
    },
    "2920": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2922": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2924": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2926": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2928": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2929": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2931": {
      "op": "itxn_submit"
    },
    "2932": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2934": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2935": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2938": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2939": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2940": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2941": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "12"
      ]
    },
    "2943": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2944": {
      "retsub": true,
      "op": "retsub"
    },
    "2945": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "updateCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2948": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "2950": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2952": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2953": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2954": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "2955": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0"
      ]
    },
    "2956": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2957": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)",
        "24"
      ]
    },
    "2959": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "2960": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "2962": {
      "op": "+",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "2963": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "collateral#0 (copy)"
      ]
    },
    "2965": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0"
      ]
    },
    "2968": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "collateral#0 (copy)"
      ]
    },
    "2970": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2973": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0",
        "collateral#0 (copy)"
      ]
    },
    "2975": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2978": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "newTotal#0"
      ]
    },
    "2980": {
      "op": "itob",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2981": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "collateral#0"
      ]
    },
    "2983": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0"
      ]
    },
    "2986": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "tmp%3#0"
      ]
    },
    "2988": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2990": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2991": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%4#0",
        "tmp%5#0"
      ]
    },
    "2993": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "tmp%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2994": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2996": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2997": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%6#0"
      ]
    },
    "2998": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2999": {
      "op": "box_put",
      "stack_out": []
    },
    "3000": {
      "retsub": true,
      "op": "retsub"
    },
    "3001": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "reduceCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3004": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "3006": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3008": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3009": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3010": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "3011": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0"
      ]
    },
    "3012": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "3013": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)",
        "24"
      ]
    },
    "3015": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "3016": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3017": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "3019": {
      "op": ">=",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3020": {
      "error": "INSUFFICIENT_COLLATERAL",
      "op": "assert // INSUFFICIENT_COLLATERAL",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "3021": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "3023": {
      "op": "-",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "3024": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "collateral#0 (copy)"
      ]
    },
    "3026": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0"
      ]
    },
    "3029": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "collateral#0 (copy)"
      ]
    },
    "3031": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "3034": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0",
        "collateral#0 (copy)"
      ]
    },
    "3036": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "3039": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "newTotal#0"
      ]
    },
    "3041": {
      "op": "itob",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ]
    },
    "3042": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "collateral#0"
      ]
    },
    "3044": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0"
      ]
    },
    "3047": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "tmp%6#0"
      ]
    },
    "3049": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "3051": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3052": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%4#0",
        "tmp%8#0"
      ]
    },
    "3054": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "3055": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "3057": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3058": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%6#0",
        "tmp%9#0"
      ]
    },
    "3059": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3060": {
      "op": "box_put",
      "stack_out": []
    },
    "3061": {
      "retsub": true,
      "op": "retsub"
    },
    "3062": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType",
      "params": {
        "collateralTokenId#0": "bytes",
        "collateralBaseTokenId#0": "bytes",
        "mbrTxn#0": "uint64",
        "originatingAppId#0": "bytes"
      },
      "block": "addNewCollateralType",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3065": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3066": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "3067": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3068": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3070": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": []
    },
    "3071": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3072": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "3073": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3074": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3075": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3077": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralBaseTokenId#0 (copy)",
        "collateralTokenId#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "collateralTokenId#0 (copy)",
        "collateralBaseTokenId#0 (copy)"
      ]
    },
    "3079": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3080": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%1#0"
      ]
    },
    "3081": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3082": {
      "op": "bytec 38 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "3084": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "3085": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "originatingAppId#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "originatingAppId#0 (copy)"
      ]
    },
    "3087": {
      "op": "concat",
      "defined_out": [
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "newAcceptedCollateral#0"
      ]
    },
    "3088": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "newAcceptedCollateral#0",
        "\"accepted_collaterals\""
      ]
    },
    "3090": {
      "op": "frame_dig -4",
      "stack_out": [
        "newAcceptedCollateral#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3092": {
      "op": "concat",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "newAcceptedCollateral#0",
        "tmp%0#0"
      ]
    },
    "3093": {
      "op": "dup",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "newAcceptedCollateral#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3094": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "newAcceptedCollateral#0"
      ]
    },
    "3096": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3097": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "3098": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "3100": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3101": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "3102": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "3103": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "new_state_value%0#0"
      ]
    },
    "3104": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "stack_out": [
        "tmp%0#0",
        "new_state_value%0#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "3106": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"accepted_collaterals_count\"",
        "new_state_value%0#0"
      ]
    },
    "3107": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3108": {
      "op": "itxn_begin"
    },
    "3109": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "3111": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3112": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3114": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3115": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "3116": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3118": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3120": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "3122": {
      "op": "itxn_field Sender",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3124": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "4"
      ]
    },
    "3126": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3128": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1000"
      ]
    },
    "3129": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3131": {
      "op": "itxn_submit"
    },
    "3132": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3133": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3135": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": []
    },
    "3136": {
      "retsub": true,
      "op": "retsub"
    },
    "3137": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo",
      "params": {
        "depositTxn#0": "uint64",
        "amount#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "depositAlgo",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "3140": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3141": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "3142": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3143": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3145": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": []
    },
    "3146": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3147": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contract_state\""
      ]
    },
    "3149": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3150": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3151": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3152": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "3153": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3154": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": []
    },
    "3155": {
      "op": "frame_dig -3",
      "defined_out": [
        "depositTxn#0 (copy)"
      ],
      "stack_out": [
        "depositTxn#0 (copy)"
      ]
    },
    "3157": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3159": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3161": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3162": {
      "op": "bz depositAlgo_bool_false@3",
      "stack_out": []
    },
    "3165": {
      "op": "frame_dig -3",
      "stack_out": [
        "depositTxn#0 (copy)"
      ]
    },
    "3167": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "3169": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "3171": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "3172": {
      "op": "bz depositAlgo_bool_false@3",
      "stack_out": []
    },
    "3175": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "3176": {
      "block": "depositAlgo_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "3177": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "3179": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "3181": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "1000"
      ]
    },
    "3182": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "3183": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "3184": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "3186": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": []
    },
    "3189": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "_interestSlice#0"
      ]
    },
    "3192": {
      "op": "pop",
      "stack_out": []
    },
    "3193": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3194": {
      "op": "bytec_2 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "3195": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3196": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "3197": {
      "op": "bnz depositAlgo_else_body@6",
      "stack_out": []
    },
    "3200": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3202": {
      "block": "depositAlgo_after_if_else@7",
      "stack_in": [
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "3203": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3205": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3206": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "3208": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3209": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "3210": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3211": {
      "op": "dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2",
        "lstDue#2 (copy)"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2 (copy)"
      ]
    },
    "3213": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3215": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3217": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3219": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "4"
      ]
    },
    "3221": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3223": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "1000"
      ]
    },
    "3224": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3226": {
      "op": "itxn_submit"
    },
    "3227": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstDue#2",
        "0"
      ]
    },
    "3228": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3230": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstDue#2",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "lstDue#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3231": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "maybe_value%4#0"
      ]
    },
    "3232": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "3233": {
      "op": "bytec 8 // \"circulating_lst\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "3235": {
      "op": "swap",
      "stack_out": [
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "3236": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3237": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3238": {
      "op": "bytec_2 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "3239": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3240": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "3241": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "amount#0 (copy)"
      ]
    },
    "3243": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "3244": {
      "op": "bytec_2 // \"total_deposits\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "3245": {
      "op": "swap",
      "stack_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "3246": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3247": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "3250": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "3252": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "3253": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3254": {
      "retsub": true,
      "op": "retsub"
    },
    "3255": {
      "block": "depositAlgo_else_body@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3256": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "3258": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "3259": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#1"
      ]
    },
    "3260": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "10000"
      ]
    },
    "3261": {
      "op": "mulw",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0"
      ]
    },
    "3262": {
      "op": "intc_0 // 0",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0"
      ]
    },
    "3263": {
      "op": "bytec_2 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3264": {
      "op": "app_global_get_ex",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_exists%1#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "3265": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#1"
      ]
    },
    "3266": {
      "op": "divw",
      "defined_out": [
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0"
      ]
    },
    "3267": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0",
        "amount#0 (copy)"
      ]
    },
    "3269": {
      "op": "mulw",
      "defined_out": [
        "highBits2#0",
        "lowBits2#0"
      ],
      "stack_out": [
        "highBits2#0",
        "lowBits2#0"
      ]
    },
    "3270": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "highBits2#0",
        "lowBits2#0",
        "10000"
      ]
    },
    "3271": {
      "op": "divw",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3272": {
      "op": "b depositAlgo_after_if_else@7"
    },
    "3275": {
      "block": "depositAlgo_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "3276": {
      "op": "b depositAlgo_bool_merge@4"
    },
    "3279": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "lstAppId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "withdrawDeposit",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3282": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3283": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "3285": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3286": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3287": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3288": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "0"
      ]
    },
    "3289": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0",
        "\"contract_state\""
      ]
    },
    "3291": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstAsset#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3292": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "maybe_value%1#0"
      ]
    },
    "3293": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#0"
      ]
    },
    "3294": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "lstAsset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#0",
        "1"
      ]
    },
    "3295": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%1#0"
      ]
    },
    "3296": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3297": {
      "op": "frame_dig -4",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3299": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "lstAsset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%2#0"
      ]
    },
    "3301": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "lstAsset#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3303": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%4#0"
      ]
    },
    "3304": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3307": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3309": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "lstAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%5#0"
      ]
    },
    "3311": {
      "op": "frame_dig 0",
      "stack_out": [
        "lstAsset#0",
        "tmp%5#0",
        "lstAsset#0"
      ]
    },
    "3313": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%6#0"
      ]
    },
    "3314": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3317": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3319": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "lstAsset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%7#0"
      ]
    },
    "3321": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "lstAsset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%7#0",
        "amount#0 (copy)"
      ]
    },
    "3323": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%8#0"
      ]
    },
    "3324": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3327": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "3328": {
      "block": "withdrawDeposit_bool_merge@5",
      "stack_in": [
        "lstAsset#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3329": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3331": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%9#0"
      ]
    },
    "3333": {
      "op": "pushint 3000 // 3000",
      "defined_out": [
        "3000",
        "tmp%9#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%9#0",
        "3000"
      ]
    },
    "3336": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%10#0"
      ]
    },
    "3337": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3338": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "_interestSlice#0"
      ]
    },
    "3341": {
      "op": "pop",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3342": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3344": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "lstAppId#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)",
        "tmp%11#0"
      ]
    },
    "3346": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%12#0"
      ]
    },
    "3347": {
      "op": "bz withdrawDeposit_else_body@7",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3350": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0"
      ]
    },
    "3351": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3353": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ]
    },
    "3354": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3355": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0"
      ]
    },
    "3356": {
      "op": "bytec_2 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3357": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%1#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "maybe_exists%1#0"
      ]
    },
    "3358": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3359": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "3361": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3362": {
      "op": "uncover 2",
      "stack_out": [
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "3364": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3365": {
      "block": "withdrawDeposit_after_if_else@8",
      "stack_in": [
        "lstAsset#0",
        "asaDue#1"
      ],
      "op": "dup",
      "defined_out": [
        "asaDue#1",
        "asaDue#1 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "asaDue#1 (copy)"
      ]
    },
    "3366": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3369": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asaDue#1",
        "tmp%13#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0"
      ]
    },
    "3371": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asaDue#1",
        "tmp%13#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "0"
      ]
    },
    "3372": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "asaDue#1",
        "tmp%13#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3373": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3374": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "maybe_value%2#0"
      ]
    },
    "3375": {
      "op": "btoi",
      "defined_out": [
        "asaDue#1",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "3376": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "asaDue#1",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "3378": {
      "op": "pop",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0"
      ]
    },
    "3379": {
      "op": "dig 1",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0",
        "asaDue#1 (copy)"
      ]
    },
    "3381": {
      "op": ">=",
      "defined_out": [
        "asaDue#1",
        "tmp%17#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%17#0"
      ]
    },
    "3382": {
      "op": "assert",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3383": {
      "op": "itxn_begin"
    },
    "3384": {
      "op": "txn Sender",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "3386": {
      "op": "dig 1",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "asaDue#1 (copy)"
      ]
    },
    "3388": {
      "op": "itxn_field Amount",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "3390": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3392": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "1"
      ]
    },
    "3393": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3395": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "1000"
      ]
    },
    "3396": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3398": {
      "op": "itxn_submit"
    },
    "3399": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "3400": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3402": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3403": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0"
      ]
    },
    "3404": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "asaDue#1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "3406": {
      "op": "-",
      "defined_out": [
        "asaDue#1",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0"
      ]
    },
    "3407": {
      "op": "bytec 8 // \"circulating_lst\"",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "3409": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "3410": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3411": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "3412": {
      "op": "bytec_2 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"total_deposits\""
      ]
    },
    "3413": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3414": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0"
      ]
    },
    "3415": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "maybe_value%4#0",
        "asaDue#1"
      ]
    },
    "3416": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%1#0"
      ]
    },
    "3417": {
      "op": "bytec_2 // \"total_deposits\"",
      "stack_out": [
        "lstAsset#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "3418": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "3419": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3420": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%2#0"
      ]
    },
    "3423": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "3425": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "3426": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3427": {
      "retsub": true,
      "op": "retsub"
    },
    "3428": {
      "block": "withdrawDeposit_else_body@7",
      "stack_in": [
        "lstAsset#0"
      ],
      "op": "itxn_begin"
    },
    "3429": {
      "op": "bytec 18 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)"
      ],
      "stack_out": [
        "lstAsset#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "3431": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3433": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3435": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3437": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "lstAsset#0",
        "appl"
      ]
    },
    "3439": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3441": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "lstAsset#0",
        "1000"
      ]
    },
    "3442": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3444": {
      "op": "itxn_submit"
    },
    "3445": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "3447": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3448": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0",
        "tmp%0#1"
      ]
    },
    "3451": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "awst_tmp%0#0"
      ]
    },
    "3452": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "3455": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1",
        "0x151f7c75"
      ]
    },
    "3456": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%2#1"
      ]
    },
    "3457": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1"
      ]
    },
    "3458": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3459": {
      "op": "itxn_begin"
    },
    "3460": {
      "op": "bytec 19 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "3462": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3464": {
      "op": "frame_dig -2",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3466": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3468": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "3470": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3472": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "3473": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3475": {
      "op": "itxn_submit"
    },
    "3476": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "3478": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3479": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%4#1"
      ]
    },
    "3482": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "awst_tmp%1#0"
      ]
    },
    "3483": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ]
    },
    "3486": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1",
        "0x151f7c75"
      ]
    },
    "3487": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ]
    },
    "3488": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ]
    },
    "3489": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3490": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "3492": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3493": {
      "op": "uncover 2",
      "stack_out": [
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "3495": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3496": {
      "op": "b withdrawDeposit_after_if_else@8"
    },
    "3499": {
      "block": "withdrawDeposit_bool_false@4",
      "stack_in": [
        "lstAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "3500": {
      "op": "b withdrawDeposit_bool_merge@5"
    },
    "3503": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow",
      "params": {
        "assetTransferTxn#0": "uint64",
        "requestedLoanAmount#0": "uint64",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64",
        "collateralTokenId#0": "bytes",
        "mbrTxn#0": "uint64"
      },
      "block": "borrow",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "3506": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralToUse#1"
      ]
    },
    "3508": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2"
      ]
    },
    "3509": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "0"
      ]
    },
    "3510": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "0",
        "\"contract_state\""
      ]
    },
    "3512": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3513": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "maybe_value%0#0"
      ]
    },
    "3514": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "tmp%0#0"
      ]
    },
    "3515": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "tmp%0#0",
        "1"
      ]
    },
    "3516": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "tmp%1#0"
      ]
    },
    "3517": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2"
      ]
    },
    "3518": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "\"loan_record\""
      ]
    },
    "3520": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "\"loan_record\"",
        "tmp%2#0"
      ]
    },
    "3522": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "tmp%3#0"
      ]
    },
    "3523": {
      "op": "box_len",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "maybe_value%1#0",
        "hasLoan#0"
      ]
    },
    "3524": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "maybe_value%1#0",
        "hasLoan#0",
        "hasLoan#0 (copy)"
      ]
    },
    "3525": {
      "op": "uncover 2",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "hasLoan#0",
        "maybe_value%1#0"
      ]
    },
    "3527": {
      "op": "pop",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3528": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "hasLoan#0",
        "_interestSlice#0"
      ]
    },
    "3531": {
      "op": "pop",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3532": {
      "op": "bz borrow_else_body@2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3535": {
      "op": "txn Sender",
      "defined_out": [
        "hasLoan#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%4#0"
      ]
    },
    "3537": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "hasLoan#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%5#0"
      ]
    },
    "3540": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "hasLoan#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%5#0",
        "40"
      ]
    },
    "3542": {
      "op": "extract_uint64",
      "defined_out": [
        "hasLoan#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%6#0"
      ]
    },
    "3543": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "hasLoan#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%6#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3545": {
      "op": "+",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "3546": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3548": {
      "block": "borrow_after_if_else@3",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3550": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%0#0"
      ]
    },
    "3552": {
      "op": "pushint 4000 // 4000",
      "defined_out": [
        "4000",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%0#0",
        "4000"
      ]
    },
    "3555": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%1#0"
      ]
    },
    "3556": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3557": {
      "op": "frame_dig -6",
      "defined_out": [
        "assetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3559": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%2#0"
      ]
    },
    "3561": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%2#0",
        "tmp%3#2"
      ]
    },
    "3563": {
      "op": "==",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%4#1"
      ]
    },
    "3564": {
      "op": "bz borrow_bool_false@16",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3567": {
      "op": "frame_dig -6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3569": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%5#1"
      ]
    },
    "3571": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "tmp%5#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%5#1",
        "collateralAmount#0 (copy)"
      ]
    },
    "3573": {
      "op": "==",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%6#1"
      ]
    },
    "3574": {
      "op": "bz borrow_bool_false@16",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3577": {
      "op": "frame_dig -6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3579": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%7#0"
      ]
    },
    "3581": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%7#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3583": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%7#0",
        "tmp%8#1"
      ]
    },
    "3584": {
      "op": "==",
      "defined_out": [
        "tmp%9#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%9#1"
      ]
    },
    "3585": {
      "op": "bz borrow_bool_false@16",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3588": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "3589": {
      "block": "borrow_bool_merge@17",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3590": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "\"accepted_collaterals\""
      ]
    },
    "3592": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3594": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%0#1"
      ]
    },
    "3595": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3596": {
      "op": "bury 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_exists%0#0"
      ]
    },
    "3598": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3599": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3601": {
      "op": "frame_dig 0",
      "defined_out": [
        "collateralToUse#1",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralToUse#1"
      ]
    },
    "3603": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralToUse#1",
        "collateralTokenId#0 (copy)",
        "lstApp#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralToUse#1",
        "lstApp#0 (copy)"
      ]
    },
    "3605": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralUSD#0"
      ]
    },
    "3608": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralUSD#0",
        "0"
      ]
    },
    "3609": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralUSD#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "3611": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralUSD#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3612": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralUSD#0",
        "maybe_value%2#0"
      ]
    },
    "3613": {
      "op": "*",
      "defined_out": [
        "collateralToUse#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%7#0"
      ]
    },
    "3614": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralToUse#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%7#0",
        "10000"
      ]
    },
    "3615": {
      "op": "/",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3616": {
      "op": "bytec 46 // \"last_max_borrow\"",
      "defined_out": [
        "\"last_max_borrow\"",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "\"last_max_borrow\""
      ]
    },
    "3618": {
      "op": "dig 1",
      "defined_out": [
        "\"last_max_borrow\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maxBorrowUSD#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "\"last_max_borrow\"",
        "maxBorrowUSD#0 (copy)"
      ]
    },
    "3620": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3621": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0"
      ]
    },
    "3622": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3623": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3624": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%3#0"
      ]
    },
    "3625": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0"
      ]
    },
    "3628": {
      "op": "frame_dig -5",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3630": {
      "op": "mulw",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ]
    },
    "3631": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0",
        "1000000"
      ]
    },
    "3633": {
      "op": "divw",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3634": {
      "op": "bytec 47 // \"last_requested_loan\"",
      "defined_out": [
        "\"last_requested_loan\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"last_requested_loan\""
      ]
    },
    "3636": {
      "op": "dig 1",
      "defined_out": [
        "\"last_requested_loan\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "requestedLoanUSD#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"last_requested_loan\"",
        "requestedLoanUSD#0 (copy)"
      ]
    },
    "3638": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3639": {
      "op": ">=",
      "defined_out": [
        "collateralToUse#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%0#3"
      ]
    },
    "3640": {
      "error": "exceeds LTV limit",
      "op": "assert // exceeds LTV limit",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3641": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "0"
      ]
    },
    "3642": {
      "op": "bytec_2 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3643": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3644": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#2"
      ]
    },
    "3645": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#2",
        "0"
      ]
    },
    "3646": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\"",
        "0",
        "collateralToUse#1",
        "maybe_value%0#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#2",
        "0",
        "\"util_cap_bps\""
      ]
    },
    "3648": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maybe_exists%1#1",
        "maybe_value%0#2",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#2",
        "maybe_value%1#0",
        "maybe_exists%1#1"
      ]
    },
    "3649": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#2",
        "maybe_value%1#0"
      ]
    },
    "3650": {
      "op": "mulw",
      "defined_out": [
        "collateralToUse#1",
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "h#0",
        "l#0"
      ]
    },
    "3651": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "h#0",
        "l#0",
        "10000"
      ]
    },
    "3652": {
      "op": "divw",
      "defined_out": [
        "capBorrow#0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "capBorrow#0"
      ]
    },
    "3653": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "capBorrow#0",
        "0"
      ]
    },
    "3654": {
      "op": "bytec_3 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "capBorrow#0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "capBorrow#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "3655": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3656": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#2"
      ]
    },
    "3657": {
      "op": "frame_dig -5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "capBorrow#0",
        "maybe_value%0#2",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3659": {
      "op": "+",
      "defined_out": [
        "capBorrow#0",
        "collateralToUse#1",
        "tmp%1#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "capBorrow#0",
        "tmp%1#3"
      ]
    },
    "3660": {
      "op": ">=",
      "defined_out": [
        "collateralToUse#1",
        "tmp%2#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%2#3"
      ]
    },
    "3661": {
      "error": "UTIL_CAP_EXCEEDED",
      "op": "assert // UTIL_CAP_EXCEEDED",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3662": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "0"
      ]
    },
    "3663": {
      "op": "bytec 39 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\"",
        "0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "0",
        "\"origination_fee_bps\""
      ]
    },
    "3665": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#2",
        "maybe_exists%0#0"
      ]
    },
    "3666": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#2"
      ]
    },
    "3667": {
      "op": "frame_dig -5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#2",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3669": {
      "op": "*",
      "defined_out": [
        "collateralToUse#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%0#0"
      ]
    },
    "3670": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%0#0",
        "10000"
      ]
    },
    "3671": {
      "op": "/",
      "defined_out": [
        "collateralToUse#1",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "fee#1"
      ]
    },
    "3672": {
      "op": "frame_dig -5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3674": {
      "op": "dig 1",
      "defined_out": [
        "collateralToUse#1",
        "fee#1",
        "fee#1 (copy)",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)",
        "fee#1 (copy)"
      ]
    },
    "3676": {
      "op": "-",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#2",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "fee#1",
        "disbursement#2"
      ]
    },
    "3677": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "fee#1",
        "disbursement#2",
        "disbursement#2 (copy)"
      ]
    },
    "3678": {
      "op": "cover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "fee#1",
        "disbursement#2"
      ]
    },
    "3680": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#2",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "fee#1"
      ]
    },
    "3682": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "fee#1",
        "0"
      ]
    },
    "3683": {
      "op": "bytec 14 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "collateralToUse#1",
        "disbursement#2",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "fee#1",
        "0",
        "\"fee_pool\""
      ]
    },
    "3685": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "fee#1",
        "maybe_value%1#0",
        "maybe_exists%1#1"
      ]
    },
    "3686": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "fee#1",
        "maybe_value%1#0"
      ]
    },
    "3687": {
      "op": "+",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#2",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "new_state_value%0#0"
      ]
    },
    "3688": {
      "op": "bytec 14 // \"fee_pool\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "new_state_value%0#0",
        "\"fee_pool\""
      ]
    },
    "3690": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "\"fee_pool\"",
        "new_state_value%0#0"
      ]
    },
    "3691": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "3692": {
      "op": "bytec 42 // \"last_scaled_down_disbursement\"",
      "defined_out": [
        "\"last_scaled_down_disbursement\"",
        "collateralToUse#1",
        "disbursement#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "\"last_scaled_down_disbursement\""
      ]
    },
    "3694": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "\"last_scaled_down_disbursement\"",
        "disbursement#2"
      ]
    },
    "3695": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3696": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3698": {
      "op": "bz borrow_else_body@5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3701": {
      "op": "txn Sender",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3703": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "borrower#0 (copy)",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "borrower#0 (copy)"
      ]
    },
    "3704": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "existingLoan#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0"
      ]
    },
    "3707": {
      "op": "dig 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "borrower#0 (copy)"
      ]
    },
    "3709": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "op": "callsub syncBorrowerSnapshot",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "existingLoan#0",
        "hasLoan#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0"
      ]
    },
    "3712": {
      "op": "frame_dig 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#2"
      ]
    },
    "3714": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "disbursement#2 (copy)",
        "existingLoan#0",
        "hasLoan#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#2 (copy)",
        "disbursement#2 (copy)"
      ]
    },
    "3715": {
      "op": "cover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#2 (copy)"
      ]
    },
    "3717": {
      "op": "+",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "existingLoan#0",
        "hasLoan#0",
        "newDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "newDebt#0"
      ]
    },
    "3718": {
      "op": "dig 1",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "hasLoan#0",
        "newDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "newDebt#0",
        "existingLoan#0 (copy)"
      ]
    },
    "3720": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "existingLoan#0",
        "newDebt#0",
        "tmp%0#1"
      ]
    },
    "3723": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "existingLoan#0"
      ]
    },
    "3725": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "existingLoan#0",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "existingLoan#0",
        "40"
      ]
    },
    "3727": {
      "op": "extract_uint64",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1"
      ]
    },
    "3728": {
      "op": "frame_dig -4",
      "defined_out": [
        "borrower#0",
        "collateralAmount#0 (copy)",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "tmp%2#1",
        "collateralAmount#0 (copy)"
      ]
    },
    "3730": {
      "op": "+",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "to_encode%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "to_encode%0#0"
      ]
    },
    "3731": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ]
    },
    "3732": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3733": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3734": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3735": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0"
      ]
    },
    "3736": {
      "op": "uncover 4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "disbursement#2"
      ]
    },
    "3738": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3739": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "to_encode%1#0"
      ]
    },
    "3741": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3742": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "3743": {
      "op": "bytec 27 // 0x00",
      "defined_out": [
        "0x00",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0",
        "0x00"
      ]
    },
    "3745": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%2#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3746": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "3747": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3748": {
      "op": "uncover 4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "newDebt#0"
      ]
    },
    "3750": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ]
    },
    "3751": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "3752": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "3754": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#1"
      ]
    },
    "3755": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "maybe_value%1#0"
      ]
    },
    "3756": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "3757": {
      "op": "dig 6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "borrower#0 (copy)"
      ]
    },
    "3759": {
      "op": "uncover 6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "borrower#0 (copy)",
        "tmp%0#1"
      ]
    },
    "3761": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3762": {
      "op": "uncover 5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "3764": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3765": {
      "op": "uncover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3767": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%8#0",
        "hasLoan#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3768": {
      "op": "uncover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0"
      ]
    },
    "3770": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%9#0",
        "hasLoan#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3771": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%3#0"
      ]
    },
    "3773": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%10#0",
        "hasLoan#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3774": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "3775": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3776": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "3778": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "borrower#0"
      ]
    },
    "3780": {
      "op": "concat",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#2",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "tmp%3#0"
      ]
    },
    "3781": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%3#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3782": {
      "op": "box_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3783": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3785": {
      "op": "frame_dig -4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3787": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3790": {
      "block": "borrow_after_if_else@6",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "borrower#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3792": {
      "op": "itxn_begin"
    },
    "3793": {
      "op": "frame_dig 1",
      "defined_out": [
        "borrower#0",
        "disbursement#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2"
      ]
    },
    "3795": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "disbursement#2",
        "disbursement#2 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "borrower#0",
        "disbursement#2 (copy)",
        "disbursement#2 (copy)"
      ]
    },
    "3796": {
      "op": "cover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "borrower#0",
        "disbursement#2 (copy)"
      ]
    },
    "3798": {
      "op": "itxn_field Amount",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "borrower#0"
      ]
    },
    "3800": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "3802": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "disbursement#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "1"
      ]
    },
    "3803": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "3805": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "disbursement#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "1000"
      ]
    },
    "3806": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "3808": {
      "op": "itxn_submit"
    },
    "3809": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "disbursement#2 (copy)"
      ]
    },
    "3810": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2"
      ]
    },
    "3813": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "disbursement#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "0"
      ]
    },
    "3814": {
      "op": "bytec_3 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "disbursement#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "0",
        "\"total_borrows\""
      ]
    },
    "3815": {
      "op": "app_global_get_ex",
      "defined_out": [
        "disbursement#2",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3816": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "maybe_value%4#0"
      ]
    },
    "3817": {
      "op": "+",
      "defined_out": [
        "disbursement#2",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "3818": {
      "op": "bytec_3 // \"total_borrows\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "3819": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "3820": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3821": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "disbursement#2",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "new_state_value%1#0"
      ]
    },
    "3824": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "disbursement#2",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "3826": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "3827": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3828": {
      "retsub": true,
      "op": "retsub"
    },
    "3829": {
      "block": "borrow_else_body@5",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%9#0"
      ]
    },
    "3831": {
      "op": "frame_dig 1",
      "defined_out": [
        "disbursement#2",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%9#0",
        "disbursement#2"
      ]
    },
    "3833": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "disbursement#2",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "tmp%9#0",
        "disbursement#2",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3835": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "collateralTokenId#0 (copy)",
        "tmp%9#0"
      ]
    },
    "3837": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#2",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "disbursement#2",
        "collateralTokenId#0 (copy)",
        "tmp%9#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3839": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.mintLoanRecord",
      "op": "callsub mintLoanRecord",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3842": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3844": {
      "op": "frame_dig -4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3846": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3849": {
      "op": "b borrow_after_if_else@6"
    },
    "3852": {
      "block": "borrow_bool_false@16",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "3853": {
      "op": "b borrow_bool_merge@17"
    },
    "3856": {
      "block": "borrow_else_body@2",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "3858": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#2",
        "hasLoan#0"
      ]
    },
    "3860": {
      "op": "b borrow_after_if_else@3"
    },
    "3863": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.mintLoanRecord",
      "params": {
        "disbursement#0": "uint64",
        "collateralTokenId#0": "bytes",
        "borrowerAddress#0": "bytes",
        "collateralAmount#0": "uint64"
      },
      "block": "mintLoanRecord",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3866": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralAmount#0 (copy)"
      ]
    },
    "3868": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "3869": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3870": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3871": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3872": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0"
      ]
    },
    "3873": {
      "op": "frame_dig -4",
      "defined_out": [
        "disbursement#0 (copy)",
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "disbursement#0 (copy)"
      ]
    },
    "3875": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "3876": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%0#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "to_encode%0#0"
      ]
    },
    "3878": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3879": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "3881": {
      "op": "bytec 27 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)",
        "0x00"
      ]
    },
    "3883": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3884": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "3885": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3886": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0"
      ]
    },
    "3887": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "3889": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3890": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%1#0"
      ]
    },
    "3891": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "3892": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)"
      ]
    },
    "3894": {
      "op": "frame_dig -3",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3896": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3897": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "3899": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3900": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3902": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3903": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#0"
      ]
    },
    "3905": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3906": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "3908": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3909": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "3910": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3911": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "3913": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "3915": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%0#0"
      ]
    },
    "3916": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3917": {
      "op": "box_put",
      "stack_out": []
    },
    "3918": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3919": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"active_loan_records\""
      ]
    },
    "3921": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3922": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "3923": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "3924": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "3925": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "3927": {
      "op": "swap",
      "stack_out": [
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "3928": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3929": {
      "retsub": true,
      "op": "retsub"
    },
    "3930": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addLoanRecordExternal",
      "params": {
        "disbursement#0": "uint64",
        "collateralTokenId#0": "bytes",
        "borrowerAddress#0": "bytes",
        "collateralAmount#0": "uint64"
      },
      "block": "addLoanRecordExternal",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3933": {
      "op": "frame_dig -4",
      "defined_out": [
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)"
      ]
    },
    "3935": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3937": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)",
        "collateralTokenId#0 (copy)",
        "borrowerAddress#0 (copy)"
      ]
    },
    "3939": {
      "op": "frame_dig -1",
      "defined_out": [
        "borrowerAddress#0 (copy)",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#0 (copy)"
      ],
      "stack_out": [
        "disbursement#0 (copy)",
        "collateralTokenId#0 (copy)",
        "borrowerAddress#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3941": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.mintLoanRecord",
      "op": "callsub mintLoanRecord",
      "stack_out": []
    },
    "3944": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#0 (copy)"
      ]
    },
    "3946": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3948": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": []
    },
    "3951": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3952": {
      "op": "bytec_3 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_borrows\""
      ]
    },
    "3953": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3954": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3955": {
      "op": "frame_dig -4",
      "stack_out": [
        "maybe_value%0#0",
        "disbursement#0 (copy)"
      ]
    },
    "3957": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "3958": {
      "op": "bytec_3 // \"total_borrows\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "3959": {
      "op": "swap",
      "stack_out": [
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "3960": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3961": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "3964": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "3966": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "3967": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3968": {
      "retsub": true,
      "op": "retsub"
    },
    "3969": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest",
      "params": {
        "debtor#0": "bytes",
        "templateReserveAddress#0": "bytes"
      },
      "block": "accrueLoanInterest",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3972": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "3974": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "3976": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3977": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3978": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3980": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": []
    },
    "3981": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3982": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"contract_state\""
      ]
    },
    "3984": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3985": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "3986": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3987": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "3988": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "3989": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": []
    },
    "3990": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "{accrueMarket}"
      ],
      "stack_out": [
        "{accrueMarket}"
      ]
    },
    "3993": {
      "op": "pop",
      "stack_out": []
    },
    "3994": {
      "op": "frame_dig -2",
      "stack_out": [
        "debtor#0 (copy)"
      ]
    },
    "3996": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "op": "callsub syncBorrowerSnapshot",
      "defined_out": [
        "{syncBorrowerSnapshot}"
      ],
      "stack_out": [
        "{syncBorrowerSnapshot}"
      ]
    },
    "3999": {
      "op": "pop",
      "stack_out": []
    },
    "4000": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "4003": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"last_apr_bps\""
      ]
    },
    "4005": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ]
    },
    "4006": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4007": {
      "retsub": true,
      "op": "retsub"
    },
    "4008": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "params": {},
      "block": "current_apr_bps",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4011": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "U_raw#0"
      ]
    },
    "4013": {
      "op": "dupn 6",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ]
    },
    "4015": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "0"
      ]
    },
    "4016": {
      "op": "bytec_2 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "4017": {
      "op": "app_global_get_ex",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "4018": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "maybe_exists%0#0",
        "D#0"
      ]
    },
    "4019": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "maybe_exists%0#0",
        "D#0",
        "D#0 (copy)"
      ]
    },
    "4020": {
      "op": "uncover 2",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "4022": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0"
      ]
    },
    "4023": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "0"
      ]
    },
    "4024": {
      "op": "bytec_3 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4025": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "B#0",
        "maybe_exists%1#0"
      ]
    },
    "4026": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "D#0",
        "maybe_exists%1#0",
        "B#0"
      ]
    },
    "4027": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ]
    },
    "4029": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0"
      ]
    },
    "4030": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "0"
      ]
    },
    "4031": {
      "op": "bytec 29 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\"",
        "0",
        "B#0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "0",
        "\"util_cap_bps\""
      ]
    },
    "4033": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "4034": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%2#0",
        "cap_bps#0"
      ]
    },
    "4035": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "maybe_exists%2#0"
      ]
    },
    "4037": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "4038": {
      "op": "bnz current_apr_bps_after_if_else@14",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4041": {
      "op": "intc_0 // 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4042": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4044": {
      "block": "current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@17",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4045": {
      "op": "bytec 33 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"rate_model_type\""
      ]
    },
    "4047": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4048": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%0#0"
      ]
    },
    "4049": {
      "op": "bnz current_apr_bps_ternary_false@2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4052": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4053": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "4055": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%0#0"
      ]
    },
    "4056": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0"
      ]
    },
    "4057": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0"
      ]
    },
    "4058": {
      "op": "bytec 34 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\"",
        "0",
        "base_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0",
        "\"kink_norm_bps\""
      ]
    },
    "4060": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "4061": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "4062": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4063": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "4065": {
      "op": "cover 3",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "4067": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "4068": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "4069": {
      "op": "bytec 35 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope1_bps\""
      ]
    },
    "4071": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "4072": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ]
    },
    "4073": {
      "op": "frame_bury 5",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "4075": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "4076": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "4077": {
      "op": "bytec 36 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope2_bps\""
      ]
    },
    "4079": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope2_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "4080": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope2_bps#0"
      ]
    },
    "4081": {
      "op": "frame_bury 6",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "4083": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "4084": {
      "op": "frame_dig 0",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_raw#0"
      ]
    },
    "4086": {
      "op": ">=",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "tmp%0#1"
      ]
    },
    "4087": {
      "op": "bz current_apr_bps_else_body@6",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ]
    },
    "4090": {
      "op": "frame_dig 5",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "4092": {
      "op": "frame_dig 0",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0",
        "U_raw#0"
      ]
    },
    "4094": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "hi1#0",
        "kink_norm_bps#0",
        "lo1#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0"
      ]
    },
    "4095": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0",
        "kink_norm_bps#0"
      ]
    },
    "4097": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "tmp%1#0"
      ]
    },
    "4098": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4099": {
      "op": "frame_bury 1",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4101": {
      "block": "current_apr_bps_after_if_else@7",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4102": {
      "op": "bytec 21 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "4104": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "4105": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "4106": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0",
        "maxCap#0 (copy)"
      ]
    },
    "4107": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "4109": {
      "op": "frame_bury 4",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "4111": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "4112": {
      "op": "frame_dig 1",
      "defined_out": [
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "apr#11"
      ]
    },
    "4114": {
      "op": "frame_bury 2",
      "defined_out": [
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "4116": {
      "op": "bz current_apr_bps_after_if_else@10",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4119": {
      "op": "frame_dig 1",
      "defined_out": [
        "apr#0",
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4121": {
      "op": "dup",
      "defined_out": [
        "apr#0",
        "apr#0 (copy)",
        "apr#11",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)"
      ]
    },
    "4122": {
      "op": "frame_dig 4",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)",
        "maxCap#0"
      ]
    },
    "4124": {
      "op": ">",
      "defined_out": [
        "apr#0",
        "apr#11",
        "maxCap#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "tmp%5#0"
      ]
    },
    "4125": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#0",
        "apr#11"
      ]
    },
    "4126": {
      "op": "frame_bury 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#0"
      ]
    },
    "4128": {
      "op": "bz current_apr_bps_after_if_else@10",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4131": {
      "op": "frame_dig 4",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#11"
      ]
    },
    "4133": {
      "op": "frame_bury 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4135": {
      "block": "current_apr_bps_after_if_else@10",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4137": {
      "op": "frame_bury 1",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4139": {
      "block": "current_apr_bps_ternary_merge@3",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "bytec 30 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\""
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"prev_apr_bps\""
      ]
    },
    "4141": {
      "op": "frame_dig 1",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"prev_apr_bps\"",
        "apr#0"
      ]
    },
    "4143": {
      "op": "dup",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0",
        "apr#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"prev_apr_bps\"",
        "apr#0 (copy)",
        "apr#0 (copy)"
      ]
    },
    "4144": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "\"prev_apr_bps\"",
        "apr#0 (copy)"
      ]
    },
    "4146": {
      "op": "app_global_put",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4147": {
      "op": "frame_bury 0"
    },
    "4149": {
      "retsub": true,
      "op": "retsub"
    },
    "4150": {
      "block": "current_apr_bps_else_body@6",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "U_raw#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "U_raw#0"
      ]
    },
    "4152": {
      "op": "uncover 2",
      "defined_out": [
        "U_raw#0",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_raw#0",
        "kink_norm_bps#0"
      ]
    },
    "4154": {
      "op": "dup",
      "defined_out": [
        "U_raw#0",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_raw#0",
        "kink_norm_bps#0 (copy)",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4155": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_raw#0",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4157": {
      "op": "-",
      "defined_out": [
        "U_raw#0",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0"
      ]
    },
    "4158": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "U_raw#0",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0",
        "10000"
      ]
    },
    "4159": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "10000",
        "kink_norm_bps#0"
      ]
    },
    "4161": {
      "op": "-",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0"
      ]
    },
    "4162": {
      "op": "frame_dig 6",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "over#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0",
        "slope2_bps#0"
      ]
    },
    "4164": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "slope2_bps#0",
        "over#0"
      ]
    },
    "4166": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "4167": {
      "op": "uncover 3",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0"
      ]
    },
    "4169": {
      "op": "frame_dig 5",
      "defined_out": [
        "U_raw#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "4171": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "tmp%2#0"
      ]
    },
    "4172": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "4174": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0",
        "denom#0"
      ]
    },
    "4176": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "4177": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4178": {
      "op": "frame_bury 1",
      "defined_out": [
        "U_raw#0",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4180": {
      "op": "b current_apr_bps_after_if_else@7"
    },
    "4183": {
      "block": "current_apr_bps_ternary_false@2",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4184": {
      "op": "bytec 23 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "4186": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4187": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4188": {
      "op": "frame_bury 1",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4190": {
      "op": "b current_apr_bps_ternary_merge@3"
    },
    "4193": {
      "block": "current_apr_bps_after_if_else@14",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "4195": {
      "op": "frame_dig 9",
      "defined_out": [
        "D#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "cap_bps#0"
      ]
    },
    "4197": {
      "op": "mulw",
      "defined_out": [
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ]
    },
    "4198": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0",
        "10000"
      ]
    },
    "4199": {
      "op": "divw",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "4200": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0"
      ]
    },
    "4201": {
      "op": "frame_bury 3",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "4203": {
      "op": "bnz current_apr_bps_after_if_else@16",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4206": {
      "op": "intc_0 // 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4207": {
      "op": "frame_bury 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4209": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@17"
    },
    "4212": {
      "block": "current_apr_bps_after_if_else@16",
      "stack_in": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "B#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0"
      ]
    },
    "4214": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)"
      ]
    },
    "4215": {
      "op": "frame_dig 3",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ]
    },
    "4217": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0",
        "capBorrow#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "4218": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "4220": {
      "op": "<=",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#1"
      ]
    },
    "4221": {
      "op": "dig 1",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#1",
        "capBorrow#0 (copy)"
      ]
    },
    "4223": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "tmp%2#1",
        "capBorrow#0 (copy)",
        "B#0"
      ]
    },
    "4225": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0 (copy)",
        "B#0",
        "tmp%2#1"
      ]
    },
    "4227": {
      "op": "select",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0"
      ]
    },
    "4228": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0",
        "10000"
      ]
    },
    "4229": {
      "op": "mulw",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ]
    },
    "4230": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiN#0",
        "loN#0",
        "capBorrow#0"
      ]
    },
    "4232": {
      "op": "divw",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4233": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "apr#0",
        "apr#11",
        "capBorrow#0",
        "maxCap#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4235": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@17"
    },
    "4238": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "params": {
        "rec#0": "bytes"
      },
      "block": "currentDebtFromSnapshot",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "4241": {
      "op": "frame_dig -1",
      "defined_out": [
        "rec#0 (copy)"
      ],
      "stack_out": [
        "rec#0 (copy)"
      ]
    },
    "4243": {
      "op": "pushint 73 // 73",
      "defined_out": [
        "73",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "rec#0 (copy)",
        "73"
      ]
    },
    "4245": {
      "op": "extract_uint64",
      "defined_out": [
        "p#0"
      ],
      "stack_out": [
        "p#0"
      ]
    },
    "4246": {
      "op": "dup",
      "defined_out": [
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "p#0"
      ]
    },
    "4247": {
      "op": "bnz currentDebtFromSnapshot_after_if_else@2",
      "stack_out": [
        "p#0"
      ]
    },
    "4250": {
      "op": "intc_0 // 0",
      "stack_out": [
        "p#0",
        "0"
      ]
    },
    "4251": {
      "op": "frame_dig -1",
      "stack_out": [
        "p#0",
        "0",
        "rec#0 (copy)"
      ]
    },
    "4253": {
      "op": "uncover 2"
    },
    "4255": {
      "retsub": true,
      "op": "retsub"
    },
    "4256": {
      "block": "currentDebtFromSnapshot_after_if_else@2",
      "stack_in": [
        "p#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "p#0",
        "0"
      ]
    },
    "4257": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0"
      ],
      "stack_out": [
        "p#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4259": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "p#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4260": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "p#0",
        "maybe_value%0#0"
      ]
    },
    "4261": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "maybe_value%0#0",
        "p#0"
      ]
    },
    "4263": {
      "op": "mulw",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0"
      ]
    },
    "4264": {
      "op": "frame_dig -1",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "rec#0 (copy)"
      ]
    },
    "4266": {
      "op": "pushint 81 // 81",
      "defined_out": [
        "81",
        "hi#0",
        "lo#0",
        "p#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "rec#0 (copy)",
        "81"
      ]
    },
    "4268": {
      "op": "extract_uint64",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "tmp%3#0"
      ]
    },
    "4269": {
      "op": "divw",
      "defined_out": [
        "p#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "p#0",
        "tmp%4#0"
      ]
    },
    "4270": {
      "op": "frame_dig -1",
      "stack_out": [
        "p#0",
        "tmp%4#0",
        "rec#0 (copy)"
      ]
    },
    "4272": {
      "op": "uncover 2"
    },
    "4274": {
      "retsub": true,
      "op": "retsub"
    },
    "4275": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "syncBorrowerSnapshot",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4278": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4280": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "4282": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4283": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4284": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "maybe_exists%0#0"
      ]
    },
    "4285": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "rec#0"
      ]
    },
    "4286": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4289": {
      "op": "dup",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4290": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0"
      ]
    },
    "4293": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "rec#0 (copy)"
      ]
    },
    "4295": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "4298": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "0"
      ]
    },
    "4299": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4300": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liveDebt#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4301": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "4302": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "rec#0"
      ]
    },
    "4304": {
      "error": "Index access is out of bounds",
      "op": "extract 48 17 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ]
    },
    "4307": {
      "op": "dig 4",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "liveDebt#0 (copy)"
      ]
    },
    "4309": {
      "op": "itob",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "4310": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "4311": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4313": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liveDebt#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4314": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0"
      ]
    },
    "4315": {
      "op": "itob",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4316": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "borrower#0 (copy)"
      ]
    },
    "4318": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "borrower#0 (copy)",
        "tmp%1#0"
      ]
    },
    "4320": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4321": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ]
    },
    "4323": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4324": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "tmp%3#0"
      ]
    },
    "4326": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "4327": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0",
        "maybe_value%1#0"
      ]
    },
    "4329": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "liveDebt#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "4330": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "4332": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "liveDebt#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4333": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%1#0"
      ]
    },
    "4334": {
      "op": "concat",
      "defined_out": [
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "newRec#0"
      ]
    },
    "4335": {
      "op": "uncover 2",
      "stack_out": [
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ]
    },
    "4337": {
      "op": "swap",
      "stack_out": [
        "liveDebt#0",
        "tmp%0#0",
        "newRec#0"
      ]
    },
    "4338": {
      "op": "box_put",
      "stack_out": [
        "liveDebt#0"
      ]
    },
    "4339": {
      "retsub": true,
      "op": "retsub"
    },
    "4340": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "params": {},
      "block": "accrueMarket",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4343": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "deltaT#0"
      ]
    },
    "4345": {
      "op": "dupn 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ]
    },
    "4347": {
      "op": "global LatestTimestamp"
    },
    "4349": {
      "op": "dup"
    },
    "4350": {
      "op": "intc_0 // 0"
    },
    "4351": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "0",
        "\"last_accrual_ts\""
      ]
    },
    "4353": {
      "op": "app_global_get_ex",
      "defined_out": [
        "last#0",
        "maybe_exists%0#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0"
      ]
    },
    "4354": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "maybe_exists%0#0",
        "last#0"
      ]
    },
    "4355": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "maybe_exists%0#0",
        "last#0",
        "last#0 (copy)"
      ]
    },
    "4356": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0",
        "last#0"
      ]
    },
    "4358": {
      "op": "cover 3",
      "defined_out": [
        "last#0",
        "maybe_exists%0#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0"
      ]
    },
    "4360": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4361": {
      "op": "<=",
      "defined_out": [
        "last#0",
        "now#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp%0#0"
      ]
    },
    "4362": {
      "op": "bz accrueMarket_after_if_else@2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4365": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4366": {
      "op": "frame_bury 0"
    },
    "4368": {
      "retsub": true,
      "op": "retsub"
    },
    "4369": {
      "block": "accrueMarket_after_if_else@2",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0"
      ]
    },
    "4371": {
      "op": "frame_dig 5",
      "defined_out": [
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4373": {
      "op": "-",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4374": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0",
        "deltaT#0"
      ]
    },
    "4375": {
      "op": "frame_bury 0",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4377": {
      "op": "bnz accrueMarket_after_if_else@9",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4380": {
      "op": "intc_0 // 0",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4381": {
      "op": "frame_bury 2",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4383": {
      "block": "accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.sliceFactorWad@10",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "pushbytes \"calculateledSimpleWad\"",
      "defined_out": [
        "\"calculateledSimpleWad\""
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"calculateledSimpleWad\""
      ]
    },
    "4406": {
      "op": "frame_dig 2",
      "defined_out": [
        "\"calculateledSimpleWad\"",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"calculateledSimpleWad\"",
        "simpleWad#0"
      ]
    },
    "4408": {
      "op": "dup",
      "defined_out": [
        "\"calculateledSimpleWad\"",
        "simpleWad#0",
        "simpleWad#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"calculateledSimpleWad\"",
        "simpleWad#0 (copy)",
        "simpleWad#0 (copy)"
      ]
    },
    "4409": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0",
        "\"calculateledSimpleWad\"",
        "simpleWad#0 (copy)"
      ]
    },
    "4411": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4412": {
      "op": "bnz accrueMarket_after_if_else@4",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4415": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"last_accrual_ts\""
      ]
    },
    "4417": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"last_accrual_ts\"",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"last_accrual_ts\"",
        "now#0"
      ]
    },
    "4419": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4420": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4421": {
      "op": "frame_bury 0"
    },
    "4423": {
      "retsub": true,
      "op": "retsub"
    },
    "4424": {
      "block": "accrueMarket_after_if_else@4",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4425": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4427": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "oldIndex#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "maybe_exists%1#0"
      ]
    },
    "4428": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0"
      ]
    },
    "4429": {
      "op": "dup",
      "defined_out": [
        "oldIndex#0",
        "oldIndex#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "oldIndex#0 (copy)"
      ]
    },
    "4430": {
      "op": "frame_dig 2",
      "defined_out": [
        "oldIndex#0",
        "oldIndex#0 (copy)",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "oldIndex#0 (copy)",
        "simpleWad#0"
      ]
    },
    "4432": {
      "op": "mulw",
      "defined_out": [
        "hiI#0",
        "loI#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "hiI#0",
        "loI#0"
      ]
    },
    "4433": {
      "op": "intc 5 // 1000000000000",
      "defined_out": [
        "1000000000000",
        "hiI#0",
        "loI#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "hiI#0",
        "loI#0",
        "1000000000000"
      ]
    },
    "4435": {
      "op": "divw",
      "defined_out": [
        "incrIndex#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "incrIndex#0"
      ]
    },
    "4436": {
      "op": "+",
      "defined_out": [
        "newIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "newIndex#0"
      ]
    },
    "4437": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "newIndex#0",
        "\"borrow_index_wad\""
      ]
    },
    "4439": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"borrow_index_wad\"",
        "newIndex#0"
      ]
    },
    "4440": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4441": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4442": {
      "op": "bytec_3 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4443": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0"
      ]
    },
    "4444": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_exists%2#0",
        "totalBefore#0"
      ]
    },
    "4445": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_exists%2#0",
        "totalBefore#0",
        "totalBefore#0 (copy)"
      ]
    },
    "4446": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0",
        "totalBefore#0"
      ]
    },
    "4448": {
      "op": "frame_bury 3",
      "defined_out": [
        "maybe_exists%2#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0"
      ]
    },
    "4450": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4451": {
      "op": "intc_0 // 0",
      "defined_out": [
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "interest#0"
      ]
    },
    "4452": {
      "op": "frame_bury 1",
      "defined_out": [
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4454": {
      "op": "bz accrueMarket_after_if_else@6",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4457": {
      "op": "frame_dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4459": {
      "op": "frame_dig 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "simpleWad#0"
      ]
    },
    "4461": {
      "op": "mulw",
      "defined_out": [
        "hiB#0",
        "interest#0",
        "loB#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "4462": {
      "op": "intc 5 // 1000000000000",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "hiB#0",
        "loB#0",
        "1000000000000"
      ]
    },
    "4464": {
      "op": "divw",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4465": {
      "op": "frame_bury 1",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4467": {
      "block": "accrueMarket_after_if_else@6",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4468": {
      "op": "bytec 40 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"protocol_share_bps\""
      ]
    },
    "4470": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "protoBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0",
        "maybe_exists%3#0"
      ]
    },
    "4471": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0"
      ]
    },
    "4472": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "protoBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0",
        "10000"
      ]
    },
    "4473": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "10000",
        "protoBps#0"
      ]
    },
    "4474": {
      "op": "-",
      "defined_out": [
        "deposBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deposBps#0"
      ]
    },
    "4475": {
      "op": "frame_dig 1",
      "defined_out": [
        "deposBps#0",
        "interest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deposBps#0",
        "interest#0"
      ]
    },
    "4477": {
      "op": "dup"
    },
    "4478": {
      "op": "uncover 2",
      "defined_out": [
        "deposBps#0",
        "interest#0",
        "interest#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "interest#0 (copy)",
        "deposBps#0"
      ]
    },
    "4480": {
      "op": "mulw",
      "defined_out": [
        "hiD#0",
        "interest#0",
        "loD#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "hiD#0",
        "loD#0"
      ]
    },
    "4481": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "hiD#0",
        "loD#0",
        "10000"
      ]
    },
    "4482": {
      "op": "divw",
      "defined_out": [
        "depositorInterest#0",
        "interest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0"
      ]
    },
    "4483": {
      "op": "dup2",
      "defined_out": [
        "depositorInterest#0",
        "depositorInterest#0 (copy)",
        "interest#0",
        "interest#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "interest#0 (copy)",
        "depositorInterest#0 (copy)"
      ]
    },
    "4484": {
      "op": "-",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4485": {
      "op": "frame_dig 3",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ]
    },
    "4487": {
      "op": "dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "totalBefore#0",
        "interest#0 (copy)"
      ]
    },
    "4489": {
      "op": "+",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "new_state_value%0#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "new_state_value%0#0"
      ]
    },
    "4490": {
      "op": "bytec_3 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "depositorInterest#0",
        "interest#0",
        "new_state_value%0#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4491": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4492": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4493": {
      "op": "pushbytes \"last_interest_applied\"",
      "defined_out": [
        "\"last_interest_applied\"",
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "\"last_interest_applied\""
      ]
    },
    "4516": {
      "op": "dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "\"last_interest_applied\"",
        "interest#0 (copy)"
      ]
    },
    "4518": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4519": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4520": {
      "op": "bytec_2 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "4521": {
      "op": "app_global_get_ex",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4522": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%4#0"
      ]
    },
    "4523": {
      "op": "uncover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%4#0",
        "depositorInterest#0"
      ]
    },
    "4525": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "new_state_value%1#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%1#0"
      ]
    },
    "4526": {
      "op": "bytec_2 // \"total_deposits\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "4527": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "4528": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0"
      ]
    },
    "4529": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4530": {
      "op": "bytec 14 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "4532": {
      "op": "app_global_get_ex",
      "defined_out": [
        "interest#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4533": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%5#0"
      ]
    },
    "4534": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "new_state_value%2#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "new_state_value%2#0"
      ]
    },
    "4535": {
      "op": "bytec 14 // \"fee_pool\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "new_state_value%2#0",
        "\"fee_pool\""
      ]
    },
    "4537": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"fee_pool\"",
        "new_state_value%2#0"
      ]
    },
    "4538": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4539": {
      "op": "bytec 31 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "interest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"last_accrual_ts\""
      ]
    },
    "4541": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"last_accrual_ts\"",
        "interest#0",
        "now#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"last_accrual_ts\"",
        "now#0"
      ]
    },
    "4543": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4544": {
      "op": "frame_bury 0"
    },
    "4546": {
      "retsub": true,
      "op": "retsub"
    },
    "4547": {
      "block": "accrueMarket_after_if_else@9",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4548": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"last_apr_bps\""
      ]
    },
    "4550": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "4551": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1"
      ]
    },
    "4552": {
      "op": "frame_dig 0",
      "defined_out": [
        "deltaT#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1",
        "deltaT#0"
      ]
    },
    "4554": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "h1#0",
        "l1#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h1#0",
        "l1#0"
      ]
    },
    "4555": {
      "op": "pushint 31536000 // 31536000",
      "defined_out": [
        "31536000",
        "deltaT#0",
        "h1#0",
        "l1#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h1#0",
        "l1#0",
        "31536000"
      ]
    },
    "4560": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "tmp2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp2#0"
      ]
    },
    "4561": {
      "op": "intc 5 // 1000000000000",
      "defined_out": [
        "1000000000000",
        "deltaT#0",
        "tmp2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp2#0",
        "1000000000000"
      ]
    },
    "4563": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "h2#0",
        "l2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h2#0",
        "l2#0"
      ]
    },
    "4564": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "deltaT#0",
        "h2#0",
        "l2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h2#0",
        "l2#0",
        "10000"
      ]
    },
    "4565": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4566": {
      "op": "frame_bury 2",
      "defined_out": [
        "deltaT#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4568": {
      "op": "b accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.sliceFactorWad@10"
    },
    "4571": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "params": {
        "borrowerAddress#0": "bytes"
      },
      "block": "getLoanRecord",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4574": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4576": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4578": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4579": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4580": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4581": {
      "retsub": true,
      "op": "retsub"
    },
    "4582": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo",
      "params": {
        "paymentTxn#0": "uint64",
        "repaymentAmount#0": "uint64"
      },
      "block": "repayLoanAlgo",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4585": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4587": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4588": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4589": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4590": {
      "op": "bury 1",
      "stack_out": [
        "remainingDebt#0",
        "maybe_exists%0#0"
      ]
    },
    "4592": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4593": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4594": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"contract_state\""
      ]
    },
    "4596": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4597": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%1#0"
      ]
    },
    "4598": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%0#0"
      ]
    },
    "4599": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%0#0",
        "1"
      ]
    },
    "4600": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%1#0"
      ]
    },
    "4601": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4602": {
      "op": "frame_dig -2",
      "defined_out": [
        "paymentTxn#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4604": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%2#0"
      ]
    },
    "4606": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "4608": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%4#0"
      ]
    },
    "4609": {
      "op": "bz repayLoanAlgo_bool_false@3",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4612": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4614": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%5#0"
      ]
    },
    "4616": {
      "op": "frame_dig -1",
      "defined_out": [
        "repaymentAmount#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%5#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4618": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%6#0"
      ]
    },
    "4619": {
      "op": "bz repayLoanAlgo_bool_false@3",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4622": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "and_result%0#0"
      ]
    },
    "4623": {
      "block": "repayLoanAlgo_bool_merge@4",
      "stack_in": [
        "remainingDebt#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4624": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "_interestSlice#0"
      ]
    },
    "4627": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4628": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%7#0"
      ]
    },
    "4630": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0"
      ]
    },
    "4633": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4634": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%8#0"
      ]
    },
    "4636": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4639": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4642": {
      "op": "swap",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4643": {
      "op": "frame_dig -1",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4645": {
      "op": "dig 1",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)",
        "liveDebt#0 (copy)"
      ]
    },
    "4647": {
      "op": "<=",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "tmp%9#0"
      ]
    },
    "4648": {
      "op": "assert",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4649": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4651": {
      "op": "-",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4652": {
      "op": "dup",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "remainingDebt#0"
      ]
    },
    "4653": {
      "op": "frame_bury 0",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4655": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "0"
      ]
    },
    "4656": {
      "op": "bytec_3 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4657": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4658": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%2#0"
      ]
    },
    "4659": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%2#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4661": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0"
      ]
    },
    "4662": {
      "op": "bytec_3 // \"total_borrows\"",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4663": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4664": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4665": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4667": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4670": {
      "op": "bnz repayLoanAlgo_else_body@7",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4673": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"loan_record\""
      ]
    },
    "4675": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"loan_record\"",
        "tmp%11#0"
      ]
    },
    "4677": {
      "op": "concat",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "tmp%12#0"
      ]
    },
    "4678": {
      "op": "box_del",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "{box_del}"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "{box_del}"
      ]
    },
    "4679": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4680": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "0"
      ]
    },
    "4681": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4683": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4684": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%3#0"
      ]
    },
    "4685": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "4686": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "new_state_value%1#0"
      ]
    },
    "4687": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "4689": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "4690": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4691": {
      "op": "itxn_begin"
    },
    "4692": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4694": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "4695": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4696": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "32"
      ]
    },
    "4698": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4699": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0"
      ]
    },
    "4700": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "40"
      ]
    },
    "4702": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "4703": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4705": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4707": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4709": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "4"
      ]
    },
    "4711": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4713": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "1000"
      ]
    },
    "4714": {
      "op": "itxn_field Fee",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4716": {
      "op": "itxn_submit"
    },
    "4717": {
      "retsub": true,
      "op": "retsub"
    },
    "4718": {
      "block": "repayLoanAlgo_else_body@7",
      "stack_in": [
        "remainingDebt#0",
        "rec#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "tmp%15#0"
      ]
    },
    "4720": {
      "op": "swap",
      "defined_out": [
        "rec#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "rec#0"
      ]
    },
    "4721": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4722": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "rec#0",
        "tmp%16#0"
      ]
    },
    "4725": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "rec#0"
      ]
    },
    "4726": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "4729": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "0"
      ]
    },
    "4730": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4731": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4732": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0"
      ]
    },
    "4733": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%4#0",
        "repaymentAmount#0 (copy)",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4735": {
      "op": "itob",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "4736": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "4738": {
      "op": "itob",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4739": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "4740": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "maybe_value%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "4743": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4744": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "4745": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4746": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0"
      ]
    },
    "4748": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "4749": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "4750": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4752": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_exists%5#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4753": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0"
      ]
    },
    "4754": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "4755": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%15#0"
      ]
    },
    "4757": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "4759": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4760": {
      "op": "uncover 5",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0",
        "tmp%17#0"
      ]
    },
    "4762": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4763": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4765": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4766": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%4#0"
      ]
    },
    "4768": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4769": {
      "op": "uncover 2",
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%2#0"
      ]
    },
    "4771": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "remainingDebt#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4772": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%3#0"
      ]
    },
    "4773": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4774": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "4776": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "tmp%18#0"
      ]
    },
    "4778": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "tmp%19#0"
      ]
    },
    "4779": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%19#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4780": {
      "op": "box_put",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4781": {
      "retsub": true,
      "op": "retsub"
    },
    "4782": {
      "block": "repayLoanAlgo_bool_false@3",
      "stack_in": [
        "remainingDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "and_result%0#0"
      ]
    },
    "4783": {
      "op": "b repayLoanAlgo_bool_merge@4"
    },
    "4786": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawPlatformFees",
      "params": {
        "paymentReceiver#0": "bytes",
        "feeTxn#0": "uint64"
      },
      "block": "withdrawPlatformFees",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4789": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "payout#0"
      ]
    },
    "4791": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0"
      ]
    },
    "4793": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "0"
      ]
    },
    "4794": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "4796": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4797": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4798": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%1#0"
      ]
    },
    "4799": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": [
        "payout#0"
      ]
    },
    "4800": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "0"
      ]
    },
    "4801": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "payout#0",
        "0",
        "\"contract_state\""
      ]
    },
    "4803": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4804": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "maybe_value%1#0"
      ]
    },
    "4805": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%2#0"
      ]
    },
    "4806": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%2#0",
        "1"
      ]
    },
    "4807": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%3#0"
      ]
    },
    "4808": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "payout#0"
      ]
    },
    "4809": {
      "op": "frame_dig -1",
      "defined_out": [
        "feeTxn#0 (copy)"
      ],
      "stack_out": [
        "payout#0",
        "feeTxn#0 (copy)"
      ]
    },
    "4811": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%4#0"
      ]
    },
    "4813": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "4815": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%6#0"
      ]
    },
    "4816": {
      "op": "bz withdrawPlatformFees_bool_false@3",
      "stack_out": [
        "payout#0"
      ]
    },
    "4819": {
      "op": "frame_dig -1",
      "stack_out": [
        "payout#0",
        "feeTxn#0 (copy)"
      ]
    },
    "4821": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%7#0"
      ]
    },
    "4823": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%7#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%7#0",
        "1000"
      ]
    },
    "4824": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "payout#0",
        "tmp%8#0"
      ]
    },
    "4825": {
      "op": "bz withdrawPlatformFees_bool_false@3",
      "stack_out": [
        "payout#0"
      ]
    },
    "4828": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "payout#0",
        "and_result%0#0"
      ]
    },
    "4829": {
      "block": "withdrawPlatformFees_bool_merge@4",
      "stack_in": [
        "payout#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "payout#0"
      ]
    },
    "4830": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "payout#0",
        "0"
      ]
    },
    "4831": {
      "op": "bytec 14 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0"
      ],
      "stack_out": [
        "payout#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "4833": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4834": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "maybe_value%2#0"
      ]
    },
    "4835": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "4836": {
      "op": "bytec 17 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "0",
        "\"current_accumulated_commission\""
      ]
    },
    "4838": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4839": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "payout#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "4840": {
      "op": "+",
      "defined_out": [
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "4841": {
      "op": "dup",
      "stack_out": [
        "payout#0",
        "payout#0",
        "payout#0"
      ]
    },
    "4842": {
      "op": "frame_bury 0",
      "defined_out": [
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "4844": {
      "op": "bz withdrawPlatformFees_after_if_else@7",
      "stack_out": [
        "payout#0"
      ]
    },
    "4847": {
      "op": "itxn_begin"
    },
    "4848": {
      "op": "frame_dig 0",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "4850": {
      "op": "dup",
      "defined_out": [
        "payout#0",
        "payout#0 (copy)"
      ],
      "stack_out": [
        "payout#0",
        "payout#0",
        "payout#0 (copy)"
      ]
    },
    "4851": {
      "op": "itxn_field Amount",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "4853": {
      "op": "frame_dig -2",
      "defined_out": [
        "paymentReceiver#0 (copy)",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0",
        "paymentReceiver#0 (copy)"
      ]
    },
    "4855": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "4857": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0",
        "1"
      ]
    },
    "4858": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "4860": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "payout#0"
      ],
      "stack_out": [
        "payout#0",
        "payout#0",
        "1000"
      ]
    },
    "4861": {
      "op": "itxn_field Fee",
      "stack_out": [
        "payout#0",
        "payout#0"
      ]
    },
    "4863": {
      "op": "itxn_submit"
    },
    "4864": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "payout#0"
      ]
    },
    "4867": {
      "op": "bytec 14 // \"fee_pool\"",
      "stack_out": [
        "payout#0",
        "\"fee_pool\""
      ]
    },
    "4869": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "\"fee_pool\"",
        "0"
      ]
    },
    "4870": {
      "op": "app_global_put",
      "stack_out": [
        "payout#0"
      ]
    },
    "4871": {
      "op": "bytec 17 // \"current_accumulated_commission\"",
      "stack_out": [
        "payout#0",
        "\"current_accumulated_commission\""
      ]
    },
    "4873": {
      "op": "intc_0 // 0",
      "stack_out": [
        "payout#0",
        "\"current_accumulated_commission\"",
        "0"
      ]
    },
    "4874": {
      "op": "app_global_put",
      "stack_out": [
        "payout#0"
      ]
    },
    "4875": {
      "block": "withdrawPlatformFees_after_if_else@7",
      "stack_in": [
        "payout#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "4876": {
      "block": "withdrawPlatformFees_bool_false@3",
      "stack_in": [
        "payout#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "payout#0",
        "and_result%0#0"
      ]
    },
    "4877": {
      "op": "b withdrawPlatformFees_bool_merge@4"
    },
    "4880": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutSplitAlgo",
      "params": {
        "buyer#0": "bytes",
        "debtor#0": "bytes",
        "premiumAxferTxn#0": "uint64",
        "repayPayTxn#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "buyoutSplitAlgo",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "4883": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "buyoutTokenId#0"
      ]
    },
    "4885": {
      "op": "dupn 4",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ]
    },
    "4887": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "\"loan_record\""
      ]
    },
    "4889": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "4891": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0"
      ]
    },
    "4892": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4894": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4895": {
      "op": "bury 1",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4897": {
      "error": "NO_LOAN_RECORD",
      "op": "assert // NO_LOAN_RECORD",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4898": {
      "op": "intc_0 // 0",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "4899": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "0",
        "\"contract_state\""
      ]
    },
    "4901": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4902": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "4903": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "4904": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "4905": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "4906": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4907": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "tmp%0#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0",
        "{accrueMarket}"
      ]
    },
    "4910": {
      "op": "pop",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4911": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "4912": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "maybe_exists%2#0",
        "rec#0"
      ]
    },
    "4913": {
      "op": "dup",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "maybe_exists%2#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4914": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "4916": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0"
      ]
    },
    "4917": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4918": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)",
        "40"
      ]
    },
    "4920": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0"
      ]
    },
    "4921": {
      "op": "dup",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4922": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0"
      ]
    },
    "4924": {
      "op": "dup",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4925": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "4928": {
      "op": "dup",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4929": {
      "op": "cover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "4931": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0"
      ]
    },
    "4933": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#1"
      ]
    },
    "4936": {
      "op": "pop",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "4937": {
      "op": "dup",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "4938": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "4940": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)"
      ]
    },
    "4941": {
      "error": "NO_DEBT",
      "op": "assert // NO_DEBT",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "4942": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "debtBase#0",
        "collateralTokenId#0"
      ]
    },
    "4943": {
      "op": "uncover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "4945": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "lstAppId#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "lstAppId#0 (copy)"
      ]
    },
    "4947": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralUSD#0"
      ]
    },
    "4950": {
      "op": "dup"
    },
    "4951": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtBase#0"
      ]
    },
    "4953": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "4956": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)"
      ]
    },
    "4957": {
      "error": "BAD_DEBT_USD",
      "op": "assert // BAD_DEBT_USD",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "4958": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0"
      ]
    },
    "4959": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0",
        "10000"
      ]
    },
    "4960": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0"
      ]
    },
    "4961": {
      "op": "uncover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hCR#0",
        "lCR#0",
        "debtUSDv#0"
      ]
    },
    "4963": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0"
      ]
    },
    "4964": {
      "op": "dup",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "CR_bps#0"
      ]
    },
    "4965": {
      "op": "intc_0 // 0",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "4966": {
      "op": "swap",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0"
      ]
    },
    "4967": {
      "op": "intc_0 // 0",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "0"
      ]
    },
    "4968": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4970": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4971": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "maybe_value%3#0"
      ]
    },
    "4972": {
      "op": ">",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%7#0"
      ]
    },
    "4973": {
      "op": "bz buyoutSplitAlgo_after_if_else@2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "4976": {
      "op": "frame_dig 11",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0"
      ]
    },
    "4978": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "CR_bps#0",
        "10000"
      ]
    },
    "4979": {
      "op": "mulw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0"
      ]
    },
    "4980": {
      "op": "intc_0 // 0",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "0"
      ]
    },
    "4981": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4983": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4984": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hR#0",
        "lR#0",
        "maybe_value%4#0"
      ]
    },
    "4985": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "ratio_bps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "ratio_bps#0"
      ]
    },
    "4986": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "ratio_bps#0",
        "10000"
      ]
    },
    "4987": {
      "op": "-",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumRateBps#0"
      ]
    },
    "4988": {
      "op": "frame_bury 12",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "4990": {
      "block": "buyoutSplitAlgo_after_if_else@2",
      "stack_in": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "collateralUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralUSD#0"
      ]
    },
    "4992": {
      "op": "frame_dig 12",
      "defined_out": [
        "collateralUSD#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralUSD#0",
        "premiumRateBps#0"
      ]
    },
    "4994": {
      "op": "mulw",
      "defined_out": [
        "collateralUSD#0",
        "hP#0",
        "lP#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hP#0",
        "lP#0"
      ]
    },
    "4995": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralUSD#0",
        "hP#0",
        "lP#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hP#0",
        "lP#0",
        "10000"
      ]
    },
    "4996": {
      "op": "divw",
      "defined_out": [
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ]
    },
    "4997": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "4998": {
      "op": "bytec 16 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "5000": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralUSD#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5001": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%5#0"
      ]
    },
    "5002": {
      "op": "btoi",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenId#0"
      ]
    },
    "5003": {
      "op": "frame_bury 0",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ]
    },
    "5005": {
      "op": "intc_0 // 0",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "5006": {
      "op": "bytec 16 // \"buyout_token_id\"",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "5008": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralUSD#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "5009": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "maybe_value%6#0"
      ]
    },
    "5010": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5013": {
      "op": "dup",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5014": {
      "op": "frame_bury 1",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5016": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0"
      ]
    },
    "5017": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "premiumRateBps#0",
        "premiumUSD#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0",
        "1000000"
      ]
    },
    "5019": {
      "op": "mulw",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0"
      ]
    },
    "5020": {
      "op": "frame_bury 3",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0",
        "hPT#0"
      ]
    },
    "5022": {
      "op": "frame_bury 2",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5024": {
      "op": "bnz buyoutSplitAlgo_ternary_false@4",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5027": {
      "op": "intc_0 // 0",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5028": {
      "op": "frame_bury 4",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralUSD#0",
        "hPT#0",
        "lPT#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5030": {
      "block": "buyoutSplitAlgo_ternary_merge@5",
      "stack_in": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "premiumAxferTxn#0 (copy)"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5032": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%9#0"
      ]
    },
    "5034": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%9#0",
        "buyer#0 (copy)"
      ]
    },
    "5036": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%10#0"
      ]
    },
    "5037": {
      "op": "bz buyoutSplitAlgo_bool_false@10",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5040": {
      "op": "frame_dig -3",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5042": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%11#0"
      ]
    },
    "5044": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "5046": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%13#0"
      ]
    },
    "5047": {
      "op": "bz buyoutSplitAlgo_bool_false@10",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5050": {
      "op": "frame_dig -3",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5052": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%14#0"
      ]
    },
    "5054": {
      "op": "frame_dig 0",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%14#0",
        "buyoutTokenId#0"
      ]
    },
    "5056": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%15#0"
      ]
    },
    "5057": {
      "op": "bz buyoutSplitAlgo_bool_false@10",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5060": {
      "op": "frame_dig -3",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5062": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "buyoutTokenId#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%16#0"
      ]
    },
    "5064": {
      "op": "frame_dig 4",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%16#0",
        "premiumTokens#0"
      ]
    },
    "5066": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%17#0"
      ]
    },
    "5067": {
      "op": "bz buyoutSplitAlgo_bool_false@10",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5070": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ]
    },
    "5071": {
      "block": "buyoutSplitAlgo_bool_merge@11",
      "stack_in": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5072": {
      "op": "frame_dig -2",
      "defined_out": [
        "repayPayTxn#0 (copy)"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayPayTxn#0 (copy)"
      ]
    },
    "5074": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%18#0"
      ]
    },
    "5076": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "tmp%18#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%18#0",
        "buyer#0 (copy)"
      ]
    },
    "5078": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%19#0"
      ]
    },
    "5079": {
      "op": "bz buyoutSplitAlgo_bool_false@15",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5082": {
      "op": "frame_dig -2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayPayTxn#0 (copy)"
      ]
    },
    "5084": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%20#0"
      ]
    },
    "5086": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "5088": {
      "op": "==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%22#0"
      ]
    },
    "5089": {
      "op": "bz buyoutSplitAlgo_bool_false@15",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5092": {
      "op": "frame_dig -2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "repayPayTxn#0 (copy)"
      ]
    },
    "5094": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%23#0"
      ]
    },
    "5096": {
      "op": "frame_dig 9",
      "defined_out": [
        "debtBase#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%23#0",
        "debtBase#0"
      ]
    },
    "5098": {
      "op": "==",
      "defined_out": [
        "debtBase#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%24#0"
      ]
    },
    "5099": {
      "op": "bz buyoutSplitAlgo_bool_false@15",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5102": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "debtBase#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%1#0"
      ]
    },
    "5103": {
      "block": "buyoutSplitAlgo_bool_merge@16",
      "stack_in": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5104": {
      "op": "frame_dig 5",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%0#0"
      ]
    },
    "5106": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "{box_del}"
      ]
    },
    "5107": {
      "op": "pop",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5108": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0"
      ]
    },
    "5109": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "5111": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "5112": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%7#0"
      ]
    },
    "5113": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%7#0",
        "1"
      ]
    },
    "5114": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%0#0"
      ]
    },
    "5115": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "5117": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "5118": {
      "op": "app_global_put",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5119": {
      "op": "itxn_begin"
    },
    "5120": {
      "op": "frame_dig 6",
      "defined_out": [
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "rec#0"
      ]
    },
    "5122": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "rec#0",
        "32"
      ]
    },
    "5124": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5125": {
      "op": "frame_dig 7",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "5127": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "5128": {
      "op": "cover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5130": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5132": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5134": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "buyer#0 (copy)"
      ]
    },
    "5136": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5138": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "5140": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5142": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "1000"
      ]
    },
    "5143": {
      "op": "itxn_field Fee",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0"
      ]
    },
    "5145": {
      "op": "itxn_submit"
    },
    "5146": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "\"accepted_collaterals\""
      ]
    },
    "5148": {
      "op": "frame_dig 8",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5150": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%26#0"
      ]
    },
    "5151": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ]
    },
    "5152": {
      "op": "box_get",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%8#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%26#0",
        "acVal#0",
        "maybe_exists%8#0"
      ]
    },
    "5153": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%26#0",
        "acVal#0"
      ]
    },
    "5154": {
      "op": "dup",
      "defined_out": [
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%26#0",
        "acVal#0",
        "acVal#0 (copy)"
      ]
    },
    "5155": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%26#0",
        "acVal#0",
        "acVal#0 (copy)",
        "24"
      ]
    },
    "5157": {
      "op": "extract_uint64",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "collateralAmount#0",
        "tmp%26#0",
        "acVal#0",
        "tmp%28#0"
      ]
    },
    "5158": {
      "op": "uncover 3",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "tmp%28#0",
        "collateralAmount#0"
      ]
    },
    "5160": {
      "op": "-",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "updatedTotal#0"
      ]
    },
    "5161": {
      "op": "dig 1",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "updatedTotal#0",
        "acVal#0 (copy)"
      ]
    },
    "5163": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%29#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%29#0"
      ]
    },
    "5166": {
      "op": "dig 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%29#0",
        "acVal#0 (copy)"
      ]
    },
    "5168": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%29#0",
        "tmp%30#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "5171": {
      "op": "uncover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "tmp%29#0",
        "tmp%30#0",
        "updatedTotal#0"
      ]
    },
    "5173": {
      "op": "itob",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0"
      ]
    },
    "5174": {
      "op": "dig 3",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0",
        "acVal#0 (copy)"
      ]
    },
    "5176": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "acVal#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0",
        "tmp%31#0"
      ]
    },
    "5179": {
      "op": "uncover 4",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0",
        "tmp%31#0",
        "acVal#0"
      ]
    },
    "5181": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "5184": {
      "op": "uncover 4",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "tmp%30#0",
        "val_as_bytes%0#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%29#0"
      ]
    },
    "5186": {
      "op": "uncover 4",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "5188": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%4#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "5189": {
      "op": "uncover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%32#0",
        "encoded_tuple_buffer%4#0",
        "tmp%31#0"
      ]
    },
    "5191": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%5#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%32#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%32#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "5192": {
      "op": "uncover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "tmp%32#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "5194": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%6#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "tmp%32#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "5195": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "encoded_tuple_buffer%6#0",
        "tmp%32#0"
      ]
    },
    "5196": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%7#0",
        "rec#0",
        "tmp%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "tmp%26#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "5197": {
      "op": "box_put",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5198": {
      "op": "intc_0 // 0",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0"
      ]
    },
    "5199": {
      "op": "bytec_3 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "5200": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "5201": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%9#0"
      ]
    },
    "5202": {
      "op": "frame_dig 9",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "maybe_value%9#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%9#0",
        "debtBase#0"
      ]
    },
    "5204": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)",
        "maybe_value%9#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "maybe_value%9#0",
        "debtBase#0 (copy)",
        "debtBase#0 (copy)"
      ]
    },
    "5205": {
      "op": "cover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0",
        "maybe_value%9#0",
        "debtBase#0 (copy)"
      ]
    },
    "5207": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0",
        "new_state_value%1#0"
      ]
    },
    "5208": {
      "op": "bytec_3 // \"total_borrows\"",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0",
        "new_state_value%1#0",
        "\"total_borrows\""
      ]
    },
    "5209": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0",
        "\"total_borrows\"",
        "new_state_value%1#0"
      ]
    },
    "5210": {
      "op": "app_global_put",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtBase#0"
      ]
    },
    "5211": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5214": {
      "op": "frame_dig 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5216": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)"
      ]
    },
    "5217": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "premiumTokens#0 (copy)",
        "2"
      ]
    },
    "5219": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0"
      ]
    },
    "5220": {
      "op": "itxn_begin"
    },
    "5221": {
      "op": "intc_0 // 0",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "0"
      ]
    },
    "5222": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "0",
        "\"admin_account\""
      ]
    },
    "5224": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "5225": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1"
      ]
    },
    "5226": {
      "op": "dig 1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "halfPremium#0 (copy)",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "halfPremium#0 (copy)"
      ]
    },
    "5228": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1"
      ]
    },
    "5230": {
      "op": "frame_dig 0",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "buyoutTokenId#0"
      ]
    },
    "5232": {
      "op": "dup",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenId#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "buyoutTokenId#0 (copy)",
        "buyoutTokenId#0 (copy)"
      ]
    },
    "5233": {
      "op": "cover 3",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "maybe_value%0#1",
        "buyoutTokenId#0 (copy)"
      ]
    },
    "5235": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "maybe_value%0#1"
      ]
    },
    "5237": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0"
      ]
    },
    "5239": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "4"
      ]
    },
    "5241": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0"
      ]
    },
    "5243": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "1000"
      ]
    },
    "5244": {
      "op": "itxn_field Fee",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "halfPremium#0"
      ]
    },
    "5246": {
      "op": "itxn_submit"
    },
    "5247": {
      "op": "itxn_begin"
    },
    "5248": {
      "op": "uncover 2",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenId#0",
        "halfPremium#0",
        "premiumTokens#0"
      ]
    },
    "5250": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "halfPremium#0"
      ]
    },
    "5251": {
      "op": "-",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "inner_txn_params%1%%param_AssetAmount_idx_0#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenId#0",
        "inner_txn_params%1%%param_AssetAmount_idx_0#0"
      ]
    },
    "5252": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "buyoutTokenId#0"
      ]
    },
    "5254": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5256": {
      "op": "frame_dig -4",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtor#0 (copy)",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "debtor#0 (copy)"
      ]
    },
    "5258": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5260": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "4"
      ]
    },
    "5262": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5264": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "1000"
      ]
    },
    "5265": {
      "op": "itxn_field Fee",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5267": {
      "op": "itxn_submit"
    },
    "5268": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%2#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%2#0"
      ]
    },
    "5271": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%2#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "5273": {
      "op": "swap",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "5274": {
      "op": "app_global_put",
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5275": {
      "retsub": true,
      "op": "retsub"
    },
    "5276": {
      "block": "buyoutSplitAlgo_bool_false@15",
      "stack_in": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%1#0"
      ]
    },
    "5277": {
      "op": "b buyoutSplitAlgo_bool_merge@16"
    },
    "5280": {
      "block": "buyoutSplitAlgo_bool_false@10",
      "stack_in": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "and_result%0#0"
      ]
    },
    "5281": {
      "op": "b buyoutSplitAlgo_bool_merge@11"
    },
    "5284": {
      "block": "buyoutSplitAlgo_ternary_false@4",
      "stack_in": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "hPT#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0"
      ]
    },
    "5286": {
      "op": "frame_dig 3",
      "defined_out": [
        "hPT#0",
        "lPT#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0",
        "lPT#0"
      ]
    },
    "5288": {
      "op": "frame_dig 1",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "hPT#0",
        "lPT#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5290": {
      "op": "divw",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0",
        "premiumTokens#0"
      ]
    },
    "5291": {
      "op": "frame_bury 4",
      "defined_out": [
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0"
      ],
      "stack_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0",
        "premiumTokens#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "premiumRateBps#0"
      ]
    },
    "5293": {
      "op": "b buyoutSplitAlgo_ternary_merge@5"
    },
    "5296": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "params": {
        "debtBaseUnits#0": "uint64"
      },
      "block": "debtUSD",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "5299": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5300": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "5301": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5302": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "5303": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenPrice#0"
      ],
      "stack_out": [
        "baseTokenPrice#0"
      ]
    },
    "5306": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenPrice#0",
        "debtBaseUnits#0 (copy)"
      ],
      "stack_out": [
        "baseTokenPrice#0",
        "debtBaseUnits#0 (copy)"
      ]
    },
    "5308": {
      "op": "mulw",
      "defined_out": [
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "h#0",
        "l#0"
      ]
    },
    "5309": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "h#0",
        "l#0",
        "1000000"
      ]
    },
    "5311": {
      "op": "divw",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5312": {
      "retsub": true,
      "op": "retsub"
    },
    "5313": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLST",
      "params": {
        "lstAppId#0": "uint64"
      },
      "block": "maxWithdrawableCollateralLST",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "5316": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0"
      ]
    },
    "5317": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ]
    },
    "5319": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5320": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\""
      ]
    },
    "5322": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\"",
        "tmp%0#0"
      ]
    },
    "5324": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%1#0"
      ]
    },
    "5325": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5326": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_exists%0#0"
      ]
    },
    "5328": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5329": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0"
      ]
    },
    "5330": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5332": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5333": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%1#0"
      ]
    },
    "5334": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%2#0"
      ]
    },
    "5335": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%2#0",
        "1"
      ]
    },
    "5336": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%3#0"
      ]
    },
    "5337": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5338": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "{accrueMarket}"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "{accrueMarket}"
      ]
    },
    "5341": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5342": {
      "op": "bytec 6 // \"loan_record\"",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\""
      ]
    },
    "5344": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\"",
        "tmp%4#0"
      ]
    },
    "5346": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%5#0"
      ]
    },
    "5347": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "5348": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0"
      ]
    },
    "5349": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5350": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5353": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "5355": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5356": {
      "op": "concat",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%0#1"
      ]
    },
    "5357": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "collateralTokenId#0",
        "maybe_exists%0#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "5358": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0"
      ]
    },
    "5359": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateral#0",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "collateral#0",
        "32"
      ]
    },
    "5361": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%8#0"
      ]
    },
    "5362": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#0",
        "lstAppId#0 (copy)",
        "rec#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%8#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5364": {
      "op": "==",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "tmp%9#0"
      ]
    },
    "5365": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0"
      ]
    },
    "5366": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5369": {
      "op": "swap",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5370": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5371": {
      "op": "cover 2",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5373": {
      "op": "bnz maxWithdrawableCollateralLST_after_if_else@2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5376": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "40"
      ]
    },
    "5378": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "debtBase#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "tmp%12#0"
      ]
    },
    "5379": {
      "op": "frame_bury 0"
    },
    "5381": {
      "retsub": true,
      "op": "retsub"
    },
    "5382": {
      "block": "maxWithdrawableCollateralLST_after_if_else@2",
      "stack_in": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ],
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5383": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5386": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5387": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5389": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0"
      ]
    },
    "5391": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0",
        "40"
      ]
    },
    "5393": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "tmp%15#0"
      ]
    },
    "5394": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#0",
        "lstAppId#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "tmp%15#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5396": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5399": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "currCollatUSD#0"
      ]
    },
    "5400": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5402": {
      "op": "frame_dig 3",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtBase#0"
      ]
    },
    "5404": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0"
      ]
    },
    "5407": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0",
        "10000"
      ]
    },
    "5408": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0"
      ]
    },
    "5409": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0"
      ]
    },
    "5410": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "5412": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5413": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0"
      ]
    },
    "5414": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5415": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5416": {
      "op": "frame_bury 2",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5418": {
      "op": "<=",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "tmp%16#0"
      ]
    },
    "5419": {
      "op": "bz maxWithdrawableCollateralLST_after_if_else@4",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0"
      ]
    },
    "5422": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "0"
      ]
    },
    "5423": {
      "op": "frame_bury 0"
    },
    "5425": {
      "retsub": true,
      "op": "retsub"
    },
    "5426": {
      "block": "maxWithdrawableCollateralLST_after_if_else@4",
      "stack_in": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5428": {
      "op": "frame_dig 2",
      "defined_out": [
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5430": {
      "op": "-",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5431": {
      "op": "itxn_begin"
    },
    "5432": {
      "op": "bytec 18 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "5434": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5436": {
      "op": "frame_dig -1",
      "defined_out": [
        "currCollatUSD#0",
        "lstAppId#0 (copy)",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5438": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5440": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "appl"
      ]
    },
    "5442": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5444": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "1000"
      ]
    },
    "5445": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5447": {
      "op": "itxn_submit"
    },
    "5448": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0"
      ]
    },
    "5450": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5451": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "tmp%17#0"
      ]
    },
    "5454": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "awst_tmp%0#0"
      ]
    },
    "5455": {
      "op": "extract 0 4",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "5458": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "5459": {
      "op": "==",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "5460": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%17#0"
      ]
    },
    "5461": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5462": {
      "op": "itxn_begin"
    },
    "5463": {
      "op": "bytec 19 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "5465": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5467": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5469": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5471": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "appl"
      ]
    },
    "5473": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5475": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "1000"
      ]
    },
    "5476": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5478": {
      "op": "itxn_submit"
    },
    "5479": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0"
      ]
    },
    "5481": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "5482": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "tmp%21#0"
      ]
    },
    "5485": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "awst_tmp%1#0"
      ]
    },
    "5486": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "5489": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "tmp%22#0",
        "0x151f7c75"
      ]
    },
    "5490": {
      "op": "==",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "5491": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%21#0"
      ]
    },
    "5492": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0"
      ]
    },
    "5493": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\""
      ]
    },
    "5495": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5497": {
      "op": "concat",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%0#1",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%0#1"
      ]
    },
    "5498": {
      "op": "box_get",
      "defined_out": [
        "ac#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "maybe_exists%0#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0",
        "maybe_exists%0#0"
      ]
    },
    "5499": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0"
      ]
    },
    "5500": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%26#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%26#0"
      ]
    },
    "5503": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0"
      ]
    },
    "5506": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0"
      ]
    },
    "5508": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0",
        "1000000"
      ]
    },
    "5510": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "hU#0",
        "lU#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "hU#0",
        "lU#0"
      ]
    },
    "5511": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "hU#0",
        "lU#0",
        "basePrice#0"
      ]
    },
    "5513": {
      "op": "divw",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUnderlying#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "removableUnderlying#0"
      ]
    },
    "5514": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "totalDeposits#0",
        "removableUnderlying#0",
        "circulatingLST#0"
      ]
    },
    "5516": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "hL#0",
        "lL#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "totalDeposits#0",
        "hL#0",
        "lL#0"
      ]
    },
    "5517": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "hL#0",
        "lL#0",
        "totalDeposits#0"
      ]
    },
    "5519": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableLST#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableLST#0"
      ]
    },
    "5520": {
      "op": "frame_bury 0"
    },
    "5522": {
      "retsub": true,
      "op": "retsub"
    },
    "5523": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawCollateral",
      "params": {
        "amountLST#0": "uint64",
        "collateralTokenId#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "withdrawCollateral",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "5526": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1"
      ]
    },
    "5527": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ]
    },
    "5529": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5530": {
      "op": "frame_dig -3",
      "defined_out": [
        "amountLST#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "amountLST#0 (copy)"
      ]
    },
    "5532": {
      "error": "ZERO_AMOUNT",
      "op": "assert // ZERO_AMOUNT",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5533": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0"
      ]
    },
    "5534": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5536": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5537": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%0#0"
      ]
    },
    "5538": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%1#0"
      ]
    },
    "5539": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%1#0",
        "1"
      ]
    },
    "5540": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%2#0"
      ]
    },
    "5541": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5542": {
      "op": "txn Sender"
    },
    "5544": {
      "op": "bytec 6 // \"loan_record\""
    },
    "5546": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "\"loan_record\"",
        "borrower#0"
      ]
    },
    "5548": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0"
      ]
    },
    "5549": {
      "op": "dupn 2",
      "defined_out": [
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5551": {
      "op": "box_len",
      "defined_out": [
        "borrower#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5552": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_exists%1#0"
      ]
    },
    "5554": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "5555": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "borrower#0",
        "tmp%3#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "{accrueMarket}"
      ]
    },
    "5558": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "5559": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5560": {
      "op": "box_get",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "loan#0",
        "maybe_exists%2#0"
      ]
    },
    "5561": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_exists%2#0",
        "loan#0"
      ]
    },
    "5562": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "maybe_exists%2#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "5563": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "tmp%3#0",
        "loan#0",
        "maybe_exists%2#0",
        "loan#0"
      ]
    },
    "5565": {
      "op": "cover 3",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0",
        "maybe_exists%2#0"
      ]
    },
    "5567": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0"
      ]
    },
    "5568": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "loan#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "5569": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0"
      ]
    },
    "5572": {
      "op": "cover 2",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "loan#0"
      ]
    },
    "5574": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "loan#0",
        "32"
      ]
    },
    "5576": {
      "op": "extract_uint64",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "5577": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrower#0",
        "collateralTokenId#0 (copy)",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "tmp%6#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5579": {
      "op": "==",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "tmp%7#0"
      ]
    },
    "5580": {
      "error": "WRONG_COLLATERAL",
      "op": "assert // WRONG_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0"
      ]
    },
    "5581": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5583": {
      "op": "itob",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "acKey#0"
      ]
    },
    "5584": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "tmp%3#0",
        "acKey#0",
        "acKey#0"
      ]
    },
    "5585": {
      "op": "cover 2",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acKey#0"
      ]
    },
    "5587": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acKey#0",
        "\"accepted_collaterals\""
      ]
    },
    "5589": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "\"accepted_collaterals\"",
        "acKey#0"
      ]
    },
    "5590": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0"
      ]
    },
    "5591": {
      "op": "dup",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "5592": {
      "op": "box_len",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5593": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0",
        "maybe_exists%3#0"
      ]
    },
    "5595": {
      "error": "BAD_COLLATERAL",
      "op": "assert // BAD_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%8#0"
      ]
    },
    "5596": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "acVal#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%4#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acVal#0",
        "maybe_exists%4#0"
      ]
    },
    "5597": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acVal#0"
      ]
    },
    "5598": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "acVal#0",
        "32"
      ]
    },
    "5600": {
      "op": "extract_uint64",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%11#0"
      ]
    },
    "5601": {
      "op": "frame_dig -1",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "lstAppId#0 (copy)",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%11#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5603": {
      "op": "==",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%12#0"
      ]
    },
    "5604": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5605": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "5606": {
      "op": "box_len",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "5607": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_exists%0#0"
      ]
    },
    "5609": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5610": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "0"
      ]
    },
    "5611": {
      "op": "bytec 5 // \"contract_state\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "0",
        "\"contract_state\""
      ]
    },
    "5613": {
      "op": "app_global_get_ex",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%1#0",
        "maybe_value%1#1",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "5614": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "maybe_value%1#1"
      ]
    },
    "5615": {
      "op": "btoi",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%1#0"
      ]
    },
    "5616": {
      "op": "intc_1 // 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%1#0",
        "1"
      ]
    },
    "5617": {
      "op": "==",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "5618": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5619": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0",
        "{accrueMarket}"
      ]
    },
    "5622": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "tmp%3#0"
      ]
    },
    "5623": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "maybe_exists%2#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "5624": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0"
      ]
    },
    "5625": {
      "op": "dup",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5626": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "5629": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateralTokenId#1",
        "\"accepted_collaterals\""
      ]
    },
    "5631": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#1"
      ]
    },
    "5632": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "loan#0",
        "rec#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%0#0"
      ]
    },
    "5633": {
      "op": "box_get",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateral#0",
        "collateralTokenId#1",
        "loan#0",
        "maybe_exists%0#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "5634": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateral#0"
      ]
    },
    "5635": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "collateral#0",
        "32"
      ]
    },
    "5637": {
      "op": "extract_uint64",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%6#0"
      ]
    },
    "5638": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%6#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5640": {
      "op": "==",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "tmp%7#0"
      ]
    },
    "5641": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0"
      ]
    },
    "5642": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5645": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5646": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "rec#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5647": {
      "op": "cover 2",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5649": {
      "op": "bnz withdrawCollateral_after_if_else@4",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5652": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "40"
      ]
    },
    "5654": {
      "op": "extract_uint64",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "collateralTokenId#1",
        "debtBase#0",
        "loan#0",
        "maxSafe#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "5655": {
      "block": "withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "amountLST#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0",
        "amountLST#0 (copy)"
      ]
    },
    "5657": {
      "op": ">=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%13#0"
      ]
    },
    "5658": {
      "error": "EXCEEDS_MAX_SAFE",
      "op": "assert // EXCEEDS_MAX_SAFE",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "5659": {
      "op": "frame_dig 5",
      "defined_out": [
        "loan#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0"
      ]
    },
    "5661": {
      "op": "dup",
      "defined_out": [
        "loan#0",
        "loan#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "5662": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "loan#0",
        "loan#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "loan#0 (copy)",
        "40"
      ]
    },
    "5664": {
      "op": "extract_uint64",
      "defined_out": [
        "loan#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0"
      ]
    },
    "5665": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "amountLST#0 (copy)"
      ]
    },
    "5667": {
      "op": "dig 1",
      "defined_out": [
        "amountLST#0 (copy)",
        "loan#0",
        "tmp%15#0",
        "tmp%15#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "amountLST#0 (copy)",
        "tmp%15#0 (copy)"
      ]
    },
    "5669": {
      "op": "<",
      "defined_out": [
        "loan#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "5670": {
      "error": "INSUFFICIENT_COLLATERAL",
      "op": "assert // INSUFFICIENT_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0"
      ]
    },
    "5671": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "tmp%15#0",
        "amountLST#0 (copy)"
      ]
    },
    "5673": {
      "op": "-",
      "defined_out": [
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5674": {
      "op": "itxn_begin"
    },
    "5675": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "amountLST#0 (copy)"
      ]
    },
    "5677": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5679": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5681": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5683": {
      "op": "frame_dig 3",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "borrower#0"
      ]
    },
    "5685": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "borrower#0 (copy)",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "borrower#0 (copy)",
        "borrower#0 (copy)"
      ]
    },
    "5686": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "borrower#0 (copy)"
      ]
    },
    "5688": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5690": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "4"
      ]
    },
    "5692": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5694": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "1000"
      ]
    },
    "5695": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5697": {
      "op": "itxn_submit"
    },
    "5698": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0"
      ]
    },
    "5699": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "5700": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0",
        "loan#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "5701": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5702": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0"
      ]
    },
    "5703": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "amountLST#0 (copy)"
      ]
    },
    "5705": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%3#0"
      ]
    },
    "5706": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "to_encode%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%3#0",
        "to_encode%0#0"
      ]
    },
    "5708": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "5709": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "5710": {
      "op": "pushbytes 0x03",
      "defined_out": [
        "0x03",
        "borrower#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0",
        "0x03"
      ]
    },
    "5713": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%4#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "5714": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%4#0"
      ]
    },
    "5715": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "5716": {
      "op": "dig 4",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "loan#0 (copy)"
      ]
    },
    "5718": {
      "error": "Index access is out of bounds",
      "op": "extract 73 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0"
      ]
    },
    "5721": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "loan#0"
      ]
    },
    "5723": {
      "error": "Index access is out of bounds",
      "op": "extract 81 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "borrower#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "5726": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "borrower#0"
      ]
    },
    "5728": {
      "op": "frame_dig 7",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "borrower#0",
        "acKey#0"
      ]
    },
    "5730": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%8#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "val_as_bytes%2#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "5731": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%2#0"
      ]
    },
    "5733": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%5#0",
        "encoded_tuple_buffer%9#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "5734": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%9#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "5736": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%10#0",
        "loan#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maybe_value%5#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "5737": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%10#0",
        "maybe_value%5#0"
      ]
    },
    "5739": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0",
        "loan#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%19#0",
        "tmp%20#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "5740": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%20#0",
        "encoded_tuple_buffer%11#0",
        "tmp%19#0"
      ]
    },
    "5742": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "encoded_tuple_buffer%12#0",
        "loan#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%20#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "5743": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "encoded_tuple_buffer%12#0",
        "tmp%20#0"
      ]
    },
    "5744": {
      "op": "concat",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "newRec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "newRec#0"
      ]
    },
    "5745": {
      "op": "frame_dig 4",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "newRec#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "newRec#0",
        "tmp%3#0"
      ]
    },
    "5747": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%3#0",
        "newRec#0"
      ]
    },
    "5748": {
      "op": "box_put",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "5749": {
      "op": "frame_dig 6",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%5#0"
      ]
    },
    "5751": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%5#0",
        "amountLST#0 (copy)"
      ]
    },
    "5753": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "5756": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "acKey#0",
        "borrower#0",
        "loan#0",
        "new_state_value%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "new_state_value%0#0"
      ]
    },
    "5759": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "acKey#0",
        "borrower#0",
        "loan#0",
        "new_state_value%0#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "new_state_value%0#0",
        "\"last_apr_bps\""
      ]
    },
    "5761": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ]
    },
    "5762": {
      "op": "app_global_put",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "5763": {
      "retsub": true,
      "op": "retsub"
    },
    "5764": {
      "block": "withdrawCollateral_after_if_else@4",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0"
      ],
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5765": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "5768": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#1",
        "collateralTokenId#1 (copy)"
      ]
    },
    "5769": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "5771": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0"
      ]
    },
    "5773": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0",
        "40"
      ]
    },
    "5775": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#1",
        "tmp%13#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "tmp%13#1"
      ]
    },
    "5776": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#1",
        "lstAppId#0 (copy)",
        "tmp%13#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "collateralTokenId#1",
        "tmp%13#1",
        "lstAppId#0 (copy)"
      ]
    },
    "5778": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5781": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "currCollatUSD#0"
      ]
    },
    "5782": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5784": {
      "op": "frame_dig 8",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtBase#0"
      ]
    },
    "5786": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0"
      ]
    },
    "5789": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0",
        "10000"
      ]
    },
    "5790": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0"
      ]
    },
    "5791": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0"
      ]
    },
    "5792": {
      "op": "bytec 28 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "5794": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5795": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%3#0"
      ]
    },
    "5796": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5797": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5798": {
      "op": "frame_bury 2",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5800": {
      "op": "<=",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0",
        "tmp%14#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "tmp%14#1"
      ]
    },
    "5801": {
      "op": "bz withdrawCollateral_after_if_else@6",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ]
    },
    "5804": {
      "op": "intc_0 // 0",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "maxSafe#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "5805": {
      "op": "b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7"
    },
    "5808": {
      "block": "withdrawCollateral_after_if_else@6",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5810": {
      "op": "frame_dig 2",
      "defined_out": [
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5812": {
      "op": "-",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5813": {
      "op": "itxn_begin"
    },
    "5814": {
      "op": "bytec 18 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "5816": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5818": {
      "op": "frame_dig -1",
      "defined_out": [
        "currCollatUSD#0",
        "lstAppId#0 (copy)",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5820": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5822": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "appl"
      ]
    },
    "5824": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5826": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "1000"
      ]
    },
    "5827": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5829": {
      "op": "itxn_submit"
    },
    "5830": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0"
      ]
    },
    "5832": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5833": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "tmp%15#1"
      ]
    },
    "5836": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "awst_tmp%0#0"
      ]
    },
    "5837": {
      "op": "extract 0 4",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1",
        "tmp%16#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "tmp%16#1"
      ]
    },
    "5840": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1",
        "tmp%16#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "tmp%16#1",
        "0x151f7c75"
      ]
    },
    "5841": {
      "op": "==",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#1",
        "tmp%17#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1",
        "tmp%17#1"
      ]
    },
    "5842": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%15#1"
      ]
    },
    "5843": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5844": {
      "op": "itxn_begin"
    },
    "5845": {
      "op": "bytec 19 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "5847": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5849": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5851": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5853": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "appl"
      ]
    },
    "5855": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5857": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "1000"
      ]
    },
    "5858": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5860": {
      "op": "itxn_submit"
    },
    "5861": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0"
      ]
    },
    "5863": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "5864": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ]
    },
    "5867": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "awst_tmp%1#0"
      ]
    },
    "5868": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "5871": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "5872": {
      "op": "==",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%19#0",
        "tmp%21#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0",
        "tmp%21#1"
      ]
    },
    "5873": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%19#0"
      ]
    },
    "5874": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0"
      ]
    },
    "5875": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\""
      ]
    },
    "5877": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#1"
      ]
    },
    "5879": {
      "op": "concat",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%0#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%0#0"
      ]
    },
    "5880": {
      "op": "box_get",
      "defined_out": [
        "ac#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "maybe_exists%0#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0",
        "maybe_exists%0#0"
      ]
    },
    "5881": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0"
      ]
    },
    "5882": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%24#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%24#0"
      ]
    },
    "5885": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0"
      ]
    },
    "5888": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0"
      ]
    },
    "5890": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0",
        "1000000"
      ]
    },
    "5892": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "hU#0",
        "lU#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "hU#0",
        "lU#0"
      ]
    },
    "5893": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "hU#0",
        "lU#0",
        "basePrice#0"
      ]
    },
    "5895": {
      "op": "divw",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUnderlying#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "removableUnderlying#0"
      ]
    },
    "5896": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "totalDeposits#0",
        "removableUnderlying#0",
        "circulatingLST#0"
      ]
    },
    "5898": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "hL#0",
        "lL#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "totalDeposits#0",
        "hL#0",
        "lL#0"
      ]
    },
    "5899": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "hL#0",
        "lL#0",
        "totalDeposits#0"
      ]
    },
    "5901": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "maxSafe#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%3#0",
        "loan#0",
        "tmp%5#0",
        "acKey#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "5902": {
      "op": "b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7"
    },
    "5905": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST",
      "params": {},
      "block": "getCirculatingLST",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5906": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "5908": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5909": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "5910": {
      "retsub": true,
      "op": "retsub"
    },
    "5911": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits",
      "params": {},
      "block": "getTotalDeposits",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5912": {
      "op": "bytec_2 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "5913": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5914": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "5915": {
      "retsub": true,
      "op": "retsub"
    },
    "5916": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "params": {},
      "block": "getAcceptedCollateralsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5917": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "5919": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5920": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "5921": {
      "retsub": true,
      "op": "retsub"
    },
    "5922": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidatePartialAlgo",
      "params": {
        "debtor#0": "bytes",
        "repayPay#0": "uint64",
        "repayBaseAmount#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "liquidatePartialAlgo",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "5925": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "basePrice#0"
      ]
    },
    "5927": {
      "op": "dupn 7",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ]
    },
    "5929": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "0"
      ]
    },
    "5930": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "0",
        "\"base_token_id\""
      ]
    },
    "5931": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5932": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "maybe_value%0#0"
      ]
    },
    "5933": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%0#0"
      ]
    },
    "5934": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%1#0"
      ]
    },
    "5935": {
      "error": "BASE_NOT_ALGO",
      "op": "assert // BASE_NOT_ALGO",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ]
    },
    "5936": {
      "op": "intc_0 // 0",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "0"
      ]
    },
    "5937": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "0",
        "\"contract_state\""
      ]
    },
    "5939": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5940": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "maybe_value%1#0"
      ]
    },
    "5941": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%2#0"
      ]
    },
    "5942": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%2#0",
        "1"
      ]
    },
    "5943": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%3#0"
      ]
    },
    "5944": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ]
    },
    "5945": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "\"loan_record\""
      ]
    },
    "5947": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "5949": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0"
      ]
    },
    "5950": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5952": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "tmp%4#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5953": {
      "op": "bury 1",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "tmp%4#0",
        "maybe_exists%2#0"
      ]
    },
    "5955": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "5956": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "tmp%4#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "tmp%4#0",
        "{accrueMarket}"
      ]
    },
    "5959": {
      "op": "pop",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "5960": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "rec#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "maybe_exists%3#0"
      ]
    },
    "5961": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "maybe_exists%3#0",
        "rec#0"
      ]
    },
    "5962": {
      "op": "dup",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "maybe_exists%3#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5963": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%3#0",
        "rec#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "rec#0",
        "maybe_exists%3#0"
      ]
    },
    "5965": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "rec#0"
      ]
    },
    "5966": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5967": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collTok#0",
        "rec#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "rec#0",
        "collTok#0"
      ]
    },
    "5970": {
      "op": "swap",
      "defined_out": [
        "collTok#0",
        "rec#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "rec#0"
      ]
    },
    "5971": {
      "op": "dup",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5972": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "rec#0 (copy)",
        "40"
      ]
    },
    "5974": {
      "op": "extract_uint64",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "rec#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "rec#0",
        "collLSTBal#0"
      ]
    },
    "5975": {
      "op": "swap",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "rec#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#0"
      ]
    },
    "5976": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "liveDebt#0",
        "rec#1"
      ]
    },
    "5979": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "5980": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "5981": {
      "error": "NO_DEBT",
      "op": "assert // NO_DEBT",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "5982": {
      "op": "frame_dig -2",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "repayBaseAmount#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "5984": {
      "op": "bz liquidatePartialAlgo_bool_false@3",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "5987": {
      "op": "frame_dig -2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "5989": {
      "op": "frame_dig 13",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "liveDebt#0"
      ]
    },
    "5991": {
      "op": "<=",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%9#0"
      ]
    },
    "5992": {
      "op": "bz liquidatePartialAlgo_bool_false@3",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "5995": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "rec#0",
        "rec#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ]
    },
    "5996": {
      "block": "liquidatePartialAlgo_bool_merge@4",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ],
      "error": "BAD_REPAY",
      "op": "assert // BAD_REPAY",
      "defined_out": [],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "5997": {
      "op": "frame_dig 10",
      "defined_out": [
        "collTok#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0"
      ]
    },
    "5999": {
      "op": "frame_dig 11",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "collLSTBal#0"
      ]
    },
    "6001": {
      "op": "frame_dig -1",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "collLSTBal#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6003": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0"
      ]
    },
    "6006": {
      "op": "frame_dig 13",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "liveDebt#0"
      ]
    },
    "6008": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "6011": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)"
      ]
    },
    "6012": {
      "error": "BAD_DEBT_USD",
      "op": "assert // BAD_DEBT_USD",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "6013": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "collateralUSD#0"
      ]
    },
    "6014": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collLSTBal#0",
        "collTok#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "collateralUSD#0",
        "10000"
      ]
    },
    "6015": {
      "op": "mulw",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0"
      ]
    },
    "6016": {
      "op": "uncover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hCR#0",
        "lCR#0",
        "debtUSDv#0"
      ]
    },
    "6018": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0"
      ]
    },
    "6019": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "0"
      ]
    },
    "6020": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "6022": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "6023": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "CR_bps#0",
        "maybe_value%4#0"
      ]
    },
    "6024": {
      "op": "<=",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%11#0"
      ]
    },
    "6025": {
      "error": "NOT_LIQUIDATABLE",
      "op": "assert // NOT_LIQUIDATABLE",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6026": {
      "op": "frame_dig -3",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "repayPay#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayPay#0 (copy)"
      ]
    },
    "6028": {
      "op": "gtxns Sender",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%12#0"
      ]
    },
    "6030": {
      "op": "txn Sender",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "6032": {
      "op": "==",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%14#0"
      ]
    },
    "6033": {
      "op": "bz liquidatePartialAlgo_bool_false@8",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6036": {
      "op": "frame_dig -3",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayPay#0 (copy)"
      ]
    },
    "6038": {
      "op": "gtxns Receiver",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%15#0"
      ]
    },
    "6040": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "6042": {
      "op": "==",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%17#0"
      ]
    },
    "6043": {
      "op": "bz liquidatePartialAlgo_bool_false@8",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6046": {
      "op": "frame_dig -3",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayPay#0 (copy)"
      ]
    },
    "6048": {
      "op": "gtxns Amount",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%18#0"
      ]
    },
    "6050": {
      "op": "frame_dig -2",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "tmp%18#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%18#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6052": {
      "op": "==",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%19#0"
      ]
    },
    "6053": {
      "op": "bz liquidatePartialAlgo_bool_false@8",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6056": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ]
    },
    "6057": {
      "block": "liquidatePartialAlgo_bool_merge@9",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6058": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "6059": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6060": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "6061": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%5#0"
      ]
    },
    "6062": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "basePrice#0"
      ]
    },
    "6065": {
      "op": "frame_bury 0",
      "defined_out": [
        "basePrice#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6067": {
      "op": "frame_dig 13",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0"
      ]
    },
    "6069": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ]
    },
    "6070": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "basePrice#0",
        "liveDebt#0",
        "liveDebt#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "2"
      ]
    },
    "6072": {
      "op": "/",
      "defined_out": [
        "basePrice#0",
        "closeFactorHalf#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "closeFactorHalf#0"
      ]
    },
    "6073": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "closeFactorHalf#0",
        "liveDebt#0"
      ]
    },
    "6074": {
      "op": "dig 1",
      "defined_out": [
        "basePrice#0",
        "closeFactorHalf#0",
        "closeFactorHalf#0 (copy)",
        "liveDebt#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "closeFactorHalf#0",
        "liveDebt#0",
        "closeFactorHalf#0 (copy)"
      ]
    },
    "6076": {
      "op": "uncover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "liveDebt#0",
        "closeFactorHalf#0 (copy)",
        "closeFactorHalf#0"
      ]
    },
    "6078": {
      "op": "select",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ]
    },
    "6079": {
      "op": "dup",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "maxRepayAllowed#0"
      ]
    },
    "6080": {
      "op": "frame_bury 2",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ]
    },
    "6082": {
      "op": "intc_0 // 0",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ]
    },
    "6083": {
      "op": "frame_bury 4",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0"
      ]
    },
    "6085": {
      "op": "frame_dig -2",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "repayBaseAmount#0 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6087": {
      "op": "<",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%21#0"
      ]
    },
    "6088": {
      "op": "frame_dig -2",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "repayUsed#2",
        "tmp%21#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%21#0",
        "repayUsed#2"
      ]
    },
    "6090": {
      "op": "frame_bury 6",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0",
        "repayUsed#2",
        "tmp%21#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%21#0"
      ]
    },
    "6092": {
      "op": "bz liquidatePartialAlgo_after_if_else@11",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6095": {
      "op": "frame_dig -2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)"
      ]
    },
    "6097": {
      "op": "frame_dig 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "maxRepayAllowed#0"
      ]
    },
    "6099": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "maxRepayAllowed#0 (copy)",
        "refundAmount#0",
        "repayBaseAmount#0 (copy)",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayBaseAmount#0 (copy)",
        "maxRepayAllowed#0 (copy)",
        "maxRepayAllowed#0 (copy)"
      ]
    },
    "6100": {
      "op": "cover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "repayBaseAmount#0 (copy)",
        "maxRepayAllowed#0 (copy)"
      ]
    },
    "6102": {
      "op": "-",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maxRepayAllowed#0",
        "refundAmount#0"
      ]
    },
    "6103": {
      "op": "frame_bury 4",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2"
      ]
    },
    "6105": {
      "op": "frame_bury 6",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6107": {
      "block": "liquidatePartialAlgo_after_if_else@11",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2"
      ]
    },
    "6109": {
      "op": "frame_dig 0",
      "defined_out": [
        "basePrice#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "basePrice#0"
      ]
    },
    "6111": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "hRU#0",
        "lRU#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRU#0",
        "lRU#0"
      ]
    },
    "6112": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "hRU#0",
        "lRU#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hRU#0",
        "lRU#0",
        "1000000"
      ]
    },
    "6114": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0"
      ]
    },
    "6115": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "0"
      ]
    },
    "6116": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "0",
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "0",
        "\"liq_bonus_bps\""
      ]
    },
    "6118": {
      "op": "app_global_get_ex",
      "defined_out": [
        "basePrice#0",
        "bonusBps#0",
        "maybe_exists%6#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "bonusBps#0",
        "maybe_exists%6#0"
      ]
    },
    "6119": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "bonusBps#0"
      ]
    },
    "6120": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "basePrice#0",
        "bonusBps#0",
        "repayUSD#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "bonusBps#0",
        "10000"
      ]
    },
    "6121": {
      "op": "+",
      "defined_out": [
        "basePrice#0",
        "repayUSD#0",
        "repayUsed#2",
        "tmp%22#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUSD#0",
        "tmp%22#0"
      ]
    },
    "6122": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "hSZ#0",
        "lSZ#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSZ#0",
        "lSZ#0"
      ]
    },
    "6123": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hSZ#0",
        "lSZ#0",
        "10000"
      ]
    },
    "6124": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0"
      ]
    },
    "6125": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "basePrice#0",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "\"accepted_collaterals\""
      ]
    },
    "6127": {
      "op": "frame_dig 10",
      "defined_out": [
        "\"accepted_collaterals\"",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUSD#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "\"accepted_collaterals\"",
        "collTok#0"
      ]
    },
    "6129": {
      "op": "concat",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUSD#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#2"
      ]
    },
    "6130": {
      "op": "dup",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUSD#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "6131": {
      "op": "box_get",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "repayUsed#2",
        "seizeUSD#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "6132": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#2",
        "maybe_value%0#1"
      ]
    },
    "6133": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUSD#0",
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#2",
        "tmp%1#1"
      ]
    },
    "6136": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUSD#0",
        "tmp%0#2",
        "underlyingPrice#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUSD#0",
        "tmp%0#2",
        "underlyingPrice#0"
      ]
    },
    "6139": {
      "op": "uncover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#2",
        "underlyingPrice#0",
        "seizeUSD#0"
      ]
    },
    "6141": {
      "op": "intc 4 // 1000000",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#2",
        "underlyingPrice#0",
        "seizeUSD#0",
        "1000000"
      ]
    },
    "6143": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "hUnd#0",
        "lUnd#0",
        "repayUsed#2",
        "tmp%0#2",
        "underlyingPrice#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#2",
        "underlyingPrice#0",
        "hUnd#0",
        "lUnd#0"
      ]
    },
    "6144": {
      "op": "uncover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#2",
        "hUnd#0",
        "lUnd#0",
        "underlyingPrice#0"
      ]
    },
    "6146": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%0#2",
        "seizeUnderlying#0"
      ]
    },
    "6147": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%0#2"
      ]
    },
    "6148": {
      "op": "box_get",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "collateral#0",
        "maybe_exists%0#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "6149": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "collateral#0"
      ]
    },
    "6150": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "basePrice#0",
        "collTok#0",
        "collateral#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "collateral#0",
        "32"
      ]
    },
    "6152": {
      "op": "extract_uint64",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%3#1"
      ]
    },
    "6153": {
      "op": "frame_dig -1",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "lstAppId#0 (copy)",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%3#1",
        "lstAppId#0 (copy)"
      ]
    },
    "6155": {
      "op": "==",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%4#1"
      ]
    },
    "6156": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6157": {
      "op": "itxn_begin"
    },
    "6158": {
      "op": "bytec 18 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "6160": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6162": {
      "op": "frame_dig -1",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6164": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6166": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "appl"
      ]
    },
    "6168": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6170": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "1000"
      ]
    },
    "6171": {
      "op": "itxn_field Fee",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0"
      ]
    },
    "6173": {
      "op": "itxn_submit"
    },
    "6174": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "awst_tmp%0#0"
      ]
    },
    "6176": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6177": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "awst_tmp%0#0",
        "tmp%5#1"
      ]
    },
    "6180": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "awst_tmp%0#0"
      ]
    },
    "6181": {
      "op": "extract 0 4",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%6#1"
      ]
    },
    "6184": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%6#1",
        "0x151f7c75"
      ]
    },
    "6185": {
      "op": "==",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%7#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1",
        "tmp%7#1"
      ]
    },
    "6186": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "tmp%5#1"
      ]
    },
    "6187": {
      "op": "btoi",
      "defined_out": [
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6188": {
      "op": "itxn_begin"
    },
    "6189": {
      "op": "bytec 19 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "6191": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6193": {
      "op": "frame_dig -1",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6195": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6197": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "appl"
      ]
    },
    "6199": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6201": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "1000"
      ]
    },
    "6202": {
      "op": "itxn_field Fee",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6204": {
      "op": "itxn_submit"
    },
    "6205": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0"
      ]
    },
    "6207": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6208": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "awst_tmp%1#0",
        "tmp%9#1"
      ]
    },
    "6211": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "awst_tmp%1#0"
      ]
    },
    "6212": {
      "op": "extract 0 4",
      "defined_out": [
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%10#1",
        "tmp%9#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "tmp%10#1"
      ]
    },
    "6215": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "tmp%10#1",
        "0x151f7c75"
      ]
    },
    "6216": {
      "op": "==",
      "defined_out": [
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "tmp%11#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1",
        "tmp%11#0"
      ]
    },
    "6217": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "tmp%9#1"
      ]
    },
    "6218": {
      "op": "btoi",
      "defined_out": [
        "basePrice#0",
        "circ#0",
        "collTok#0",
        "repayUsed#2",
        "seizeUnderlying#0",
        "total#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeUnderlying#0",
        "circ#0",
        "total#0"
      ]
    },
    "6219": {
      "op": "cover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "total#0",
        "seizeUnderlying#0",
        "circ#0"
      ]
    },
    "6221": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "hL#0",
        "lL#0",
        "repayUsed#2",
        "total#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "total#0",
        "hL#0",
        "lL#0"
      ]
    },
    "6222": {
      "op": "uncover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "hL#0",
        "lL#0",
        "total#0"
      ]
    },
    "6224": {
      "op": "divw",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6225": {
      "op": "dup",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "seizeLST#1"
      ]
    },
    "6226": {
      "op": "frame_bury 7",
      "defined_out": [
        "basePrice#0",
        "collTok#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6228": {
      "op": "frame_dig 11",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "collLSTBal#0"
      ]
    },
    "6230": {
      "op": ">",
      "defined_out": [
        "basePrice#0",
        "collLSTBal#0",
        "collTok#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%13#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%13#1"
      ]
    },
    "6231": {
      "op": "bz liquidatePartialAlgo_after_if_else@24",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6234": {
      "op": "frame_dig 11",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6236": {
      "op": "frame_bury 7",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6238": {
      "block": "liquidatePartialAlgo_after_if_else@24",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6240": {
      "op": "dup",
      "defined_out": [
        "seizeLST#1",
        "seizeLST#1 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "seizeLST#1 (copy)"
      ]
    },
    "6241": {
      "error": "NOTHING_TO_SEIZE",
      "op": "assert // NOTHING_TO_SEIZE",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6242": {
      "op": "itxn_begin"
    },
    "6243": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6245": {
      "op": "frame_dig 9",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "6247": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "32"
      ]
    },
    "6249": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6250": {
      "op": "dup",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6251": {
      "op": "frame_bury 1",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6253": {
      "op": "uncover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "seizeLST#1"
      ]
    },
    "6255": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6257": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6259": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6261": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "4"
      ]
    },
    "6263": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6265": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "1000"
      ]
    },
    "6266": {
      "op": "itxn_field Fee",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6268": {
      "op": "itxn_submit"
    },
    "6269": {
      "op": "frame_dig 4",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "refundAmount#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6271": {
      "op": "bz liquidatePartialAlgo_after_if_else@15",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6274": {
      "op": "itxn_begin"
    },
    "6275": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "rec#0",
        "refundAmount#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "6277": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6279": {
      "op": "frame_dig 4",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6281": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "refundAmount#0",
        "refundAmount#0 (copy)",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "refundAmount#0 (copy)"
      ]
    },
    "6282": {
      "op": "itxn_field Amount",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6284": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "refundAmount#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "1"
      ]
    },
    "6285": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6287": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0",
        "1000"
      ]
    },
    "6288": {
      "op": "itxn_field Fee",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "refundAmount#0"
      ]
    },
    "6290": {
      "op": "itxn_submit"
    },
    "6291": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.removeCash",
      "op": "callsub removeCash",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6294": {
      "block": "liquidatePartialAlgo_after_if_else@15",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 11",
      "defined_out": [
        "collLSTBal#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collLSTBal#0"
      ]
    },
    "6296": {
      "op": "frame_dig 7",
      "defined_out": [
        "collLSTBal#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collLSTBal#0",
        "seizeLST#1"
      ]
    },
    "6298": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "seizeLST#1",
        "seizeLST#1 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collLSTBal#0",
        "seizeLST#1 (copy)",
        "seizeLST#1 (copy)"
      ]
    },
    "6299": {
      "op": "cover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "collLSTBal#0",
        "seizeLST#1 (copy)"
      ]
    },
    "6301": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "remainingLST#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "remainingLST#0"
      ]
    },
    "6302": {
      "op": "frame_bury 5",
      "defined_out": [
        "collLSTBal#0",
        "remainingLST#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1"
      ]
    },
    "6304": {
      "op": "frame_dig 13",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "remainingLST#0",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "liveDebt#0"
      ]
    },
    "6306": {
      "op": "frame_dig 6",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "liveDebt#0",
        "repayUsed#2"
      ]
    },
    "6308": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "remainingLST#0",
        "repayUsed#2",
        "repayUsed#2 (copy)",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "seizeLST#1",
        "liveDebt#0",
        "repayUsed#2 (copy)",
        "repayUsed#2 (copy)"
      ]
    },
    "6309": {
      "op": "cover 3",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "seizeLST#1",
        "liveDebt#0",
        "repayUsed#2 (copy)"
      ]
    },
    "6311": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "seizeLST#1",
        "newDebtBase#0"
      ]
    },
    "6312": {
      "op": "dup",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "repayUsed#2",
        "seizeLST#1",
        "newDebtBase#0",
        "newDebtBase#0 (copy)"
      ]
    },
    "6313": {
      "op": "cover 3",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "seizeLST#1",
        "newDebtBase#0"
      ]
    },
    "6315": {
      "op": "frame_bury 3",
      "defined_out": [
        "collLSTBal#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "seizeLST#1"
      ]
    },
    "6317": {
      "op": "frame_dig 10",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "seizeLST#1",
        "collTok#0"
      ]
    },
    "6319": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "collTok#0",
        "seizeLST#1"
      ]
    },
    "6320": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2"
      ]
    },
    "6323": {
      "op": "intc_0 // 0",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "0"
      ]
    },
    "6324": {
      "op": "bytec_3 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "0",
        "\"total_borrows\""
      ]
    },
    "6325": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "6326": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "maybe_value%7#0"
      ]
    },
    "6327": {
      "op": "dig 1",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "maybe_value%7#0",
        "repayUsed#2 (copy)"
      ]
    },
    "6329": {
      "op": "-",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "newDebtBase#0",
        "new_state_value%0#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "new_state_value%0#0"
      ]
    },
    "6330": {
      "op": "bytec_3 // \"total_borrows\"",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "6331": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "6332": {
      "op": "app_global_put",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0",
        "repayUsed#2"
      ]
    },
    "6333": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newDebtBase#0"
      ]
    },
    "6336": {
      "op": "bnz liquidatePartialAlgo_else_body@20",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6339": {
      "op": "frame_dig 5",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6341": {
      "op": "bz liquidatePartialAlgo_after_if_else@19",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6344": {
      "op": "itxn_begin"
    },
    "6345": {
      "op": "frame_dig 5",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6347": {
      "op": "dup",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "remainingLST#0 (copy)",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "remainingLST#0 (copy)"
      ]
    },
    "6348": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6350": {
      "op": "frame_dig 1",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6352": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6354": {
      "op": "frame_dig -4",
      "defined_out": [
        "collLSTBal#0",
        "collTok#0",
        "debtor#0 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "debtor#0 (copy)"
      ]
    },
    "6356": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6358": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "4"
      ]
    },
    "6360": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6362": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collLSTBal#0",
        "collTok#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "liveDebt#0",
        "newDebtBase#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "1000"
      ]
    },
    "6363": {
      "op": "itxn_field Fee",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0"
      ]
    },
    "6365": {
      "op": "itxn_submit"
    },
    "6366": {
      "op": "frame_dig 10",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "remainingLST#0",
        "collTok#0"
      ]
    },
    "6368": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "collTok#0",
        "remainingLST#0"
      ]
    },
    "6369": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6372": {
      "block": "liquidatePartialAlgo_after_if_else@19",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%4#0"
      ]
    },
    "6374": {
      "op": "box_del",
      "defined_out": [
        "tmp%4#0",
        "{box_del}"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "{box_del}"
      ]
    },
    "6375": {
      "op": "pop",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6376": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0"
      ]
    },
    "6377": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "6379": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "6380": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0"
      ]
    },
    "6381": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%8#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%8#0",
        "1"
      ]
    },
    "6382": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%1#0"
      ]
    },
    "6383": {
      "op": "bytec 9 // \"active_loan_records\"",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "6385": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "6386": {
      "op": "app_global_put",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6387": {
      "block": "liquidatePartialAlgo_after_if_else@21",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%2#0"
      ]
    },
    "6390": {
      "op": "bytec 12 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "6392": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "6393": {
      "op": "app_global_put",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6394": {
      "retsub": true,
      "op": "retsub"
    },
    "6395": {
      "block": "liquidatePartialAlgo_else_body@20",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "rec#1"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1"
      ]
    },
    "6397": {
      "op": "dup",
      "defined_out": [
        "rec#1",
        "rec#1 (copy)"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1",
        "rec#1 (copy)"
      ]
    },
    "6398": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#1",
        "tmp%28#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "rec#1",
        "tmp%28#0"
      ]
    },
    "6401": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "rec#1"
      ]
    },
    "6402": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#1",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "6405": {
      "op": "frame_dig 5",
      "defined_out": [
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "remainingLST#0"
      ]
    },
    "6407": {
      "op": "itob",
      "defined_out": [
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ]
    },
    "6408": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "6409": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6410": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "6411": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0"
      ]
    },
    "6412": {
      "op": "frame_dig 3",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "newDebtBase#0"
      ]
    },
    "6414": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "6415": {
      "op": "intc_0 // 0",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "6416": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "6418": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "6419": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "maybe_value%10#0"
      ]
    },
    "6420": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "6421": {
      "op": "frame_dig 6",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "repayUsed#2"
      ]
    },
    "6423": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "6424": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%28#0",
        "tmp%29#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "to_encode%0#0"
      ]
    },
    "6426": {
      "op": "itob",
      "defined_out": [
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "6427": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "6428": {
      "op": "pushbytes 0x04",
      "defined_out": [
        "0x04",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%3#0",
        "0x04"
      ]
    },
    "6431": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "6432": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%4#0"
      ]
    },
    "6433": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "6434": {
      "op": "uncover 6",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%28#0"
      ]
    },
    "6436": {
      "op": "uncover 6",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "6438": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "6439": {
      "op": "uncover 5",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "6441": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "6442": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "6443": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "maybe_value%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "6444": {
      "op": "uncover 3",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%9#0"
      ]
    },
    "6446": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "6447": {
      "op": "uncover 2",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "6449": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "newDebtBase#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "6450": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%2#0"
      ]
    },
    "6451": {
      "op": "concat",
      "defined_out": [
        "newDebtBase#0",
        "newRec#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newRec#0"
      ]
    },
    "6452": {
      "op": "frame_dig 8",
      "defined_out": [
        "newDebtBase#0",
        "newRec#0",
        "rec#1",
        "remainingLST#0",
        "repayUsed#2",
        "tmp%4#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "newRec#0",
        "tmp%4#0"
      ]
    },
    "6454": {
      "op": "swap",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "tmp%4#0",
        "newRec#0"
      ]
    },
    "6455": {
      "op": "box_put",
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ]
    },
    "6456": {
      "op": "b liquidatePartialAlgo_after_if_else@21"
    },
    "6459": {
      "block": "liquidatePartialAlgo_bool_false@8",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%1#0"
      ]
    },
    "6460": {
      "op": "b liquidatePartialAlgo_bool_merge@9"
    },
    "6463": {
      "block": "liquidatePartialAlgo_bool_false@3",
      "stack_in": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "basePrice#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maxRepayAllowed#0",
        "newDebtBase#0",
        "refundAmount#0",
        "remainingLST#0",
        "repayUsed#2",
        "seizeLST#1",
        "tmp%4#0",
        "rec#0",
        "collTok#0",
        "collLSTBal#0",
        "rec#1",
        "liveDebt#0",
        "and_result%0#0"
      ]
    },
    "6464": {
      "op": "b liquidatePartialAlgo_bool_merge@4"
    },
    "6467": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "getLoanStatus",
      "stack_in": [],
      "op": "proto 1 7"
    },
    "6470": {
      "op": "bytec 6 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "6472": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "6474": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6475": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "6476": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6477": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6479": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6480": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "6481": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0"
      ]
    },
    "6482": {
      "op": "dup",
      "defined_out": [
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "record#0",
        "record#0 (copy)"
      ]
    },
    "6483": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralTokenId#0"
      ]
    },
    "6486": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "6488": {
      "op": "swap",
      "stack_out": [
        "record#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "6489": {
      "op": "concat",
      "stack_out": [
        "record#0",
        "tmp%0#0"
      ]
    },
    "6490": {
      "op": "box_get",
      "defined_out": [
        "collateralRecord#0",
        "maybe_exists%0#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "collateralRecord#0",
        "maybe_exists%0#0"
      ]
    },
    "6491": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0",
        "collateralRecord#0"
      ]
    },
    "6492": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "collateralRecord#0",
        "record#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "record#0",
        "collateralRecord#0",
        "{accrueMarket}"
      ]
    },
    "6495": {
      "op": "pop",
      "stack_out": [
        "record#0",
        "collateralRecord#0"
      ]
    },
    "6496": {
      "op": "swap",
      "stack_out": [
        "collateralRecord#0",
        "record#0"
      ]
    },
    "6497": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ]
    },
    "6500": {
      "op": "dup",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "6501": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "6503": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "6504": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "6505": {
      "op": "bytec 22 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "6507": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "maybe_exists%2#0",
        "record#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "liqBps#0",
        "maybe_exists%2#0"
      ]
    },
    "6508": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "liqBps#0"
      ]
    },
    "6509": {
      "op": "uncover 2",
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "record#0"
      ]
    },
    "6511": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralRecord#0",
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0"
      ]
    },
    "6514": {
      "op": "uncover 4",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralRecord#0"
      ]
    },
    "6516": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralAmount#0",
        "collateralRecord#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralRecord#0",
        "32"
      ]
    },
    "6518": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "6519": {
      "op": "dig 3"
    },
    "6521": {
      "op": "swap",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "debt#0",
        "liqBps#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%4#0",
        "collateralAmount#0 (copy)",
        "tmp%6#0"
      ]
    },
    "6522": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0"
      ]
    },
    "6525": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)"
      ]
    },
    "6526": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "10000"
      ]
    },
    "6527": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%7#0"
      ]
    },
    "6528": {
      "op": "dig 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "debt#0 (copy)",
        "liqBps#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%7#0",
        "debt#0 (copy)"
      ]
    },
    "6530": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0"
      ]
    },
    "6531": {
      "op": "dup",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)"
      ]
    },
    "6532": {
      "op": "dig 3",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "liqBps#0 (copy)"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "6534": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0"
      ]
    },
    "6535": {
      "op": "dig 1",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)"
      ]
    },
    "6537": {
      "op": "dig 4",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "6539": {
      "op": ">",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForBuyout#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "6540": {
      "op": "uncover 6",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0"
      ]
    },
    "6542": {
      "op": "uncover 4",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0"
      ]
    },
    "6544": {
      "op": "uncover 6",
      "stack_out": [
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0"
      ]
    },
    "6546": {
      "op": "uncover 5",
      "stack_out": [
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0"
      ]
    },
    "6548": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0"
      ]
    },
    "6550": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0"
      ]
    },
    "6552": {
      "op": "uncover 6",
      "stack_out": [
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "6554": {
      "retsub": true,
      "op": "retsub"
    },
    "6555": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "params": {
        "collateralTokenId#0": "bytes",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64"
      },
      "block": "calculateCollateralValueUSD",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "6558": {
      "op": "bytec 7 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "6560": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "6562": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6563": {
      "op": "dup",
      "defined_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "6564": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6565": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#1",
        "maybe_exists%0#0"
      ]
    },
    "6567": {
      "error": "unknown collateral",
      "op": "assert // unknown collateral",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6568": {
      "op": "dup",
      "stack_out": [
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "6569": {
      "op": "box_get",
      "defined_out": [
        "collateralInfo#0",
        "maybe_exists%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0",
        "maybe_exists%0#0"
      ]
    },
    "6570": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0"
      ]
    },
    "6571": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralInfo#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "collateralInfo#0",
        "32"
      ]
    },
    "6573": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "6574": {
      "op": "frame_dig -1",
      "defined_out": [
        "lstApp#0 (copy)",
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%2#0",
        "lstApp#0 (copy)"
      ]
    },
    "6576": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%3#0"
      ]
    },
    "6577": {
      "error": "mismatched LST app",
      "op": "assert // mismatched LST app",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6578": {
      "op": "itxn_begin"
    },
    "6579": {
      "op": "bytec 18 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "6581": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6583": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#1",
        "lstApp#0 (copy)"
      ]
    },
    "6585": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6587": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "appl"
      ]
    },
    "6589": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6591": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "1000"
      ]
    },
    "6592": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6594": {
      "op": "itxn_submit"
    },
    "6595": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0"
      ]
    },
    "6597": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6598": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "6601": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "6602": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "6605": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "6606": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "6607": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#1",
        "tmp%4#0"
      ]
    },
    "6608": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "6609": {
      "op": "itxn_begin"
    },
    "6610": {
      "op": "bytec 19 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "6612": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "6614": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "lstApp#0 (copy)"
      ]
    },
    "6616": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "6618": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "6620": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "6622": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "6623": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0"
      ]
    },
    "6625": {
      "op": "itxn_submit"
    },
    "6626": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "6628": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6629": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "6632": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "awst_tmp%1#0"
      ]
    },
    "6633": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "6636": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "6637": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "6638": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "tmp%8#0"
      ]
    },
    "6639": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%0#1",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "6640": {
      "op": "frame_dig -2",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateralAmount#0 (copy)",
        "tmp%0#1",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "6642": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0"
      ]
    },
    "6643": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "hC#0",
        "lC#0",
        "circulatingExternalLST#0"
      ]
    },
    "6645": {
      "op": "divw",
      "defined_out": [
        "tmp%0#1",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "underlyingCollateral#0"
      ]
    },
    "6646": {
      "op": "swap",
      "stack_out": [
        "underlyingCollateral#0",
        "tmp%0#1"
      ]
    },
    "6647": {
      "op": "box_get",
      "defined_out": [
        "lstCollateral#0",
        "maybe_exists%0#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "lstCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "6648": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "underlyingCollateral#0",
        "lstCollateral#0"
      ]
    },
    "6649": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "baseTokenId#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "baseTokenId#0"
      ]
    },
    "6652": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenPrice#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "baseTokenPrice#0"
      ]
    },
    "6655": {
      "op": "mulw",
      "defined_out": [
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "hU#0",
        "lU#0"
      ]
    },
    "6656": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "hU#0",
        "lU#0",
        "1000000"
      ]
    },
    "6658": {
      "op": "divw",
      "defined_out": [
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralUSD#0"
      ]
    },
    "6659": {
      "retsub": true,
      "op": "retsub"
    },
    "6660": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.pickupAlgoRewards",
      "params": {},
      "block": "pickupAlgoRewards",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "6663": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "rawReward#0"
      ]
    },
    "6665": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0"
      ]
    },
    "6667": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "0"
      ]
    },
    "6668": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "6670": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6671": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "6672": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%1#0"
      ]
    },
    "6673": {
      "error": "Only admin can pickup rewards",
      "op": "assert // Only admin can pickup rewards",
      "stack_out": [
        "rawReward#0"
      ]
    },
    "6674": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "0"
      ]
    },
    "6675": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\"",
        "0"
      ],
      "stack_out": [
        "rawReward#0",
        "0",
        "\"contract_state\""
      ]
    },
    "6677": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "rawReward#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6678": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "maybe_value%1#0"
      ]
    },
    "6679": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%2#0"
      ]
    },
    "6680": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%2#0",
        "1"
      ]
    },
    "6681": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%3#0"
      ]
    },
    "6682": {
      "error": "CONTRACT_NOT_ACTIVE",
      "op": "assert // CONTRACT_NOT_ACTIVE",
      "stack_out": [
        "rawReward#0"
      ]
    },
    "6683": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "rawReward#0",
        "tmp%4#0"
      ]
    },
    "6685": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "6687": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "rawReward#0",
        "value%0#0"
      ]
    },
    "6688": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%5#0",
        "value%0#0"
      ],
      "stack_out": [
        "rawReward#0",
        "value%0#0",
        "tmp%5#0"
      ]
    },
    "6690": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%1#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "rawReward#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "6692": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "rawReward#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "6693": {
      "op": "-",
      "defined_out": [
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0"
      ]
    },
    "6694": {
      "op": "dup",
      "defined_out": [
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "spendable#0"
      ]
    },
    "6695": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "spendable#0",
        "0"
      ]
    },
    "6696": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0",
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "spendable#0",
        "0",
        "\"cash_on_hand\""
      ]
    },
    "6698": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "spendable#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6699": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "spendable#0",
        "maybe_value%2#0"
      ]
    },
    "6700": {
      "op": "<=",
      "defined_out": [
        "spendable#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "tmp%6#0"
      ]
    },
    "6701": {
      "op": "bz pickupAlgoRewards_after_if_else@2",
      "stack_out": [
        "rawReward#0",
        "spendable#0"
      ]
    },
    "6704": {
      "retsub": true,
      "op": "retsub"
    },
    "6705": {
      "block": "pickupAlgoRewards_after_if_else@2",
      "stack_in": [
        "rawReward#0",
        "spendable#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "0"
      ]
    },
    "6706": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "0",
        "\"cash_on_hand\""
      ]
    },
    "6708": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "6709": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "maybe_value%3#0"
      ]
    },
    "6710": {
      "op": "frame_dig 1",
      "defined_out": [
        "maybe_value%3#0",
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "maybe_value%3#0",
        "spendable#0"
      ]
    },
    "6712": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "spendable#0",
        "maybe_value%3#0"
      ]
    },
    "6713": {
      "op": "-",
      "defined_out": [
        "rawReward#0",
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0"
      ]
    },
    "6714": {
      "op": "dup",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "rawReward#0"
      ]
    },
    "6715": {
      "op": "frame_bury 0",
      "defined_out": [
        "rawReward#0",
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0"
      ]
    },
    "6717": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "rawReward#0",
        "spendable#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "10000"
      ]
    },
    "6718": {
      "op": "<=",
      "defined_out": [
        "rawReward#0",
        "spendable#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "tmp%7#0"
      ]
    },
    "6719": {
      "op": "bz pickupAlgoRewards_after_if_else@4",
      "stack_out": [
        "rawReward#0",
        "spendable#0"
      ]
    },
    "6722": {
      "retsub": true,
      "op": "retsub"
    },
    "6723": {
      "block": "pickupAlgoRewards_after_if_else@4",
      "stack_in": [
        "rawReward#0",
        "spendable#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0"
      ]
    },
    "6725": {
      "op": "dup",
      "defined_out": [
        "rawReward#0",
        "rawReward#0 (copy)"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "rawReward#0 (copy)"
      ]
    },
    "6726": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addCash",
      "op": "callsub addCash",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0"
      ]
    },
    "6729": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "0"
      ]
    },
    "6730": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\"",
        "0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "0",
        "\"commission_percentage\""
      ]
    },
    "6732": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "6733": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "maybe_value%4#0"
      ]
    },
    "6734": {
      "op": "dig 1",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "maybe_value%4#0",
        "rawReward#0 (copy)"
      ]
    },
    "6736": {
      "op": "mulw",
      "defined_out": [
        "hi#0",
        "lo#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "hi#0",
        "lo#0"
      ]
    },
    "6737": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "hi#0",
        "lo#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "hi#0",
        "lo#0",
        "100"
      ]
    },
    "6739": {
      "op": "divw",
      "defined_out": [
        "commission#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0"
      ]
    },
    "6740": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "0"
      ]
    },
    "6741": {
      "op": "bytec 17 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "0",
        "commission#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "0",
        "\"current_accumulated_commission\""
      ]
    },
    "6743": {
      "op": "app_global_get_ex",
      "defined_out": [
        "commission#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "6744": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%5#0"
      ]
    },
    "6745": {
      "op": "dig 1",
      "defined_out": [
        "commission#0",
        "commission#0 (copy)",
        "maybe_value%5#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%5#0",
        "commission#0 (copy)"
      ]
    },
    "6747": {
      "op": "+",
      "defined_out": [
        "commission#0",
        "new_state_value%0#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%0#0"
      ]
    },
    "6748": {
      "op": "bytec 17 // \"current_accumulated_commission\"",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%0#0",
        "\"current_accumulated_commission\""
      ]
    },
    "6750": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "\"current_accumulated_commission\"",
        "new_state_value%0#0"
      ]
    },
    "6751": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0"
      ]
    },
    "6752": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "0"
      ]
    },
    "6753": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\"",
        "0",
        "commission#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "0",
        "\"total_commission_earned\""
      ]
    },
    "6755": {
      "op": "app_global_get_ex",
      "defined_out": [
        "commission#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "6756": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%6#0"
      ]
    },
    "6757": {
      "op": "dig 1",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "maybe_value%6#0",
        "commission#0 (copy)"
      ]
    },
    "6759": {
      "op": "+",
      "defined_out": [
        "commission#0",
        "new_state_value%1#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%1#0"
      ]
    },
    "6760": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "new_state_value%1#0",
        "\"total_commission_earned\""
      ]
    },
    "6762": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0",
        "\"total_commission_earned\"",
        "new_state_value%1#0"
      ]
    },
    "6763": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "rawReward#0",
        "commission#0"
      ]
    },
    "6764": {
      "op": "-",
      "defined_out": [
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0"
      ]
    },
    "6765": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "0"
      ]
    },
    "6766": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\"",
        "0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "0",
        "\"total_additional_rewards\""
      ]
    },
    "6768": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "6769": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "maybe_value%7#0"
      ]
    },
    "6770": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%7#0",
        "netReward#0",
        "netReward#0 (copy)",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "maybe_value%7#0",
        "netReward#0 (copy)"
      ]
    },
    "6772": {
      "op": "+",
      "defined_out": [
        "netReward#0",
        "new_state_value%2#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "new_state_value%2#0"
      ]
    },
    "6773": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "new_state_value%2#0",
        "\"total_additional_rewards\""
      ]
    },
    "6775": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "\"total_additional_rewards\"",
        "new_state_value%2#0"
      ]
    },
    "6776": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0"
      ]
    },
    "6777": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "0"
      ]
    },
    "6778": {
      "op": "bytec_2 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "6779": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "netReward#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "6780": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "netReward#0",
        "maybe_value%8#0"
      ]
    },
    "6781": {
      "op": "+",
      "defined_out": [
        "new_state_value%3#0",
        "rawReward#0"
      ],
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "new_state_value%3#0"
      ]
    },
    "6782": {
      "op": "bytec_2 // \"total_deposits\"",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "new_state_value%3#0",
        "\"total_deposits\""
      ]
    },
    "6783": {
      "op": "swap",
      "stack_out": [
        "rawReward#0",
        "spendable#0",
        "\"total_deposits\"",
        "new_state_value%3#0"
      ]
    },
    "6784": {
      "op": "app_global_put",
      "stack_out": [
        "rawReward#0",
        "spendable#0"
      ]
    },
    "6785": {
      "retsub": true,
      "op": "retsub"
    },
    "6786": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.migrateCollateralTokenId",
      "params": {
        "collateralTokenId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "migrateCollateralTokenId",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "6789": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6791": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "6792": {
      "op": "bytec 15 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "6794": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6795": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "6796": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "6797": {
      "error": "Only migration admin can migrate collateral",
      "op": "assert // Only migration admin can migrate collateral",
      "stack_out": []
    },
    "6798": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "6800": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "6802": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "check%0#0"
      ]
    },
    "6804": {
      "op": "swap",
      "stack_out": [
        "check%0#0",
        "collateralBalance#0"
      ]
    },
    "6805": {
      "op": "dup",
      "stack_out": [
        "check%0#0",
        "collateralBalance#0",
        "collateralBalance#0 (copy)"
      ]
    },
    "6806": {
      "op": "uncover 2",
      "defined_out": [
        "check%0#0",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "collateralBalance#0",
        "check%0#0"
      ]
    },
    "6808": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "collateralBalance#0",
        "collateralBalance#0"
      ]
    },
    "6809": {
      "op": "bz migrateCollateralTokenId_after_if_else@3",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "6812": {
      "op": "itxn_begin"
    },
    "6813": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralBalance#0",
        "0"
      ]
    },
    "6814": {
      "op": "bytec 15 // \"migration_admin\"",
      "stack_out": [
        "collateralBalance#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "6816": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralBalance#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6817": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%1#0"
      ]
    },
    "6818": {
      "op": "frame_dig 0",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%1#0",
        "collateralBalance#0"
      ]
    },
    "6820": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%1#0"
      ]
    },
    "6822": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%1#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "6824": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "collateralBalance#0",
        "maybe_value%1#0"
      ]
    },
    "6826": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "6828": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "4"
      ]
    },
    "6830": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "6832": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralBalance#0"
      ],
      "stack_out": [
        "collateralBalance#0",
        "1000"
      ]
    },
    "6833": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralBalance#0"
      ]
    },
    "6835": {
      "op": "itxn_submit"
    },
    "6836": {
      "block": "migrateCollateralTokenId_after_if_else@3",
      "stack_in": [
        "collateralBalance#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "6837": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.migrateContract",
      "params": {
        "feeTxn#0": "uint64"
      },
      "block": "migrateContract",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "6840": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "algoBalance#0"
      ]
    },
    "6842": {
      "op": "dup",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "6843": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%0#0"
      ]
    },
    "6845": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%0#0",
        "0"
      ]
    },
    "6846": {
      "op": "bytec 15 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%0#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "6848": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6849": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "6850": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%1#0"
      ]
    },
    "6851": {
      "error": "Only migration admin can migrate",
      "op": "assert // Only migration admin can migrate",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "6852": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "2"
      ]
    },
    "6854": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setContractState",
      "op": "callsub setContractState",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "6857": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.goOffline",
      "op": "callsub goOffline"
    },
    "6860": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0"
      ]
    },
    "6861": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "6863": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "6864": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%1#0"
      ]
    },
    "6865": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstAsset#0"
      ]
    },
    "6866": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "lstAsset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstAsset#0",
        "tmp%2#0"
      ]
    },
    "6868": {
      "op": "swap",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%2#0",
        "lstAsset#0"
      ]
    },
    "6869": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "lstBalance#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "check%0#0"
      ]
    },
    "6871": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0"
      ]
    },
    "6872": {
      "op": "itxn_begin"
    },
    "6873": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "0"
      ]
    },
    "6874": {
      "op": "bytec 15 // \"migration_admin\"",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "6876": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstBalance#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6877": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "maybe_value%2#0"
      ]
    },
    "6878": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "6879": {
      "op": "bytec 10 // \"lst_token_id\"",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "maybe_value%2#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "6881": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstBalance#0",
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "6882": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "6883": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstBalance#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "lstBalance#0",
        "maybe_value%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6884": {
      "op": "uncover 2",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstBalance#0"
      ]
    },
    "6886": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%2#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6888": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%2#0"
      ]
    },
    "6890": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "6892": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "4"
      ]
    },
    "6894": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "6896": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "1000"
      ]
    },
    "6897": {
      "op": "itxn_field Fee",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "6899": {
      "op": "itxn_submit"
    },
    "6900": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0"
      ]
    },
    "6901": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6902": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "6903": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%4#0"
      ]
    },
    "6904": {
      "op": "btoi",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%3#0"
      ]
    },
    "6905": {
      "op": "bnz migrateContract_else_body@6",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "6908": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%5#0"
      ]
    },
    "6910": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "6912": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "value%1#0"
      ]
    },
    "6913": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%6#0",
        "value%1#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "value%1#0",
        "tmp%6#0"
      ]
    },
    "6915": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%2#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "value%1#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "6917": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "value%1#0",
        "value%2#0"
      ]
    },
    "6918": {
      "op": "-",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%7#0"
      ]
    },
    "6919": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%7#0",
        "1000"
      ]
    },
    "6920": {
      "op": "-",
      "defined_out": [
        "algoBalance#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "algoBalance#0"
      ]
    },
    "6921": {
      "op": "dup",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "algoBalance#0",
        "algoBalance#0"
      ]
    },
    "6922": {
      "op": "frame_bury 0",
      "defined_out": [
        "algoBalance#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "algoBalance#0"
      ]
    },
    "6924": {
      "op": "bz migrateContract_after_if_else@10",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "6927": {
      "op": "itxn_begin"
    },
    "6928": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0"
      ]
    },
    "6929": {
      "op": "bytec 15 // \"migration_admin\"",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "6931": {
      "op": "app_global_get_ex",
      "defined_out": [
        "algoBalance#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "6932": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%5#0"
      ]
    },
    "6933": {
      "op": "frame_dig 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%5#0",
        "algoBalance#0"
      ]
    },
    "6935": {
      "op": "itxn_field Amount",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%5#0"
      ]
    },
    "6937": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "6939": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "algoBalance#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "1"
      ]
    },
    "6940": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "6942": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "1000"
      ]
    },
    "6943": {
      "op": "itxn_field Fee",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "6945": {
      "op": "itxn_submit"
    },
    "6946": {
      "block": "migrateContract_after_if_else@10",
      "stack_in": [
        "algoBalance#0",
        "assetBalance#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0"
      ]
    },
    "6947": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "6949": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "6950": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%9#0"
      ]
    },
    "6951": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0"
      ]
    },
    "6952": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "6953": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "0",
        "\"cash_on_hand\""
      ]
    },
    "6955": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "6956": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "maybe_value%10#0"
      ]
    },
    "6957": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "6958": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "6959": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "6961": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "6962": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%11#0"
      ]
    },
    "6963": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "6964": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "6965": {
      "op": "bytec_2 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "6966": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%12#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "6967": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "maybe_value%12#0"
      ]
    },
    "6968": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "6969": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "6970": {
      "op": "bytec_3 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "6971": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%13#0",
        "maybe_value%13#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "6972": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%13#0"
      ]
    },
    "6973": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "6974": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0"
      ]
    },
    "6975": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0",
        "\"total_additional_rewards\""
      ]
    },
    "6977": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%14#0",
        "maybe_value%14#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "maybe_value%14#0",
        "maybe_exists%14#0"
      ]
    },
    "6978": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "maybe_value%14#0"
      ]
    },
    "6979": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "6980": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0"
      ]
    },
    "6981": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "0",
        "\"total_commission_earned\""
      ]
    },
    "6983": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%15#0",
        "maybe_value%15#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%15#0",
        "maybe_exists%15#0"
      ]
    },
    "6984": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "maybe_value%15#0"
      ]
    },
    "6985": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "6986": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0"
      ]
    },
    "6987": {
      "op": "bytec 17 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0",
        "\"current_accumulated_commission\""
      ]
    },
    "6989": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%16#0",
        "maybe_value%16#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%16#0",
        "maybe_exists%16#0"
      ]
    },
    "6990": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "maybe_value%16#0"
      ]
    },
    "6991": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "6992": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0"
      ]
    },
    "6993": {
      "op": "bytec 14 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "6995": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%17#0",
        "maybe_value%17#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%17#0",
        "maybe_exists%17#0"
      ]
    },
    "6996": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "maybe_value%17#0"
      ]
    },
    "6997": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "6998": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0"
      ]
    },
    "6999": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "7001": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%18#0",
        "maybe_value%18#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%18#0",
        "maybe_exists%18#0"
      ]
    },
    "7002": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "maybe_value%18#0"
      ]
    },
    "7003": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "7004": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0"
      ]
    },
    "7005": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7006": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%19#0",
        "maybe_value%19#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%19#0",
        "maybe_exists%19#0"
      ]
    },
    "7007": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "maybe_value%19#0"
      ]
    },
    "7008": {
      "op": "btoi",
      "defined_out": [
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "to_encode%0#0"
      ]
    },
    "7009": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "7010": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0"
      ]
    },
    "7011": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "7013": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%20#0",
        "maybe_value%20#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%20#0",
        "maybe_exists%20#0"
      ]
    },
    "7014": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "maybe_value%20#0"
      ]
    },
    "7015": {
      "op": "btoi",
      "defined_out": [
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "to_encode%1#0"
      ]
    },
    "7016": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ]
    },
    "7017": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0"
      ]
    },
    "7018": {
      "op": "bytec 16 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "7020": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%21#0",
        "maybe_value%21#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%21#0",
        "maybe_exists%21#0"
      ]
    },
    "7021": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "maybe_value%21#0"
      ]
    },
    "7022": {
      "op": "btoi",
      "defined_out": [
        "to_encode%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "to_encode%2#0"
      ]
    },
    "7023": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ]
    },
    "7024": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0"
      ]
    },
    "7025": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "0",
        "\"commission_percentage\""
      ]
    },
    "7027": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%22#0",
        "maybe_value%22#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%22#0",
        "maybe_exists%22#0"
      ]
    },
    "7028": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "maybe_value%22#0"
      ]
    },
    "7029": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0"
      ]
    },
    "7030": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "0"
      ]
    },
    "7031": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "0",
        "\"liq_bonus_bps\""
      ]
    },
    "7033": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%23#0",
        "maybe_value%23#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "maybe_value%23#0",
        "maybe_exists%23#0"
      ]
    },
    "7034": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "maybe_value%23#0"
      ]
    },
    "7035": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ]
    },
    "7036": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "0"
      ]
    },
    "7037": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "7039": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%24#0",
        "maybe_value%24#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "maybe_value%24#0",
        "maybe_exists%24#0"
      ]
    },
    "7040": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "maybe_value%24#0"
      ]
    },
    "7041": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ]
    },
    "7042": {
      "op": "uncover 12",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%3#0"
      ]
    },
    "7044": {
      "op": "uncover 12",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "7046": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "7047": {
      "op": "uncover 12",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "7049": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "7050": {
      "op": "uncover 12",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "7052": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "7053": {
      "op": "uncover 7",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%9#0"
      ]
    },
    "7055": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "7056": {
      "op": "uncover 6",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%10#0"
      ]
    },
    "7058": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "7059": {
      "op": "uncover 3",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%13#0"
      ]
    },
    "7061": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%0#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "7062": {
      "op": "uncover 4",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%11#0"
      ]
    },
    "7064": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "7065": {
      "op": "uncover 4",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%8#0"
      ]
    },
    "7067": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "7068": {
      "op": "uncover 7",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%0#0"
      ]
    },
    "7070": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%12#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "7071": {
      "op": "uncover 3",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%12#0"
      ]
    },
    "7073": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "7074": {
      "op": "uncover 2",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%14#0"
      ]
    },
    "7076": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "7077": {
      "op": "uncover 2",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%7#0"
      ]
    },
    "7079": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "7080": {
      "op": "uncover 2",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%6#0"
      ]
    },
    "7082": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%5#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "7083": {
      "op": "uncover 2",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%5#0"
      ]
    },
    "7085": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0",
        "val_as_bytes%15#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "val_as_bytes%15#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "7086": {
      "op": "swap",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "encoded_tuple_buffer%15#0",
        "val_as_bytes%15#0"
      ]
    },
    "7087": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "7088": {
      "op": "frame_bury 0"
    },
    "7090": {
      "retsub": true,
      "op": "retsub"
    },
    "7091": {
      "block": "migrateContract_else_body@6",
      "stack_in": [
        "algoBalance#0",
        "assetBalance#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0"
      ]
    },
    "7092": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7093": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "7094": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%6#0"
      ]
    },
    "7095": {
      "op": "btoi",
      "defined_out": [
        "baseAsset#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "baseAsset#0"
      ]
    },
    "7096": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseAsset#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "baseAsset#0",
        "tmp%9#0"
      ]
    },
    "7098": {
      "op": "swap",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "tmp%9#0",
        "baseAsset#0"
      ]
    },
    "7099": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "assetBalance#0",
        "check%3#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "assetBalance#0",
        "check%3#0"
      ]
    },
    "7101": {
      "op": "swap",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "check%3#0",
        "assetBalance#0"
      ]
    },
    "7102": {
      "op": "dup",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "check%3#0",
        "assetBalance#0",
        "assetBalance#0 (copy)"
      ]
    },
    "7103": {
      "op": "cover 2",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "assetBalance#0",
        "check%3#0",
        "assetBalance#0"
      ]
    },
    "7105": {
      "op": "frame_bury 1",
      "defined_out": [
        "assetBalance#0",
        "check%3#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "assetBalance#0",
        "check%3#0"
      ]
    },
    "7107": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "assetBalance#0"
      ]
    },
    "7108": {
      "op": "bz migrateContract_after_if_else@10",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7111": {
      "op": "itxn_begin"
    },
    "7112": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0"
      ]
    },
    "7113": {
      "op": "bytec 15 // \"migration_admin\"",
      "defined_out": [
        "\"migration_admin\"",
        "0",
        "assetBalance#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "0",
        "\"migration_admin\""
      ]
    },
    "7115": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetBalance#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "7116": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0"
      ]
    },
    "7117": {
      "op": "intc_0 // 0",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "0"
      ]
    },
    "7118": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "7119": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetBalance#0",
        "maybe_exists%8#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "7120": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ]
    },
    "7121": {
      "op": "btoi",
      "defined_out": [
        "assetBalance#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0"
      ]
    },
    "7122": {
      "op": "frame_dig 1",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0",
        "assetBalance#0"
      ]
    },
    "7124": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0"
      ]
    },
    "7126": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "maybe_value%7#0"
      ]
    },
    "7128": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7130": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "assetBalance#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "4"
      ]
    },
    "7132": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7134": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "assetBalance#0"
      ],
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0",
        "1000"
      ]
    },
    "7135": {
      "op": "itxn_field Fee",
      "stack_out": [
        "algoBalance#0",
        "assetBalance#0"
      ]
    },
    "7137": {
      "op": "itxn_submit"
    },
    "7138": {
      "op": "b migrateContract_after_if_else@10"
    },
    "7141": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.acceptMigrationAlgoContract",
      "params": {
        "lstTransferTxn#0": "uint64",
        "algoTxn#0": "uint64",
        "snapshot#0": "bytes",
        "migrationAdmin#0": "bytes"
      },
      "block": "acceptMigrationAlgoContract",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "7144": {
      "op": "frame_dig -4",
      "defined_out": [
        "lstTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "lstTransferTxn#0 (copy)"
      ]
    },
    "7146": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7148": {
      "op": "frame_dig -1",
      "defined_out": [
        "migrationAdmin#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "migrationAdmin#0 (copy)"
      ]
    },
    "7150": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "7151": {
      "op": "bz acceptMigrationAlgoContract_bool_false@4",
      "stack_out": []
    },
    "7154": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstTransferTxn#0 (copy)"
      ]
    },
    "7156": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "7158": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "7160": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "7161": {
      "op": "bz acceptMigrationAlgoContract_bool_false@4",
      "stack_out": []
    },
    "7164": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstTransferTxn#0 (copy)"
      ]
    },
    "7166": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "7168": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "7169": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "7171": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7172": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%0#0"
      ]
    },
    "7173": {
      "op": "btoi",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "7174": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "7175": {
      "op": "bz acceptMigrationAlgoContract_bool_false@4",
      "stack_out": []
    },
    "7178": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "7179": {
      "block": "acceptMigrationAlgoContract_bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "7180": {
      "op": "frame_dig -3",
      "defined_out": [
        "algoTxn#0 (copy)"
      ],
      "stack_out": [
        "algoTxn#0 (copy)"
      ]
    },
    "7182": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "7184": {
      "op": "frame_dig -1",
      "defined_out": [
        "migrationAdmin#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "migrationAdmin#0 (copy)"
      ]
    },
    "7186": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "7187": {
      "op": "bz acceptMigrationAlgoContract_bool_false@8",
      "stack_out": []
    },
    "7190": {
      "op": "frame_dig -3",
      "stack_out": [
        "algoTxn#0 (copy)"
      ]
    },
    "7192": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "7194": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "7196": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "7197": {
      "op": "bz acceptMigrationAlgoContract_bool_false@8",
      "stack_out": []
    },
    "7200": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "7201": {
      "block": "acceptMigrationAlgoContract_bool_merge@9",
      "stack_in": [
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "7202": {
      "op": "frame_dig -2",
      "defined_out": [
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7204": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "24"
      ]
    },
    "7206": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "7207": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"cash_on_hand\""
      ]
    },
    "7209": {
      "op": "swap",
      "stack_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ]
    },
    "7210": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7211": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7213": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "0"
      ]
    },
    "7214": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "7215": {
      "op": "bytec_2 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "7216": {
      "op": "swap",
      "stack_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "7217": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7218": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7220": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "16"
      ]
    },
    "7222": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "7223": {
      "op": "bytec 8 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"circulating_lst\""
      ]
    },
    "7225": {
      "op": "swap",
      "stack_out": [
        "\"circulating_lst\"",
        "new_state_value%2#0"
      ]
    },
    "7226": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7227": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7229": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "8"
      ]
    },
    "7231": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "7232": {
      "op": "bytec_3 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0",
        "\"total_borrows\""
      ]
    },
    "7233": {
      "op": "swap",
      "stack_out": [
        "\"total_borrows\"",
        "new_state_value%3#0"
      ]
    },
    "7234": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7235": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7237": {
      "op": "pushint 112 // 112",
      "defined_out": [
        "112",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "112"
      ]
    },
    "7239": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0"
      ]
    },
    "7240": {
      "op": "bytec 26 // \"total_additional_rewards\"",
      "defined_out": [
        "\"total_additional_rewards\"",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0",
        "\"total_additional_rewards\""
      ]
    },
    "7242": {
      "op": "swap",
      "stack_out": [
        "\"total_additional_rewards\"",
        "new_state_value%4#0"
      ]
    },
    "7243": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7244": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7246": {
      "op": "pushint 104 // 104",
      "defined_out": [
        "104",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "104"
      ]
    },
    "7248": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0"
      ]
    },
    "7249": {
      "op": "bytec 25 // \"total_commission_earned\"",
      "defined_out": [
        "\"total_commission_earned\"",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0",
        "\"total_commission_earned\""
      ]
    },
    "7251": {
      "op": "swap",
      "stack_out": [
        "\"total_commission_earned\"",
        "new_state_value%5#0"
      ]
    },
    "7252": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7253": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7255": {
      "op": "pushint 96 // 96",
      "defined_out": [
        "96",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "96"
      ]
    },
    "7257": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%6#0"
      ],
      "stack_out": [
        "new_state_value%6#0"
      ]
    },
    "7258": {
      "op": "bytec 17 // \"current_accumulated_commission\"",
      "defined_out": [
        "\"current_accumulated_commission\"",
        "new_state_value%6#0"
      ],
      "stack_out": [
        "new_state_value%6#0",
        "\"current_accumulated_commission\""
      ]
    },
    "7260": {
      "op": "swap",
      "stack_out": [
        "\"current_accumulated_commission\"",
        "new_state_value%6#0"
      ]
    },
    "7261": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7262": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7264": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "64"
      ]
    },
    "7266": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%7#0"
      ],
      "stack_out": [
        "new_state_value%7#0"
      ]
    },
    "7267": {
      "op": "bytec 14 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "new_state_value%7#0"
      ],
      "stack_out": [
        "new_state_value%7#0",
        "\"fee_pool\""
      ]
    },
    "7269": {
      "op": "swap",
      "stack_out": [
        "\"fee_pool\"",
        "new_state_value%7#0"
      ]
    },
    "7270": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7271": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7273": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "32"
      ]
    },
    "7275": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%8#0"
      ],
      "stack_out": [
        "new_state_value%8#0"
      ]
    },
    "7276": {
      "op": "bytec 11 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "new_state_value%8#0"
      ],
      "stack_out": [
        "new_state_value%8#0",
        "\"borrow_index_wad\""
      ]
    },
    "7278": {
      "op": "swap",
      "stack_out": [
        "\"borrow_index_wad\"",
        "new_state_value%8#0"
      ]
    },
    "7279": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7280": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7282": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "72"
      ]
    },
    "7284": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%9#0"
      ],
      "stack_out": [
        "new_state_value%9#0"
      ]
    },
    "7285": {
      "op": "bytec 20 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "new_state_value%9#0"
      ],
      "stack_out": [
        "new_state_value%9#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "7287": {
      "op": "swap",
      "stack_out": [
        "\"accepted_collaterals_count\"",
        "new_state_value%9#0"
      ]
    },
    "7288": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7289": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7291": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "40"
      ]
    },
    "7293": {
      "op": "extract_uint64",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "7294": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "7295": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"base_token_id\""
      ]
    },
    "7296": {
      "op": "swap",
      "stack_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "7297": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7298": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7300": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "56"
      ]
    },
    "7302": {
      "op": "extract_uint64",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "7303": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "7304": {
      "op": "bytec 10 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "\"lst_token_id\""
      ]
    },
    "7306": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%1#0"
      ]
    },
    "7307": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7308": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7310": {
      "op": "pushint 80 // 80",
      "defined_out": [
        "80",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "80"
      ]
    },
    "7312": {
      "op": "extract_uint64",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "7313": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "7314": {
      "op": "bytec 16 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "\"buyout_token_id\""
      ]
    },
    "7316": {
      "op": "swap",
      "stack_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%2#0"
      ]
    },
    "7317": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7318": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7320": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "48"
      ]
    },
    "7322": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%10#0"
      ],
      "stack_out": [
        "new_state_value%10#0"
      ]
    },
    "7323": {
      "op": "bytec 32 // \"commission_percentage\"",
      "defined_out": [
        "\"commission_percentage\"",
        "new_state_value%10#0"
      ],
      "stack_out": [
        "new_state_value%10#0",
        "\"commission_percentage\""
      ]
    },
    "7325": {
      "op": "swap",
      "stack_out": [
        "\"commission_percentage\"",
        "new_state_value%10#0"
      ]
    },
    "7326": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7327": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7329": {
      "op": "pushint 88 // 88",
      "defined_out": [
        "88",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "88"
      ]
    },
    "7331": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%11#0"
      ],
      "stack_out": [
        "new_state_value%11#0"
      ]
    },
    "7332": {
      "op": "bytec 24 // \"liq_bonus_bps\"",
      "defined_out": [
        "\"liq_bonus_bps\"",
        "new_state_value%11#0"
      ],
      "stack_out": [
        "new_state_value%11#0",
        "\"liq_bonus_bps\""
      ]
    },
    "7334": {
      "op": "swap",
      "stack_out": [
        "\"liq_bonus_bps\"",
        "new_state_value%11#0"
      ]
    },
    "7335": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7336": {
      "op": "frame_dig -2",
      "stack_out": [
        "snapshot#0 (copy)"
      ]
    },
    "7338": {
      "op": "pushint 120 // 120",
      "defined_out": [
        "120",
        "snapshot#0 (copy)"
      ],
      "stack_out": [
        "snapshot#0 (copy)",
        "120"
      ]
    },
    "7340": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%12#0"
      ],
      "stack_out": [
        "new_state_value%12#0"
      ]
    },
    "7341": {
      "op": "bytec 9 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "new_state_value%12#0"
      ],
      "stack_out": [
        "new_state_value%12#0",
        "\"active_loan_records\""
      ]
    },
    "7343": {
      "op": "swap",
      "stack_out": [
        "\"active_loan_records\"",
        "new_state_value%12#0"
      ]
    },
    "7344": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7345": {
      "op": "bytec 5 // \"contract_state\"",
      "defined_out": [
        "\"contract_state\""
      ],
      "stack_out": [
        "\"contract_state\""
      ]
    },
    "7347": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "\"contract_state\"",
        "0x0000000000000001"
      ],
      "stack_out": [
        "\"contract_state\"",
        "0x0000000000000001"
      ]
    },
    "7357": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7358": {
      "retsub": true,
      "op": "retsub"
    },
    "7359": {
      "block": "acceptMigrationAlgoContract_bool_false@8",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "7360": {
      "op": "b acceptMigrationAlgoContract_bool_merge@9"
    },
    "7363": {
      "block": "acceptMigrationAlgoContract_bool_false@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "7364": {
      "op": "b acceptMigrationAlgoContract_bool_merge@5"
    },
    "7367": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.goOnline",
      "params": {
        "feePayment#0": "uint64",
        "votePK#0": "bytes",
        "selectionPK#0": "bytes",
        "stateProofPK#0": "bytes",
        "voteFirst#0": "uint64",
        "voteLast#0": "uint64",
        "voteKeyDilution#0": "uint64"
      },
      "block": "goOnline",
      "stack_in": [],
      "op": "proto 7 0"
    },
    "7370": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7372": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "7373": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "7375": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7376": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "7377": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "7378": {
      "error": "Only admin can go online",
      "op": "assert // Only admin can go online",
      "stack_out": []
    },
    "7379": {
      "op": "global PayoutsGoOnlineFee"
    },
    "7381": {
      "op": "frame_dig -7",
      "defined_out": [
        "extraFee#0",
        "feePayment#0 (copy)"
      ],
      "stack_out": [
        "extraFee#0",
        "feePayment#0 (copy)"
      ]
    },
    "7383": {
      "op": "gtxns Receiver",
      "defined_out": [
        "extraFee#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "extraFee#0",
        "tmp%2#0"
      ]
    },
    "7385": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "extraFee#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "extraFee#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "7387": {
      "op": "==",
      "defined_out": [
        "extraFee#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "extraFee#0",
        "tmp%4#0"
      ]
    },
    "7388": {
      "op": "bz goOnline_bool_false@3",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7391": {
      "op": "frame_dig -7",
      "stack_out": [
        "extraFee#0",
        "feePayment#0 (copy)"
      ]
    },
    "7393": {
      "op": "gtxns Amount",
      "defined_out": [
        "extraFee#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "extraFee#0",
        "tmp%5#0"
      ]
    },
    "7395": {
      "op": "frame_dig 0",
      "stack_out": [
        "extraFee#0",
        "tmp%5#0",
        "extraFee#0"
      ]
    },
    "7397": {
      "op": "==",
      "defined_out": [
        "extraFee#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "extraFee#0",
        "tmp%6#0"
      ]
    },
    "7398": {
      "op": "bz goOnline_bool_false@3",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7401": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "extraFee#0"
      ],
      "stack_out": [
        "extraFee#0",
        "and_result%0#0"
      ]
    },
    "7402": {
      "block": "goOnline_bool_merge@4",
      "stack_in": [
        "extraFee#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7403": {
      "op": "itxn_begin"
    },
    "7404": {
      "op": "frame_dig -1",
      "defined_out": [
        "voteKeyDilution#0 (copy)"
      ],
      "stack_out": [
        "extraFee#0",
        "voteKeyDilution#0 (copy)"
      ]
    },
    "7406": {
      "op": "itxn_field VoteKeyDilution",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7408": {
      "op": "frame_dig -2",
      "defined_out": [
        "voteLast#0 (copy)"
      ],
      "stack_out": [
        "extraFee#0",
        "voteLast#0 (copy)"
      ]
    },
    "7410": {
      "op": "itxn_field VoteLast",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7412": {
      "op": "frame_dig -3",
      "defined_out": [
        "voteFirst#0 (copy)"
      ],
      "stack_out": [
        "extraFee#0",
        "voteFirst#0 (copy)"
      ]
    },
    "7414": {
      "op": "itxn_field VoteFirst",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7416": {
      "op": "frame_dig -4",
      "defined_out": [
        "stateProofPK#0 (copy)"
      ],
      "stack_out": [
        "extraFee#0",
        "stateProofPK#0 (copy)"
      ]
    },
    "7418": {
      "op": "itxn_field StateProofPK",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7420": {
      "op": "frame_dig -5",
      "defined_out": [
        "selectionPK#0 (copy)"
      ],
      "stack_out": [
        "extraFee#0",
        "selectionPK#0 (copy)"
      ]
    },
    "7422": {
      "op": "itxn_field SelectionPK",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7424": {
      "op": "frame_dig -6",
      "defined_out": [
        "votePK#0 (copy)"
      ],
      "stack_out": [
        "extraFee#0",
        "votePK#0 (copy)"
      ]
    },
    "7426": {
      "op": "itxn_field VotePK",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7428": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "extraFee#0",
        "2"
      ]
    },
    "7430": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7432": {
      "op": "frame_dig 0",
      "defined_out": [
        "extraFee#0"
      ],
      "stack_out": [
        "extraFee#0",
        "extraFee#0"
      ]
    },
    "7434": {
      "op": "itxn_field Fee",
      "stack_out": [
        "extraFee#0"
      ]
    },
    "7436": {
      "op": "itxn_submit"
    },
    "7437": {
      "retsub": true,
      "op": "retsub"
    },
    "7438": {
      "block": "goOnline_bool_false@3",
      "stack_in": [
        "extraFee#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "extraFee#0",
        "and_result%0#0"
      ]
    },
    "7439": {
      "op": "b goOnline_bool_merge@4"
    },
    "7442": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.goOffline",
      "params": {},
      "block": "goOffline",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "7443": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "7445": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "7447": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "7448": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "7450": {
      "op": "itxn_submit"
    },
    "7451": {
      "retsub": true,
      "op": "retsub"
    },
    "7452": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addCash",
      "params": {
        "amount#0": "uint64"
      },
      "block": "addCash",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "7455": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "7456": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7458": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7459": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "7460": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "7462": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "7463": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"cash_on_hand\""
      ]
    },
    "7465": {
      "op": "swap",
      "stack_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ]
    },
    "7466": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7467": {
      "retsub": true,
      "op": "retsub"
    },
    "7468": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.removeCash",
      "params": {
        "amount#0": "uint64"
      },
      "block": "removeCash",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "7471": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "7472": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "defined_out": [
        "\"cash_on_hand\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7474": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "7475": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "7476": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "7478": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7479": {
      "error": "INSUFFICIENT_CASH",
      "op": "assert // INSUFFICIENT_CASH",
      "stack_out": []
    },
    "7480": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "7481": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "stack_out": [
        "0",
        "\"cash_on_hand\""
      ]
    },
    "7483": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "7484": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "7485": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "7487": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "7488": {
      "op": "bytec 13 // \"cash_on_hand\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"cash_on_hand\""
      ]
    },
    "7490": {
      "op": "swap",
      "stack_out": [
        "\"cash_on_hand\"",
        "new_state_value%0#0"
      ]
    },
    "7491": {
      "op": "app_global_put",
      "stack_out": []
    },
    "7492": {
      "retsub": true,
      "op": "retsub"
    }
  }
}