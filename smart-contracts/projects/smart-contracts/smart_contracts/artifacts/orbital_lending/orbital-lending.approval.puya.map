{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/OrbitalLending.algo.ts",
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/config.algo.ts"
  ],
  "mappingsu7CE;;AAAA;AAAA;AAAA;;AAAA;AAv7CF;;;AAAA;;;AAAA;AAAA;;;AAAA;AAu7CE;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AApCC;;AAAA;AAAA;AAAA;;AAAA;AAj4CH;;;AAAA;AAAA;;AAi4CG;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAjDA;;AAAA;AAAA;AAAA;;AAAA;AAh1CH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAg1CG;;;AAAA;;AArDA;;AAAA;AAAA;AAAA;;AAAA;AA3xCH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA2xCG;;;AAAA;;AA1DA;;AAAA;AAAA;AAAA;;AAAA;AAjuCH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiuCG;;;AAAA;;AA3DA;;AAAA;AAAA;AAAA;;AAAA;AAtqCH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsqCG;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AArDA;;AAAA;AAAA;AAAA;;AAAA;AA3lCH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AA2lCG;;;AAAA;;AAhGA;;AAAA;AAAA;AAAA;;AAAA;AA3/BH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AA2/BG;;;AAAA;;AAbD;;AAAA;AAAA;AAAA;;AAAA;AA9+BF;;;AAAA;AAAA;;AA8+BE;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAnMA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAnDC;;AAAA;AAAA;AAAA;;AAAA;AAxvBH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAwvBG;;;AAAA;;AA1FA;;AAAA;AAAA;AAAA;;AAAA;AA9pBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8pBG;;;AAAA;;AAvDA;;AAAA;AAAA;AAAA;;AAAA;AAvmBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAumBG;;;AAAA;;AA1CA;;AAAA;AAAA;AAAA;;AAAA;AA7jBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6jBG;;;AAAA;;AA9CA;;AAAA;AAAA;AAAA;;AAAA;AA/gBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+gBG;;;AAAA;;AA7EA;;AAAA;AAAA;AAAA;;AAAA;AAlcH;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkcG;;;AAAA;;AA9CD;;AAAA;AAAA;AAAA;;AAAA;AApZF;;;AAoZE;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA3WF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA2WE;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AAlVF;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkVE;;;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAlTF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkTE;;;AAAA;;AAzDA;;AAAA;AAAA;AAAA;;AAAA;AAzPF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAyPE;;;AAAA;;AAnFC;;AAAA;AAAA;AAAA;;AAAA;AAtKH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAsKG;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AArJH;;;AAAA;AAAA;;AAAA;;;AAAA;AAqJG;;;AAAA;;AAAD;;;AAvHA;;AAyHE;;AAAA;AAC2B;;AAAA;AAjJ7B;AAiJE;AAAA;;AAcF;;;AAUgB;;AAlJhB;AAAA;;AAAA;AAAA;AAkJS;AAAP;AAEA;;AAAA;;AApJF;AAAA;;AAAA;AAAA;AAoJE;AAAA;;;AAAA;;AAAA;;AC9NkC;;;;AD8NlC;AAAA;;;;AAAA;AA1IF;;AA+IE;;AAAA;AA5IF;;AA6IE;;AAAA;AA1IF;;AA2IE;;AAAA;AA/DF;;AAgE0C;AAAxC;AAnKF;;AAoKwB;AAAtB;AA1KF;;AA2K+B;AAA7B;AAxKF;AAyK8B;AAA5B;AAtEF;AAuEmC;AAAjC;AA7IF;;AA8IE;;AAAA;AA9JF;;AA+JE;;AAAA;AA1HF;;AA2HE;;AAAA;AAvLF;;AAwL4B;;;;;;;;;;AAA1B;AA9IF;;AA+IwB;;AAAtB;AA5IF;;AA6I4B;;;AAA1B;AAtGF;;AAuG6B;AAA3B;AAhHF;;AAiH+B;AAA7B;AA5IF;;AA6I6B;;;AAA3B;AA1IF;;AA2I0B;;AAAxB;AAxIF;;AAyI0B;;;AAAxB;AAtIF;;AAuI2B;;;AAAzB;AAjIF;;AAkI6B;AAA3B;AA/HF;;AAgIgC;AAA9B;AA7HF;;AA8H4B;;AAA1B;AA3HF;;AA4H4B;AAA1B;AAtHF;;AAuH+B;AAA7B;AApHF;;AAqH8B;AAA5B;AA/EF;;AAgF6C;AAA3C;AA7EF;;AA8E+B;AAA7B;AA3EF;;AA4EmC;AAAjC;AAzEF;;AA0E0B;AAAxB;AAxEF;;AAyEwC;;AAAtC;AAxEF;;AAyEmC;AAAjC;AArHF;;ACpIiC;;AD0P/B;AAnHF;;AAoHsC;;AAApC;AApKF;AAAA;;AAAA;AAAA;AAmDA;;AAkHE;AAAA;AA/GF;;;;;;;;;;;;;;;;;;;;;;;;;AAiHuC;AAArC;AApNF;AAAA;AAAA;AAAA;AAsN+B;AAA7B;;;AACE;AAE0B;;AAzN9B;AAAA;AAAA;AAAA;AA0N4C;AACvB;;;;;;;AAJjB;;;ACtQkC;;;;ADsQlC;;;;;;AA2BJ;;;AAcgB;;AAzOhB;AAAA;;AAAA;AAAA;AAyOS;AAAP;AAGO;;AAAA;;;AAAqB;;AAAgB;AAAhB;AAArB;;;;AAAP;AACO;;AAAA;;;AAAsB;;AAAgB;AAAhB;AAAtB;;;;AAAP;AAEA;;AAAA;;;AACS;;AAAA;;AAAA;AAAP;AAEK;;AAAiB;AAAjB;AAAP;AAEO;;AAAA;;;AAAsC;;AAAoB;;;AAApB;AAAtC;;;;AAAP;AA9NF;;AAiOE;;AAAA;AA9NF;;AA+NE;;AAAA;AA5NF;;AA6NE;;AAAA;AA1NF;;AA2NE;;AAAA;AAxNF;;AAyNE;;AAAA;AAtNF;;AAuNE;;AAAA;AApNF;;AAqNE;;AAAA;AAlNF;;AAmNE;;AAAA;AAhNF;;AAiNE;;AAAA;AAxMF;;AAyME;;AAAA;AAtMF;;AAuME;;AAAA;AApMF;;AAqME;;AAAA;AAnJF;AAAA;;AAAA;AAAA;AAqJoC;AAAlC;AArJF;;AAqJE;AAAA;AAtJF;;AAuJwC;;AAAtC;AAhOF;AAAA;;AAAA;AAAA;AAmOM;;;AAvNN;AAAA;;AAAA;AAAA;AAZA;AAAA;;AAAA;AAAA;AAmOoC;AAA9B;;;AAnON;AAAA;;AAAA;AAAA;AAYA;;AAwNI;AAAA;;;;;;;;;;;;;;AAWJ;;;AACgB;;AArRhB;AAAA;;AAAA;AAAA;AAqRS;AAAP;AACA;;AAAA;;AAtRF;AAAA;;AAAA;AAAA;AAsRE;AAAA;;;AAAA;;AAAA;;AC/VgC;;;;AD+VhC;AAAA;;;;AAAA;AA7SF;AAAA;AAAA;AAAA;AAoTmD;AAClC;AAEI;;AACE;;AAAA;;AAAA;AACG;;AAAA;;AAAA;AAEJ;;AACiB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;AACwB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;;;;;;;AAHI;;;;;;;;;AALJ;;;;ACpWqB;;;;ADoWrB;;;AAYW;AA9T5B;;AA8TE;AAAA;;;;;;AAUF;;;AACgB;;AArThB;AAAA;;AAAA;AAAA;AAqTS;AAAP;AACA;;AAAA;;AAtTF;AAAA;;AAAA;AAAA;AAsTE;AAAA;;;AAAA;;AAAA;;AC9XkC;;;AD8XlC;AAAA;;;;AAAA;AAI0B;;AAAA;AA9U5B;;AA8UE;AAAA;AAGA;AAE0B;;AAET;;;;;;;;;AAJjB;;;ACnYoC;;;;ADmYpC;;;;;;AAgBF;;;AACgB;;AA9UhB;AAAA;;AAAA;AAAA;AA8US;AAAP;AAlWF;AAAA;;AAAA;AAAA;AAmWiC;AAAoB;;AAAA;;AAA5C;AAAP;AAEA;;AAAA;;AAjVF;AAAA;;AAAA;AAAA;AAiVE;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;;AAAA;AA9VF;;AAkWE;;AAAA;;;;;;AAlWF;AAAA;;AAAA;AAAA;AA0WE;AAvWF;AAAA;AAAA;AAAA;AA+WE;AAzQF;AAAA;;AAAA;AAAA;AAiRE;AASF;;;AAnXA;AAAA;;AAAA;AAAA;AAqXyB;AAAA;;AAAA;;AAAA;AAGR;AAAA;;;;;;;;;;;;;;AAAA;;;;ACjcqB;;;;ADicrB;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;;AAMK;AAApB;AAaF;;;AA3TsF;;AAAA;;AAAA;AAAA;AA6TlC;AAAA;AAAA;AAAA;;AAAA;AAEnC;AAAA;;;AAAA;AAAA;AAAQ;AAA6B;;AAAA;AAAhD;AAAJ;;;AACsD;;AAAA;AAAhB;;AAAgB;AAA9C;;AAAmB;AAGC;;AAAA;;;AACM;;AAAA;;;AACb;;AAAA;AAJoB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AAAA;AAAA;;AAgBJ;;;AA3bA;AAAA;AAAA;AAAA;AA6bmD;AACnC;;AAvahB;AAAA;;AAAA;AAAA;AAuaS;AAAP;AACyB;;AAAA;AAAA;AAAA;;AAAlB;AAAP;AArVoF;;AAAA;;AAAA;AAAA;AAmT9C;AAAA;;AAmC/B;AAAP;AACA;;AAAA;;AA1aF;AAAA;;AAAA;AAAA;AA0aE;AAAA;;;AAAA;;AAAA;;ACjfkC;;;;ADiflC;AAAA;;;;AAAA;AAjcF;AAAA;AAAA;AAAA;AAscoD;;AAAA;;AAAA;AAAA;AAAA;AAI/B;;;;;;;;;;AAJ+B;AAOlD;;AAAA;AAAA;;AAAA;AA1VF;AAAA;;AAAA;AAAA;AA2VkF;AAAxC;AA3V1C;;AA2VE;AAAA;AACA;AAEmB;;AACO;AAET;;;;;;;;;;;AALjB;;;AC9foC;;;;AD8fpC;AAlDsC;AAAA;;AA4DtC;;;;;;AAGF;;;AAldA;AAAA;;AAAA;AAAA;ACtDkC;ADygBF;AAhdhC;AAAA;AAAA;AAAA;AAkdmB;AAEa;;AAAA;AC7gBE;AD8gBzB;AAAP;AAsCF;;;AAxgBA;AAAA;AAAA;AAAA;AA0gBmD;AACjD;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAKA;;AAAA;;AC/jBoC;;AD+jBpC;AAAA;AAIuB;;;AAAjB;AAphBR;AAAA;AAAA;AAAA;;AAAA;AAaA;AAAA;AAAA;AAAA;AA8gBE;;;;;AAKA;AAE0B;;AA/hB5B;AAAA;;AAAA;AAAA;AAgiByC;;;;;;;;;AAHvC;;;AC/kBoC;;;;AD+kBpC;AAthBF;AAAA;;AAAA;AAAA;AA+hBE;AA/hBF;;AA+hBE;AAAA;AA5hBF;AAAA;AAAA;AAAA;AA6hBE;;AAAA;AA7hBF;AA6hBE;AAAA;AAC0B;;;AA3c5B;;AA2cE;AAAA;;AAbE;;AAAS;;;;;;;;;;AAwBb;;;AAtjBA;AAAA;AAAA;AAAA;;AAAA;AAyjBE;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAIA;;AAAA;;AC5mBoC;;AD4mBpC;AAAA;AAIuB;;;AAAjB;AApjBR;AAAA;AAAA;AAAA;AAujBE;;;;;AAKA;AAE0B;;AAxkB5B;AAAA;;AAAA;AAAA;AAykByC;;;;;;;;;AAHvC;;;ACxnBoC;;;;ADwnBpC;AA/jBF;AAAA;;AAAA;AAAA;AAwkBE;AAxkBF;;AAwkBE;AAAA;AArkBF;AAAA;AAAA;AAAA;AAskBE;;AAAA;AAtkBF;AAskBE;AAAA;AAC0B;;;AApf5B;;AAofE;AAAA;;AAbE;;AAAS;;;;;;;;;;AAyBb;;;AA7lBA;AAAA;;AAAA;AAAA;AAomBiD;AAC/C;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAMA;;AAAA;;AACU;;;AADV;AAAA;AAIuB;;;AAAjB;AAIF;;AAAoB;;AAApB;AAAJ;;;AA5mBF;AAAA;;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AA+emB;;AAAA;AACV;;AAAA;AA+HoC;;AA5nB7C;AAAA;AAAA;AAAA;AA4nBiG;AAAxF;;AAAA;AAAA;;AAAA;AAAP;AACA;AAE0B;;AA/nB5B;AAAA;AAAA;AAAA;AAgoB0C;;;;;;;;;AAHxC;;;AC5qBoC;;;;AD4qBpC;AAnnBF;AAAA;;AAAA;AAAA;AA4nBE;;AAAA;AA5nBF;;AA4nBE;AAAA;AAznBF;AAAA;AAAA;AAAA;AA0nBE;AAAA;AA1nBF;AA0nBE;AAAA;AAC0B;;;AAxiB5B;;AAwiBE;AAAA;;AAhK+B;AAAA;;;;;;;;AAAA;;;;ACvhBK;;;;ADuhBL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;AC3hBM;;;;AD2hBN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAMb;;AAAA;AACV;;AAAA;;;;;;;;AAoKT;;;;;;AA1iBuD;AAojBb;;AApjBa;AAojBL;AAAA;AAAA;;AAAA;AACzB;;;AAAjB;AAEN;;;AACuD;;AAA1B;;;AAAkC;;AACxB;AAArC;;AAgwBF;;AAAA;;ACp9CuC;;;ADo9CvC;AAAA;AAEA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AA9zCoF;;AAAA;;AAAA;AAmT9C;AAAA;;AAghCtC;AAlwBM;;AAAA;;AAAA;;AAAgB;;;AA1oBxB;AAAA;;AAAA;AAAA;AA2oBgC;ACxtBE;ADwtBH;AA/iB/B;;AAgjBE;;AAAA;AA7qBF;AAAA;AAAA;AAAA;AA8qBuC;;;AAiyBpB;;AAAA;AC1/CkB;;AD2/CV;AAh1C3B;;AAm1CE;;AAAA;AACwB;AAAA;AAj1C1B;;AAi1CE;AAAA;AAEO;AAAP;AA/6CF;AAAA;;AAAA;AAAA;AAq7CuB;;AAAA;ACxgDW;ADwgDZ;AACd;;AAAA;;AAAuB;AAAvB;AAAA;;AAAA;;AA78CR;AAAA;;AAAA;AAAA;AA+8CE;AA/8CF;;AA+8CE;AAAA;AAr2CF;;AAs2CE;AAAA;AA9yBA;;AAAA;;;AAEW;;AA0zBL;AAAe;;;AAEf;;AAAmB;;;AAQnB;;AAAA;AAAA;;AAAkB;AAKU;;AAAA;;;AAC4B;;AAAjB;;AAAiB;AAA9B;;AAAA;AAAZ;AA9/CtB;AAAA;AAAA;AAAA;AAigDc;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;AAHE;AAAA;AAAA;AAKL;;AAAA;AA36Cf;AAAA;;AAAA;AAAA;AA46CkB;AAXmB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AA94CkB;AAAA;;AAAA;AA84CrD;AAAA;AAeA;;AAAA;;AAAA;;;AA10B0B;;AAhsB5B;AAAA;AAAA;AAAA;AA6gD+B;AAA7B;;;AACE;;;;;;;AAAA;;;AC7jDkC;;;;AD6jDlC;AAv7CJ;AAAA;;AAAA;AAAA;AA0mB6B;;AAAA;AA1mB7B;;AA0mBE;AAAA;AAC0B;;;AAlmB5B;;AAkmBE;AAAA;;AAo1BE;AAthDJ;AAAA;AAAA;AAAA;AAyhD4C;;;;;;;;;AAHxC;;;ACrkDkC;;;;ADqkDlC;;;;AAz1B4D;;AAmB1C;;AAAA;AAhtBtB;AAAA;AAAA;AAAA;AAmtBc;;AAAA;AACsB;;AAAnB;AAFG;;AAGF;;AAHE;AAAA;AAAA;AAxnBpB;AAAA;;AAAA;AAAA;AA8nBkB;AAX0B;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAhmBW;AAAA;;AAAA;AAgmBrD;AAAA;AA7lBF;AAAA;AAAA;AAAA;AA2mBoE;AAAjC;AA3mBnC;AA2mBE;AAAA;;;;;;;;;;;;;;;AAsBF;;;AApoBuD;AAAA;;AAAA;AAsoBrB;AAAA;;AAAhC;AACA;;;;AAEA;;AAAA;;;;AAE0B;;;AAxpB5B;;AAwpBE;AAAA;;AA4CF;;;;;;;AAvxBA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA0EA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAvCA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAgtBE;;;AAAoB;;;AA9rBtB;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAyuBE;;;;;;;AA7tBF;AAAA;;AAAA;AAAA;AAyuBY;;;AA1wBZ;AAAA;;AAAA;AAAA;AAMA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA2tBM;;AAAA;AAAJ;;;AACqB;;AAAA;;AAAA;AACF;;AAAA;AAAX;AAAN;;AA1tBJ;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AAmuBM;;;AAAc;;AAAA;AAAA;;AAAA;;;;AAAd;;;;;;;;;;;AA1tBN;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AAsvBE;;;AAnvBF;AAAA;;AAAA;AAAA;AAovB4B;;;AA/wB5B;AAAA;;AAAA;AAAA;;;AAgxBuB;;AAAA;;AAAA;AAAA;;;AAAoB;;AAAA;;AAAA;;;AACjC;;AAAA;;AAAa;AAAb;;AACF;;AAAA;;AAAA;AAAJ;;;;;;;AACI;;AAAA;;AAAA;AAAJ;;;;;;;;;;;;;AAxvBJ;;AA2vBE;;AAAA;AACA;;AAAA;AAP6D;;;;;;AArvB/D;AAAA;;AAAA;AAAA;;;;;;AAgtBU;;AAAA;;AAAA;AAAA;;AAAe;ACp0BS;ADq0BxB;;AAAgB;AACH;;AAAA;;AAAA;AACb;;AAAA;;AAAA;AAAwB;;AAAA;;AAAA;AAAxB;AAAN;;;;;AA9uBJ;AAAA;;AAAA;AAAA;;;;;;AA8BA;AAAA;;AAAA;AAAA;ACvHkC;AD21BxB;;AAAA;AAAA;;AAAmB;AACN;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACV;;AAAA;;AC91BqB;AD81BrB;AAA+B;;AC91BV;AD81BU;AAA/B;AAAT;AAAA;;AAvuBJ;;AAwuBI;AAAA;;;;AAhDqB;;AAAA;;AAAA;AC/yBS;ADgzBd;AAAZ;AAAA;;AACN;;;AAA4B;;;AAiCN;;;AA/BN;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;ACnzBgB;ADozBb;AACZ;;AAAA;;;AA6Be;;;AAiDxB;;;AACQ;;AAAgB;;AAAU;AAA1B;AACN;;;AAAoB;AAAP;;AAAA;;AAAA;AA/vBf;AAAA;;AAAA;AAAA;AAgwBmB;;AAAA;AACoB;;AAAb;;AAAa;AAA9B;AAAP;;AAAA;;AAAA;AAIF;;;AAlvBuD;AAAA;;AAAA;AAmvBd;AAAA;AAAA;AACd;;;AAGA;AAAA;;;AACD;;AAAA;;;AAr2B1B;AAAA;AAAA;AAAA;AAu2BwB;;AAAA;;;AACT;;AAAA;AA9wBf;AAAA;;AAAA;AAAA;AA+wBkB;AAPD;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AASf;;AAAA;AAAA;AACA;AAKF;;;;;;;AAC6B;;AAArB;AArxBR;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAuxBM;AAAJ;;;AAAwB;AAAP;;AAAA;AAEX;;AAAA;;AAAiB;AAAjB;AAAA;;AA5CN;;;AAAyB;;;AAgDzB;;AAAA;;;AA7xBF;;AA8xBI;;AAAA;AACO;AAAP;;AAAA;AAlyBJ;AAAA;;AAAA;AAAA;AAwyBqB;AAAA;;AAAA;AC56BY;;AD66BL;AACD;AA1yB3B;;AA2yBE;AAAA;AA9yBF;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAozByB;AAAnB;;AACJ;;;AACqB;;AAAA;;AAAA;ACv7BU;;ADw7BlB;AAAX;;AAp2BJ;AAAA;;AAAA;AAAA;ACtFkC;AD+7B1B;AAAmB;AAGN;;AAAA;AAAA;;AAAA;ACl8Ba;ADm8BE;AAC5B;AAA2B;AAIN;;AAAA;;AAAA;AAr0B7B;;AAq0BE;AAAA;AA/4BF;AAAA;AAAA;AAAA;AAk5BE;;AAAA;AAl5BF;AAk5BE;AAAA;AA/4BF;AAAA;;AAAA;AAAA;AAk5BE;AAl5BF;;AAk5BE;AAAA;AAr0BF;;AAw0BE;;AAAA;AAIA;;AAAA;AAz0BF;AAAA;;AAAA;AAAA;AA6uBmB;;AAAA;ACn3BmB;;;;;ADq3Bf;ACz3BU;;AD43Bd;AC93Be;AD+3BN;AAApB;;AAsCoB;;;AA8G5B;;;AA13BuD;AAAA;;AAAA;AA23BZ;AAAA;AAAzC;AAYF;;;;;AAp/BA;AAAA;AAAA;AAAA;AA0/BmD;AACjD;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAKuB;;;AAAjB;AACuC;;AAA1B;;;AAAb;AAEgC;;AAA1B;;;AACa;;;AAAA;AAElB;;AAAA;;AAAA;AAAP;AAEM;;AAAwB;AAAxB;AAAA;;AAj7BR;AAAA;;AAAA;AAAA;AAo7BE;;AAAA;AAp7BF;;AAo7BE;AAAA;AAEA;;;AAh6BqD;AAi6B3B;;AAj6B2B;AAi6BnB;;AA95BpC;AAAA;AAAA;AAAA;AA+5BsC;AAAlC;AA/5BJ;AA+5BI;AAAA;AAEA;AAE0B;;AACW;AAAA;AAAlB;;AAAkB;AACC;AAAjB;;AAAiB;;;;;;;AAJtC;;;AAAA;;;AAAA;;AAUsC;;AACb;AAAA;AAAA;;;AACD;AAAA;;;AA7hC5B;AAAA;AAAA;AAAA;AAgiCgB;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKL;;AAAA;AA18BjB;AAAA;;AAAA;AAAA;AA28BoB;AAXwB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AA76BW;AA66B3B;;AA76B2B;AA66BnD;AAAA;;;;;;AA0DJ;;;;;AAplCA;AAAA;AAAA;AAAA;;AAAA;AAulCE;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAIuB;;;AAAjB;AACuC;;AAA1B;;;AAAb;AACgC;;AAA1B;;;AACa;;;AAAA;AAElB;;AAAA;;AAAA;AAAP;AAEM;;AAAwB;AAAxB;AAAA;;AA3gCR;AAAA;;AAAA;AAAA;AA8gCE;;AAAA;AA9gCF;;AA8gCE;AAAA;AAEA;;;AA1/BqD;AA2/B3B;;AA3/B2B;AA2/BnB;;AAx/BpC;AAAA;AAAA;AAAA;AAy/BsC;AAAlC;AAz/BJ;AAy/BI;AAAA;AAEA;AAE0B;;AACW;AAAA;AAAlB;;AAAkB;AACC;AAAjB;;AAAiB;;;;;;;AAJtC;;;AAAA;;;AAAA;;AAUsC;;AACb;AAAA;AAAA;;;AACD;AAAA;;;AAvnC5B;AAAA;AAAA;AAAA;AA0nCgB;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKL;;AAAA;AApiCjB;AAAA;;AAAA;AAAA;AAqiCoB;AAXwB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvgCW;AAugC3B;;AAvgC2B;AAugCnD;AAAA;;;;;;AAuBY;;AApnChB;AAAA;;AAAA;AAAA;AAonCS;AAAP;AACA;AArnCF;AAAA;;AAAA;AAAA;AAvBA;AAAA;AAAA;AAAA;AA+oC0C;AA/nC1C;AAAA;;AAAA;AAAA;;;;;;;AA4nCE;;;AAAA;;;AAAA;AA5nCF;;AAmoCwB;AAAtB;;AAYF;;;AAljCuD;AAAA;;AAAA;AAAA;;AAojCrB;AAAA;;AAAhC;AACuB;;;AAAjB;AAC6C;AAAA;AAAA;AACnD;AAAA;;AAAA;AAEM;AAAqC;;AAAiB;AAAtD;AAAA;;AACqB;;;AACsC;;AAAkB;AAAhD;AAAA;AAAA;;AA9jCiD;;AAAA;;AAAA;AAwT9C;AAAA;AAywBZ;;AAAgB;AAAA;AAAA;;AAAnC;;AAAA;AAAP;AAG4B;;;AACX;;AAAA;AAC0B;AAAb;AACxB;AAAA;;AAAa;AA7oCrB;AAAA;;AAAA;AAAA;AA8oCS;;AAAA;AAAP;AAEkC;AAAL;AAhpC/B;AAAA;;AAAA;AAAA;AAgpC8B;AAA8C;AAA9C;AACmC;AAAd;AAAJ;AAAA;AAAjB;AAE5B;;AAAA;;AAvrCF;AAAA;AAAA;AAAA;AAwrC8C;AAD5C;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AASyB;;AAAA;;AAhlC3B;AAAA;AAAA;AAAA;AAilCoE;AAAjC;AAjlCnC;AAilCE;AAAA;AAGA;AAGiC;;AAAA;AAAA;;;;;;;;;;;;;;AAHjC;;;AAAA;;;AAAA;AAQM;;AAAA;AAAmB;AACzB;;;AAC0B;;;AA9mC5B;;AA8mCE;AAAA;;;;;;AAYF;;;AA7mCuD;AAAA;;AAAA;AAAA;;AA+mCrB;AAAA;;AAAhC;AACuB;;;AAAjB;AAC6C;AAAA;AAAA;AACnD;AAAA;AAEqC;AAAA;AAAA;AAC/B;;AAAqC;;AAAiB;AAAtD;AAAA;;AAAA;;AACqB;;;AAAA;AAAA;;AACsC;;AAAkB;AAAhD;AAAA;AAAA;;AA1nCiD;;AAAA;;AAAA;AAwT9C;AAAA;AAq0BZ;;AAAgB;AAAA;AAAA;;AAAnC;;AAAA;AAAP;AAG4B;;;AACX;AAC0B;AAAb;AACxB;AAAA;;AAAa;AAzsCrB;AAAA;;AAAA;AAAA;AA0sCS;;AAAA;AAAP;AAEkC;AAAL;AA5sC/B;AAAA;;AAAA;AAAA;AA4sC8B;AAA8C;AAA9C;AACmC;AAAd;AAAJ;AAAA;AAAjB;AAE5B;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAQyB;;AAAA;;AA3oC3B;AAAA;AAAA;AAAA;AA4oCoE;AAAjC;AA5oCnC;AA4oCE;AAAA;AAGA;AAGiC;;AAAA;AAAA;;;;;;;;;;;;;;AAHjC;;;AAAA;;;AAAA;AAQM;;AAAA;AAAmB;AACzB;;;AAC0B;;;AAzqC5B;;AAyqCE;AAAA;;;;;;AAWF;;;AAvqCuD;AAAA;;AAAA;AAAA;;AAyqCrB;AAAA;;AAAhC;AACuB;;;AAAjB;AACkC;AAAA;AAClC;AAA0B;;AAAiB;AAA3C;AAAA;;AACqB;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AACM;;;AAA3B;AAAA;;AAjrC8E;;AAAA;;AAAA;AAwT9C;AAAA;AAAA;;AAAA;AA43BlB;;;AACL;AACkB;AAAX;AAEhB;AAAa;AA9vCrB;AAAA;;AAAA;AAAA;AA+vCS;AAAP;AAGA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAtyCF;AAAA;AAAA;AAAA;AAwyC8C;AAF5C;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AASyB;;AAAA;;AA/rC3B;AAAA;AAAA;AAAA;AAgsCoE;AAAjC;AAhsCnC;AAgsCE;AAAA;AAGA;AAE0B;;AACO;;AA3BA;;AA2BA;;;;;;;;;;;;AAHjC;;;AAAA;;;AAAA;AAS4D;;AAAhB;;AAAgB;AAAtD;AAAmB;AACzB;;AAAA;AAAA;;;AAC0B;;;AA9tC5B;;AA8tCE;AAAA;;;;;;AAWF;;;AA5tCuD;AAAA;;AAAA;AAAA;;AA8tCrB;AAAA;;AAAhC;AACuB;;;AAAjB;AACkC;AAAA;AAClC;AAA0B;;AAAiB;AAA3C;AAAA;;AACqB;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AACM;;;AAA3B;AAAA;;AAtuC8E;;AAAA;;AAAA;AAwT9C;AAAA;AAAA;;AAAA;AAi7BlB;;;AACL;AACkB;AAAX;AAEhB;AAAa;AAnzCrB;AAAA;;AAAA;AAAA;AAozCS;AAAP;AAGA;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAMyB;;AAAA;;AAjvC3B;AAAA;AAAA;AAAA;AAkvCoE;AAAjC;AAlvCnC;AAkvCE;AAAA;AAGA;AAE0B;;AACO;;AAxBA;;AAwBA;;;;;;;;;;;;AAHjC;;;AAAA;;;AAAA;AAS4D;;AAAhB;;AAAgB;AAAtD;AAAmB;AACzB;;AAAA;AAAA;;;AAC0B;;;AAhxC5B;;AAgxCE;AAAA;;;;;;AAUF;;;AA7wCuD;AAAA;;AAAA;AAuxCnB;AAAA;AAAA;;AAAlC;AAC0C;AAAA;AAC1C;;;;AACqB;;;AACf;AAAkC;;AAAiB;AAp2C3D;AAAA;;AAAA;AAAA;AAu2CiD;;AAAA;;;AAA3B;;;AACH;;AAAA;AACuB;AAAb;AAEP;AC37CY;AD27CZ;AAAd;;AAAa;AACb;AAAA;;AAAyB;AACzB;;AAAA;;AAAoB;AAE1B;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AA6BF;;;AAEiC;AAAA;;;;;;;;AAAA;;;;ACj+CK;;;;ADi+CL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAKD;AAAA;;;;;;;;AAAA;;;;ACt+CM;;;;ADs+CN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAMb;;AAAA;AACX;;AAAuB;AAp1CuD;;AAAA;;AAAA;AAwT9C;AAAA;AAgiCJ;;;AAEX;;;AAGN;ACl/CkB;;ADm/Cb;AAEtB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 10000 4 1000 1000000000000 1000000"
    },
    "19": {
      "op": "bytecblock \"base_token_id\" \"total_deposits\" \"active_loan_records\" \"loan_record\" \"admin_account\" 0x151f7c75 \"circulating_lst\" \"last_apr_bps\" \"total_borrows\" \"borrow_index_wad\" \"liq_threshold_bps\" \"accepted_collaterals\" \"fee_pool\" \"lst_token_id\" \"base_bps\" \"max_apr_bps\" \"prev_apr_bps\" 0x00 \"accepted_collaterals_count\" \"last_accrual_ts\" 0x09ef525f 0xae859f3b \"util_cap_bps\" \"rate_model_type\" \"kink_norm_bps\" \"slope1_bps\" \"slope2_bps\" \"ema_alpha_bps\" \"max_apr_step_bps\" \"util_ema_bps\" \"params_update_nonce\" \"ltv_bps\" \"origination_fee_bps\" \"protocol_share_bps\" \"oracle_app\" \"borrow_gate_enabled\" \"power_gamma_q16\" \"scarcity_K_bps\" \"last_scaled_down_disbursement\" \"last_max_borrow\" \"last_requested_loan\" \"debug_diff\" \"params_updated_at\""
    },
    "644": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "646": {
      "op": "bz main_after_if_else@34",
      "stack_out": []
    },
    "649": {
      "op": "pushbytess 0x3b01665e 0x9de42732 0x6ca100cd 0x17c33662 0x5efce39a 0x5cac25a9 // method \"createApplication(account,uint64)void\", method \"initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void\", method \"setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void\", method \"generateLSTToken(pay)void\", method \"optInToLST(uint64,pay)void\", method \"configureLSTToken(axfer,uint64)void\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)"
      ]
    },
    "681": {
      "op": "bytec 20 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "683": {
      "op": "bytec 21 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "685": {
      "op": "pushbytess 0x6c6337c0 0xe596ac73 0x4f2c6e55 0x72c5c57b 0xbae4c238 0x3e41a49b 0x15a5b25e 0x8553cffa 0xb4a74766 0xae99f45b 0xbe1256e6 0xb95560e0 0x96da416e 0x1dffadde 0xf0eda6a8 0x836dbb73 0xf16507ce 0xdaa7f7f2 0x3172ca9d 0xef0bd27a // method \"getAcceptedCollateralsCount()uint64\", method \"getOraclePrice(uint64)uint64\", method \"addNewCollateralType(uint64,uint64,pay)void\", method \"depositASA(axfer,uint64,pay)void\", method \"depositAlgo(pay,uint64,pay)void\", method \"withdrawDeposit(axfer,uint64,uint64,pay)void\", method \"borrow(axfer,uint64,uint64,uint64,uint64,pay)void\", method \"accrueLoanInterest(account,account)void\", method \"current_apr_bps()uint64\", method \"getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)\", method \"repayLoanASA(axfer,uint64,account)void\", method \"repayLoanAlgo(pay,uint64,account)void\", method \"withdrawFees()void\", method \"buyoutASA(account,account,axfer)void\", method \"buyoutAlgo(account,account,pay)void\", method \"liquidateASA(account,axfer)void\", method \"liquidateAlgo(account,pay)void\", method \"getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)\", method \"gas()void\", method \"calculateCollateralValueUSD(uint64,uint64,uint64)uint64\"",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addNewCollateralType(uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutASA(account,account,axfer)void)",
        "Method(buyoutAlgo(account,account,pay)void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanASA(axfer,uint64,account)void)",
        "Method(repayLoanAlgo(pay,uint64,account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawFees()void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanASA(axfer,uint64,account)void)",
        "Method(repayLoanAlgo(pay,uint64,account)void)",
        "Method(withdrawFees()void)",
        "Method(buyoutASA(account,account,axfer)void)",
        "Method(buyoutAlgo(account,account,pay)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)"
      ]
    },
    "787": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addNewCollateralType(uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutASA(account,account,axfer)void)",
        "Method(buyoutAlgo(account,account,pay)void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanASA(axfer,uint64,account)void)",
        "Method(repayLoanAlgo(pay,uint64,account)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(withdrawFees()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanASA(axfer,uint64,account)void)",
        "Method(repayLoanAlgo(pay,uint64,account)void)",
        "Method(withdrawFees()void)",
        "Method(buyoutASA(account,account,axfer)void)",
        "Method(buyoutAlgo(account,account,pay)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "tmp%2#0"
      ]
    },
    "790": {
      "op": "match main_createApplication_route@3 main_initApplication_route@4 main_setRateParams_route@5 main_generateLSTToken_route@6 main_optInToLST_route@7 main_configureLSTToken_route@8 main_getCirculatingLST_route@9 main_getTotalDeposits_route@10 main_getAcceptedCollateralsCount_route@11 main_getOraclePrice_route@12 main_addNewCollateralType_route@13 main_depositASA_route@14 main_depositAlgo_route@15 main_withdrawDeposit_route@16 main_borrow_route@17 main_accrueLoanInterest_route@18 main_current_apr_bps_route@19 main_getLoanRecord_route@20 main_repayLoanASA_route@21 main_repayLoanAlgo_route@22 main_withdrawFees_route@23 main_buyoutASA_route@24 main_buyoutAlgo_route@25 main_liquidateASA_route@26 main_liquidateAlgo_route@27 main_getLoanStatus_route@28 main_gas_route@29 main_calculateCollateralValueUSD_route@30",
      "stack_out": []
    },
    "848": {
      "block": "main_after_if_else@34",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "849": {
      "op": "return",
      "stack_out": []
    },
    "850": {
      "block": "main_calculateCollateralValueUSD_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%195#0"
      ]
    },
    "852": {
      "op": "!",
      "defined_out": [
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0"
      ]
    },
    "853": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "854": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%197#0"
      ],
      "stack_out": [
        "tmp%197#0"
      ]
    },
    "856": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "857": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%33#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%33#0"
      ]
    },
    "860": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%34#0"
      ]
    },
    "863": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%33#0",
        "tmp%199#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%33#0",
        "tmp%199#0"
      ]
    },
    "864": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%33#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%199#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%33#0",
        "tmp%199#0",
        "reinterpret_bytes[8]%35#0"
      ]
    },
    "867": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%33#0",
        "tmp%199#0",
        "tmp%200#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%33#0",
        "tmp%199#0",
        "tmp%200#0"
      ]
    },
    "868": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "871": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0"
      ]
    },
    "872": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "0x151f7c75"
      ]
    },
    "874": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%10#0"
      ]
    },
    "875": {
      "op": "concat",
      "defined_out": [
        "tmp%201#0"
      ],
      "stack_out": [
        "tmp%201#0"
      ]
    },
    "876": {
      "op": "log",
      "stack_out": []
    },
    "877": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "878": {
      "op": "return",
      "stack_out": []
    },
    "879": {
      "block": "main_gas_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0"
      ]
    },
    "881": {
      "op": "!",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "882": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "883": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0"
      ]
    },
    "885": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "886": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "887": {
      "op": "return",
      "stack_out": []
    },
    "888": {
      "block": "main_getLoanStatus_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%184#0"
      ]
    },
    "890": {
      "op": "!",
      "defined_out": [
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0"
      ]
    },
    "891": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "892": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%186#0"
      ],
      "stack_out": [
        "tmp%186#0"
      ]
    },
    "894": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "895": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%13#0"
      ]
    },
    "898": {
      "op": "btoi",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "899": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%189#0"
      ]
    },
    "901": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus",
      "op": "callsub getLoanStatus",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ]
    },
    "904": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%0#0"
      ]
    },
    "906": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0"
      ]
    },
    "907": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "elements_to_encode%1#0"
      ]
    },
    "909": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "910": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "elements_to_encode%2#0"
      ]
    },
    "912": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "913": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%3#0"
      ]
    },
    "915": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "916": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "elements_to_encode%4#0"
      ]
    },
    "918": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "919": {
      "op": "bytec 17 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0x00"
      ]
    },
    "921": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0x00",
        "0"
      ]
    },
    "922": {
      "op": "uncover 8",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "0x00",
        "0",
        "elements_to_encode%5#0"
      ]
    },
    "924": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%6#0",
        "encoded_bool%0#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0"
      ]
    },
    "925": {
      "op": "bytec 17 // 0x00",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "927": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "0x00",
        "0"
      ]
    },
    "928": {
      "op": "uncover 8",
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "0x00",
        "0",
        "elements_to_encode%6#0"
      ]
    },
    "930": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "931": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%5#0"
      ]
    },
    "933": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "935": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "936": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%7#0"
      ]
    },
    "938": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "939": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%8#0"
      ]
    },
    "941": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "942": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%9#0"
      ]
    },
    "944": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "945": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_bool%0#0"
      ]
    },
    "947": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "948": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0"
      ]
    },
    "949": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "950": {
      "op": "getbit",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ]
    },
    "951": {
      "op": "pushint 321 // 321"
    },
    "954": {
      "op": "swap",
      "defined_out": [
        "321",
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "321",
        "is_true%0#0"
      ]
    },
    "955": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "956": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "0x151f7c75"
      ]
    },
    "958": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "959": {
      "op": "concat",
      "defined_out": [
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%190#0"
      ]
    },
    "960": {
      "op": "log",
      "stack_out": []
    },
    "961": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "962": {
      "op": "return",
      "stack_out": []
    },
    "963": {
      "block": "main_liquidateAlgo_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "965": {
      "op": "!",
      "defined_out": [
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%178#0"
      ]
    },
    "966": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "967": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%179#0"
      ]
    },
    "969": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "970": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%12#0"
      ]
    },
    "973": {
      "op": "btoi",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "974": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "976": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%182#0",
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "tmp%183#0"
      ]
    },
    "978": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%182#0",
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "tmp%183#0",
        "1"
      ]
    },
    "979": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%18#0",
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "gtxn_idx%18#0"
      ]
    },
    "980": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)",
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)"
      ]
    },
    "981": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ]
    },
    "983": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "pay",
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "pay"
      ]
    },
    "984": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0",
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0",
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0"
      ]
    },
    "985": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%182#0",
        "gtxn_idx%18#0"
      ]
    },
    "986": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateAlgo",
      "op": "callsub liquidateAlgo",
      "stack_out": []
    },
    "989": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "990": {
      "op": "return",
      "stack_out": []
    },
    "991": {
      "block": "main_liquidateASA_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "993": {
      "op": "!",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "994": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "995": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "997": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "998": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%11#0"
      ]
    },
    "1001": {
      "op": "btoi",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "1002": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "1004": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%175#0",
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "tmp%176#0"
      ]
    },
    "1006": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%175#0",
        "tmp%176#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "tmp%176#0",
        "1"
      ]
    },
    "1007": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%17#0",
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "gtxn_idx%17#0"
      ]
    },
    "1008": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)",
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)"
      ]
    },
    "1009": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0"
      ]
    },
    "1011": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "axfer"
      ]
    },
    "1012": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0",
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0",
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0"
      ]
    },
    "1013": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%175#0",
        "gtxn_idx%17#0"
      ]
    },
    "1014": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateASA",
      "op": "callsub liquidateASA",
      "stack_out": []
    },
    "1017": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1018": {
      "op": "return",
      "stack_out": []
    },
    "1019": {
      "block": "main_buyoutAlgo_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "1021": {
      "op": "!",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "1022": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1023": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "1025": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1026": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "1029": {
      "op": "btoi",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "1030": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "1032": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%10#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "1035": {
      "op": "btoi",
      "defined_out": [
        "tmp%166#0",
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%167#0"
      ]
    },
    "1036": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0"
      ]
    },
    "1038": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%166#0",
        "tmp%168#0",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "tmp%169#0"
      ]
    },
    "1040": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%166#0",
        "tmp%168#0",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "tmp%169#0",
        "1"
      ]
    },
    "1041": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%16#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%16#0"
      ]
    },
    "1042": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)"
      ]
    },
    "1043": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0"
      ]
    },
    "1045": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "pay",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "pay"
      ]
    },
    "1046": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0",
        "tmp%166#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0"
      ]
    },
    "1047": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%166#0",
        "tmp%168#0",
        "gtxn_idx%16#0"
      ]
    },
    "1048": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutAlgo",
      "op": "callsub buyoutAlgo",
      "stack_out": []
    },
    "1051": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1052": {
      "op": "return",
      "stack_out": []
    },
    "1053": {
      "block": "main_buyoutASA_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "1055": {
      "op": "!",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "1056": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1057": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "1059": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1060": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "1063": {
      "op": "btoi",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "1064": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "1066": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%8#0",
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "1069": {
      "op": "btoi",
      "defined_out": [
        "tmp%157#0",
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%158#0"
      ]
    },
    "1070": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%157#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0"
      ]
    },
    "1072": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%157#0",
        "tmp%159#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "tmp%160#0"
      ]
    },
    "1074": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%157#0",
        "tmp%159#0",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "tmp%160#0",
        "1"
      ]
    },
    "1075": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%15#0",
        "tmp%157#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "gtxn_idx%15#0"
      ]
    },
    "1076": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)",
        "tmp%157#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)"
      ]
    },
    "1077": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "tmp%157#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0"
      ]
    },
    "1079": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "tmp%157#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "axfer"
      ]
    },
    "1080": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0",
        "tmp%157#0",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0"
      ]
    },
    "1081": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%157#0",
        "tmp%159#0",
        "gtxn_idx%15#0"
      ]
    },
    "1082": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutASA",
      "op": "callsub buyoutASA",
      "stack_out": []
    },
    "1085": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1086": {
      "op": "return",
      "stack_out": []
    },
    "1087": {
      "block": "main_withdrawFees_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "1089": {
      "op": "!",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "1090": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1091": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "1093": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1094": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawFees",
      "op": "callsub withdrawFees"
    },
    "1097": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1098": {
      "op": "return",
      "stack_out": []
    },
    "1099": {
      "block": "main_repayLoanAlgo_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "1101": {
      "op": "!",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "1102": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1103": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "1105": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1106": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "1108": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0",
        "1"
      ]
    },
    "1109": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0"
      ]
    },
    "1110": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)"
      ]
    },
    "1111": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0"
      ]
    },
    "1113": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "pay"
      ]
    },
    "1114": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0"
      ]
    },
    "1115": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%14#0"
      ]
    },
    "1116": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%32#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%32#0"
      ]
    },
    "1119": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%14#0",
        "tmp%145#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "tmp%145#0"
      ]
    },
    "1120": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%14#0",
        "reinterpret_bytes[1]%6#0",
        "tmp%145#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "tmp%145#0",
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "1123": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%14#0",
        "tmp%145#0",
        "tmp%146#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "tmp%145#0",
        "tmp%146#0"
      ]
    },
    "1124": {
      "op": "txnas Accounts",
      "defined_out": [
        "gtxn_idx%14#0",
        "tmp%145#0",
        "tmp%147#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "tmp%145#0",
        "tmp%147#0"
      ]
    },
    "1126": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo",
      "op": "callsub repayLoanAlgo",
      "stack_out": []
    },
    "1129": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1130": {
      "op": "return",
      "stack_out": []
    },
    "1131": {
      "block": "main_repayLoanASA_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "1133": {
      "op": "!",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "1134": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1135": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "1137": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1138": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "1140": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0",
        "1"
      ]
    },
    "1141": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0"
      ]
    },
    "1142": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)"
      ]
    },
    "1143": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ]
    },
    "1145": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "axfer"
      ]
    },
    "1146": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0"
      ]
    },
    "1147": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%13#0"
      ]
    },
    "1148": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%13#0",
        "reinterpret_bytes[8]%31#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "reinterpret_bytes[8]%31#0"
      ]
    },
    "1151": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%137#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "tmp%137#0"
      ]
    },
    "1152": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%13#0",
        "reinterpret_bytes[1]%5#0",
        "tmp%137#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "tmp%137#0",
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "1155": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%137#0",
        "tmp%138#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "tmp%137#0",
        "tmp%138#0"
      ]
    },
    "1156": {
      "op": "txnas Accounts",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%137#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "tmp%137#0",
        "tmp%139#0"
      ]
    },
    "1158": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanASA",
      "op": "callsub repayLoanASA",
      "stack_out": []
    },
    "1161": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1162": {
      "op": "return",
      "stack_out": []
    },
    "1163": {
      "block": "main_getLoanRecord_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "1165": {
      "op": "!",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "1166": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1167": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "1169": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1170": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "1173": {
      "op": "btoi",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "1174": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "1176": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "1179": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0",
        "0x151f7c75"
      ]
    },
    "1181": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%130#0"
      ]
    },
    "1182": {
      "op": "concat",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "1183": {
      "op": "log",
      "stack_out": []
    },
    "1184": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1185": {
      "op": "return",
      "stack_out": []
    },
    "1186": {
      "block": "main_current_apr_bps_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "1188": {
      "op": "!",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "1189": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1190": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "1192": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1193": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "1196": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "1197": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "1199": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "1200": {
      "op": "concat",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "1201": {
      "op": "log",
      "stack_out": []
    },
    "1202": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1203": {
      "op": "return",
      "stack_out": []
    },
    "1204": {
      "block": "main_accrueLoanInterest_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "1206": {
      "op": "!",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "1207": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1208": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "1210": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1211": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "1214": {
      "op": "btoi",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "1215": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "1217": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "1220": {
      "op": "btoi",
      "defined_out": [
        "tmp%116#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "tmp%117#0"
      ]
    },
    "1221": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%116#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "tmp%118#0"
      ]
    },
    "1223": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest",
      "op": "callsub accrueLoanInterest",
      "stack_out": []
    },
    "1226": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1227": {
      "op": "return",
      "stack_out": []
    },
    "1228": {
      "block": "main_borrow_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "1230": {
      "op": "!",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "1231": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1232": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "1234": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1235": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "1237": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0",
        "2"
      ]
    },
    "1239": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1240": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ]
    },
    "1241": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ]
    },
    "1243": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0",
        "axfer"
      ]
    },
    "1244": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ]
    },
    "1245": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1246": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%27#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%27#0"
      ]
    },
    "1249": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0"
      ]
    },
    "1250": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%28#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "reinterpret_bytes[8]%28#0"
      ]
    },
    "1253": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0"
      ]
    },
    "1254": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%107#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "reinterpret_bytes[8]%29#0"
      ]
    },
    "1257": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ]
    },
    "1258": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%30#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%30#0"
      ]
    },
    "1261": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%30#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%30#0",
        "tmp%110#0"
      ]
    },
    "1263": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%30#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%30#0",
        "tmp%110#0",
        "1"
      ]
    },
    "1264": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "reinterpret_bytes[8]%30#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%30#0",
        "gtxn_idx%12#0"
      ]
    },
    "1265": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)",
        "reinterpret_bytes[8]%30#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%30#0",
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)"
      ]
    },
    "1266": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "reinterpret_bytes[8]%30#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%30#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0"
      ]
    },
    "1268": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay",
        "reinterpret_bytes[8]%30#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%30#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay"
      ]
    },
    "1269": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0",
        "reinterpret_bytes[8]%30#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%30#0",
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0"
      ]
    },
    "1270": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%30#0",
        "gtxn_idx%12#0"
      ]
    },
    "1271": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow",
      "op": "callsub borrow",
      "stack_out": []
    },
    "1274": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1275": {
      "op": "return",
      "stack_out": []
    },
    "1276": {
      "block": "main_withdrawDeposit_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "1278": {
      "op": "!",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "1279": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1280": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "1282": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1283": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "1285": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "2"
      ]
    },
    "1287": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1288": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ]
    },
    "1289": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ]
    },
    "1291": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0",
        "axfer"
      ]
    },
    "1292": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ]
    },
    "1293": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1294": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%25#0"
      ]
    },
    "1297": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0"
      ]
    },
    "1298": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%26#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "reinterpret_bytes[8]%26#0"
      ]
    },
    "1301": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0"
      ]
    },
    "1302": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0"
      ]
    },
    "1304": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "tmp%101#0",
        "1"
      ]
    },
    "1305": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "gtxn_idx%10#0"
      ]
    },
    "1306": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)",
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)"
      ]
    },
    "1307": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0"
      ]
    },
    "1309": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "pay",
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0",
        "pay"
      ]
    },
    "1310": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type_matches%10#0",
        "tmp%100#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "gtxn_idx%10#0",
        "gtxn_type_matches%10#0"
      ]
    },
    "1311": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%99#0",
        "tmp%100#0",
        "gtxn_idx%10#0"
      ]
    },
    "1312": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit",
      "op": "callsub withdrawDeposit",
      "stack_out": []
    },
    "1315": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1316": {
      "op": "return",
      "stack_out": []
    },
    "1317": {
      "block": "main_depositAlgo_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "1319": {
      "op": "!",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "1320": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1321": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "1323": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1324": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "1326": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0",
        "2"
      ]
    },
    "1328": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1329": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ]
    },
    "1330": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ]
    },
    "1332": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "pay"
      ]
    },
    "1333": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ]
    },
    "1334": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1335": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%24#0"
      ]
    },
    "1338": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0"
      ]
    },
    "1339": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0"
      ]
    },
    "1341": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "tmp%93#0",
        "1"
      ]
    },
    "1342": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "gtxn_idx%8#0"
      ]
    },
    "1343": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)"
      ]
    },
    "1344": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0"
      ]
    },
    "1346": {
      "op": "intc_1 // pay",
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "pay"
      ]
    },
    "1347": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0"
      ]
    },
    "1348": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%92#0",
        "gtxn_idx%8#0"
      ]
    },
    "1349": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo",
      "op": "callsub depositAlgo",
      "stack_out": []
    },
    "1352": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1353": {
      "op": "return",
      "stack_out": []
    },
    "1354": {
      "block": "main_depositASA_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "1356": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "1357": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1358": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "1360": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1361": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "1363": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "2"
      ]
    },
    "1365": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1366": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ]
    },
    "1367": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ]
    },
    "1369": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "axfer"
      ]
    },
    "1370": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ]
    },
    "1371": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1372": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%23#0"
      ]
    },
    "1375": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0"
      ]
    },
    "1376": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "tmp%86#0"
      ]
    },
    "1378": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%5#0",
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "tmp%86#0",
        "1"
      ]
    },
    "1379": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0"
      ]
    },
    "1380": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)"
      ]
    },
    "1381": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0"
      ]
    },
    "1383": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay"
      ]
    },
    "1384": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0",
        "tmp%85#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0"
      ]
    },
    "1385": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%85#0",
        "gtxn_idx%6#0"
      ]
    },
    "1386": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositASA",
      "op": "callsub depositASA",
      "stack_out": []
    },
    "1389": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1390": {
      "op": "return",
      "stack_out": []
    },
    "1391": {
      "block": "main_addNewCollateralType_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1393": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "1394": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1395": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "1397": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1398": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0"
      ]
    },
    "1401": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0"
      ]
    },
    "1404": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0",
        "tmp%79#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0",
        "tmp%79#0"
      ]
    },
    "1406": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0",
        "tmp%79#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0",
        "tmp%79#0",
        "1"
      ]
    },
    "1407": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0",
        "gtxn_idx%4#0"
      ]
    },
    "1408": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)",
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "1409": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "1411": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay",
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "1412": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0",
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "1413": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%21#0",
        "reinterpret_bytes[8]%22#0",
        "gtxn_idx%4#0"
      ]
    },
    "1414": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType",
      "op": "callsub addNewCollateralType",
      "stack_out": []
    },
    "1417": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1418": {
      "op": "return",
      "stack_out": []
    },
    "1419": {
      "block": "main_getOraclePrice_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1421": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1422": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1423": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "1425": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1426": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%20#0"
      ]
    },
    "1429": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "1432": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "1433": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "1435": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "1436": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "1437": {
      "op": "log",
      "stack_out": []
    },
    "1438": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1439": {
      "op": "return",
      "stack_out": []
    },
    "1440": {
      "block": "main_getAcceptedCollateralsCount_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1442": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1443": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1444": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "1446": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1447": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "op": "callsub getAcceptedCollateralsCount",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "1450": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "1451": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "1453": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "1454": {
      "op": "concat",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "1455": {
      "op": "log",
      "stack_out": []
    },
    "1456": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1457": {
      "op": "return",
      "stack_out": []
    },
    "1458": {
      "block": "main_getTotalDeposits_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1460": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1461": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1462": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1464": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1465": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits",
      "op": "callsub getTotalDeposits",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1468": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "1469": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "1471": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "1472": {
      "op": "concat",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1473": {
      "op": "log",
      "stack_out": []
    },
    "1474": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1475": {
      "op": "return",
      "stack_out": []
    },
    "1476": {
      "block": "main_getCirculatingLST_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1478": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1479": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1480": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1482": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1483": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST",
      "op": "callsub getCirculatingLST",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1486": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1487": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1489": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1490": {
      "op": "concat",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "1491": {
      "op": "log",
      "stack_out": []
    },
    "1492": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1493": {
      "op": "return",
      "stack_out": []
    },
    "1494": {
      "block": "main_configureLSTToken_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1496": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1497": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1498": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1500": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1501": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1503": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "1"
      ]
    },
    "1504": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1505": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "1506": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "1508": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "1509": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "1510": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1511": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%19#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "1514": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%54#0"
      ]
    },
    "1515": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken",
      "op": "callsub configureLSTToken",
      "stack_out": []
    },
    "1518": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1519": {
      "op": "return",
      "stack_out": []
    },
    "1520": {
      "block": "main_optInToLST_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1522": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1523": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1524": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1526": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1527": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%18#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "1530": {
      "op": "btoi",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1531": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "1533": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "tmp%48#0",
        "1"
      ]
    },
    "1534": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "gtxn_idx%2#0"
      ]
    },
    "1535": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "1536": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "1538": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "1539": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "1540": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%47#0",
        "gtxn_idx%2#0"
      ]
    },
    "1541": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST",
      "op": "callsub optInToLST",
      "stack_out": []
    },
    "1544": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1545": {
      "op": "return",
      "stack_out": []
    },
    "1546": {
      "block": "main_generateLSTToken_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1548": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1549": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1550": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1552": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1553": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1555": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "1"
      ]
    },
    "1556": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1557": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "1558": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "1560": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "1561": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "1562": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1563": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken",
      "op": "callsub generateLSTToken",
      "stack_out": []
    },
    "1566": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1567": {
      "op": "return",
      "stack_out": []
    },
    "1568": {
      "block": "main_setRateParams_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1570": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1571": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1572": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1574": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1575": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1578": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1579": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "1582": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "1583": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "1586": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "1587": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "1590": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "1591": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "1594": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "1595": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "1598": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1599": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%12#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "1602": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "1603": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%13#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "1606": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "1607": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[8]%14#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "1610": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "1611": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[8]%15#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "1614": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "1615": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "1618": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "1619": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_bytes[8]%17#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "1622": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "1623": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setRateParams",
      "op": "callsub setRateParams",
      "stack_out": []
    },
    "1626": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1627": {
      "op": "return",
      "stack_out": []
    },
    "1628": {
      "block": "main_initApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1630": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1631": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1632": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1634": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1635": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1637": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1"
      ]
    },
    "1638": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1639": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "1640": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "1642": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "1643": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1644": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1645": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1648": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ]
    },
    "1649": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1652": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1653": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1656": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1657": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1660": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1661": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%5#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1664": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1665": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[1]%1#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "1668": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1669": {
      "op": "txnas Applications",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "1671": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication",
      "op": "callsub initApplication",
      "stack_out": []
    },
    "1674": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1675": {
      "op": "return",
      "stack_out": []
    },
    "1676": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1678": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1679": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1680": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1682": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1683": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1684": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "1687": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1688": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1690": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1693": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1694": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "1697": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1698": {
      "op": "return",
      "stack_out": []
    },
    "1699": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication",
      "params": {
        "admin#0": "bytes",
        "baseTokenId#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1702": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\""
      ],
      "stack_out": [
        "\"admin_account\""
      ]
    },
    "1704": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ]
    },
    "1706": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1707": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseTokenId#0 (copy)"
      ]
    },
    "1709": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1710": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"base_token_id\""
      ]
    },
    "1711": {
      "op": "swap",
      "stack_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "1712": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1713": {
      "retsub": true,
      "op": "retsub"
    },
    "1714": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication",
      "params": {
        "mbrTxn#0": "uint64",
        "ltv_bps#0": "uint64",
        "liq_threshold_bps#0": "uint64",
        "origination_fee_bps#0": "uint64",
        "protocol_share_bps#0": "uint64",
        "borrow_gate_enabled#0": "uint64",
        "oracle_app_id#0": "uint64"
      },
      "block": "initApplication",
      "stack_in": [],
      "op": "proto 7 0"
    },
    "1717": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1719": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1720": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1722": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1723": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1724": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1725": {
      "op": "assert",
      "stack_out": []
    },
    "1726": {
      "op": "frame_dig -7",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1728": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1730": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "1731": {
      "op": "bytec 4 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1733": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1734": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "1735": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1736": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "1739": {
      "op": "frame_dig -7",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1741": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1743": {
      "op": "pushint 400000 // 400000",
      "defined_out": [
        "400000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "400000"
      ]
    },
    "1747": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1748": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "1751": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1752": {
      "block": "initApplication_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "1753": {
      "op": "bytec 31 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\""
      ],
      "stack_out": [
        "\"ltv_bps\""
      ]
    },
    "1755": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ]
    },
    "1757": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1758": {
      "op": "bytec 10 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\""
      ],
      "stack_out": [
        "\"liq_threshold_bps\""
      ]
    },
    "1760": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ]
    },
    "1762": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1763": {
      "op": "bytec 32 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\""
      ],
      "stack_out": [
        "\"origination_fee_bps\""
      ]
    },
    "1765": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ],
      "stack_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ]
    },
    "1767": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1768": {
      "op": "bytec 18 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\""
      ],
      "stack_out": [
        "\"accepted_collaterals_count\""
      ]
    },
    "1770": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ]
    },
    "1771": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1772": {
      "op": "bytec 12 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\""
      ],
      "stack_out": [
        "\"fee_pool\""
      ]
    },
    "1774": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"fee_pool\"",
        "0"
      ]
    },
    "1775": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1776": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "1778": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"circulating_lst\"",
        "0"
      ]
    },
    "1779": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1780": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\""
      ],
      "stack_out": [
        "\"total_deposits\""
      ]
    },
    "1781": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_deposits\"",
        "0"
      ]
    },
    "1782": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1783": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\""
      ],
      "stack_out": [
        "\"active_loan_records\""
      ]
    },
    "1784": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"active_loan_records\"",
        "0"
      ]
    },
    "1785": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1786": {
      "op": "bytec 33 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\""
      ],
      "stack_out": [
        "\"protocol_share_bps\""
      ]
    },
    "1788": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ],
      "stack_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ]
    },
    "1790": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1791": {
      "op": "bytec 34 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\""
      ],
      "stack_out": [
        "\"oracle_app\""
      ]
    },
    "1793": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ],
      "stack_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ]
    },
    "1795": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1796": {
      "op": "bytec 35 // \"borrow_gate_enabled\"",
      "defined_out": [
        "\"borrow_gate_enabled\""
      ],
      "stack_out": [
        "\"borrow_gate_enabled\""
      ]
    },
    "1798": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"borrow_gate_enabled\"",
        "borrow_gate_enabled#0 (copy)"
      ],
      "stack_out": [
        "\"borrow_gate_enabled\"",
        "borrow_gate_enabled#0 (copy)"
      ]
    },
    "1800": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1801": {
      "op": "bytec 13 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\""
      ],
      "stack_out": [
        "\"lst_token_id\""
      ]
    },
    "1803": {
      "op": "pushbytes 0x0000000000000063",
      "defined_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ],
      "stack_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ]
    },
    "1813": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1814": {
      "op": "bytec 14 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "1816": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "\"base_bps\"",
        "50"
      ],
      "stack_out": [
        "\"base_bps\"",
        "50"
      ]
    },
    "1818": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1819": {
      "op": "bytec 22 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "1821": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "\"util_cap_bps\"",
        "8000"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "8000"
      ]
    },
    "1824": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1825": {
      "op": "bytec 8 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\""
      ],
      "stack_out": [
        "\"total_borrows\""
      ]
    },
    "1827": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_borrows\"",
        "0"
      ]
    },
    "1828": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1829": {
      "op": "bytec 23 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "1831": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rate_model_type\"",
        "0"
      ]
    },
    "1832": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1833": {
      "op": "bytec 24 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "1835": {
      "op": "pushint 5000 // 5000",
      "defined_out": [
        "\"kink_norm_bps\"",
        "5000"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "5000"
      ]
    },
    "1838": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1839": {
      "op": "bytec 25 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "1841": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "\"slope1_bps\"",
        "1000"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "1000"
      ]
    },
    "1843": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1844": {
      "op": "bytec 26 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "1846": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "\"slope2_bps\"",
        "2000"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "2000"
      ]
    },
    "1849": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1850": {
      "op": "bytec 15 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "1852": {
      "op": "pushint 6000 // 6000",
      "defined_out": [
        "\"max_apr_bps\"",
        "6000"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "6000"
      ]
    },
    "1855": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1856": {
      "op": "bytec 27 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "1858": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"ema_alpha_bps\"",
        "0"
      ]
    },
    "1859": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1860": {
      "op": "bytec 28 // \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\""
      ],
      "stack_out": [
        "\"max_apr_step_bps\""
      ]
    },
    "1862": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"max_apr_step_bps\"",
        "0"
      ]
    },
    "1863": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1864": {
      "op": "bytec 16 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\""
      ],
      "stack_out": [
        "\"prev_apr_bps\""
      ]
    },
    "1866": {
      "op": "pushint 50 // 50",
      "stack_out": [
        "\"prev_apr_bps\"",
        "50"
      ]
    },
    "1868": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1869": {
      "op": "bytec 29 // \"util_ema_bps\"",
      "defined_out": [
        "\"util_ema_bps\""
      ],
      "stack_out": [
        "\"util_ema_bps\""
      ]
    },
    "1871": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"util_ema_bps\"",
        "0"
      ]
    },
    "1872": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1873": {
      "op": "bytec 36 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "1875": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"power_gamma_q16\"",
        "0"
      ]
    },
    "1876": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1877": {
      "op": "bytec 37 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "1879": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"scarcity_K_bps\"",
        "0"
      ]
    },
    "1880": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1881": {
      "op": "bytec 38 // \"last_scaled_down_disbursement\"",
      "defined_out": [
        "\"last_scaled_down_disbursement\""
      ],
      "stack_out": [
        "\"last_scaled_down_disbursement\""
      ]
    },
    "1883": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_scaled_down_disbursement\"",
        "0"
      ]
    },
    "1884": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1885": {
      "op": "bytec 39 // \"last_max_borrow\"",
      "defined_out": [
        "\"last_max_borrow\""
      ],
      "stack_out": [
        "\"last_max_borrow\""
      ]
    },
    "1887": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_max_borrow\"",
        "0"
      ]
    },
    "1888": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1889": {
      "op": "bytec 40 // \"last_requested_loan\"",
      "defined_out": [
        "\"last_requested_loan\""
      ],
      "stack_out": [
        "\"last_requested_loan\""
      ]
    },
    "1891": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_requested_loan\"",
        "0"
      ]
    },
    "1892": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1893": {
      "op": "bytec 41 // \"debug_diff\"",
      "defined_out": [
        "\"debug_diff\""
      ],
      "stack_out": [
        "\"debug_diff\""
      ]
    },
    "1895": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"debug_diff\"",
        "0"
      ]
    },
    "1896": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1897": {
      "op": "bytec 42 // \"params_updated_at\"",
      "defined_out": [
        "\"params_updated_at\""
      ],
      "stack_out": [
        "\"params_updated_at\""
      ]
    },
    "1899": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"params_updated_at\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"params_updated_at\"",
        "new_state_value%0#0"
      ]
    },
    "1901": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1902": {
      "op": "bytec 30 // \"params_update_nonce\"",
      "defined_out": [
        "\"params_update_nonce\""
      ],
      "stack_out": [
        "\"params_update_nonce\""
      ]
    },
    "1904": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"params_update_nonce\"",
        "0"
      ]
    },
    "1905": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1906": {
      "op": "bytec 9 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\""
      ],
      "stack_out": [
        "\"borrow_index_wad\""
      ]
    },
    "1908": {
      "op": "intc 5 // 1000000000000",
      "defined_out": [
        "\"borrow_index_wad\"",
        "1000000000000"
      ],
      "stack_out": [
        "\"borrow_index_wad\"",
        "1000000000000"
      ]
    },
    "1910": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1911": {
      "op": "bytec 19 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\""
      ],
      "stack_out": [
        "\"last_accrual_ts\""
      ]
    },
    "1913": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"last_accrual_ts\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"last_accrual_ts\"",
        "new_state_value%1#0"
      ]
    },
    "1915": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1916": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1917": {
      "op": "bytec 14 // \"base_bps\"",
      "stack_out": [
        "0",
        "\"base_bps\""
      ]
    },
    "1919": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1920": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1921": {
      "op": "bytec 7 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "1923": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "maybe_value%2#0"
      ]
    },
    "1924": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1925": {
      "op": "pushbytes \"total_borrows_principal\"",
      "defined_out": [
        "\"total_borrows_principal\""
      ],
      "stack_out": [
        "\"total_borrows_principal\""
      ]
    },
    "1950": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_borrows_principal\"",
        "0"
      ]
    },
    "1951": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1952": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1953": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "1954": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1955": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1956": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1957": {
      "op": "bz initApplication_after_if_else@7",
      "stack_out": []
    },
    "1960": {
      "op": "itxn_begin"
    },
    "1961": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1963": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1964": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1965": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1966": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0"
      ]
    },
    "1967": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1968": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "1969": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1971": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1973": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "1975": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "1976": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1978": {
      "op": "intc 4 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "1980": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1982": {
      "op": "itxn_submit"
    },
    "1983": {
      "block": "initApplication_after_if_else@7",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "1984": {
      "block": "initApplication_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1985": {
      "op": "b initApplication_bool_merge@4"
    },
    "1988": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setRateParams",
      "params": {
        "base_bps#0": "uint64",
        "util_cap_bps#0": "uint64",
        "kink_norm_bps#0": "uint64",
        "slope1_bps#0": "uint64",
        "slope2_bps#0": "uint64",
        "max_apr_bps#0": "uint64",
        "borrow_gate_enabled#0": "uint64",
        "ema_alpha_bps#0": "uint64",
        "max_apr_step_bps#0": "uint64",
        "rate_model_type#0": "uint64",
        "power_gamma_q16#0": "uint64",
        "scarcity_K_bps#0": "uint64"
      },
      "block": "setRateParams",
      "stack_in": [],
      "op": "proto 12 0"
    },
    "1991": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1993": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1994": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1996": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1997": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1998": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1999": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "2000": {
      "op": "frame_dig -11",
      "defined_out": [
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "2002": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "2005": {
      "op": "frame_dig -11",
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "2007": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)",
        "10000"
      ]
    },
    "2008": {
      "op": "<=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2009": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "2012": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2013": {
      "block": "setRateParams_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "BAD_UTIL_CAP",
      "op": "assert // BAD_UTIL_CAP",
      "defined_out": [],
      "stack_out": []
    },
    "2014": {
      "op": "frame_dig -10",
      "defined_out": [
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2016": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "2019": {
      "op": "frame_dig -10",
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2021": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)",
        "10000"
      ]
    },
    "2022": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2023": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "2026": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2027": {
      "block": "setRateParams_bool_merge@8",
      "stack_in": [
        "and_result%1#0"
      ],
      "error": "BAD_KINK",
      "op": "assert // BAD_KINK",
      "defined_out": [],
      "stack_out": []
    },
    "2028": {
      "op": "frame_dig -7",
      "defined_out": [
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "2030": {
      "op": "bz setRateParams_after_if_else@14",
      "stack_out": []
    },
    "2033": {
      "op": "frame_dig -7",
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "2035": {
      "op": "frame_dig -12",
      "defined_out": [
        "base_bps#0 (copy)",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)",
        "base_bps#0 (copy)"
      ]
    },
    "2037": {
      "op": ">=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2038": {
      "error": "BAD_MAX_APR",
      "op": "assert // BAD_MAX_APR",
      "stack_out": []
    },
    "2039": {
      "block": "setRateParams_after_if_else@14",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "2041": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)",
        "10000"
      ]
    },
    "2042": {
      "op": "<=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2043": {
      "error": "BAD_EMA_ALPHA",
      "op": "assert // BAD_EMA_ALPHA",
      "stack_out": []
    },
    "2044": {
      "op": "frame_dig -3",
      "defined_out": [
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "2046": {
      "op": "bz setRateParams_bool_true@16",
      "stack_out": []
    },
    "2049": {
      "op": "frame_dig -3",
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "2051": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)",
        "255"
      ]
    },
    "2054": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "2055": {
      "op": "bz setRateParams_bool_false@17",
      "stack_out": []
    },
    "2058": {
      "block": "setRateParams_bool_true@16",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2059": {
      "block": "setRateParams_bool_merge@18",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "UNSUPPORTED_MODEL",
      "op": "assert // UNSUPPORTED_MODEL",
      "defined_out": [],
      "stack_out": []
    },
    "2060": {
      "op": "bytec 14 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "2062": {
      "op": "frame_dig -12",
      "defined_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ],
      "stack_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ]
    },
    "2064": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2065": {
      "op": "bytec 22 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "2067": {
      "op": "frame_dig -11",
      "defined_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ]
    },
    "2069": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2070": {
      "op": "bytec 24 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "2072": {
      "op": "frame_dig -10",
      "defined_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2074": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2075": {
      "op": "bytec 25 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "2077": {
      "op": "frame_dig -9",
      "defined_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ]
    },
    "2079": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2080": {
      "op": "bytec 26 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "2082": {
      "op": "frame_dig -8",
      "defined_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ]
    },
    "2084": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2085": {
      "op": "bytec 15 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "2087": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ]
    },
    "2089": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2090": {
      "op": "bytec 35 // \"borrow_gate_enabled\"",
      "defined_out": [
        "\"borrow_gate_enabled\""
      ],
      "stack_out": [
        "\"borrow_gate_enabled\""
      ]
    },
    "2092": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"borrow_gate_enabled\"",
        "borrow_gate_enabled#0 (copy)"
      ],
      "stack_out": [
        "\"borrow_gate_enabled\"",
        "borrow_gate_enabled#0 (copy)"
      ]
    },
    "2094": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2095": {
      "op": "bytec 27 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "2097": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "2099": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2100": {
      "op": "bytec 28 // \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\""
      ],
      "stack_out": [
        "\"max_apr_step_bps\""
      ]
    },
    "2102": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ]
    },
    "2104": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2105": {
      "op": "bytec 23 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "2107": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ]
    },
    "2109": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2110": {
      "op": "bytec 36 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "2112": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ],
      "stack_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ]
    },
    "2114": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2115": {
      "op": "bytec 37 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "2117": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ],
      "stack_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ]
    },
    "2119": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2120": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2121": {
      "op": "bytec 30 // \"params_update_nonce\"",
      "defined_out": [
        "\"params_update_nonce\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"params_update_nonce\""
      ]
    },
    "2123": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2124": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2125": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "2126": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2127": {
      "op": "bytec 30 // \"params_update_nonce\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"params_update_nonce\""
      ]
    },
    "2129": {
      "op": "swap",
      "stack_out": [
        "\"params_update_nonce\"",
        "new_state_value%0#0"
      ]
    },
    "2130": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2131": {
      "op": "bytec 42 // \"params_updated_at\"",
      "defined_out": [
        "\"params_updated_at\""
      ],
      "stack_out": [
        "\"params_updated_at\""
      ]
    },
    "2133": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"params_updated_at\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"params_updated_at\"",
        "new_state_value%1#0"
      ]
    },
    "2135": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2136": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2137": {
      "op": "bytec 15 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2139": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2140": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2141": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2144": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2145": {
      "op": "bytec 16 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "2147": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2148": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2149": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "0"
      ]
    },
    "2150": {
      "op": "bytec 15 // \"max_apr_bps\"",
      "stack_out": [
        "maybe_value%3#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2152": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2153": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "2154": {
      "op": ">",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2155": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2158": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2159": {
      "op": "bytec 15 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2161": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2162": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "2163": {
      "op": "bytec 16 // \"prev_apr_bps\"",
      "stack_out": [
        "maybe_value%5#0",
        "\"prev_apr_bps\""
      ]
    },
    "2165": {
      "op": "swap",
      "stack_out": [
        "\"prev_apr_bps\"",
        "maybe_value%5#0"
      ]
    },
    "2166": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2167": {
      "block": "setRateParams_after_if_else@21",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2168": {
      "block": "setRateParams_bool_false@17",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2169": {
      "op": "b setRateParams_bool_merge@18"
    },
    "2172": {
      "block": "setRateParams_bool_false@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2173": {
      "op": "b setRateParams_bool_merge@8"
    },
    "2176": {
      "block": "setRateParams_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2177": {
      "op": "b setRateParams_bool_merge@4"
    },
    "2180": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken",
      "params": {
        "mbrTxn#0": "uint64"
      },
      "block": "generateLSTToken",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2183": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2185": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2186": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2188": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2189": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2190": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2191": {
      "op": "assert",
      "stack_out": []
    },
    "2192": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2194": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2196": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2197": {
      "op": "bytec 4 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2199": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2200": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2201": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2202": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2205": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2207": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2209": {
      "op": "pushint 102000 // 102000",
      "defined_out": [
        "102000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "102000"
      ]
    },
    "2213": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2214": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2217": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2218": {
      "block": "generateLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2219": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2220": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2221": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2222": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2223": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2224": {
      "op": "itxn_begin"
    },
    "2225": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2227": {
      "op": "dig 1",
      "defined_out": [
        "baseToken#0",
        "baseToken#0 (copy)",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2229": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "baseToken#0",
        "check%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2231": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2232": {
      "op": "dig 2",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2234": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "baseToken#0",
        "check%1#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2236": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2237": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2239": {
      "op": "dig 4",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2241": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "baseToken#0",
        "check%2#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "2243": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0"
      ]
    },
    "2244": {
      "op": "pushbytes \"c\"",
      "defined_out": [
        "\"c\"",
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "\"c\""
      ]
    },
    "2247": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "\"c\"",
        "value%2#0"
      ]
    },
    "2248": {
      "op": "concat",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2249": {
      "op": "uncover 5",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "baseToken#0"
      ]
    },
    "2251": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%3#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0",
        "check%3#0"
      ]
    },
    "2253": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0"
      ]
    },
    "2254": {
      "op": "pushbytes \"c\"",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0",
        "\"c\""
      ]
    },
    "2257": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "\"c\"",
        "value%3#0"
      ]
    },
    "2258": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "2259": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2261": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2263": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2265": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "0"
      ]
    },
    "2266": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2268": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2270": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2272": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "2274": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "2276": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2278": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2280": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2282": {
      "op": "itxn_submit"
    },
    "2283": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "result.CreatedAssetID#0"
      ],
      "stack_out": [
        "result.CreatedAssetID#0"
      ]
    },
    "2285": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2286": {
      "op": "bytec 13 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2288": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2289": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2290": {
      "retsub": true,
      "op": "retsub"
    },
    "2291": {
      "block": "generateLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2292": {
      "op": "b generateLSTToken_bool_merge@4"
    },
    "2295": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST",
      "params": {
        "lstAssetId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "optInToLST",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2298": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2300": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2301": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2303": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2304": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2305": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2306": {
      "op": "assert",
      "stack_out": []
    },
    "2307": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2309": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2311": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2312": {
      "op": "bytec 4 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2314": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2315": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2316": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2317": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2320": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2322": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2324": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "2000"
      ]
    },
    "2327": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2328": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2331": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2332": {
      "block": "optInToLST_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2333": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAssetId#0 (copy)"
      ],
      "stack_out": [
        "lstAssetId#0 (copy)"
      ]
    },
    "2335": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2336": {
      "op": "bytec 13 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2338": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2339": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2340": {
      "op": "itxn_begin"
    },
    "2341": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2343": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2344": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2346": {
      "op": "frame_dig -2",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "lstAssetId#0 (copy)"
      ]
    },
    "2348": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2350": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2352": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2353": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2355": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2357": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2359": {
      "op": "itxn_submit"
    },
    "2360": {
      "retsub": true,
      "op": "retsub"
    },
    "2361": {
      "block": "optInToLST_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2362": {
      "op": "b optInToLST_bool_merge@4"
    },
    "2365": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken",
      "params": {
        "axferTxn#0": "uint64",
        "circulating_lst#0": "uint64"
      },
      "block": "configureLSTToken",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2368": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2370": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2371": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2373": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2374": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2375": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2376": {
      "op": "assert",
      "stack_out": []
    },
    "2377": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2378": {
      "op": "bytec 13 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "2380": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2381": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2382": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2383": {
      "op": "frame_dig -2",
      "defined_out": [
        "axferTxn#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "axferTxn#0 (copy)"
      ]
    },
    "2385": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2387": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2388": {
      "error": "LST token not set",
      "op": "assert // LST token not set",
      "stack_out": []
    },
    "2389": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2391": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2393": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "2394": {
      "op": "bytec 4 // \"admin_account\"",
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2396": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2397": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "2398": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2399": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2402": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2404": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2406": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2408": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2409": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2412": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2413": {
      "block": "configureLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2414": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "2416": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ],
      "stack_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ]
    },
    "2418": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2419": {
      "retsub": true,
      "op": "retsub"
    },
    "2420": {
      "block": "configureLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2421": {
      "op": "b configureLSTToken_bool_merge@4"
    },
    "2424": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST",
      "params": {},
      "block": "getCirculatingLST",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2425": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "2427": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2428": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2429": {
      "retsub": true,
      "op": "retsub"
    },
    "2430": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits",
      "params": {},
      "block": "getTotalDeposits",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2431": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "2432": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2433": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2434": {
      "retsub": true,
      "op": "retsub"
    },
    "2435": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "params": {},
      "block": "getAcceptedCollateralsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2436": {
      "op": "bytec 18 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "2438": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2439": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2440": {
      "retsub": true,
      "op": "retsub"
    },
    "2441": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "params": {
        "tokenId#0": "bytes"
      },
      "block": "getOraclePrice",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2444": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2445": {
      "op": "bytec 34 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"oracle_app\""
      ]
    },
    "2447": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "maybe_exists%0#0"
      ]
    },
    "2448": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2449": {
      "op": "dup",
      "defined_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ]
    },
    "2450": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "address#0",
        "check%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "check%0#0"
      ]
    },
    "2452": {
      "op": "bury 1",
      "stack_out": [
        "oracle#0",
        "check%0#0"
      ]
    },
    "2454": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2455": {
      "op": "itxn_begin"
    },
    "2456": {
      "op": "pushbytes 0xac13e004 // method \"getTokenPrice(uint64)(uint64,uint64,uint64)\"",
      "defined_out": [
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))"
      ]
    },
    "2462": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2464": {
      "op": "frame_dig -1",
      "defined_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ]
    },
    "2466": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2468": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2470": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2472": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2474": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2476": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2478": {
      "op": "itxn_submit"
    },
    "2479": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2481": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2482": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2485": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2487": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2488": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2489": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "12"
      ]
    },
    "2491": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2492": {
      "retsub": true,
      "op": "retsub"
    },
    "2493": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "updateCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2496": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "2498": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2500": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2501": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2502": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "2503": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0",
        "collateral#0"
      ]
    },
    "2504": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2505": {
      "op": "uncover 2",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "2507": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0"
      ]
    },
    "2508": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2509": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0",
        "tmp%1#0"
      ]
    },
    "2512": {
      "op": "swap",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0"
      ]
    },
    "2513": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "0"
      ]
    },
    "2514": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "2515": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%2#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2517": {
      "op": "btoi",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2518": {
      "op": "==",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "2519": {
      "op": "bz updateCollateralTotal_after_if_else@2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0"
      ]
    },
    "2522": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0"
      ]
    },
    "2524": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2525": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "collateral#0 (copy)",
        "24"
      ]
    },
    "2527": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "tmp%6#0"
      ]
    },
    "2528": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "tmp%6#0",
        "amount#0 (copy)"
      ]
    },
    "2530": {
      "op": "+",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "2531": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "newTotal#0",
        "collateral#0 (copy)"
      ]
    },
    "2533": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "collateral#0",
        "newTotal#0",
        "tmp%8#0"
      ]
    },
    "2536": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "newTotal#0",
        "tmp%8#0",
        "collateral#0"
      ]
    },
    "2538": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "newTotal#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "2541": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%9#0",
        "newTotal#0"
      ]
    },
    "2543": {
      "op": "itob",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ]
    },
    "2544": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "2546": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "tmp%1#0",
        "tmp%8#0"
      ]
    },
    "2548": {
      "op": "concat",
      "defined_out": [
        "collateral#0",
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2549": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0",
        "tmp%9#0"
      ]
    },
    "2551": {
      "op": "concat",
      "defined_out": [
        "collateral#0",
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2552": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2553": {
      "op": "concat",
      "defined_out": [
        "collateral#0",
        "encoded_tuple_buffer%6#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2554": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "encoded_tuple_buffer%6#0",
        "tmp%0#0"
      ]
    },
    "2556": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0",
        "tmp%0#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2557": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0"
      ]
    },
    "2558": {
      "block": "updateCollateralTotal_after_if_else@2",
      "stack_in": [
        "tmp%0#0",
        "collateral#0",
        "tmp%1#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "2559": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType",
      "params": {
        "collateralTokenId#0": "bytes",
        "collateralBaseTokenId#0": "bytes",
        "mbrTxn#0": "uint64"
      },
      "block": "addNewCollateralType",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2562": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2563": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2564": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2565": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2566": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2567": {
      "op": "txn Sender",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "2569": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0"
      ]
    },
    "2570": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2572": {
      "op": "app_global_get_ex",
      "defined_out": [
        "baseToken#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2573": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "2574": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%1#0"
      ]
    },
    "2575": {
      "op": "assert",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2576": {
      "op": "frame_dig -3",
      "defined_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2578": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "2579": {
      "op": "dup"
    },
    "2580": {
      "op": "uncover 2",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0",
        "baseToken#0"
      ]
    },
    "2582": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2583": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2584": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\""
      ]
    },
    "2586": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2588": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2589": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2590": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2591": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "2593": {
      "op": "!",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%5#0"
      ]
    },
    "2594": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2595": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "2597": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0"
      ]
    },
    "2599": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0"
      ]
    },
    "2600": {
      "op": "bytec 4 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2602": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2603": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0"
      ]
    },
    "2604": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%7#0"
      ]
    },
    "2605": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2608": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "2610": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0"
      ]
    },
    "2612": {
      "op": "pushint 101000 // 101000",
      "defined_out": [
        "101000",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0",
        "101000"
      ]
    },
    "2616": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%9#0"
      ]
    },
    "2617": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2620": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "2621": {
      "block": "addNewCollateralType_bool_merge@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2622": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0"
      ]
    },
    "2623": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0",
        "\"base_token_id\""
      ]
    },
    "2624": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2625": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0"
      ]
    },
    "2626": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2628": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralBaseTokenId#0 (copy)",
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "collateralTokenId#0 (copy)",
        "collateralBaseTokenId#0 (copy)"
      ]
    },
    "2630": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2631": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0"
      ]
    },
    "2632": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2633": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "2643": {
      "op": "concat",
      "defined_out": [
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0"
      ]
    },
    "2644": {
      "op": "frame_dig 1",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ]
    },
    "2646": {
      "op": "dup"
    },
    "2647": {
      "op": "uncover 2",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "newAcceptedCollateral#0"
      ]
    },
    "2649": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2650": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0"
      ]
    },
    "2651": {
      "op": "bytec 18 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "2653": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2654": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0"
      ]
    },
    "2655": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "1"
      ]
    },
    "2656": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0"
      ]
    },
    "2657": {
      "op": "bytec 18 // \"accepted_collaterals_count\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "2659": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "\"accepted_collaterals_count\"",
        "new_state_value%0#0"
      ]
    },
    "2660": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2661": {
      "op": "itxn_begin"
    },
    "2662": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2664": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2665": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2666": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2668": {
      "op": "frame_dig 0",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%2#0"
      ]
    },
    "2670": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2672": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2674": {
      "op": "itxn_field Sender",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2676": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "4"
      ]
    },
    "2677": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2679": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "1000"
      ]
    },
    "2681": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2683": {
      "op": "itxn_submit"
    },
    "2684": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2685": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "2687": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2688": {
      "retsub": true,
      "op": "retsub"
    },
    "2689": {
      "block": "addNewCollateralType_bool_false@3",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "2690": {
      "op": "b addNewCollateralType_bool_merge@4"
    },
    "2693": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "params": {
        "amount#0": "uint64"
      },
      "block": "calculateLSTDue",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2696": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2697": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "2699": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2700": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2701": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "10000"
      ]
    },
    "2702": {
      "op": "mulw",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0"
      ]
    },
    "2703": {
      "op": "intc_0 // 0",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0"
      ]
    },
    "2704": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "2705": {
      "op": "app_global_get_ex",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2706": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#0"
      ]
    },
    "2707": {
      "op": "divw",
      "defined_out": [
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0"
      ]
    },
    "2708": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0",
        "amount#0 (copy)"
      ]
    },
    "2710": {
      "op": "mulw",
      "defined_out": [
        "highBits2#0",
        "lowBits2#0"
      ],
      "stack_out": [
        "highBits2#0",
        "lowBits2#0"
      ]
    },
    "2711": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "highBits2#0",
        "lowBits2#0",
        "10000"
      ]
    },
    "2712": {
      "op": "divw",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2713": {
      "retsub": true,
      "op": "retsub"
    },
    "2714": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "depositASA",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2717": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2718": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2719": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2720": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2721": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2722": {
      "op": "frame_dig -3",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2724": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "2726": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2728": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "2729": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2732": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2734": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "2736": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseToken#0",
        "tmp%3#0",
        "baseToken#0"
      ]
    },
    "2738": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "2739": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2742": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2744": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "2746": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "2748": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "2749": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2752": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "2753": {
      "block": "depositASA_bool_merge@5",
      "stack_in": [
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2754": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "2756": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "2758": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0",
        "1000"
      ]
    },
    "2760": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%8#0"
      ]
    },
    "2761": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2762": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "baseToken#0",
        "_interestSlice#0"
      ]
    },
    "2765": {
      "op": "pop",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2766": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "2767": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2768": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2769": {
      "op": "bury 1",
      "stack_out": [
        "baseToken#0",
        "maybe_exists%1#0"
      ]
    },
    "2771": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2772": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "2773": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "2774": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2775": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%2#0"
      ]
    },
    "2776": {
      "op": "bnz depositASA_else_body@7",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2779": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2781": {
      "block": "depositASA_after_if_else@8",
      "stack_in": [
        "baseToken#0",
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "2782": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2784": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2785": {
      "op": "bytec 13 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "2787": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2788": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "2789": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2790": {
      "op": "dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2",
        "lstDue#2 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2 (copy)"
      ]
    },
    "2792": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2794": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2796": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2798": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "4"
      ]
    },
    "2799": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2801": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "1000"
      ]
    },
    "2803": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2805": {
      "op": "itxn_submit"
    },
    "2806": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "0"
      ]
    },
    "2807": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "0",
        "\"circulating_lst\""
      ]
    },
    "2809": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstDue#2",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2810": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "maybe_value%4#0"
      ]
    },
    "2811": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%0#0"
      ]
    },
    "2812": {
      "op": "bytec 6 // \"circulating_lst\"",
      "stack_out": [
        "baseToken#0",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "2814": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "2815": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2816": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "2817": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "2818": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2819": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0"
      ]
    },
    "2820": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0",
        "amount#0 (copy)"
      ]
    },
    "2822": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%1#0"
      ]
    },
    "2823": {
      "op": "bytec_1 // \"total_deposits\"",
      "stack_out": [
        "baseToken#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "2824": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "2825": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2826": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%2#0"
      ]
    },
    "2829": {
      "op": "bytec 7 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "2831": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "2832": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2833": {
      "retsub": true,
      "op": "retsub"
    },
    "2834": {
      "block": "depositASA_else_body@7",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "amount#0 (copy)"
      ]
    },
    "2836": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "op": "callsub calculateLSTDue",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2839": {
      "op": "b depositASA_after_if_else@8"
    },
    "2842": {
      "block": "depositASA_bool_false@4",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "2843": {
      "op": "b depositASA_bool_merge@5"
    },
    "2846": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo",
      "params": {
        "depositTxn#0": "uint64",
        "amount#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "depositAlgo",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2849": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2850": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2851": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2852": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2854": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": []
    },
    "2855": {
      "op": "frame_dig -3",
      "defined_out": [
        "depositTxn#0 (copy)"
      ],
      "stack_out": [
        "depositTxn#0 (copy)"
      ]
    },
    "2857": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2859": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2861": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2862": {
      "op": "bz depositAlgo_bool_false@3",
      "stack_out": []
    },
    "2865": {
      "op": "frame_dig -3",
      "stack_out": [
        "depositTxn#0 (copy)"
      ]
    },
    "2867": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2869": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "amount#0 (copy)"
      ]
    },
    "2871": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2872": {
      "op": "bz depositAlgo_bool_false@3",
      "stack_out": []
    },
    "2875": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2876": {
      "block": "depositAlgo_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2877": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2879": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2881": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "1000"
      ]
    },
    "2883": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2884": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "2885": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "_interestSlice#0"
      ]
    },
    "2888": {
      "op": "pop",
      "stack_out": []
    },
    "2889": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2890": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "2891": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2892": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2893": {
      "op": "bnz depositAlgo_else_body@6",
      "stack_out": []
    },
    "2896": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2898": {
      "block": "depositAlgo_after_if_else@7",
      "stack_in": [
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "2899": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2901": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2902": {
      "op": "bytec 13 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "2904": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2905": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "2906": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2907": {
      "op": "dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2",
        "lstDue#2 (copy)"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2 (copy)"
      ]
    },
    "2909": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2911": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2913": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2915": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "4"
      ]
    },
    "2916": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2918": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "1000"
      ]
    },
    "2920": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2922": {
      "op": "itxn_submit"
    },
    "2923": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstDue#2",
        "0"
      ]
    },
    "2924": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "0",
        "\"circulating_lst\""
      ]
    },
    "2926": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstDue#2",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstDue#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2927": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "maybe_value%3#0"
      ]
    },
    "2928": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2929": {
      "op": "bytec 6 // \"circulating_lst\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "2931": {
      "op": "swap",
      "stack_out": [
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "2932": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2933": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2934": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "2935": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2936": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "2937": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "2939": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "2940": {
      "op": "bytec_1 // \"total_deposits\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "2941": {
      "op": "swap",
      "stack_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "2942": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2943": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "2946": {
      "op": "bytec 7 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "2948": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "2949": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2950": {
      "retsub": true,
      "op": "retsub"
    },
    "2951": {
      "block": "depositAlgo_else_body@6",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "2953": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "op": "callsub calculateLSTDue",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "2956": {
      "op": "b depositAlgo_after_if_else@7"
    },
    "2959": {
      "block": "depositAlgo_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2960": {
      "op": "b depositAlgo_bool_merge@4"
    },
    "2963": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "lstAppId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "withdrawDeposit",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "2966": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2967": {
      "op": "bytec 13 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "2969": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2970": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2971": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2972": {
      "op": "frame_dig -4",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2974": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "lstAsset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#0"
      ]
    },
    "2976": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "lstAsset#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2978": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%2#0"
      ]
    },
    "2979": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2982": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2984": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "lstAsset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%3#0"
      ]
    },
    "2986": {
      "op": "frame_dig 0",
      "stack_out": [
        "lstAsset#0",
        "tmp%3#0",
        "lstAsset#0"
      ]
    },
    "2988": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%4#0"
      ]
    },
    "2989": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "2992": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2994": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "lstAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%5#0"
      ]
    },
    "2996": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "lstAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "2998": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%6#0"
      ]
    },
    "2999": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3002": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "3003": {
      "block": "withdrawDeposit_bool_merge@5",
      "stack_in": [
        "lstAsset#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3004": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3006": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%7#0"
      ]
    },
    "3008": {
      "op": "pushint 3000 // 3000",
      "defined_out": [
        "3000",
        "tmp%7#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%7#0",
        "3000"
      ]
    },
    "3011": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%8#0"
      ]
    },
    "3012": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3013": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "_interestSlice#0"
      ]
    },
    "3016": {
      "op": "pop",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3017": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3019": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "lstAppId#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)",
        "tmp%9#0"
      ]
    },
    "3021": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%10#0"
      ]
    },
    "3022": {
      "op": "bz withdrawDeposit_else_body@7",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3025": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0"
      ]
    },
    "3026": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3028": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ]
    },
    "3029": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3030": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0"
      ]
    },
    "3031": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3032": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%1#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "maybe_exists%1#0"
      ]
    },
    "3033": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3034": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "3036": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3037": {
      "op": "uncover 2",
      "stack_out": [
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "3039": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3040": {
      "block": "withdrawDeposit_after_if_else@8",
      "stack_in": [
        "lstAsset#0",
        "asaDue#1"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0"
      ]
    },
    "3042": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "0"
      ]
    },
    "3043": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3044": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3045": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "maybe_value%1#0"
      ]
    },
    "3046": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "3047": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "3049": {
      "op": "pop",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0"
      ]
    },
    "3050": {
      "op": "dig 1",
      "defined_out": [
        "asaDue#1",
        "asaDue#1 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "asaDue#1 (copy)"
      ]
    },
    "3052": {
      "op": ">=",
      "defined_out": [
        "asaDue#1",
        "tmp%15#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0"
      ]
    },
    "3053": {
      "op": "assert",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3054": {
      "op": "itxn_begin"
    },
    "3055": {
      "op": "txn Sender",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3057": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3058": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3059": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3060": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "3061": {
      "op": "btoi",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3062": {
      "op": "dig 2",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "asaDue#1 (copy)"
      ]
    },
    "3064": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3066": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3068": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3070": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "4"
      ]
    },
    "3071": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3073": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "1000"
      ]
    },
    "3075": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3077": {
      "op": "itxn_submit"
    },
    "3078": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "3079": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3081": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3082": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0"
      ]
    },
    "3083": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "asaDue#1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "3085": {
      "op": "-",
      "defined_out": [
        "asaDue#1",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0"
      ]
    },
    "3086": {
      "op": "bytec 6 // \"circulating_lst\"",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "3088": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "3089": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3090": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "3091": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"total_deposits\""
      ]
    },
    "3092": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3093": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0"
      ]
    },
    "3094": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "maybe_value%4#0",
        "asaDue#1"
      ]
    },
    "3095": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%1#0"
      ]
    },
    "3096": {
      "op": "bytec_1 // \"total_deposits\"",
      "stack_out": [
        "lstAsset#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "3097": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "3098": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3099": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%2#0"
      ]
    },
    "3102": {
      "op": "bytec 7 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "3104": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "3105": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3106": {
      "retsub": true,
      "op": "retsub"
    },
    "3107": {
      "block": "withdrawDeposit_else_body@7",
      "stack_in": [
        "lstAsset#0"
      ],
      "op": "itxn_begin"
    },
    "3108": {
      "op": "bytec 20 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)"
      ],
      "stack_out": [
        "lstAsset#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "3110": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3112": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3114": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3116": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "lstAsset#0",
        "appl"
      ]
    },
    "3118": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3120": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "lstAsset#0",
        "1000"
      ]
    },
    "3122": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3124": {
      "op": "itxn_submit"
    },
    "3125": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "3127": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3128": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0",
        "tmp%0#1"
      ]
    },
    "3131": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "awst_tmp%0#0"
      ]
    },
    "3132": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "3135": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1",
        "0x151f7c75"
      ]
    },
    "3137": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "3138": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1"
      ]
    },
    "3139": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3140": {
      "op": "itxn_begin"
    },
    "3141": {
      "op": "bytec 21 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "3143": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3145": {
      "op": "frame_dig -2",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3147": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3149": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "3151": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3153": {
      "op": "intc 4 // 1000",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "3155": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3157": {
      "op": "itxn_submit"
    },
    "3158": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "3160": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3161": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%4#1"
      ]
    },
    "3164": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "awst_tmp%1#0"
      ]
    },
    "3165": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ]
    },
    "3168": {
      "op": "bytec 5 // 0x151f7c75",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1",
        "0x151f7c75"
      ]
    },
    "3170": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ]
    },
    "3171": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ]
    },
    "3172": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3173": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "3175": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3176": {
      "op": "uncover 2",
      "stack_out": [
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "3178": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3179": {
      "op": "b withdrawDeposit_after_if_else@8"
    },
    "3182": {
      "block": "withdrawDeposit_bool_false@4",
      "stack_in": [
        "lstAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "3183": {
      "op": "b withdrawDeposit_bool_merge@5"
    },
    "3186": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow",
      "params": {
        "assetTransferTxn#0": "uint64",
        "requestedLoanAmount#0": "uint64",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64",
        "collateralTokenId#0": "bytes",
        "mbrTxn#0": "uint64"
      },
      "block": "borrow",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "3189": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralToUse#1"
      ]
    },
    "3191": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3"
      ]
    },
    "3192": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "\"loan_record\""
      ]
    },
    "3193": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "\"loan_record\"",
        "tmp%0#0"
      ]
    },
    "3195": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "tmp%1#0"
      ]
    },
    "3196": {
      "op": "box_len",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "maybe_value%0#0",
        "hasLoan#0"
      ]
    },
    "3197": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "maybe_value%0#0",
        "hasLoan#0",
        "hasLoan#0 (copy)"
      ]
    },
    "3198": {
      "op": "uncover 2",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "hasLoan#0",
        "maybe_value%0#0"
      ]
    },
    "3200": {
      "op": "pop",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3201": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "hasLoan#0",
        "_interestSlice#0"
      ]
    },
    "3204": {
      "op": "pop",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3205": {
      "op": "bz borrow_else_body@2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3208": {
      "op": "txn Sender",
      "defined_out": [
        "hasLoan#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%2#0"
      ]
    },
    "3210": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "hasLoan#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%3#0"
      ]
    },
    "3213": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "hasLoan#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%3#0",
        "40"
      ]
    },
    "3215": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "3216": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3218": {
      "block": "borrow_after_if_else@3",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3220": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%0#1"
      ]
    },
    "3222": {
      "op": "pushint 4000 // 4000",
      "defined_out": [
        "4000",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%0#1",
        "4000"
      ]
    },
    "3225": {
      "op": "==",
      "defined_out": [
        "tmp%1#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%1#3"
      ]
    },
    "3226": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3227": {
      "op": "frame_dig -6",
      "defined_out": [
        "assetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3229": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%2#0"
      ]
    },
    "3231": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%2#0",
        "tmp%3#2"
      ]
    },
    "3233": {
      "op": "==",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%4#1"
      ]
    },
    "3234": {
      "op": "bz borrow_bool_false@21",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3237": {
      "op": "frame_dig -6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3239": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%5#1"
      ]
    },
    "3241": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "tmp%5#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%5#1",
        "collateralAmount#0 (copy)"
      ]
    },
    "3243": {
      "op": "==",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%6#1"
      ]
    },
    "3244": {
      "op": "bz borrow_bool_false@21",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3247": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "3248": {
      "block": "borrow_bool_merge@22",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3249": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "\"accepted_collaterals\""
      ]
    },
    "3251": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3253": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%0#2"
      ]
    },
    "3254": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#0",
        "maybe_exists%0#1"
      ]
    },
    "3255": {
      "op": "bury 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_exists%0#1"
      ]
    },
    "3257": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3258": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3260": {
      "op": "frame_dig 0",
      "defined_out": [
        "collateralToUse#1",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralToUse#1"
      ]
    },
    "3262": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralToUse#1",
        "collateralTokenId#0 (copy)",
        "lstApp#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralToUse#1",
        "lstApp#0 (copy)"
      ]
    },
    "3264": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralUSD#0"
      ]
    },
    "3267": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralUSD#0",
        "0"
      ]
    },
    "3268": {
      "op": "bytec 31 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralUSD#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "3270": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralUSD#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3271": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralUSD#0",
        "maybe_value%1#0"
      ]
    },
    "3272": {
      "op": "*",
      "defined_out": [
        "collateralToUse#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%4#0"
      ]
    },
    "3273": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "collateralToUse#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%4#0",
        "10000"
      ]
    },
    "3274": {
      "op": "/",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3275": {
      "op": "bytec 39 // \"last_max_borrow\"",
      "defined_out": [
        "\"last_max_borrow\"",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "\"last_max_borrow\""
      ]
    },
    "3277": {
      "op": "dig 1",
      "defined_out": [
        "\"last_max_borrow\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maxBorrowUSD#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "\"last_max_borrow\"",
        "maxBorrowUSD#0 (copy)"
      ]
    },
    "3279": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3280": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0"
      ]
    },
    "3281": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3282": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3283": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%2#0"
      ]
    },
    "3284": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0"
      ]
    },
    "3287": {
      "op": "frame_dig -5",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3289": {
      "op": "mulw",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ]
    },
    "3290": {
      "op": "intc 6 // 1000000",
      "defined_out": [
        "1000000",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0",
        "1000000"
      ]
    },
    "3292": {
      "op": "divw",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3293": {
      "op": "bytec 40 // \"last_requested_loan\"",
      "defined_out": [
        "\"last_requested_loan\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"last_requested_loan\""
      ]
    },
    "3295": {
      "op": "dig 1",
      "defined_out": [
        "\"last_requested_loan\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "requestedLoanUSD#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"last_requested_loan\"",
        "requestedLoanUSD#0 (copy)"
      ]
    },
    "3297": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3298": {
      "op": "dup2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "maxBorrowUSD#0 (copy)",
        "requestedLoanUSD#0 (copy)"
      ]
    },
    "3299": {
      "op": "-",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "new_state_value%0#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "new_state_value%0#0"
      ]
    },
    "3300": {
      "op": "bytec 41 // \"debug_diff\"",
      "defined_out": [
        "\"debug_diff\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "new_state_value%0#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "new_state_value%0#0",
        "\"debug_diff\""
      ]
    },
    "3302": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"debug_diff\"",
        "new_state_value%0#0"
      ]
    },
    "3303": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3304": {
      "op": ">=",
      "defined_out": [
        "collateralToUse#1",
        "tmp%0#5"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%0#5"
      ]
    },
    "3305": {
      "error": "exceeds LTV limit",
      "op": "assert // exceeds LTV limit",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3306": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "0"
      ]
    },
    "3307": {
      "op": "bytec 32 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\"",
        "0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "0",
        "\"origination_fee_bps\""
      ]
    },
    "3309": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#0",
        "maybe_exists%0#1"
      ]
    },
    "3310": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#0"
      ]
    },
    "3311": {
      "op": "frame_dig -5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3313": {
      "op": "*",
      "defined_out": [
        "collateralToUse#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%0#1"
      ]
    },
    "3314": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%0#1",
        "10000"
      ]
    },
    "3315": {
      "op": "/",
      "defined_out": [
        "collateralToUse#1",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "fee#1"
      ]
    },
    "3316": {
      "op": "frame_dig -5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3318": {
      "op": "dig 1",
      "defined_out": [
        "collateralToUse#1",
        "fee#1",
        "fee#1 (copy)",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)",
        "fee#1 (copy)"
      ]
    },
    "3320": {
      "op": "-",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "fee#1",
        "disbursement#3"
      ]
    },
    "3321": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "fee#1",
        "disbursement#3",
        "disbursement#3 (copy)"
      ]
    },
    "3322": {
      "op": "cover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "disbursement#3"
      ]
    },
    "3324": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "fee#1"
      ]
    },
    "3326": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "0"
      ]
    },
    "3327": {
      "op": "bytec 12 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "0",
        "\"fee_pool\""
      ]
    },
    "3329": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3330": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "maybe_value%1#0"
      ]
    },
    "3331": {
      "op": "+",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "new_state_value%0#0"
      ]
    },
    "3332": {
      "op": "bytec 12 // \"fee_pool\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "new_state_value%0#0",
        "\"fee_pool\""
      ]
    },
    "3334": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "\"fee_pool\"",
        "new_state_value%0#0"
      ]
    },
    "3335": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3"
      ]
    },
    "3336": {
      "op": "bytec 38 // \"last_scaled_down_disbursement\"",
      "defined_out": [
        "\"last_scaled_down_disbursement\"",
        "collateralToUse#1",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "disbursement#3",
        "\"last_scaled_down_disbursement\""
      ]
    },
    "3338": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "\"last_scaled_down_disbursement\"",
        "disbursement#3"
      ]
    },
    "3339": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3340": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3342": {
      "op": "bz borrow_else_body@5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3345": {
      "op": "txn Sender",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3347": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "borrower#0 (copy)",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "borrower#0 (copy)"
      ]
    },
    "3348": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0"
      ]
    },
    "3351": {
      "op": "dig 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "borrower#0 (copy)"
      ]
    },
    "3353": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "op": "callsub syncBorrowerSnapshot",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0"
      ]
    },
    "3356": {
      "op": "frame_dig 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#3"
      ]
    },
    "3358": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "disbursement#3 (copy)",
        "existingLoan#0",
        "hasLoan#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#3 (copy)",
        "disbursement#3 (copy)"
      ]
    },
    "3359": {
      "op": "cover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#3 (copy)"
      ]
    },
    "3361": {
      "op": "+",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "newDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "existingLoan#0",
        "newDebt#0"
      ]
    },
    "3362": {
      "op": "dig 1",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "hasLoan#0",
        "newDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "existingLoan#0",
        "newDebt#0",
        "existingLoan#0 (copy)"
      ]
    },
    "3364": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "existingLoan#0",
        "newDebt#0",
        "tmp%0#2"
      ]
    },
    "3367": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "existingLoan#0"
      ]
    },
    "3369": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "existingLoan#0",
        "40"
      ]
    },
    "3371": {
      "op": "extract_uint64",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2",
        "tmp%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "tmp%2#1"
      ]
    },
    "3372": {
      "op": "frame_dig -4",
      "defined_out": [
        "borrower#0",
        "collateralAmount#0 (copy)",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2",
        "tmp%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "tmp%2#1",
        "collateralAmount#0 (copy)"
      ]
    },
    "3374": {
      "op": "+",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2",
        "to_encode%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "to_encode%0#0"
      ]
    },
    "3375": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ]
    },
    "3376": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3377": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3378": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_exists%0#1",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "3379": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1"
      ]
    },
    "3380": {
      "op": "uncover 4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "disbursement#3"
      ]
    },
    "3382": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0"
      ]
    },
    "3383": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "to_encode%1#0"
      ]
    },
    "3385": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3386": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "3387": {
      "op": "bytec 17 // 0x00",
      "defined_out": [
        "0x00",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0",
        "0x00"
      ]
    },
    "3389": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%2#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3390": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "3391": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3392": {
      "op": "uncover 4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "newDebt#0"
      ]
    },
    "3394": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%3#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1"
      ]
    },
    "3395": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "0"
      ]
    },
    "3396": {
      "op": "bytec 9 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%3#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "3398": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3399": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "maybe_value%1#0"
      ]
    },
    "3400": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ]
    },
    "3401": {
      "op": "dig 6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "borrower#0 (copy)"
      ]
    },
    "3403": {
      "op": "uncover 6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "borrower#0 (copy)",
        "tmp%0#2"
      ]
    },
    "3405": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3406": {
      "op": "uncover 5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "3408": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3409": {
      "op": "uncover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3411": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%8#0",
        "hasLoan#0",
        "maybe_value%0#1",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3412": {
      "op": "uncover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#1"
      ]
    },
    "3414": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%9#0",
        "hasLoan#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3415": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%3#1"
      ]
    },
    "3417": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%10#0",
        "hasLoan#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3418": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "3419": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3420": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "3421": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "borrower#0"
      ]
    },
    "3423": {
      "op": "concat",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%11#0",
        "hasLoan#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "tmp%3#1"
      ]
    },
    "3424": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%3#1",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3425": {
      "op": "box_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3426": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3428": {
      "op": "frame_dig -4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3430": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3433": {
      "block": "borrow_after_if_else@6",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "op": "txn Sender"
    },
    "3435": {
      "op": "intc_0 // 0"
    },
    "3436": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3437": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "maybe_exists%0#1",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "3438": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1"
      ]
    },
    "3439": {
      "op": "btoi",
      "defined_out": [
        "borrower#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1"
      ]
    },
    "3440": {
      "op": "bnz borrow_else_body@10",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3443": {
      "op": "itxn_begin"
    },
    "3444": {
      "op": "frame_dig 1",
      "defined_out": [
        "borrower#0",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3"
      ]
    },
    "3446": {
      "op": "itxn_field Amount",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3448": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3450": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "1"
      ]
    },
    "3451": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3453": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "1000"
      ]
    },
    "3455": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3457": {
      "op": "itxn_submit"
    },
    "3458": {
      "block": "borrow_after_if_else@12",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "0"
      ]
    },
    "3459": {
      "op": "bytec 8 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "3461": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3462": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%3#0"
      ]
    },
    "3463": {
      "op": "frame_dig 1",
      "defined_out": [
        "disbursement#3",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%3#0",
        "disbursement#3"
      ]
    },
    "3465": {
      "op": "+",
      "defined_out": [
        "disbursement#3",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "3466": {
      "op": "bytec 8 // \"total_borrows\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "3468": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "3469": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3470": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "disbursement#3",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "new_state_value%1#0"
      ]
    },
    "3473": {
      "op": "bytec 7 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "disbursement#3",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "3475": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "3476": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3477": {
      "retsub": true,
      "op": "retsub"
    },
    "3478": {
      "block": "borrow_else_body@10",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0"
      ],
      "op": "itxn_begin"
    },
    "3479": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "0"
      ]
    },
    "3480": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3481": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "3482": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%1#1"
      ]
    },
    "3483": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "3484": {
      "op": "frame_dig 1",
      "defined_out": [
        "disbursement#3",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "disbursement#3"
      ]
    },
    "3486": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "3488": {
      "op": "itxn_field XferAsset",
      "defined_out": [
        "borrower#0",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3490": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3492": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "4"
      ]
    },
    "3493": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3495": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "1000"
      ]
    },
    "3497": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3499": {
      "op": "itxn_submit"
    },
    "3500": {
      "op": "b borrow_after_if_else@12"
    },
    "3503": {
      "block": "borrow_else_body@5",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "borrowerAddress#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0"
      ]
    },
    "3505": {
      "op": "frame_dig -4",
      "defined_out": [
        "borrowerAddress#0",
        "collateralAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3507": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ]
    },
    "3508": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3509": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3510": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrowerAddress#0",
        "maybe_exists%0#1",
        "maybe_value%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "3511": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1"
      ]
    },
    "3512": {
      "op": "frame_dig 1",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "disbursement#3"
      ]
    },
    "3514": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0"
      ]
    },
    "3515": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "to_encode%0#0"
      ]
    },
    "3517": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3518": {
      "op": "dig 1",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "3520": {
      "op": "bytec 17 // 0x00",
      "defined_out": [
        "0x00",
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)",
        "0x00"
      ]
    },
    "3522": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%2#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3523": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "3524": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3525": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0"
      ]
    },
    "3526": {
      "op": "bytec 9 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "3528": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_exists%1#0",
        "maybe_value%0#1",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3529": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%1#0"
      ]
    },
    "3530": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "3531": {
      "op": "dig 5",
      "defined_out": [
        "borrowerAddress#0",
        "borrowerAddress#0 (copy)",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)"
      ]
    },
    "3533": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3535": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3536": {
      "op": "uncover 5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "3538": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3539": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3541": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3542": {
      "op": "uncover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#1"
      ]
    },
    "3544": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3545": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "3547": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3548": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "3549": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3550": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "borrowerAddress#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "3551": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "borrowerAddress#0"
      ]
    },
    "3553": {
      "op": "concat",
      "defined_out": [
        "disbursement#3",
        "encoded_tuple_buffer%11#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "tmp%0#2"
      ]
    },
    "3554": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "tmp%0#2",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3555": {
      "op": "box_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3556": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "0"
      ]
    },
    "3557": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "3558": {
      "op": "app_global_get_ex",
      "defined_out": [
        "disbursement#3",
        "maybe_exists%2#0",
        "maybe_value%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%2#1",
        "maybe_exists%2#0"
      ]
    },
    "3559": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%2#1"
      ]
    },
    "3560": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "disbursement#3",
        "maybe_value%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "maybe_value%2#1",
        "1"
      ]
    },
    "3561": {
      "op": "+",
      "defined_out": [
        "disbursement#3",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "3562": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "3563": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "3564": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3565": {
      "op": "b borrow_after_if_else@6"
    },
    "3568": {
      "block": "borrow_bool_false@21",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "3569": {
      "op": "b borrow_bool_merge@22"
    },
    "3572": {
      "block": "borrow_else_body@2",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "3574": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "hasLoan#0"
      ]
    },
    "3576": {
      "op": "b borrow_after_if_else@3"
    },
    "3579": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest",
      "params": {
        "debtor#0": "bytes",
        "templateReserveAddress#0": "bytes"
      },
      "block": "accrueLoanInterest",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3582": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "3583": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "3585": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3586": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3587": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3589": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": []
    },
    "3590": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "{accrueMarket}"
      ],
      "stack_out": [
        "{accrueMarket}"
      ]
    },
    "3593": {
      "op": "pop",
      "stack_out": []
    },
    "3594": {
      "op": "frame_dig -2",
      "stack_out": [
        "debtor#0 (copy)"
      ]
    },
    "3596": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "op": "callsub syncBorrowerSnapshot",
      "defined_out": [
        "{syncBorrowerSnapshot}"
      ],
      "stack_out": [
        "{syncBorrowerSnapshot}"
      ]
    },
    "3599": {
      "op": "pop",
      "stack_out": []
    },
    "3600": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "3603": {
      "op": "bytec 7 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"last_apr_bps\""
      ]
    },
    "3605": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ]
    },
    "3606": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3607": {
      "retsub": true,
      "op": "retsub"
    },
    "3608": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "params": {},
      "block": "current_apr_bps",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3611": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "U_raw#0"
      ]
    },
    "3613": {
      "op": "dupn 12",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0"
      ]
    },
    "3615": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "0"
      ]
    },
    "3616": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3617": {
      "op": "app_global_get_ex",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "3618": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "maybe_exists%0#0",
        "D#0"
      ]
    },
    "3619": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "maybe_exists%0#0",
        "D#0",
        "D#0 (copy)"
      ]
    },
    "3620": {
      "op": "uncover 2",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "3622": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0"
      ]
    },
    "3623": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "0"
      ]
    },
    "3624": {
      "op": "bytec 8 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "3626": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "B#0",
        "maybe_exists%1#0"
      ]
    },
    "3627": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "maybe_exists%1#0",
        "B#0"
      ]
    },
    "3628": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ]
    },
    "3630": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0"
      ]
    },
    "3631": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "0"
      ]
    },
    "3632": {
      "op": "bytec 22 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\"",
        "0",
        "B#0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "0",
        "\"util_cap_bps\""
      ]
    },
    "3634": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "3635": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%2#0",
        "cap_bps#0"
      ]
    },
    "3636": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "maybe_exists%2#0"
      ]
    },
    "3638": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "3639": {
      "op": "bnz current_apr_bps_after_if_else@29",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3642": {
      "op": "intc_0 // 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "3643": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3645": {
      "block": "current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3646": {
      "op": "bytec 27 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"ema_alpha_bps\""
      ]
    },
    "3648": {
      "op": "app_global_get_ex",
      "defined_out": [
        "alpha#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0",
        "maybe_exists%0#0"
      ]
    },
    "3649": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%0#0",
        "alpha#0"
      ]
    },
    "3650": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%0#0",
        "alpha#0",
        "alpha#0 (copy)"
      ]
    },
    "3651": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0",
        "maybe_exists%0#0",
        "alpha#0"
      ]
    },
    "3653": {
      "op": "frame_bury 2",
      "defined_out": [
        "alpha#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0",
        "maybe_exists%0#0"
      ]
    },
    "3655": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0"
      ]
    },
    "3656": {
      "op": "bnz current_apr_bps_else_body@2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3659": {
      "op": "frame_dig 0",
      "defined_out": [
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1"
      ]
    },
    "3661": {
      "op": "frame_bury 1",
      "defined_out": [
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3663": {
      "block": "current_apr_bps_after_if_else@3",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3664": {
      "op": "bytec 23 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"rate_model_type\""
      ]
    },
    "3666": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3667": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%2#0"
      ]
    },
    "3668": {
      "op": "bnz current_apr_bps_ternary_false@5",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3671": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3672": {
      "op": "bytec 14 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "3674": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%0#0"
      ]
    },
    "3675": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0"
      ]
    },
    "3676": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0"
      ]
    },
    "3677": {
      "op": "bytec 24 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\"",
        "0",
        "base_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0",
        "\"kink_norm_bps\""
      ]
    },
    "3679": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "3680": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "3681": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "3682": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "3684": {
      "op": "cover 3",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "3686": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "3687": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "3688": {
      "op": "bytec 25 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope1_bps\""
      ]
    },
    "3690": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "3691": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ]
    },
    "3692": {
      "op": "frame_bury 10",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "3694": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "3695": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "3696": {
      "op": "bytec 26 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope2_bps\""
      ]
    },
    "3698": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope2_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "3699": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope2_bps#0"
      ]
    },
    "3700": {
      "op": "frame_bury 11",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "3702": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "3703": {
      "op": "frame_dig 1",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_used#1"
      ]
    },
    "3705": {
      "op": ">=",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "tmp%0#1"
      ]
    },
    "3706": {
      "op": "bz current_apr_bps_else_body@21",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ]
    },
    "3709": {
      "op": "frame_dig 10",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "3711": {
      "op": "frame_dig 1",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0",
        "U_used#1"
      ]
    },
    "3713": {
      "op": "mulw",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "hi1#0",
        "kink_norm_bps#0",
        "lo1#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0"
      ]
    },
    "3714": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0",
        "kink_norm_bps#0"
      ]
    },
    "3716": {
      "op": "divw",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "tmp%1#0"
      ]
    },
    "3717": {
      "op": "+",
      "defined_out": [
        "U_used#1",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3718": {
      "op": "frame_bury 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3720": {
      "block": "current_apr_bps_after_if_else@22",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3721": {
      "op": "bytec 15 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "3723": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "3724": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "3725": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0",
        "maxCap#0 (copy)"
      ]
    },
    "3726": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "3728": {
      "op": "frame_bury 8",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "3730": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "3731": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "apr#18"
      ]
    },
    "3733": {
      "op": "frame_bury 4",
      "defined_out": [
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "3735": {
      "op": "bz current_apr_bps_after_if_else@25",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3738": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#0",
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3740": {
      "op": "dup",
      "defined_out": [
        "apr#0",
        "apr#0 (copy)",
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)"
      ]
    },
    "3741": {
      "op": "frame_dig 8",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)",
        "maxCap#0"
      ]
    },
    "3743": {
      "op": ">",
      "defined_out": [
        "apr#0",
        "apr#18",
        "maxCap#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "tmp%5#1"
      ]
    },
    "3744": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#1",
        "apr#18"
      ]
    },
    "3745": {
      "op": "frame_bury 4",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#1"
      ]
    },
    "3747": {
      "op": "bz current_apr_bps_after_if_else@25",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3750": {
      "op": "frame_dig 8",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#18"
      ]
    },
    "3752": {
      "op": "frame_bury 4",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3754": {
      "block": "current_apr_bps_after_if_else@25",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3756": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3758": {
      "block": "current_apr_bps_ternary_merge@6",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3759": {
      "op": "bytec 28 // \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"max_apr_step_bps\""
      ]
    },
    "3761": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "maybe_exists%4#0"
      ]
    },
    "3762": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "stepMax#0"
      ]
    },
    "3763": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "stepMax#0",
        "stepMax#0 (copy)"
      ]
    },
    "3764": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "maybe_exists%4#0",
        "stepMax#0"
      ]
    },
    "3766": {
      "op": "frame_bury 12",
      "defined_out": [
        "maybe_exists%4#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "maybe_exists%4#0"
      ]
    },
    "3768": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0"
      ]
    },
    "3769": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "apr#18"
      ]
    },
    "3771": {
      "op": "frame_bury 4",
      "defined_out": [
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0"
      ]
    },
    "3773": {
      "op": "bz current_apr_bps_after_if_else@18",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3776": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3777": {
      "op": "bytec 16 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0",
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "3779": {
      "op": "app_global_get_ex",
      "defined_out": [
        "apr#18",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3780": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%5#0"
      ]
    },
    "3781": {
      "op": "bnz current_apr_bps_ternary_false@9",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3784": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3785": {
      "op": "bytec 14 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0",
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "3787": {
      "op": "app_global_get_ex",
      "defined_out": [
        "apr#18",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3788": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "apr#18",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3789": {
      "op": "frame_bury 9",
      "defined_out": [
        "apr#18",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3791": {
      "block": "current_apr_bps_ternary_merge@10",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3793": {
      "op": "frame_dig 12",
      "defined_out": [
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0",
        "stepMax#0"
      ]
    },
    "3795": {
      "op": ">",
      "defined_out": [
        "prevApr#0",
        "stepMax#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%6#0"
      ]
    },
    "3796": {
      "op": "bz current_apr_bps_ternary_false@12",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3799": {
      "op": "frame_dig 9",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3801": {
      "op": "frame_dig 12",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0",
        "stepMax#0"
      ]
    },
    "3803": {
      "op": "-",
      "defined_out": [
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "lo#0"
      ]
    },
    "3804": {
      "op": "frame_bury 7",
      "defined_out": [
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3806": {
      "block": "current_apr_bps_ternary_merge@13",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3808": {
      "op": "frame_dig 12",
      "defined_out": [
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0",
        "stepMax#0"
      ]
    },
    "3810": {
      "op": "+",
      "defined_out": [
        "hi#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hi#0"
      ]
    },
    "3811": {
      "op": "frame_bury 6",
      "defined_out": [
        "hi#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3813": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#0",
        "hi#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3815": {
      "op": "frame_dig 7",
      "defined_out": [
        "apr#0",
        "hi#0",
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "lo#0"
      ]
    },
    "3817": {
      "op": "<",
      "defined_out": [
        "apr#0",
        "hi#0",
        "lo#0",
        "prevApr#0",
        "stepMax#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%7#0"
      ]
    },
    "3818": {
      "op": "bz current_apr_bps_after_if_else@15",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3821": {
      "op": "frame_dig 7",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3823": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0",
        "hi#0",
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3825": {
      "block": "current_apr_bps_after_if_else@15",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3827": {
      "op": "frame_dig 6",
      "defined_out": [
        "apr#0",
        "hi#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "hi#0"
      ]
    },
    "3829": {
      "op": ">",
      "defined_out": [
        "apr#0",
        "hi#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%8#0"
      ]
    },
    "3830": {
      "op": "bz current_apr_bps_after_if_else@17",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3833": {
      "op": "frame_dig 6",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3835": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0",
        "hi#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3837": {
      "block": "current_apr_bps_after_if_else@17",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "apr#18"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#18"
      ]
    },
    "3839": {
      "op": "frame_bury 4",
      "defined_out": [
        "apr#18"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3841": {
      "block": "current_apr_bps_after_if_else@18",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3843": {
      "op": "bytec 16 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "\"prev_apr_bps\""
      ]
    },
    "3845": {
      "op": "dig 1",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0",
        "apr#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "\"prev_apr_bps\"",
        "apr#0 (copy)"
      ]
    },
    "3847": {
      "op": "app_global_put",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3848": {
      "op": "frame_bury 0"
    },
    "3850": {
      "retsub": true,
      "op": "retsub"
    },
    "3851": {
      "block": "current_apr_bps_ternary_false@12",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "lo#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "lo#0"
      ]
    },
    "3852": {
      "op": "frame_bury 7",
      "defined_out": [
        "lo#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3854": {
      "op": "b current_apr_bps_ternary_merge@13"
    },
    "3857": {
      "block": "current_apr_bps_ternary_false@9",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3858": {
      "op": "bytec 16 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "3860": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "3861": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3862": {
      "op": "frame_bury 9",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3864": {
      "op": "b current_apr_bps_ternary_merge@10"
    },
    "3867": {
      "block": "current_apr_bps_else_body@21",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "U_used#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "U_used#1"
      ]
    },
    "3869": {
      "op": "uncover 2",
      "defined_out": [
        "U_used#1",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_used#1",
        "kink_norm_bps#0"
      ]
    },
    "3871": {
      "op": "dup",
      "defined_out": [
        "U_used#1",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_used#1",
        "kink_norm_bps#0 (copy)",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "3872": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_used#1",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "3874": {
      "op": "-",
      "defined_out": [
        "U_used#1",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0"
      ]
    },
    "3875": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "U_used#1",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0",
        "10000"
      ]
    },
    "3876": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "10000",
        "kink_norm_bps#0"
      ]
    },
    "3878": {
      "op": "-",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0"
      ]
    },
    "3879": {
      "op": "frame_dig 11",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "over#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0",
        "slope2_bps#0"
      ]
    },
    "3881": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "slope2_bps#0",
        "over#0"
      ]
    },
    "3883": {
      "op": "mulw",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "3884": {
      "op": "uncover 3",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0"
      ]
    },
    "3886": {
      "op": "frame_dig 10",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "3888": {
      "op": "+",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "tmp%2#0"
      ]
    },
    "3889": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "3891": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0",
        "denom#0"
      ]
    },
    "3893": {
      "op": "divw",
      "defined_out": [
        "U_used#1",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "tmp%3#1"
      ]
    },
    "3894": {
      "op": "+",
      "defined_out": [
        "U_used#1",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3895": {
      "op": "frame_bury 3",
      "defined_out": [
        "U_used#1",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3897": {
      "op": "b current_apr_bps_after_if_else@22"
    },
    "3900": {
      "block": "current_apr_bps_ternary_false@5",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3901": {
      "op": "bytec 14 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "3903": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3904": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3905": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3907": {
      "op": "b current_apr_bps_ternary_merge@6"
    },
    "3910": {
      "block": "current_apr_bps_else_body@2",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3911": {
      "op": "bytec 29 // \"util_ema_bps\"",
      "defined_out": [
        "\"util_ema_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"util_ema_bps\""
      ]
    },
    "3913": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "maybe_exists%1#0"
      ]
    },
    "3914": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0"
      ]
    },
    "3915": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "10000"
      ]
    },
    "3916": {
      "op": "frame_dig 2",
      "defined_out": [
        "10000",
        "alpha#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "10000",
        "alpha#0"
      ]
    },
    "3918": {
      "op": "dup",
      "defined_out": [
        "10000",
        "alpha#0",
        "alpha#0 (copy)",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "10000",
        "alpha#0 (copy)",
        "alpha#0 (copy)"
      ]
    },
    "3919": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "alpha#0",
        "10000",
        "alpha#0 (copy)"
      ]
    },
    "3921": {
      "op": "-",
      "defined_out": [
        "alpha#0",
        "oneMinus#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "alpha#0",
        "oneMinus#0"
      ]
    },
    "3922": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "oneMinus#0",
        "alpha#0"
      ]
    },
    "3923": {
      "op": "frame_dig 0",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "oneMinus#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "oneMinus#0",
        "alpha#0",
        "U_raw#0"
      ]
    },
    "3925": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "hiA#0",
        "loA#0",
        "oneMinus#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "oneMinus#0",
        "hiA#0",
        "loA#0"
      ]
    },
    "3926": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "hiA#0",
        "loA#0",
        "oneMinus#0"
      ]
    },
    "3928": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiA#0",
        "loA#0",
        "oneMinus#0",
        "prevU#0"
      ]
    },
    "3930": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "hiA#0",
        "hiB#0",
        "loA#0",
        "loB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiA#0",
        "loA#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "3931": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "loA#0",
        "hiB#0",
        "loB#0",
        "hiA#0"
      ]
    },
    "3933": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiB#0",
        "loB#0",
        "hiA#0",
        "loA#0"
      ]
    },
    "3935": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiB#0",
        "loB#0",
        "hiA#0",
        "loA#0",
        "10000"
      ]
    },
    "3936": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "hiB#0",
        "loB#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiB#0",
        "loB#0",
        "tmp%1#0"
      ]
    },
    "3937": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%1#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "3939": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%1#0",
        "hiB#0",
        "loB#0",
        "10000"
      ]
    },
    "3940": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "3941": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1"
      ]
    },
    "3942": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1",
        "U_used#1"
      ]
    },
    "3943": {
      "op": "frame_bury 1",
      "defined_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1"
      ]
    },
    "3945": {
      "op": "bytec 29 // \"util_ema_bps\"",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1",
        "\"util_ema_bps\""
      ]
    },
    "3947": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"util_ema_bps\"",
        "U_used#1"
      ]
    },
    "3948": {
      "op": "app_global_put",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3949": {
      "op": "b current_apr_bps_after_if_else@3"
    },
    "3952": {
      "block": "current_apr_bps_after_if_else@29",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 13",
      "defined_out": [
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "3954": {
      "op": "frame_dig 15",
      "defined_out": [
        "D#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "cap_bps#0"
      ]
    },
    "3956": {
      "op": "mulw",
      "defined_out": [
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ]
    },
    "3957": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0",
        "10000"
      ]
    },
    "3958": {
      "op": "divw",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "3959": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0"
      ]
    },
    "3960": {
      "op": "frame_bury 5",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "3962": {
      "op": "bnz current_apr_bps_after_if_else@31",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3965": {
      "op": "intc_0 // 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "3966": {
      "op": "frame_bury 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3968": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32"
    },
    "3971": {
      "block": "current_apr_bps_after_if_else@31",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 14",
      "defined_out": [
        "B#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0"
      ]
    },
    "3973": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)"
      ]
    },
    "3974": {
      "op": "frame_dig 5",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ]
    },
    "3976": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0",
        "capBorrow#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "3977": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "3979": {
      "op": "<=",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "tmp%2#2"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#2"
      ]
    },
    "3980": {
      "op": "dig 1",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#2",
        "capBorrow#0 (copy)"
      ]
    },
    "3982": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "tmp%2#2",
        "capBorrow#0 (copy)",
        "B#0"
      ]
    },
    "3984": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0 (copy)",
        "B#0",
        "tmp%2#2"
      ]
    },
    "3986": {
      "op": "select",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0"
      ]
    },
    "3987": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0",
        "10000"
      ]
    },
    "3988": {
      "op": "mulw",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ]
    },
    "3989": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiN#0",
        "loN#0",
        "capBorrow#0"
      ]
    },
    "3991": {
      "op": "divw",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "3992": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3994": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32"
    },
    "3997": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "params": {
        "rec#0": "bytes"
      },
      "block": "currentDebtFromSnapshot",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "4000": {
      "op": "frame_dig -1",
      "defined_out": [
        "rec#0 (copy)"
      ],
      "stack_out": [
        "rec#0 (copy)"
      ]
    },
    "4002": {
      "op": "pushint 73 // 73",
      "defined_out": [
        "73",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "rec#0 (copy)",
        "73"
      ]
    },
    "4004": {
      "op": "extract_uint64",
      "defined_out": [
        "p#0"
      ],
      "stack_out": [
        "p#0"
      ]
    },
    "4005": {
      "op": "dup",
      "defined_out": [
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "p#0"
      ]
    },
    "4006": {
      "op": "bnz currentDebtFromSnapshot_after_if_else@2",
      "stack_out": [
        "p#0"
      ]
    },
    "4009": {
      "op": "intc_0 // 0",
      "stack_out": [
        "p#0",
        "0"
      ]
    },
    "4010": {
      "op": "frame_dig -1",
      "stack_out": [
        "p#0",
        "0",
        "rec#0 (copy)"
      ]
    },
    "4012": {
      "op": "uncover 2"
    },
    "4014": {
      "retsub": true,
      "op": "retsub"
    },
    "4015": {
      "block": "currentDebtFromSnapshot_after_if_else@2",
      "stack_in": [
        "p#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "p#0",
        "0"
      ]
    },
    "4016": {
      "op": "bytec 9 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0"
      ],
      "stack_out": [
        "p#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4018": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "p#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4019": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "p#0",
        "maybe_value%0#0"
      ]
    },
    "4020": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "maybe_value%0#0",
        "p#0"
      ]
    },
    "4022": {
      "op": "mulw",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0"
      ]
    },
    "4023": {
      "op": "frame_dig -1",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "rec#0 (copy)"
      ]
    },
    "4025": {
      "op": "pushint 81 // 81",
      "defined_out": [
        "81",
        "hi#0",
        "lo#0",
        "p#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "rec#0 (copy)",
        "81"
      ]
    },
    "4027": {
      "op": "extract_uint64",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "tmp%3#0"
      ]
    },
    "4028": {
      "op": "divw",
      "defined_out": [
        "p#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "p#0",
        "tmp%4#0"
      ]
    },
    "4029": {
      "op": "frame_dig -1",
      "stack_out": [
        "p#0",
        "tmp%4#0",
        "rec#0 (copy)"
      ]
    },
    "4031": {
      "op": "uncover 2"
    },
    "4033": {
      "retsub": true,
      "op": "retsub"
    },
    "4034": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "syncBorrowerSnapshot",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4037": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4038": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "4040": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4041": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4042": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "maybe_exists%0#0"
      ]
    },
    "4043": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "rec#0"
      ]
    },
    "4044": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4047": {
      "op": "dup",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4048": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0"
      ]
    },
    "4051": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "rec#0 (copy)"
      ]
    },
    "4053": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "4056": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "0"
      ]
    },
    "4057": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4058": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liveDebt#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4059": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "4060": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "rec#0"
      ]
    },
    "4062": {
      "error": "Index access is out of bounds",
      "op": "extract 48 17 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ]
    },
    "4065": {
      "op": "dig 4",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "liveDebt#0 (copy)"
      ]
    },
    "4067": {
      "op": "itob",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "4068": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "4069": {
      "op": "bytec 9 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4071": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liveDebt#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4072": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0"
      ]
    },
    "4073": {
      "op": "itob",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4074": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "borrower#0 (copy)"
      ]
    },
    "4076": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "borrower#0 (copy)",
        "tmp%1#0"
      ]
    },
    "4078": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4079": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ]
    },
    "4081": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4082": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "tmp%3#0"
      ]
    },
    "4084": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "4085": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0",
        "maybe_value%1#0"
      ]
    },
    "4087": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "liveDebt#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "4088": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "4090": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "liveDebt#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4091": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%1#0"
      ]
    },
    "4092": {
      "op": "concat",
      "defined_out": [
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "newRec#0"
      ]
    },
    "4093": {
      "op": "uncover 2",
      "stack_out": [
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ]
    },
    "4095": {
      "op": "swap",
      "stack_out": [
        "liveDebt#0",
        "tmp%0#0",
        "newRec#0"
      ]
    },
    "4096": {
      "op": "box_put",
      "stack_out": [
        "liveDebt#0"
      ]
    },
    "4097": {
      "retsub": true,
      "op": "retsub"
    },
    "4098": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "params": {},
      "block": "accrueMarket",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4101": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "deltaT#0"
      ]
    },
    "4103": {
      "op": "dupn 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ]
    },
    "4105": {
      "op": "global LatestTimestamp"
    },
    "4107": {
      "op": "dup"
    },
    "4108": {
      "op": "intc_0 // 0"
    },
    "4109": {
      "op": "bytec 19 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "0",
        "\"last_accrual_ts\""
      ]
    },
    "4111": {
      "op": "app_global_get_ex",
      "defined_out": [
        "last#0",
        "maybe_exists%0#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0"
      ]
    },
    "4112": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "maybe_exists%0#0",
        "last#0"
      ]
    },
    "4113": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "maybe_exists%0#0",
        "last#0",
        "last#0 (copy)"
      ]
    },
    "4114": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0",
        "last#0"
      ]
    },
    "4116": {
      "op": "cover 3",
      "defined_out": [
        "last#0",
        "maybe_exists%0#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0"
      ]
    },
    "4118": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4119": {
      "op": "<=",
      "defined_out": [
        "last#0",
        "now#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp%0#0"
      ]
    },
    "4120": {
      "op": "bz accrueMarket_after_if_else@2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4123": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4124": {
      "op": "frame_bury 0"
    },
    "4126": {
      "retsub": true,
      "op": "retsub"
    },
    "4127": {
      "block": "accrueMarket_after_if_else@2",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0"
      ]
    },
    "4129": {
      "op": "frame_dig 5",
      "defined_out": [
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4131": {
      "op": "-",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4132": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0",
        "deltaT#0"
      ]
    },
    "4133": {
      "op": "frame_bury 0",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4135": {
      "op": "bnz accrueMarket_after_if_else@9",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4138": {
      "op": "intc_0 // 0",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4139": {
      "op": "frame_bury 2",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4141": {
      "block": "accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.sliceFactorWad@10",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4143": {
      "op": "bnz accrueMarket_after_if_else@4",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4146": {
      "op": "bytec 19 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"last_accrual_ts\""
      ]
    },
    "4148": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"last_accrual_ts\"",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"last_accrual_ts\"",
        "now#0"
      ]
    },
    "4150": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4151": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4152": {
      "op": "frame_bury 0"
    },
    "4154": {
      "retsub": true,
      "op": "retsub"
    },
    "4155": {
      "block": "accrueMarket_after_if_else@4",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4156": {
      "op": "bytec 9 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4158": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "oldIndex#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "maybe_exists%1#0"
      ]
    },
    "4159": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0"
      ]
    },
    "4160": {
      "op": "dup",
      "defined_out": [
        "oldIndex#0",
        "oldIndex#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "oldIndex#0 (copy)"
      ]
    },
    "4161": {
      "op": "frame_dig 2",
      "defined_out": [
        "oldIndex#0",
        "oldIndex#0 (copy)",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "oldIndex#0 (copy)",
        "simpleWad#0"
      ]
    },
    "4163": {
      "op": "mulw",
      "defined_out": [
        "hiI#0",
        "loI#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "hiI#0",
        "loI#0"
      ]
    },
    "4164": {
      "op": "intc 5 // 1000000000000",
      "defined_out": [
        "1000000000000",
        "hiI#0",
        "loI#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "hiI#0",
        "loI#0",
        "1000000000000"
      ]
    },
    "4166": {
      "op": "divw",
      "defined_out": [
        "incrIndex#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "incrIndex#0"
      ]
    },
    "4167": {
      "op": "+",
      "defined_out": [
        "newIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "newIndex#0"
      ]
    },
    "4168": {
      "op": "bytec 9 // \"borrow_index_wad\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "newIndex#0",
        "\"borrow_index_wad\""
      ]
    },
    "4170": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"borrow_index_wad\"",
        "newIndex#0"
      ]
    },
    "4171": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4172": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4173": {
      "op": "bytec 8 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4175": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0"
      ]
    },
    "4176": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_exists%2#0",
        "totalBefore#0"
      ]
    },
    "4177": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_exists%2#0",
        "totalBefore#0",
        "totalBefore#0 (copy)"
      ]
    },
    "4178": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0",
        "totalBefore#0"
      ]
    },
    "4180": {
      "op": "frame_bury 3",
      "defined_out": [
        "maybe_exists%2#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0"
      ]
    },
    "4182": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4183": {
      "op": "intc_0 // 0",
      "defined_out": [
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "interest#0"
      ]
    },
    "4184": {
      "op": "frame_bury 1",
      "defined_out": [
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4186": {
      "op": "bz accrueMarket_after_if_else@6",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4189": {
      "op": "frame_dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4191": {
      "op": "frame_dig 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "simpleWad#0"
      ]
    },
    "4193": {
      "op": "mulw",
      "defined_out": [
        "hiB#0",
        "interest#0",
        "loB#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "4194": {
      "op": "intc 5 // 1000000000000",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "hiB#0",
        "loB#0",
        "1000000000000"
      ]
    },
    "4196": {
      "op": "divw",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4197": {
      "op": "frame_bury 1",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4199": {
      "block": "accrueMarket_after_if_else@6",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4200": {
      "op": "bytec 33 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"protocol_share_bps\""
      ]
    },
    "4202": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "protoBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0",
        "maybe_exists%3#0"
      ]
    },
    "4203": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0"
      ]
    },
    "4204": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "protoBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0",
        "10000"
      ]
    },
    "4205": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "10000",
        "protoBps#0"
      ]
    },
    "4206": {
      "op": "-",
      "defined_out": [
        "deposBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deposBps#0"
      ]
    },
    "4207": {
      "op": "frame_dig 1",
      "defined_out": [
        "deposBps#0",
        "interest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deposBps#0",
        "interest#0"
      ]
    },
    "4209": {
      "op": "dup"
    },
    "4210": {
      "op": "uncover 2",
      "defined_out": [
        "deposBps#0",
        "interest#0",
        "interest#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "interest#0 (copy)",
        "deposBps#0"
      ]
    },
    "4212": {
      "op": "mulw",
      "defined_out": [
        "hiD#0",
        "interest#0",
        "loD#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "hiD#0",
        "loD#0"
      ]
    },
    "4213": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "hiD#0",
        "loD#0",
        "10000"
      ]
    },
    "4214": {
      "op": "divw",
      "defined_out": [
        "depositorInterest#0",
        "interest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0"
      ]
    },
    "4215": {
      "op": "dup2",
      "defined_out": [
        "depositorInterest#0",
        "depositorInterest#0 (copy)",
        "interest#0",
        "interest#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "interest#0 (copy)",
        "depositorInterest#0 (copy)"
      ]
    },
    "4216": {
      "op": "-",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4217": {
      "op": "frame_dig 3",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ]
    },
    "4219": {
      "op": "dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "totalBefore#0",
        "interest#0 (copy)"
      ]
    },
    "4221": {
      "op": "+",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "new_state_value%0#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "new_state_value%0#0"
      ]
    },
    "4222": {
      "op": "bytec 8 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "depositorInterest#0",
        "interest#0",
        "new_state_value%0#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4224": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4225": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4226": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4227": {
      "op": "bytec_1 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "4228": {
      "op": "app_global_get_ex",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4229": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%4#0"
      ]
    },
    "4230": {
      "op": "uncover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%4#0",
        "depositorInterest#0"
      ]
    },
    "4232": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "new_state_value%1#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%1#0"
      ]
    },
    "4233": {
      "op": "bytec_1 // \"total_deposits\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "4234": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "4235": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0"
      ]
    },
    "4236": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4237": {
      "op": "bytec 12 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "4239": {
      "op": "app_global_get_ex",
      "defined_out": [
        "interest#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4240": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%5#0"
      ]
    },
    "4241": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "new_state_value%2#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "new_state_value%2#0"
      ]
    },
    "4242": {
      "op": "bytec 12 // \"fee_pool\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "new_state_value%2#0",
        "\"fee_pool\""
      ]
    },
    "4244": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"fee_pool\"",
        "new_state_value%2#0"
      ]
    },
    "4245": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4246": {
      "op": "bytec 19 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "interest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"last_accrual_ts\""
      ]
    },
    "4248": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"last_accrual_ts\"",
        "interest#0",
        "now#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"last_accrual_ts\"",
        "now#0"
      ]
    },
    "4250": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4251": {
      "op": "frame_bury 0"
    },
    "4253": {
      "retsub": true,
      "op": "retsub"
    },
    "4254": {
      "block": "accrueMarket_after_if_else@9",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4255": {
      "op": "bytec 7 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"last_apr_bps\""
      ]
    },
    "4257": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "4258": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1"
      ]
    },
    "4259": {
      "op": "frame_dig 0",
      "defined_out": [
        "deltaT#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1",
        "deltaT#0"
      ]
    },
    "4261": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "h1#0",
        "l1#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h1#0",
        "l1#0"
      ]
    },
    "4262": {
      "op": "pushint 31536000 // 31536000",
      "defined_out": [
        "31536000",
        "deltaT#0",
        "h1#0",
        "l1#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h1#0",
        "l1#0",
        "31536000"
      ]
    },
    "4267": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "tmp2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp2#0"
      ]
    },
    "4268": {
      "op": "intc 5 // 1000000000000",
      "defined_out": [
        "1000000000000",
        "deltaT#0",
        "tmp2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp2#0",
        "1000000000000"
      ]
    },
    "4270": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "h2#0",
        "l2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h2#0",
        "l2#0"
      ]
    },
    "4271": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "deltaT#0",
        "h2#0",
        "l2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h2#0",
        "l2#0",
        "10000"
      ]
    },
    "4272": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4273": {
      "op": "frame_bury 2",
      "defined_out": [
        "deltaT#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4275": {
      "op": "b accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.sliceFactorWad@10"
    },
    "4278": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "params": {
        "borrowerAddress#0": "bytes"
      },
      "block": "getLoanRecord",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4281": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4282": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4284": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4285": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4286": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4287": {
      "retsub": true,
      "op": "retsub"
    },
    "4288": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "repaymentAmount#0": "uint64",
        "templateReserveAddress#0": "bytes"
      },
      "block": "repayLoanASA",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "4291": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4293": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4294": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4295": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4296": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0"
      ]
    },
    "4297": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4298": {
      "op": "frame_dig -3",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4300": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "4302": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "4304": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "4305": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4308": {
      "op": "frame_dig -3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4310": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "4312": {
      "op": "frame_dig 1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%3#0",
        "baseToken#0"
      ]
    },
    "4314": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "4315": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4318": {
      "op": "frame_dig -3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4320": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "4322": {
      "op": "frame_dig -2",
      "defined_out": [
        "baseToken#0",
        "repaymentAmount#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%5#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4324": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "4325": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4328": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "4329": {
      "block": "repayLoanASA_bool_merge@5",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4330": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "_interestSlice#0"
      ]
    },
    "4333": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4334": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "4336": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ]
    },
    "4339": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4340": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%8#0"
      ]
    },
    "4342": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4345": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4348": {
      "op": "swap",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4349": {
      "op": "frame_dig -2",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4351": {
      "op": "dig 1",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)",
        "liveDebt#0 (copy)"
      ]
    },
    "4353": {
      "op": "<=",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "tmp%9#0"
      ]
    },
    "4354": {
      "op": "assert",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4355": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4357": {
      "op": "-",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4358": {
      "op": "dup",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "remainingDebt#0"
      ]
    },
    "4359": {
      "op": "frame_bury 0",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4361": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "0"
      ]
    },
    "4362": {
      "op": "bytec 8 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4364": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4365": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0"
      ]
    },
    "4366": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4368": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0"
      ]
    },
    "4369": {
      "op": "bytec 8 // \"total_borrows\"",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4371": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4372": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4373": {
      "op": "bnz repayLoanASA_else_body@8",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4376": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"loan_record\""
      ]
    },
    "4377": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"loan_record\"",
        "tmp%11#0"
      ]
    },
    "4379": {
      "op": "concat",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "tmp%12#0"
      ]
    },
    "4380": {
      "op": "box_del",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "{box_del}"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "{box_del}"
      ]
    },
    "4381": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4382": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "0"
      ]
    },
    "4383": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4384": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4385": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%2#0"
      ]
    },
    "4386": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "4387": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "new_state_value%1#0"
      ]
    },
    "4388": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "4389": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "4390": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4391": {
      "op": "itxn_begin"
    },
    "4392": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4394": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "4395": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4396": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "32"
      ]
    },
    "4398": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4399": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0"
      ]
    },
    "4400": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "40"
      ]
    },
    "4402": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "4403": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4405": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4407": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4409": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "4"
      ]
    },
    "4410": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4412": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "0"
      ]
    },
    "4413": {
      "op": "itxn_field Fee",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4415": {
      "op": "itxn_submit"
    },
    "4416": {
      "retsub": true,
      "op": "retsub"
    },
    "4417": {
      "block": "repayLoanASA_else_body@8",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "tmp%15#0"
      ]
    },
    "4419": {
      "op": "swap",
      "defined_out": [
        "rec#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "rec#0"
      ]
    },
    "4420": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4421": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "rec#0",
        "tmp%16#0"
      ]
    },
    "4424": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "rec#0"
      ]
    },
    "4425": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "4428": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "0"
      ]
    },
    "4429": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4430": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4431": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0"
      ]
    },
    "4432": {
      "op": "frame_dig -2",
      "defined_out": [
        "maybe_value%3#0",
        "repaymentAmount#0 (copy)",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4434": {
      "op": "itob",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "4435": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "4437": {
      "op": "itob",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4438": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "4439": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "4442": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4443": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "4444": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4445": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0"
      ]
    },
    "4447": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "4448": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "4449": {
      "op": "bytec 9 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4451": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4452": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0"
      ]
    },
    "4453": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "4454": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%15#0"
      ]
    },
    "4456": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "4458": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4459": {
      "op": "uncover 5",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0",
        "tmp%17#0"
      ]
    },
    "4461": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4462": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4464": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4465": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%3#0"
      ]
    },
    "4467": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4468": {
      "op": "uncover 2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%2#0"
      ]
    },
    "4470": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "remainingDebt#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4471": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%3#0"
      ]
    },
    "4472": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4473": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "4474": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "tmp%18#0"
      ]
    },
    "4476": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "tmp%19#0"
      ]
    },
    "4477": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%19#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4478": {
      "op": "box_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4479": {
      "retsub": true,
      "op": "retsub"
    },
    "4480": {
      "block": "repayLoanASA_bool_false@4",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "4481": {
      "op": "b repayLoanASA_bool_merge@5"
    },
    "4484": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo",
      "params": {
        "paymentTxn#0": "uint64",
        "repaymentAmount#0": "uint64",
        "templateReserveAddress#0": "bytes"
      },
      "block": "repayLoanAlgo",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "4487": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4489": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4490": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4491": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4492": {
      "op": "bury 1",
      "stack_out": [
        "remainingDebt#0",
        "maybe_exists%0#0"
      ]
    },
    "4494": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4495": {
      "op": "frame_dig -3",
      "defined_out": [
        "paymentTxn#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4497": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%0#0"
      ]
    },
    "4499": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "4501": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%2#0"
      ]
    },
    "4502": {
      "op": "bz repayLoanAlgo_bool_false@3",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4505": {
      "op": "frame_dig -3",
      "stack_out": [
        "remainingDebt#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4507": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%3#0"
      ]
    },
    "4509": {
      "op": "frame_dig -2",
      "defined_out": [
        "repaymentAmount#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%3#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4511": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%4#0"
      ]
    },
    "4512": {
      "op": "bz repayLoanAlgo_bool_false@3",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4515": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "and_result%0#0"
      ]
    },
    "4516": {
      "block": "repayLoanAlgo_bool_merge@4",
      "stack_in": [
        "remainingDebt#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4517": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "_interestSlice#0"
      ]
    },
    "4520": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4521": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%5#0"
      ]
    },
    "4523": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0"
      ]
    },
    "4526": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4527": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%6#0"
      ]
    },
    "4529": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4532": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4535": {
      "op": "swap",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4536": {
      "op": "frame_dig -2",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4538": {
      "op": "dig 1",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)",
        "liveDebt#0 (copy)"
      ]
    },
    "4540": {
      "op": "<=",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "tmp%7#0"
      ]
    },
    "4541": {
      "op": "assert",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4542": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4544": {
      "op": "-",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4545": {
      "op": "dup",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "remainingDebt#0"
      ]
    },
    "4546": {
      "op": "frame_bury 0",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4548": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "0"
      ]
    },
    "4549": {
      "op": "bytec 8 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4551": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4552": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0"
      ]
    },
    "4553": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4555": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0"
      ]
    },
    "4556": {
      "op": "bytec 8 // \"total_borrows\"",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4558": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4559": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4560": {
      "op": "bnz repayLoanAlgo_else_body@7",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4563": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"loan_record\""
      ]
    },
    "4564": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"loan_record\"",
        "tmp%9#0"
      ]
    },
    "4566": {
      "op": "concat",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "tmp%10#0"
      ]
    },
    "4567": {
      "op": "box_del",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "{box_del}"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "{box_del}"
      ]
    },
    "4568": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4569": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "0"
      ]
    },
    "4570": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4571": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4572": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%2#0"
      ]
    },
    "4573": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "4574": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "new_state_value%1#0"
      ]
    },
    "4575": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "4576": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "4577": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4578": {
      "op": "itxn_begin"
    },
    "4579": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4581": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "4582": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4583": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "32"
      ]
    },
    "4585": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4586": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0"
      ]
    },
    "4587": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "40"
      ]
    },
    "4589": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "4590": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4592": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4594": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4596": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "4"
      ]
    },
    "4597": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4599": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4600": {
      "op": "itxn_field Fee",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4602": {
      "op": "itxn_submit"
    },
    "4603": {
      "retsub": true,
      "op": "retsub"
    },
    "4604": {
      "block": "repayLoanAlgo_else_body@7",
      "stack_in": [
        "remainingDebt#0",
        "rec#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "tmp%13#0"
      ]
    },
    "4606": {
      "op": "swap",
      "defined_out": [
        "rec#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "rec#0"
      ]
    },
    "4607": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4608": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "rec#0",
        "tmp%14#0"
      ]
    },
    "4611": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "rec#0"
      ]
    },
    "4612": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "4615": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "0"
      ]
    },
    "4616": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4617": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4618": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0"
      ]
    },
    "4619": {
      "op": "frame_dig -2",
      "defined_out": [
        "maybe_value%3#0",
        "repaymentAmount#0 (copy)",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4621": {
      "op": "itob",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "4622": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "4624": {
      "op": "itob",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4625": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "4626": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "4629": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4630": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "4631": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4632": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0"
      ]
    },
    "4634": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "4635": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "4636": {
      "op": "bytec 9 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4638": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4639": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0"
      ]
    },
    "4640": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "4641": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%13#0"
      ]
    },
    "4643": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "4645": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4646": {
      "op": "uncover 5",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0",
        "tmp%15#0"
      ]
    },
    "4648": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4649": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4651": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4652": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%3#0"
      ]
    },
    "4654": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4655": {
      "op": "uncover 2",
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%2#0"
      ]
    },
    "4657": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "remainingDebt#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4658": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%3#0"
      ]
    },
    "4659": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4660": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "4661": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "tmp%16#0"
      ]
    },
    "4663": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "tmp%17#0"
      ]
    },
    "4664": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%17#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4665": {
      "op": "box_put",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4666": {
      "retsub": true,
      "op": "retsub"
    },
    "4667": {
      "block": "repayLoanAlgo_bool_false@3",
      "stack_in": [
        "remainingDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "and_result%0#0"
      ]
    },
    "4668": {
      "op": "b repayLoanAlgo_bool_merge@4"
    },
    "4671": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawFees",
      "params": {},
      "block": "withdrawFees",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4673": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "4674": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "4676": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4677": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "4678": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4679": {
      "op": "assert",
      "stack_out": []
    },
    "4680": {
      "op": "itxn_begin"
    },
    "4681": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4682": {
      "op": "bytec 4 // \"admin_account\"",
      "stack_out": [
        "0",
        "\"admin_account\""
      ]
    },
    "4684": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4685": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4686": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "4687": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4688": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4689": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "4690": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4691": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "4692": {
      "op": "bytec 12 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0",
        "\"fee_pool\""
      ]
    },
    "4694": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4695": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "4696": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%1#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4698": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4700": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "4702": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "4703": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4705": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4706": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4708": {
      "op": "itxn_submit"
    },
    "4709": {
      "op": "bytec 12 // \"fee_pool\"",
      "stack_out": [
        "\"fee_pool\""
      ]
    },
    "4711": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"fee_pool\"",
        "0"
      ]
    },
    "4712": {
      "op": "app_global_put",
      "stack_out": []
    },
    "4713": {
      "retsub": true,
      "op": "retsub"
    },
    "4714": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutASA",
      "params": {
        "buyer#0": "bytes",
        "debtor#0": "bytes",
        "axferTxn#0": "uint64"
      },
      "block": "buyoutASA",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "4717": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4718": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "4720": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4721": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4723": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4724": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4726": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4727": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "_interestSlice#0"
      ]
    },
    "4730": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4731": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4732": {
      "op": "box_get",
      "defined_out": [
        "currentLoanRecord#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "currentLoanRecord#0",
        "maybe_exists%1#0"
      ]
    },
    "4733": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "currentLoanRecord#0"
      ]
    },
    "4734": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ]
    },
    "4735": {
      "op": "dig 1",
      "defined_out": [
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "tmp%0#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "4737": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0"
      ]
    },
    "4738": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "4739": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "40"
      ]
    },
    "4741": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "collateralAmount#0"
      ]
    },
    "4742": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4743": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0"
      ]
    },
    "4745": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "currentLoanRecord#0"
      ]
    },
    "4748": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "currentLoanRecord#0",
        "32"
      ]
    },
    "4750": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "tmp%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "to_encode%0#0"
      ]
    },
    "4751": {
      "op": "itob",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4752": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0"
      ]
    },
    "4753": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4755": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "4757": {
      "op": "dig 1",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4759": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%0#1"
      ]
    },
    "4760": {
      "op": "box_get",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "4761": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4762": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "24"
      ]
    },
    "4764": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%6#0"
      ]
    },
    "4765": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "4766": {
      "op": "cover 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%6#0"
      ]
    },
    "4768": {
      "op": "dig 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4770": {
      "op": ">=",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0"
      ]
    },
    "4771": {
      "error": "Collateral amount exceeds current total",
      "op": "assert // Collateral amount exceeds current total",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4772": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "oraclePrice#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralAmount#0",
        "debtAmount#0",
        "oraclePrice#0"
      ]
    },
    "4775": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "debtAmount#0",
        "oraclePrice#0",
        "collateralAmount#0"
      ]
    },
    "4777": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "debtAmount#0",
        "hU#0",
        "lU#0"
      ]
    },
    "4778": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "1"
      ]
    },
    "4779": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "debtAmount#0",
        "collateralUSD#0"
      ]
    },
    "4780": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "debtAmount#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)"
      ]
    },
    "4781": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtAmount#0"
      ]
    },
    "4783": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "CR#0"
      ]
    },
    "4784": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "CR#0",
        "0"
      ]
    },
    "4785": {
      "op": "bytec 10 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "CR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4787": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4788": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0"
      ]
    },
    "4789": {
      "op": "dig 1",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%2#0",
        "CR#0 (copy)"
      ]
    },
    "4791": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "CR#0",
        "tmp%8#0"
      ]
    },
    "4792": {
      "error": "loan is not eligible for buyout",
      "op": "assert // loan is not eligible for buyout",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "CR#0"
      ]
    },
    "4793": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "CR#0",
        "10000"
      ]
    },
    "4794": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "tmp%9#0"
      ]
    },
    "4795": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "tmp%9#0",
        "0"
      ]
    },
    "4796": {
      "op": "bytec 10 // \"liq_threshold_bps\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "tmp%9#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4798": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "tmp%9#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4799": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "tmp%9#0",
        "maybe_value%3#0"
      ]
    },
    "4800": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "tmp%10#0"
      ]
    },
    "4801": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "tmp%10#0",
        "10000"
      ]
    },
    "4802": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "premiumRate#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "premiumRate#0"
      ]
    },
    "4803": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "premiumRate#0",
        "10000"
      ]
    },
    "4804": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "tmp%11#0"
      ]
    },
    "4805": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "tmp%11#0",
        "1"
      ]
    },
    "4806": {
      "op": "+",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralUSD#0",
        "tmp%12#0"
      ]
    },
    "4807": {
      "op": "*",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0"
      ]
    },
    "4808": {
      "op": "frame_dig -1",
      "defined_out": [
        "axferTxn#0 (copy)",
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "axferTxn#0 (copy)"
      ]
    },
    "4810": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "tmp%13#0"
      ]
    },
    "4812": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "tmp%13#0",
        "0"
      ]
    },
    "4813": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "tmp%13#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4814": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "tmp%13#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4815": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "tmp%13#0",
        "maybe_value%4#0"
      ]
    },
    "4816": {
      "op": "btoi",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "4817": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "tmp%15#0"
      ]
    },
    "4818": {
      "op": "bz buyoutASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0"
      ]
    },
    "4821": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "axferTxn#0 (copy)"
      ]
    },
    "4823": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%16#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "tmp%16#0"
      ]
    },
    "4825": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "4827": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "tmp%18#0"
      ]
    },
    "4828": {
      "op": "bz buyoutASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0"
      ]
    },
    "4831": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "axferTxn#0 (copy)"
      ]
    },
    "4833": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%19#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "tmp%19#0"
      ]
    },
    "4835": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "tmp%19#0",
        "buyoutPrice#0"
      ]
    },
    "4837": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%20#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "tmp%20#0"
      ]
    },
    "4838": {
      "op": "bz buyoutASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0"
      ]
    },
    "4841": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ]
    },
    "4842": {
      "block": "buyoutASA_bool_merge@5",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0"
      ]
    },
    "4843": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "tmp%0#0"
      ]
    },
    "4845": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "{box_del}"
      ]
    },
    "4846": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0"
      ]
    },
    "4847": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "0"
      ]
    },
    "4848": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4849": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4850": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "maybe_value%5#0"
      ]
    },
    "4851": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%5#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "maybe_value%5#0",
        "1"
      ]
    },
    "4852": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "new_state_value%0#0"
      ]
    },
    "4853": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "4854": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "4855": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0"
      ]
    },
    "4856": {
      "op": "itxn_begin"
    },
    "4857": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0"
      ]
    },
    "4859": {
      "op": "dup",
      "defined_out": [
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4860": {
      "op": "btoi",
      "defined_out": [
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4861": {
      "op": "frame_dig 1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "4863": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "4864": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4866": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4868": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "4870": {
      "op": "frame_dig -3",
      "defined_out": [
        "buyer#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "buyer#0 (copy)"
      ]
    },
    "4872": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "4874": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "4875": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "4877": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "4878": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "4880": {
      "op": "itxn_submit"
    },
    "4881": {
      "op": "frame_dig 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "tmp%6#0"
      ]
    },
    "4883": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "collateralAmount#0"
      ]
    },
    "4884": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "newTotal#0"
      ]
    },
    "4885": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0"
      ]
    },
    "4888": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "new_state_value%1#0"
      ]
    },
    "4891": {
      "op": "bytec 7 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "4893": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "4894": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0"
      ]
    },
    "4895": {
      "retsub": true,
      "op": "retsub"
    },
    "4896": {
      "block": "buyoutASA_bool_false@4",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%6#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ]
    },
    "4897": {
      "op": "b buyoutASA_bool_merge@5"
    },
    "4900": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutAlgo",
      "params": {
        "buyer#0": "bytes",
        "debtor#0": "bytes",
        "paymentTxn#0": "uint64"
      },
      "block": "buyoutAlgo",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "4903": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4904": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "4906": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4907": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4909": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4910": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4912": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4913": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "_interestSlice#0"
      ]
    },
    "4916": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4917": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4918": {
      "op": "box_get",
      "defined_out": [
        "currentLoanRecord#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "currentLoanRecord#0",
        "maybe_exists%1#0"
      ]
    },
    "4919": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "currentLoanRecord#0"
      ]
    },
    "4920": {
      "op": "dup2",
      "defined_out": [
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "currentLoanRecord#0",
        "tmp%0#0 (copy)",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "4921": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "currentLoanRecord#0"
      ]
    },
    "4922": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "tmp%0#0"
      ]
    },
    "4923": {
      "op": "box_get",
      "defined_out": [
        "currentLoanRecord#0",
        "maybe_exists%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "rec#0",
        "maybe_exists%2#0"
      ]
    },
    "4924": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "rec#0"
      ]
    },
    "4925": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "rec#0",
        "currentLoanRecord#0 (copy)"
      ]
    },
    "4927": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "currentLoanRecord#0",
        "currentLoanRecord#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "rec#0",
        "currentLoanRecord#0 (copy)",
        "40"
      ]
    },
    "4929": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "rec#0",
        "collateralAmount#0"
      ]
    },
    "4930": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "currentLoanRecord#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4931": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "rec#0",
        "collateralAmount#0"
      ]
    },
    "4933": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "rec#0"
      ]
    },
    "4935": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0",
        "rec#0"
      ]
    },
    "4938": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0"
      ]
    },
    "4939": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0"
      ]
    },
    "4941": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "currentLoanRecord#0",
        "32"
      ]
    },
    "4943": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "tmp%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "to_encode%0#0"
      ]
    },
    "4944": {
      "op": "itob",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4945": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0"
      ]
    },
    "4946": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4948": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "4950": {
      "op": "dig 1",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4952": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#1"
      ]
    },
    "4953": {
      "op": "box_get",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "4954": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "4955": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "24"
      ]
    },
    "4957": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0"
      ]
    },
    "4958": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "4959": {
      "op": "cover 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0"
      ]
    },
    "4961": {
      "op": "dig 2",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4963": {
      "op": ">=",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%8#0"
      ]
    },
    "4964": {
      "error": "Collateral amount exceeds current total",
      "op": "assert // Collateral amount exceeds current total",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "4965": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "oraclePrice#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralAmount#0",
        "oraclePrice#0"
      ]
    },
    "4968": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "hU#0",
        "lU#0"
      ]
    },
    "4969": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "hU#0",
        "lU#0",
        "1"
      ]
    },
    "4970": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralUSD#0"
      ]
    },
    "4971": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtAmount#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)"
      ]
    },
    "4972": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtAmount#0"
      ]
    },
    "4974": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0"
      ]
    },
    "4975": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "0"
      ]
    },
    "4976": {
      "op": "bytec 10 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4978": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4979": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%3#0"
      ]
    },
    "4980": {
      "op": "dig 1",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "maybe_value%3#0",
        "CR#0 (copy)"
      ]
    },
    "4982": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "tmp%9#0"
      ]
    },
    "4983": {
      "error": "loan is not eligible for buyout",
      "op": "assert // loan is not eligible for buyout",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0"
      ]
    },
    "4984": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "CR#0",
        "10000"
      ]
    },
    "4985": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0"
      ]
    },
    "4986": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "0"
      ]
    },
    "4987": {
      "op": "bytec 10 // \"liq_threshold_bps\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4989": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4990": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%10#0",
        "maybe_value%4#0"
      ]
    },
    "4991": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%11#0"
      ]
    },
    "4992": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%11#0",
        "10000"
      ]
    },
    "4993": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "premiumRate#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "premiumRate#0"
      ]
    },
    "4994": {
      "op": "intc_2 // 10000",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "premiumRate#0",
        "10000"
      ]
    },
    "4995": {
      "op": "/",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%12#0"
      ]
    },
    "4996": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%12#0",
        "1"
      ]
    },
    "4997": {
      "op": "+",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralUSD#0",
        "tmp%13#0"
      ]
    },
    "4998": {
      "op": "*",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "4999": {
      "op": "frame_dig -1",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "paymentTxn#0 (copy)",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "5001": {
      "op": "gtxns Receiver",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0"
      ]
    },
    "5003": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "5005": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%16#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%16#0"
      ]
    },
    "5006": {
      "op": "bz buyoutAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "5009": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "5011": {
      "op": "gtxns Amount",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%17#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%17#0"
      ]
    },
    "5013": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%17#0",
        "buyoutPrice#0"
      ]
    },
    "5015": {
      "op": "==",
      "defined_out": [
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%18#0"
      ]
    },
    "5016": {
      "op": "bz buyoutAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "5019": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "buyoutPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ]
    },
    "5020": {
      "block": "buyoutAlgo_bool_merge@4",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "5021": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "tmp%0#0"
      ]
    },
    "5023": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "{box_del}"
      ]
    },
    "5024": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "5025": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "0"
      ]
    },
    "5026": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "5027": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5028": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%5#0"
      ]
    },
    "5029": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%5#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "maybe_value%5#0",
        "1"
      ]
    },
    "5030": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "new_state_value%0#0"
      ]
    },
    "5031": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "5032": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "5033": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "5034": {
      "op": "itxn_begin"
    },
    "5035": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0"
      ]
    },
    "5037": {
      "op": "dup",
      "defined_out": [
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5038": {
      "op": "btoi",
      "defined_out": [
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5039": {
      "op": "frame_dig 1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "5041": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "5042": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5044": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5046": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "5048": {
      "op": "frame_dig -3",
      "defined_out": [
        "buyer#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "buyer#0 (copy)"
      ]
    },
    "5050": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "5052": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "5053": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "5055": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "5056": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "5058": {
      "op": "itxn_submit"
    },
    "5059": {
      "op": "frame_dig 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "tmp%7#0"
      ]
    },
    "5061": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "collateralAmount#0"
      ]
    },
    "5062": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "collateralTokenId#0",
        "newTotal#0"
      ]
    },
    "5063": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "5066": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "new_state_value%1#0"
      ]
    },
    "5069": {
      "op": "bytec 7 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "5071": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "5072": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ]
    },
    "5073": {
      "retsub": true,
      "op": "retsub"
    },
    "5074": {
      "block": "buyoutAlgo_bool_false@3",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "buyoutPrice#0",
        "and_result%0#0"
      ]
    },
    "5075": {
      "op": "b buyoutAlgo_bool_merge@4"
    },
    "5078": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateASA",
      "params": {
        "debtor#0": "bytes",
        "axferTxn#0": "uint64"
      },
      "block": "liquidateASA",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "5081": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "5082": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "5084": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5085": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5087": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5088": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5090": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5091": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "_interestSlice#0"
      ]
    },
    "5094": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5095": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "5096": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "record#0"
      ]
    },
    "5097": {
      "op": "dup",
      "defined_out": [
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "5098": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "5100": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "5101": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5102": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "5104": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "record#0"
      ]
    },
    "5107": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "5108": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "record#0"
      ]
    },
    "5110": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "5112": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0 (copy)"
      ]
    },
    "5113": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "5115": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "5117": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "5120": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0"
      ]
    },
    "5121": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "5123": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "5125": {
      "op": "dig 1",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5127": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#1"
      ]
    },
    "5128": {
      "op": "box_get",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "5129": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%0#0",
        "acceptedCollateral#0"
      ]
    },
    "5130": {
      "op": "cover 4",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%0#0"
      ]
    },
    "5132": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "5133": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "oraclePrice#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "oraclePrice#0"
      ]
    },
    "5136": {
      "op": "mulw",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "h#0",
        "l#0"
      ]
    },
    "5137": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "1"
      ]
    },
    "5138": {
      "op": "divw",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralUSD#0"
      ]
    },
    "5139": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralUSD#0",
        "debtAmount#0"
      ]
    },
    "5140": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0"
      ]
    },
    "5141": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "0"
      ]
    },
    "5142": {
      "op": "bytec 10 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5144": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5145": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "maybe_value%2#0"
      ]
    },
    "5146": {
      "op": "<=",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%3#0"
      ]
    },
    "5147": {
      "error": "loan is not liquidatable",
      "op": "assert // loan is not liquidatable",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5148": {
      "op": "frame_dig -1",
      "defined_out": [
        "acceptedCollateral#0",
        "axferTxn#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "axferTxn#0 (copy)"
      ]
    },
    "5150": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%4#0"
      ]
    },
    "5152": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5154": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%6#0"
      ]
    },
    "5155": {
      "op": "bz liquidateASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5158": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "axferTxn#0 (copy)"
      ]
    },
    "5160": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%7#0"
      ]
    },
    "5162": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%7#0",
        "0"
      ]
    },
    "5163": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%7#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "5164": {
      "op": "app_global_get_ex",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "record#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%7#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5165": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%7#0",
        "maybe_value%3#0"
      ]
    },
    "5166": {
      "op": "btoi",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "5167": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%9#0"
      ]
    },
    "5168": {
      "op": "bz liquidateASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5171": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "axferTxn#0 (copy)"
      ]
    },
    "5173": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%10#0"
      ]
    },
    "5175": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%10#0",
        "debtAmount#0"
      ]
    },
    "5177": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%11#0"
      ]
    },
    "5178": {
      "op": "bz liquidateASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5181": {
      "op": "intc_1 // 1",
      "defined_out": [
        "acceptedCollateral#0",
        "and_result%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ]
    },
    "5182": {
      "block": "liquidateASA_bool_merge@5",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5183": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%0#0"
      ]
    },
    "5185": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "{box_del}"
      ]
    },
    "5186": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5187": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "0"
      ]
    },
    "5188": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "5189": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "5190": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%4#0"
      ]
    },
    "5191": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%4#0",
        "1"
      ]
    },
    "5192": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%0#0"
      ]
    },
    "5193": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "5194": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "5195": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5196": {
      "op": "itxn_begin"
    },
    "5197": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "5199": {
      "op": "frame_dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0"
      ]
    },
    "5201": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "32"
      ]
    },
    "5203": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5204": {
      "op": "frame_dig 1",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "5206": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "5207": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5209": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5211": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "5213": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "5215": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "5216": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "5218": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "5219": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "5221": {
      "op": "itxn_submit"
    },
    "5222": {
      "op": "frame_dig 5",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "acceptedCollateral#0"
      ]
    },
    "5224": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "acceptedCollateral#0",
        "24"
      ]
    },
    "5226": {
      "op": "extract_uint64",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "tmp%14#0"
      ]
    },
    "5227": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%14#0",
        "collateralAmount#0"
      ]
    },
    "5228": {
      "op": "-",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "newTotal#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "newTotal#0"
      ]
    },
    "5229": {
      "op": "frame_dig 4",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "newTotal#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "newTotal#0",
        "collateralTokenId#0"
      ]
    },
    "5231": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralTokenId#0",
        "newTotal#0"
      ]
    },
    "5232": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5235": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%1#0"
      ]
    },
    "5238": {
      "op": "bytec 7 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "5240": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "5241": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5242": {
      "retsub": true,
      "op": "retsub"
    },
    "5243": {
      "block": "liquidateASA_bool_false@4",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ]
    },
    "5244": {
      "op": "b liquidateASA_bool_merge@5"
    },
    "5247": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateAlgo",
      "params": {
        "debtor#0": "bytes",
        "paymentTxn#0": "uint64"
      },
      "block": "liquidateAlgo",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "5250": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "5251": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "5253": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5254": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5256": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5257": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5259": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5260": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "_interestSlice#0"
      ]
    },
    "5263": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5264": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "5265": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "record#0"
      ]
    },
    "5266": {
      "op": "dup",
      "defined_out": [
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "5267": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "5269": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "5270": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5271": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "5273": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "record#0"
      ]
    },
    "5276": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "5277": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "record#0"
      ]
    },
    "5279": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "5281": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0 (copy)"
      ]
    },
    "5282": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "5284": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "5286": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "5289": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0"
      ]
    },
    "5290": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "5292": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "5294": {
      "op": "dig 1",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5296": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#1"
      ]
    },
    "5297": {
      "op": "box_get",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "5298": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%0#0",
        "acceptedCollateral#0"
      ]
    },
    "5299": {
      "op": "cover 4",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%0#0"
      ]
    },
    "5301": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "5302": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "oraclePrice#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralAmount#0",
        "oraclePrice#0"
      ]
    },
    "5305": {
      "op": "mulw",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "h#0",
        "l#0"
      ]
    },
    "5306": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "1"
      ]
    },
    "5307": {
      "op": "divw",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "debtAmount#0",
        "collateralUSD#0"
      ]
    },
    "5308": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralUSD#0",
        "debtAmount#0"
      ]
    },
    "5309": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0"
      ]
    },
    "5310": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "0"
      ]
    },
    "5311": {
      "op": "bytec 10 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5313": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5314": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "CR#0",
        "maybe_value%2#0"
      ]
    },
    "5315": {
      "op": "<=",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%3#0"
      ]
    },
    "5316": {
      "error": "loan is not liquidatable",
      "op": "assert // loan is not liquidatable",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5317": {
      "op": "frame_dig -1",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "paymentTxn#0 (copy)",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "5319": {
      "op": "gtxns Receiver",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%4#0"
      ]
    },
    "5321": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5323": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%6#0"
      ]
    },
    "5324": {
      "op": "bz liquidateAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5327": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "5329": {
      "op": "gtxns Amount",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%7#0"
      ]
    },
    "5331": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%7#0",
        "debtAmount#0"
      ]
    },
    "5333": {
      "op": "==",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%8#0"
      ]
    },
    "5334": {
      "op": "bz liquidateAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5337": {
      "op": "intc_1 // 1",
      "defined_out": [
        "acceptedCollateral#0",
        "and_result%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ]
    },
    "5338": {
      "block": "liquidateAlgo_bool_merge@4",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5339": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%0#0"
      ]
    },
    "5341": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "{box_del}"
      ]
    },
    "5342": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5343": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "0"
      ]
    },
    "5344": {
      "op": "bytec_2 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "5345": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5346": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%3#0"
      ]
    },
    "5347": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "5348": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%0#0"
      ]
    },
    "5349": {
      "op": "bytec_2 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "5350": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "5351": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5352": {
      "op": "itxn_begin"
    },
    "5353": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "5355": {
      "op": "frame_dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0"
      ]
    },
    "5357": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "32"
      ]
    },
    "5359": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5360": {
      "op": "frame_dig 1",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "5362": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "5363": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5365": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5367": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "5369": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "5371": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "5372": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "5374": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "5375": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0"
      ]
    },
    "5377": {
      "op": "itxn_submit"
    },
    "5378": {
      "op": "frame_dig 5",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "acceptedCollateral#0"
      ]
    },
    "5380": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "acceptedCollateral#0",
        "24"
      ]
    },
    "5382": {
      "op": "extract_uint64",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "tmp%11#0"
      ]
    },
    "5383": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "tmp%11#0",
        "collateralAmount#0"
      ]
    },
    "5384": {
      "op": "-",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "newTotal#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "newTotal#0"
      ]
    },
    "5385": {
      "op": "frame_dig 4",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "newTotal#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "newTotal#0",
        "collateralTokenId#0"
      ]
    },
    "5387": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "collateralTokenId#0",
        "newTotal#0"
      ]
    },
    "5388": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5391": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%1#0"
      ]
    },
    "5394": {
      "op": "bytec 7 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "5396": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "5397": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ]
    },
    "5398": {
      "retsub": true,
      "op": "retsub"
    },
    "5399": {
      "block": "liquidateAlgo_bool_false@3",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "and_result%0#0"
      ]
    },
    "5400": {
      "op": "b liquidateAlgo_bool_merge@4"
    },
    "5403": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "getLoanStatus",
      "stack_in": [],
      "op": "proto 1 7"
    },
    "5406": {
      "op": "bytec_3 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "5407": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "5409": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5410": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5411": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5412": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5414": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5415": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "5416": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0"
      ]
    },
    "5417": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "record#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "record#0",
        "{accrueMarket}"
      ]
    },
    "5420": {
      "op": "pop",
      "stack_out": [
        "record#0"
      ]
    },
    "5421": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "debt#0",
        "record#0"
      ]
    },
    "5424": {
      "op": "dup",
      "defined_out": [
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "5425": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "debt#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "5427": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "debt#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "5428": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralAmount#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "5429": {
      "op": "bytec 10 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "collateralAmount#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5431": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "maybe_exists%2#0",
        "record#0"
      ],
      "stack_out": [
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "liqBps#0",
        "maybe_exists%2#0"
      ]
    },
    "5432": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "liqBps#0"
      ]
    },
    "5433": {
      "op": "uncover 2",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "record#0"
      ]
    },
    "5435": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%3#0"
      ]
    },
    "5438": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "oraclePrice#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "oraclePrice#0"
      ]
    },
    "5441": {
      "op": "dig 2",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "debt#0",
        "liqBps#0",
        "oraclePrice#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "oraclePrice#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5443": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "hi#0",
        "liqBps#0",
        "lo#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "hi#0",
        "lo#0"
      ]
    },
    "5444": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "collateralAmount#0",
        "debt#0",
        "hi#0",
        "liqBps#0",
        "lo#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "hi#0",
        "lo#0",
        "1"
      ]
    },
    "5445": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0"
      ]
    },
    "5446": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)"
      ]
    },
    "5447": {
      "op": "intc_2 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "10000"
      ]
    },
    "5448": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%4#0"
      ]
    },
    "5449": {
      "op": "dig 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "debt#0 (copy)",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%4#0",
        "debt#0 (copy)"
      ]
    },
    "5451": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0"
      ]
    },
    "5452": {
      "op": "dup",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)"
      ]
    },
    "5453": {
      "op": "dig 3",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "liqBps#0 (copy)"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "5455": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0"
      ]
    },
    "5456": {
      "op": "dig 1",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)"
      ]
    },
    "5458": {
      "op": "dig 4",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "5460": {
      "op": ">",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForBuyout#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "5461": {
      "op": "uncover 6",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0"
      ]
    },
    "5463": {
      "op": "uncover 4",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0"
      ]
    },
    "5465": {
      "op": "uncover 6",
      "stack_out": [
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0"
      ]
    },
    "5467": {
      "op": "uncover 5",
      "stack_out": [
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0"
      ]
    },
    "5469": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0"
      ]
    },
    "5471": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0"
      ]
    },
    "5473": {
      "op": "uncover 6",
      "stack_out": [
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "5475": {
      "retsub": true,
      "op": "retsub"
    },
    "5476": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "params": {
        "collateralTokenId#0": "bytes",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64"
      },
      "block": "calculateCollateralValueUSD",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "5479": {
      "op": "itxn_begin"
    },
    "5480": {
      "op": "bytec 20 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)"
      ],
      "stack_out": [
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "5482": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5484": {
      "op": "frame_dig -1",
      "defined_out": [
        "lstApp#0 (copy)"
      ],
      "stack_out": [
        "lstApp#0 (copy)"
      ]
    },
    "5486": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "5488": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5490": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5492": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "5494": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5496": {
      "op": "itxn_submit"
    },
    "5497": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "5499": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5500": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5503": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "5504": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "5507": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "5509": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "5510": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5511": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0"
      ]
    },
    "5512": {
      "op": "itxn_begin"
    },
    "5513": {
      "op": "bytec 21 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "5515": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "circulatingExternalLST#0"
      ]
    },
    "5517": {
      "op": "frame_dig -1",
      "stack_out": [
        "circulatingExternalLST#0",
        "lstApp#0 (copy)"
      ]
    },
    "5519": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "circulatingExternalLST#0"
      ]
    },
    "5521": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "5523": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "circulatingExternalLST#0"
      ]
    },
    "5525": {
      "op": "intc 4 // 1000",
      "stack_out": [
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "5527": {
      "op": "itxn_field Fee",
      "stack_out": [
        "circulatingExternalLST#0"
      ]
    },
    "5529": {
      "op": "itxn_submit"
    },
    "5530": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "5532": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "5533": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "5536": {
      "op": "swap",
      "stack_out": [
        "circulatingExternalLST#0",
        "tmp%4#0",
        "awst_tmp%1#0"
      ]
    },
    "5537": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5540": {
      "op": "bytec 5 // 0x151f7c75",
      "stack_out": [
        "circulatingExternalLST#0",
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "5542": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "5543": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "circulatingExternalLST#0",
        "tmp%4#0"
      ]
    },
    "5544": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "5545": {
      "op": "frame_dig -2",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateralAmount#0 (copy)",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5547": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0"
      ]
    },
    "5548": {
      "op": "uncover 2",
      "stack_out": [
        "hC#0",
        "lC#0",
        "circulatingExternalLST#0"
      ]
    },
    "5550": {
      "op": "divw",
      "defined_out": [
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0"
      ]
    },
    "5551": {
      "op": "bytec 11 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "\"accepted_collaterals\""
      ]
    },
    "5553": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5555": {
      "op": "concat",
      "stack_out": [
        "underlyingCollateral#0",
        "tmp%0#0"
      ]
    },
    "5556": {
      "op": "box_get",
      "defined_out": [
        "lstCollateral#0",
        "maybe_exists%0#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "lstCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "5557": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "underlyingCollateral#0",
        "lstCollateral#0"
      ]
    },
    "5558": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "baseTokenId#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "baseTokenId#0"
      ]
    },
    "5561": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenPrice#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "baseTokenPrice#0"
      ]
    },
    "5564": {
      "op": "mulw",
      "defined_out": [
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "hU#0",
        "lU#0"
      ]
    },
    "5565": {
      "op": "intc 6 // 1000000",
      "defined_out": [
        "1000000",
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "hU#0",
        "lU#0",
        "1000000"
      ]
    },
    "5567": {
      "op": "divw",
      "defined_out": [
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralUSD#0"
      ]
    },
    "5568": {
      "retsub": true,
      "op": "retsub"
    }
  }
}