{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/OrbitalLending.algo.ts",
    "/Users/kierannelson/Development/orbital-lending/smart-contracts/projects/smart-contracts/smart_contracts/orbital_lending/config.algo.ts"
  ],
  "mappingsuDE;;AAAA;AAAA;AAAA;;AAAA;AA3uDF;;;AAAA;;;AAAA;AAAA;;;AAAA;AA2uDE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AApCC;;AAAA;AAAA;AAAA;;AAAA;AArrDH;;;AAAA;AAAA;;AAqrDG;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjDA;;AAAA;AAAA;AAAA;;AAAA;AApoDH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAooDG;;;AAAA;;AArDA;;AAAA;AAAA;AAAA;;AAAA;AA/kDH;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+kDG;;;AAAA;;AAtDA;;AAAA;AAAA;AAAA;;AAAA;AAzhDH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAyhDG;;;AAAA;;AA3GA;;AAAA;AAAA;AAAA;;AAAA;AA96CH;;;AAAA;AA86CG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlIA;;AAAA;AAAA;AAAA;;AAAA;AA5yCH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA4yCG;;;AAAA;;AA/GA;;AAAA;AAAA;AAAA;;AAAA;AA7rCH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA6rCG;;;AAAA;;AAjFA;;AAAA;AAAA;AAAA;;AAAA;AA5mCH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA4mCG;;;AAAA;;AA7FA;;AAAA;AAAA;AAAA;;AAAA;AA/gCH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA+gCG;;;AAAA;;AAbD;;AAAA;AAAA;AAAA;;AAAA;AAlgCF;;;AAAA;AAAA;;AAkgCE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnMA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnDC;;AAAA;AAAA;AAAA;;AAAA;AA5wBH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AA4wBG;;;AAAA;;AA7FA;;AAAA;AAAA;AAAA;;AAAA;AA/qBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+qBG;;;AAAA;;AAvDA;;AAAA;AAAA;AAAA;;AAAA;AAxnBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwnBG;;;AAAA;;AA1CA;;AAAA;AAAA;AAAA;;AAAA;AA9kBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8kBG;;;AAAA;;AA9CA;;AAAA;AAAA;AAAA;;AAAA;AAhiBH;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgiBG;;;AAAA;;AA7EA;;AAAA;AAAA;AAAA;;AAAA;AAndH;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmdG;;;AAAA;;AA1DD;;AAAA;AAAA;AAAA;;AAAA;AAzZF;;;AAyZE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAhXF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAgXE;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AAvVF;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuVE;;;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAvTF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuTE;;;AAAA;;AAzDA;;AAAA;AAAA;AAAA;;AAAA;AA9PF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA8PE;;;AAAA;;AArFC;;AAAA;AAAA;AAAA;;AAAA;AAzKH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAyKG;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAxJH;;;AAAA;AAAA;;AAAA;;;AAAA;AAwJG;;;AAAA;;AAAD;;;AA1HA;AA4HE;;AAAA;AAC2B;;AAAA;AApJ7B;AAoJE;AAAA;;AAcF;;;AAWgB;;AAtJhB;AAAA;AAAA;AAAA;AAsJS;AAAP;AAEA;;AAAA;;AAxJF;AAAA;AAAA;AAAA;AAwJE;AAAA;;;AAAA;;AAAA;;AClOkC;;;;ADkOlC;AAAA;;;;AAAA;AA9IF;;AAmJE;;AAAA;AAhJF;;AAiJE;;AAAA;AA9IF;;AA+IE;;AAAA;AAnEF;;AAoE0C;AAAxC;AAvKF;;AAwKwB;AAAtB;AA9KF;;AA+K+B;AAA7B;AA5KF;;AA6K8B;AAA5B;AA1EF;;AA2EmC;AAAjC;AAjJF;;AAkJE;;AAAA;AAlKF;;AAmKE;;AAAA;AA9HF;;AA+HE;;AAAA;AA3LF;;AA4L4B;;;;;;;;;;AAA1B;AAlJF;;AAmJwB;;AAAtB;AAhJF;;AAiJ4B;;;AAA1B;AA1GF;;AA2G6B;AAA3B;AApHF;;AAqH+B;AAA7B;AAhJF;;AAiJ6B;;;AAA3B;AA9IF;;AA+I0B;AAAxB;AA5IF;;AA6I0B;;;AAAxB;AA1IF;;AA2I2B;;;AAAzB;AArIF;;AAsI6B;AAA3B;AAnIF;;AAoIgC;AAA9B;AAjIF;;AAkI4B;;AAA1B;AA/HF;;AAgI4B;AAA1B;AA1HF;;AA2H+B;AAA7B;AAxHF;;AAyH8B;AAA5B;AAhFF;;AAiF6C;AAA3C;AA9EF;;AA+E+B;AAA7B;AA5EF;;AA6EmC;AAAjC;AA1EF;;AA2E0B;AAAxB;AAzEF;;AA0EwC;;AAAtC;AAzEF;;AA0EmC;AAAjC;AAzHF;;ACpIiC;;AD8P/B;AAvHF;;AAwHsC;;AAApC;AAxKF;AAAA;;AAAA;AAAA;AAmDA;;AAsHE;AAAA;AAC6B;;AAAA;AAjG/B;;AAiGE;AAAA;AApHF;;;;;;;;;;;;;;;;;;;;;;;;;AAsHuC;AAArC;AAzNF;AAAA;AAAA;AAAA;AA2N+B;AAA7B;;;AACE;AAE0B;;AA9N9B;AAAA;AAAA;AAAA;AA+N4C;AACvB;;;;;;;AAJjB;;;AC3QkC;;;AD2QlC;;;;;;AA2BJ;;;AAcgB;;AA9OhB;AAAA;AAAA;AAAA;AA8OS;AAAP;AAGO;;AAAA;;;AAAqB;;AAAgB;;AAAhB;AAArB;;;;AAAP;AACO;;AAAA;;;AAAsB;;AAAgB;;AAAhB;AAAtB;;;;AAAP;AAEA;;AAAA;;;AACS;;AAAA;;AAAA;AAAP;AAEK;;AAAiB;;AAAjB;AAAP;AAEO;;AAAA;;;AAAsC;;AAAoB;;;AAApB;AAAtC;;;;AAAP;AAnOF;;AAsOE;;AAAA;AAnOF;;AAoOE;;AAAA;AAjOF;;AAkOE;;AAAA;AA/NF;;AAgOE;;AAAA;AA7NF;;AA8NE;;AAAA;AA3NF;;AA4NE;;AAAA;AAzNF;;AA0NE;;AAAA;AAvNF;;AAwNE;;AAAA;AArNF;;AAsNE;;AAAA;AA7MF;;AA8ME;;AAAA;AA3MF;;AA4ME;;AAAA;AAzMF;;AA0ME;;AAAA;AArJF;AAAA;;AAAA;AAAA;AAuJoC;AAAlC;AAvJF;;AAuJE;AAAA;AAxJF;;AAyJwC;;AAAtC;AArOF;AAAA;;AAAA;AAAA;AAwOM;;;AA5NN;AAAA;;AAAA;AAAA;AAZA;AAAA;;AAAA;AAAA;AAwOoC;AAA9B;;;AAxON;AAAA;;AAAA;AAAA;AAYA;;AA6NI;AAAA;;;;;;;;;;;;;;AAWJ;;;AACgB;;AA1RhB;AAAA;AAAA;AAAA;AA0RS;AAAP;AACA;;AAAA;;AA3RF;AAAA;AAAA;AAAA;AA2RE;AAAA;;;AAAA;;AAAA;;ACpWgC;;;;ADoWhC;AAAA;;;;AAAA;AAlTF;AAAA;AAAA;AAAA;AAyTmD;AAClC;AAEI;;AACE;;AAAA;;AAAA;AACG;;AAAA;;AAAA;AAEJ;;AACiB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;AACwB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;;;;;;;AAHI;;;;;;;;;AALJ;;;;ACzWqB;;;ADyWrB;;;AAYW;AAnU5B;;AAmUE;AAAA;;;;;;AAUF;;;AACgB;;AA1ThB;AAAA;AAAA;AAAA;AA0TS;AAAP;AACA;;AAAA;;AA3TF;AAAA;AAAA;AAAA;AA2TE;AAAA;;;AAAA;;AAAA;;ACnYkC;;;ADmYlC;AAAA;;;;AAAA;AAI0B;;AAAA;AAnV5B;;AAmVE;AAAA;AAGA;AAE0B;;AAET;;;;;;;;;AAJjB;;;ACxYoC;;;ADwYpC;;;;;;AAgBF;;;AACgB;;AAnVhB;AAAA;AAAA;AAAA;AAmVS;AAAP;AAvWF;AAAA;;AAAA;AAAA;AAwWiC;AAAoB;;AAAA;;AAA5C;AAAP;AAEA;;AAAA;;AAtVF;AAAA;AAAA;AAAA;AAsVE;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;;AAAA;AAnWF;;AAuWE;;AAAA;;;;;;AAvWF;AAAA;;AAAA;AAAA;AA+WE;AA5WF;AAAA;;AAAA;AAAA;AAoXE;AA9QF;AAAA;;AAAA;AAAA;AAsRE;AASF;;;AAxXA;AAAA;;AAAA;AAAA;AA0XyB;AAAA;;AAAA;;AAAA;AAGR;AAAA;;;;;;;;;;;;;;AAAA;;;;ACtcqB;;;ADscrB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;AAMK;AAApB;AAaF;;;AAhUsF;;AAAA;;AAAA;AAkUlC;AAAA;AAAA;AAEE;AAAhB;;AAAgB;AAA9C;;AAAmB;AAEH;;AAAA;;;AACI;;AAAA;;;AACM;;AAAA;;;AACb;;AAAA;AAJoB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AAQF;;;AA7UsF;;AAAA;;AAAA;AA+UlC;AAAA;AAAA;AAEhB;AAAhB;;AAAgB;AAA3B;AAAA;;AAAA;AAAP;AACM;;AAAmB;AAEH;;AAAA;;;AACI;;AAAA;;;AACM;;AAAA;;;AACb;;AAAA;AAJoB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAvC;;AAeF;;;AA5cA;AAAA;AAAA;AAAA;AA8cmD;AACnC;;AAxbhB;AAAA;AAAA;AAAA;AAwbS;AAAP;AACyB;;AAAA;AAAA;AAAA;;AAAlB;AAAP;AAtWoF;;AAAA;;AAAA;AAAA;AAwT9C;AAAA;;AA+C/B;AAAP;AACA;;AAAA;;AA3bF;AAAA;AAAA;AAAA;AA2bE;AAAA;;;AAAA;;AAAA;;AClgBkC;;;;ADkgBlC;AAAA;;;;AAAA;AAldF;AAAA;AAAA;AAAA;AAudoD;;AAAA;;AAAA;AAAA;AAAA;AAI/B;;;;;;;;;;AAJ+B;AAOlD;;AAAA;AAAA;;AAAA;AA3WF;AAAA;;AAAA;AAAA;AA4WkF;AAAxC;AA5W1C;;AA4WE;AAAA;AACA;AAEmB;;AACO;AAET;;;;;;;;;;;AALjB;;;AC/gBoC;;;AD+gBpC;AA9DsC;AAAA;;AAwEtC;;;;;;AAGF;;;AAneA;AAAA;;AAAA;AAAA;ACtDkC;;AD0hBF;AAjehC;AAAA;;AAAA;AAAA;AAmemB;AAEa;;AAAA;AC9hBE;;AD+hBzB;AAAP;AAsCF;;;AAzhBA;AAAA;AAAA;AAAA;AA2hBmD;AACjD;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAKA;;AAAA;;AChlBoC;ADglBpC;AAAA;AAIuB;;;AAAjB;AAriBR;AAAA;AAAA;AAAA;;AAAA;AAaA;AAAA;;AAAA;AAAA;AA+hBE;;;;;AAKA;AAE0B;;AAhjB5B;AAAA;;AAAA;AAAA;AAijByC;;;;;;;;;AAHvC;;;AChmBoC;;;ADgmBpC;AAviBF;AAAA;;AAAA;AAAA;AAgjBE;AAhjBF;;AAgjBE;AAAA;AA7iBF;AAAA;;AAAA;AAAA;AA8iBE;;AAAA;AA9iBF;;AA8iBE;AAAA;AAC0B;;;AA5d5B;;AA4dE;AAAA;;AAbE;;AAAS;;;;;;;;;;AAwBb;;;AAvkBA;AAAA;AAAA;AAAA;;AAAA;AA0kBE;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAIA;;AAAA;;AC7nBoC;AD6nBpC;AAAA;AAIuB;;;AAAjB;AArkBR;AAAA;;AAAA;AAAA;AAwkBE;;;;;AAKA;AAE0B;;AAzlB5B;AAAA;;AAAA;AAAA;AA0lByC;;;;;;;;;AAHvC;;;ACzoBoC;;;ADyoBpC;AAhlBF;AAAA;;AAAA;AAAA;AAylBE;AAzlBF;;AAylBE;AAAA;AAtlBF;AAAA;;AAAA;AAAA;AAulBE;;AAAA;AAvlBF;;AAulBE;AAAA;AAC0B;;;AArgB5B;;AAqgBE;AAAA;;AAbE;;AAAS;;;;;;;;;;AAyBb;;;AA9mBA;AAAA;;AAAA;AAAA;AAqnBiD;AAC/C;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAMA;;AAAA;;AACU;;;AADV;AAAA;AAIuB;;;AAAjB;AAIF;;AAAoB;;AAApB;AAAJ;;;AA7nBF;AAAA;;AAAA;AAAA;AAGA;AAAA;;AAAA;AAAA;AAggBmB;;AAAA;AACV;;AAAA;AA+HoC;;AA7oB7C;AAAA;AAAA;AAAA;AA6oBiG;AAAxF;;AAAA;AAAA;;AAAA;AAAP;AACA;AAE0B;;AAhpB5B;AAAA;AAAA;AAAA;AAipB0C;;;;;;;;;AAHxC;;;AC7rBoC;;;AD6rBpC;AApoBF;AAAA;;AAAA;AAAA;AA6oBE;;AAAA;AA7oBF;;AA6oBE;AAAA;AA1oBF;AAAA;;AAAA;AAAA;AA2oBE;AAAA;AA3oBF;;AA2oBE;AAAA;AAC0B;;;AAzjB5B;;AAyjBE;AAAA;;AAhK+B;AAAA;;;;;;;;AAAA;;;;ACxiBK;;;ADwiBL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;AC5iBM;;;AD4iBN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAMb;;AAAA;AACV;;AAAA;;;;;;;;AAoKT;;;;;;;AA3jBuD;AAqkBb;;AArkBa;AAqkBL;AAAA;AAAA;;AAAA;AACzB;;;AAAjB;AAEN;;;AACuD;;AAA1B;;;AAAkC;;AACxB;AAArC;;AAmiCF;;AAAA;;ACxwDuC;;;ADwwDvC;AAAA;AAEA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAlnDoF;;AAAA;;AAAA;AAwT9C;AAAA;;AA+zCtC;AAriCM;;AAAA;;AAAA;;AAAgB;;;AA3pBxB;AAAA;;AAAA;AAAA;AA4pBgC;ACzuBE;;ADyuBH;AA7jB/B;;AA8jBE;;AAAA;AA9rBF;AAAA;AAAA;AAAA;AA+rBuC;;;AAokCpB;;AAAA;AC9yDkB;;AD+yDV;AAjoD3B;;AAooDE;;AAAA;AACwB;AAAA;AAloD1B;;AAkoDE;AAAA;AAEO;AAAP;AAnuDF;AAAA;;AAAA;AAAA;AAyuDuB;;AAAA;AC5zDW;;AD4zDZ;AAAd;AAAA;;AACA;;AAAA;;AAAuB;AAAvB;AAAA;;AAAA;;AAjwDR;AAAA;;AAAA;AAAA;AAmwDE;AAnwDF;;AAmwDE;AAAA;AAtpDF;;AAupDE;AAAA;AAjlCA;;AAAA;;;AAEW;;AA6lCL;AAAe;;;AAEf;;AAAmB;;;AAQnB;;AAAA;AAAA;;AAAkB;AAKU;;AAAA;;;AAC4B;;AAAjB;;AAAiB;AAA9B;;AAAA;AAAZ;AAlzDtB;AAAA;AAAA;AAAA;AAqzDc;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;AAHE;AAAA;AAAA;AAKL;;AAAA;AA/tDf;AAAA;;AAAA;AAAA;AAguDkB;AAXmB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlsDkB;AAAA;;AAAA;AAksDrD;AAAA;AAeA;;AAAA;;AAAA;;;AA5mC0B;;AAltB5B;AAAA;AAAA;AAAA;AAi0D+B;AAA7B;;;AACE;;;;;;;AAAA;;;ACj3DkC;;;ADi3DlC;AA3uDJ;AAAA;;AAAA;AAAA;AA4nB6B;;AAAA;AA5nB7B;;AA4nBE;AAAA;AAC0B;;;AApnB5B;;AAonBE;AAAA;AAptBF;AAAA;AAAA;AAAA;AAstBgD;AAA9C;;AAAA;;;;AAonCE;AA10DJ;AAAA;AAAA;AAAA;AA60D4C;;;;;;;;;AAHxC;;;ACz3DkC;;;ADy3DlC;;;;AA5nC4D;;AAsB1C;;AAAA;AApuBtB;AAAA;AAAA;AAAA;AAuuBc;;AAAA;AACsB;;AAAnB;AAFG;;AAGF;;AAHE;AAAA;AAAA;AA5oBpB;AAAA;;AAAA;AAAA;AAkpBkB;AAX0B;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AApnBW;AAAA;;AAAA;AAonBrD;AAAA;AAjnBF;AAAA;;AAAA;AAAA;AA+nBoE;AAAjC;AA/nBnC;;AA+nBE;AAAA;AAhCE;;AAAA;;AAAA;;;;;;;;;;;;;;;;;AAsDJ;;;AAxpBuD;AAAA;;AAAA;AA0pBrB;AAAA;;AAAhC;AACA;;;;AAEA;;AAAA;;;;AAE0B;;;AA5qB5B;;AA4qBE;AAAA;;AA4CF;;;;;;;AA3yBA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AA0EA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAvCA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAouBE;;;AAAoB;;;AAltBtB;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA6vBE;;;;;;;AAjvBF;AAAA;;AAAA;AAAA;AA6vBY;;;AA9xBZ;AAAA;;AAAA;AAAA;AAMA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA+uBM;;AAAA;AAAJ;;;AACqB;;AAAA;;AAAA;AACF;;AAAA;AAAX;AAAN;;AA9uBJ;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AAuvBM;;;AAAc;;AAAA;AAAA;;AAAA;;;;AAAd;;;;;;;;;;;AA9uBN;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;;;;AA0wBE;;;AAvwBF;AAAA;;AAAA;AAAA;AAwwB4B;;;AAnyB5B;AAAA;;AAAA;AAAA;;;AAoyBuB;;AAAA;;AAAA;AAAA;;;AAAoB;;AAAA;;AAAA;;;AACjC;;AAAA;;AAAa;AAAb;;AACF;;AAAA;;AAAA;AAAJ;;;;;;;AACI;;AAAA;;AAAA;AAAJ;;;;;;;;;;;;;AA5wBJ;;AA+wBE;;AAAA;AACA;;AAAA;AAP6D;;;;;;AAzwB/D;AAAA;;AAAA;AAAA;;;;;;AAouBU;;AAAA;;AAAA;AAAA;;AAAe;ACx1BS;;ADy1BxB;;AAAgB;AACH;;AAAA;;AAAA;AACb;;AAAA;;AAAA;AAAwB;;AAAA;;AAAA;AAAxB;AAAN;;;;;AAlwBJ;AAAA;;AAAA;AAAA;;;;;;AA8BA;AAAA;;AAAA;AAAA;ACvHkC;;AD+2BxB;;AAAA;AAAA;;AAAmB;AACN;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACV;;AAAA;;ACl3BqB;;ADk3BrB;AAA+B;;ACl3BV;;ADk3BU;AAA/B;AAAT;AAAA;;AA3vBJ;;AA4vBI;AAAA;;;;AAhDqB;;AAAA;;AAAA;ACn0BS;;ADo0Bd;AAAZ;AAAA;;AACN;;;AAA4B;;;AAiCN;;;AA/BN;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;ACv0BgB;;ADw0Bb;AACZ;;AAAA;;;AA6Be;;;AAiDxB;;;AACQ;;AAAgB;;AAAU;AAA1B;AACN;;;AAAoB;AAAP;;AAAA;;AAAA;AAnxBf;AAAA;;AAAA;AAAA;AAoxBmB;;AAAA;AACoB;;AAAb;;AAAa;AAA9B;AAAP;;AAAA;;AAAA;AAIF;;;AAtwBuD;AAAA;;AAAA;AAuwBd;AAAA;AAAA;AACd;;;AAGA;AAAA;;;AACD;;AAAA;;;AAz3B1B;AAAA;AAAA;AAAA;AA23BwB;;AAAA;;;AACT;;AAAA;AAlyBf;AAAA;;AAAA;AAAA;AAmyBkB;AAPD;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AASf;;AAAA;AAAA;AACA;AAKF;;;;;;;AAC6B;;AAArB;AAzyBR;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA2yBM;AAAJ;;;AAAwB;AAAP;;AAAA;AAEX;;AAAA;;AAAiB;AAAjB;AAAA;;AA5CN;;;AAAyB;;;AAgDzB;;AAAA;;;AAjzBF;;AAkzBI;;AAAA;AACO;AAAP;;AAAA;AAtzBJ;AAAA;;AAAA;AAAA;AA4zBqB;AAAA;;AAAA;ACh8BY;;ADi8BL;AACD;AA9zB3B;;AA+zBE;AAAA;AAl0BF;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAw0ByB;AAAnB;;AACJ;;;AACqB;;AAAA;;AAAA;AC38BU;;AD48BlB;AAAX;;AAx3BJ;AAAA;;AAAA;AAAA;ACtFkC;;ADm9B1B;AAAmB;AAGN;;AAAA;AAAA;;AAAA;ACt9Ba;;ADu9BE;AAC5B;AAA2B;AAIN;;AAAA;;AAAA;AAz1B7B;;AAy1BE;AAAA;AAn6BF;AAAA;;AAAA;AAAA;AAs6BE;;AAAA;AAt6BF;;AAs6BE;AAAA;AAn7BF;AAAA;AAAA;AAAA;AAs7BgD;AAA9C;AAAA;;;AAz1BF;;AA41BE;;AAAA;AAIA;;AAAA;AA71BF;AAAA;;AAAA;AAAA;AAiwBmB;;AAAA;ACv4BmB;;;;;ADy4Bf;AC74BU;;ADg5Bd;ACl5Be;;ADm5BN;AAApB;;AAsCoB;;;AA8G5B;;;AA94BuD;AAAA;;AAAA;AA+4BZ;AAAA;AAAzC;AAYF;;;;;AAxgCA;AAAA;AAAA;AAAA;AA0gCmD;AACjD;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAKuB;;;AAAjB;AACuC;;AAA1B;;;AAAb;AAEgC;;AAA1B;;;AACa;;;AAAA;AAElB;;AAAA;;AAAA;AAAP;AAEM;;AAAwB;AAAxB;AAAA;;AAj8BR;AAAA;;AAAA;AAAA;AAo8BE;;AAAA;AAp8BF;;AAo8BE;AAAA;AAEA;;;AAh7BqD;AAi7B3B;;AAj7B2B;AAi7BnB;;AA96BpC;AAAA;;AAAA;AAAA;AA+6BsC;AAAlC;AA/6BJ;;AA+6BI;AAAA;AAEA;AAE0B;;AACW;AAAA;AAAlB;;AAAkB;AACC;AAAjB;;AAAiB;;;;;;;AAJtC;;;AChlCkC;;;ADglClC;;AAWsC;;AACb;AAAA;AAAA;;;AACD;AAAA;;;AA9iC5B;AAAA;AAAA;AAAA;AAijCgB;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKL;;AAAA;AA39BjB;AAAA;;AAAA;AAAA;AA49BoB;AAXwB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AA97BW;AA87B3B;;AA97B2B;AA87BnD;AAAA;;;;;;AA0DJ;;;;;AArmCA;AAAA;AAAA;AAAA;;AAAA;AAwmCE;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAIuB;;;AAAjB;AACuC;;AAA1B;;;AAAb;AACgC;;AAA1B;;;AACa;;;AAAA;AAElB;;AAAA;;AAAA;AAAP;AAEM;;AAAwB;AAAxB;AAAA;;AA5hCR;AAAA;;AAAA;AAAA;AA+hCE;;AAAA;AA/hCF;;AA+hCE;AAAA;AAEA;;;AA3gCqD;AA4gC3B;;AA5gC2B;AA4gCnB;;AAzgCpC;AAAA;;AAAA;AAAA;AA0gCsC;AAAlC;AA1gCJ;;AA0gCI;AAAA;AAEA;AAE0B;;AACW;AAAA;AAAlB;;AAAkB;AACC;AAAjB;;AAAiB;;;;;;;AAJtC;;;AC3qCkC;;;AD2qClC;;AAWsC;;AACb;AAAA;AAAA;;;AACD;AAAA;;;AAzoC5B;AAAA;AAAA;AAAA;AA4oCgB;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKL;;AAAA;AAtjCjB;AAAA;;AAAA;AAAA;AAujCoB;AAXwB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAzhCW;AAyhC3B;;AAzhC2B;AAyhCnD;AAAA;;;;;;AAgBJ;;;AACE;;AAAA;;;AACE;;AAAA;;;AACE;AAloCN;AAAA;AAAA;AAAA;;;;;;;AAkoCM;;;ACxsCgC;;;ADwsChC;;AAQA;AA1oCN;AAAA;AAAA;AAAA;;;;;;;;;;;AA0oCM;;;AChtCgC;;;ADgtChC;;AAqBN;;;;;AAzkCuD;AAAA;;AAAA;AAAA;;AAklCrB;AAAA;;AAAhC;AAEA;;;;AAEqC;AAAA;AAAA;AAAA;;AAAA;AAC/B;AAA+B;;AAAiB;AAAhD;AAAA;;AACA;AAAiC;;;AAAjC;AAAA;;AAAA;;AAEmB;;;AAAA;AAAA;AAAA;;AACzB;AAAA;AAGM;AAAA;;AAAA;;AAAwB;;;AACxB;AAAmB;;;AAIzB;AAAA;AACmB;;AC7vCa;;AD6vCb;AACb;;AAAiB;AA9qCzB;AAAA;;AAAA;AAAA;AA+qCS;;AAAA;AAAP;AC/vCgC;;ADmwCf;AAnrCnB;AAAA;;AAAA;AAAA;AAorC4B;ACpwCM;;ADqwCD;AAGZ;ACxwCa;;ADywCL;AAvmC7B;AAAA;;AAAA;AAAA;AA2mC2D;AAAnD;AA3mCR;AAAA;;AAAA;AAAA;AA4mCmC;;;AAId;ACjxCgB;;ADixChB;AACb;;AAAwB;AAG9B;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AA1uCF;AAAA;AAAA;AAAA;AAkvC+C;AAAvC;;AACN;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAQyB;;AAAA;;AA3oC3B;AAAA;;AAAA;AAAA;AA4oCoE;AAAjC;AA5oCnC;;AA4oCE;AAAA;AAGA;AAGiC;;AA7DM;;AA6DN;;;;;;;;;;;;;;AAHjC;;;AC9yCoC;;;AD8yCpC;AArpCoF;;AAAA;;AAAA;AAgqCrC;AAAA;AAAA;AACI;AAAhB;;AAAgB;AAA7C;;AAAuB;AAEZ;;AAAA;;;AACI;;AAAA;;;AACF;;AAAA;AACQ;;AAAA;;;AAJc;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAzC;AArrCF;AAAA;;AAAA;AAAA;AA8rC6B;;AAAA;AA9rC7B;;AA8rCE;AAAA;AAEA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;AAcF;;;AAxrCuD;AAAA;;AAAA;AAAA;;AAisCrB;AAAA;;AAAhC;AAGA;;;;AAEqC;AAAA;AAAA;AAAA;;AAAA;AAC/B;AAA+B;;AAAiB;AAAhD;AAAA;;AACA;AAAiC;;;AAAjC;AAAA;;AAAA;;AAEmB;;;AAAA;AAAA;AAAA;;AACzB;AAAA;AAGM;AAAA;;AAAA;;AAAwB;;;AACxB;AAAmB;;;AAIzB;AAAA;AACmB;;AC72Ca;;AD62Cb;AACb;;AAAiB;AA9xCzB;AAAA;;AAAA;AAAA;AA+xCS;;AAAA;AAAP;AC/2CgC;;ADm3Cf;AAnyCnB;AAAA;;AAAA;AAAA;AAoyC4B;ACp3CM;;ADq3CD;AAGZ;ACx3Ca;;ADy3CL;AAvtC7B;AAAA;;AAAA;AAAA;AA2tC2D;AAAnD;AA3tCR;AAAA;;AAAA;AAAA;AA4tCmC;;;AAId;ACj4CgB;;ADi4ChB;AACb;;AAAwB;AAG9B;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AA11CF;AAAA;AAAA;AAAA;;AAAA;AAm2CE;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAEwB;;AAFxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAOyB;;AAAA;;AA1vC3B;AAAA;;AAAA;AAAA;AA2vCoE;AAAjC;AA3vCnC;;AA2vCE;AAAA;AAGA;AAGiC;;AA5DM;;AA4DN;;;;;;;;;;;;;;AAHjC;;;AC75CoC;;;AD65CpC;AApwCoF;;AAAA;;AAAA;AA+wCrC;AAAA;AAAA;AACI;AAAhB;;AAAgB;AAA7C;;AAAuB;AAEZ;;AAAA;;;AACI;;AAAA;;;AACF;;AAAA;AACQ;;AAAA;;;AAJc;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAzC;AApyCF;AAAA;;AAAA;AAAA;AA6yC6B;;AAAA;AA7yC7B;;AA6yCE;AAAA;AAGA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;AAGF;;;AAEQ;;AAAsC;;AAAhB;AAE5B;AAv3CF;AAAA;AAAA;AAAA;;;;;;;;;;;AAu3CE;;;AC77CoC;;;AD67CpC;AASA;AAIiB;;AAAA;AAAA;;;;;;;;;;;AAJjB;;;ACt8CoC;;;ADs8CpC;;AAUF;;;AAj6CA;AAAA;AAAA;AAAA;AAk6CiC;;;AAChB;;AAAA;AC98CoB;;AD+8C5B;AAAP;AAGF;;;;;;;AA1zCuD;AA4zCtB;;AA5zCsB;AA4zCd;AAAA;;AAAvC;AACA;;;;AA7zCqD;AA+zCjB;;AA/zCiB;AA+zCT;AAAA;AACnB;;;AAAA;AAAA;AAAA;;AACzB;;;AAA+B;;AAAiB;AAA5B;;AAAA;AAId;AAAA;;;AAAA;AAAA;;AAAA;;AACA;;AAAiB;AAFjB;;AAAwB;;;AAAxB;AAAA;;AAOA;;AAAmB;;;ACp+CO;;ADs+CX;AAz5CvB;AAAA;;AAAA;AAAA;AA05CwC;AAAhC;AAAA;;AAGF;AAAJ;;;AAAmD;AAAP;;AAAA;AAGtC;;AAAA;;AAAuB;AAIN;AAAA;;;;;;;;AAAA;;;;ACp/Ca;;;ADo/Cb;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;ACx/Cc;;;ADw/Cd;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AA/1C8D;;AAAA;;AAAA;AA6T9C;AAAA;AAyiCG;;;AAAvB;;;AAGD;;AC9/CkB;;AD8/ClB;AACX;;AAA8B;AAGnB;;AAAA;AACX;;AAAuB;AAE7B;;AAAA;AAwDF;;;;;;;AAEE;;AAAA;AACwB;;AAx6C6B;AAw6C/C;;AAx6C+C;AAAA;;AAy6CnB;AAAA;;AAAlC;AACA;;;;AACwC;AAAA;AAAA;AAAA;;AAAA;AA1DN;AAAA;AAAA;;AAAlC;AACA;;;;AAEuC;AAAA;AACd;;;AAAA;AAAA;AAAA;;AACzB;;;AAA+B;;AAAiB;AAwDzC;;AAAA;AAAP;AACyC;;AAAA;AAAjB;;AAAiB;AAAlC;;AAAA;;AAAA;AAAP;AACM;;AAAoB;AAG1B;;;;;;;;;;;;;;;;AAAA;;;AC/kDoC;;;AD+kDpC;AAYqB;;AAAA;AACD;AAAA;AA7iDtB;AAAA;AAAA;AAAA;AAgjDc;;AAAA;AACsB;;AAAnB;AAFG;AAGF;;;AAHE;AAAA;AAAA;AAKA;;AAAA;;;AACG;;AAAA;;;AAXN;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaf;;AAAA;AAAA;AAGgC;;;AAAhC;;AAAA;;;AAG0B;;;AA79C5B;;AA69CE;AAAA;;AAtFM;AAAA;;;AAAA;AAAA;;AAAA;;AACA;;AAAiB;AAFjB;;AAAwB;;;AAAxB;AAAA;;AAOA;;AAAmB;;;ACzhDO;;AD2hDX;AA98CvB;AAAA;;AAAA;AAAA;AA+8CwC;AAAhC;AAAA;;AAGF;AAAJ;;;AAAmD;AAuCnC;;;AApCV;;AAAA;;AAAuB;AAIN;AAAA;;;;;;;;AAAA;;;;ACziDa;;;ADyiDb;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAID;AAAA;;;;;;;;AAAA;;;;AC7iDc;;;AD6iDd;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAp5C8D;;AAAA;;AAAA;AA6T9C;AAAA;AA8lCG;;;AAAvB;;;AAGD;;ACnjDkB;;ADmjDlB;AACX;;AAA8B;AAGnB;;AAAA;AACX;;AAAuB;AAab;;;AA8ClB;;;AA39CuD;AAAA;;AAAA;AAAA;;AA69CrB;AAAA;;AAAhC;AACuB;;;AAAjB;AACkC;AAAA;AAClC;AAA0B;;AAAiB;AAA3C;AAAA;;AACqB;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AACM;;;AAA3B;AAAA;;AAr+C8E;;AAAA;;AAAA;AA6T9C;AAAA;;AAAA;AA2qClB;;;AACL;AACkB;AAAX;AAEhB;AAAa;AAljDrB;AAAA;;AAAA;AAAA;AAmjDS;AAAP;AAGA;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AA1lDF;AAAA;AAAA;AAAA;AA4lD8C;AAF5C;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AASyB;;AAAA;;AAn/C3B;AAAA;;AAAA;AAAA;AAo/CoE;AAAjC;AAp/CnC;;AAo/CE;AAAA;AAGA;AAE0B;;AACO;;AA3BA;;AA2BA;;;;;;;;;;;;AAHjC;;;ACtpDoC;;;ADspDpC;AAUA;;AAAA;AAAA;;;AAC0B;;;AAlhD5B;;AAkhDE;AAAA;;;;;;AAWF;;;AAhhDuD;AAAA;;AAAA;AAAA;;AAkhDrB;AAAA;;AAAhC;AACuB;;;AAAjB;AACkC;AAAA;AAClC;AAA0B;;AAAiB;AAA3C;AAAA;;AACqB;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AACM;;;AAA3B;AAAA;;AA1hD8E;;AAAA;;AAAA;AA6T9C;AAAA;;AAAA;AAguClB;;;AACL;AACkB;AAAX;AAEhB;AAAa;AAvmDrB;AAAA;;AAAA;AAAA;AAwmDS;AAAP;AAGA;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAMyB;;AAAA;;AAriD3B;AAAA;;AAAA;AAAA;AAsiDoE;AAAjC;AAtiDnC;;AAsiDE;AAAA;AAGA;AAE0B;;AACO;;AAxBA;;AAwBA;;;;;;;;;;;;AAHjC;;;ACxsDoC;;;ADwsDpC;AAUA;;AAAA;AAAA;;;AAC0B;;;AApkD5B;;AAokDE;AAAA;;;;;;AAUF;;;AAjkDuD;AAAA;;AAAA;AA2kDnB;AAAA;AAAA;;AAAlC;AAC0C;AAAA;AAC1C;;;;AACqB;;;AACf;AAAkC;;AAAiB;AAxpD3D;AAAA;;AAAA;AAAA;AA2pDiD;;AAAA;;;AAA3B;;;AACH;;AAAA;AACuB;AAAb;AAEP;AC/uDY;;AD+uDZ;AAAd;;AAAa;AACb;AAAA;;AAAyB;AACzB;;AAAA;;AAAoB;AAE1B;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AA6BF;;;AAEiC;AAAA;;;;;;;;AAAA;;;;ACrxDK;;;ADqxDL;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAKD;AAAA;;;;;;;;AAAA;;;;AC1xDM;;;AD0xDN;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAMb;;AAAA;AACX;;AAAuB;AAxoDuD;;AAAA;;AAAA;AA6T9C;AAAA;AA+0CJ;;;AAEX;;;AAGN;ACtyDkB;;ADuyDb;AAEtB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000 4 10000 1000000 1000000000000"
    },
    "19": {
      "op": "bytecblock \"base_token_id\" 0x151f7c75 \"loan_record\" \"admin_account\" \"total_deposits\" \"active_loan_records\" \"total_borrows\" \"circulating_lst\" \"accepted_collaterals\" \"last_apr_bps\" \"borrow_index_wad\" \"liq_threshold_bps\" \"lst_token_id\" \"base_bps\" \"max_apr_bps\" \"prev_apr_bps\" 0x09ef525f 0xae859f3b \"buyout_token_id\" 0x00 \"ltv_bps\" \"accepted_collaterals_count\" \"last_accrual_ts\" \"fee_pool\" \"util_cap_bps\" \"rate_model_type\" \"kink_norm_bps\" \"slope1_bps\" \"slope2_bps\" \"ema_alpha_bps\" \"max_apr_step_bps\" \"util_ema_bps\" \"params_update_nonce\" \"origination_fee_bps\" \"protocol_share_bps\" \"oracle_app\" \"borrow_gate_enabled\" \"power_gamma_q16\" \"scarcity_K_bps\" \"last_scaled_down_disbursement\" \"last_max_borrow\" \"last_requested_loan\" \"debug_diff\" \"params_updated_at\""
    },
    "660": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "662": {
      "op": "bz main_after_if_else@35",
      "stack_out": []
    },
    "665": {
      "op": "pushbytess 0x3b01665e 0x7a6ddbe9 0x6ca100cd 0x17c33662 0x5efce39a 0x5cac25a9 // method \"createApplication(account,uint64)void\", method \"initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void\", method \"setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void\", method \"generateLSTToken(pay)void\", method \"optInToLST(uint64,pay)void\", method \"configureLSTToken(axfer,uint64)void\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)"
      ]
    },
    "697": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "699": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "701": {
      "op": "pushbytess 0x6c6337c0 0xe596ac73 0x4f2c6e55 0x72c5c57b 0xbae4c238 0x3e41a49b 0x15a5b25e 0x8553cffa 0xb4a74766 0xae99f45b 0x3dea8a60 0xbed00024 0xf1f38ba6 0xf0f3aafa 0xd0e69812 0x5f0d6f03 0x836dbb73 0xf16507ce 0xdaa7f7f2 0x3172ca9d 0xef0bd27a // method \"getAcceptedCollateralsCount()uint64\", method \"getOraclePrice(uint64)uint64\", method \"addNewCollateralType(uint64,uint64,pay)void\", method \"depositASA(axfer,uint64,pay)void\", method \"depositAlgo(pay,uint64,pay)void\", method \"withdrawDeposit(axfer,uint64,uint64,pay)void\", method \"borrow(axfer,uint64,uint64,uint64,uint64,pay)void\", method \"accrueLoanInterest(account,account)void\", method \"current_apr_bps()uint64\", method \"getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64)\", method \"repayLoanASA(axfer,uint64)void\", method \"repayLoanAlgo(pay,uint64)void\", method \"buyoutSplitASA(account,account,axfer,axfer,uint64)void\", method \"buyoutSplitAlgo(account,account,axfer,axfer,uint64)void\", method \"maxWithdrawableCollateralLST(uint64)uint64\", method \"withdrawCollateral(uint64,uint64,uint64)void\", method \"liquidateASA(account,axfer)void\", method \"liquidateAlgo(account,pay)void\", method \"getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool)\", method \"gas()void\", method \"calculateCollateralValueUSD(uint64,uint64,uint64)uint64\"",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addNewCollateralType(uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,axfer,uint64)void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,axfer,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)"
      ]
    },
    "808": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(accrueLoanInterest(account,account)void)",
        "Method(addNewCollateralType(uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,axfer,uint64)void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(current_apr_bps()uint64)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(gas()void)",
        "Method(generateLSTToken(pay)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64,uint64,application,uint64)void)",
        "Method(setRateParams(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(generateLSTToken(pay)void)",
        "Method(optInToLST(uint64,pay)void)",
        "Method(configureLSTToken(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getOraclePrice(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64,pay)void)",
        "Method(depositASA(axfer,uint64,pay)void)",
        "Method(depositAlgo(pay,uint64,pay)void)",
        "Method(withdrawDeposit(axfer,uint64,uint64,pay)void)",
        "Method(borrow(axfer,uint64,uint64,uint64,uint64,pay)void)",
        "Method(accrueLoanInterest(account,account)void)",
        "Method(current_apr_bps()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,(uint64,uint8,uint64),uint64,uint64,uint64))",
        "Method(repayLoanASA(axfer,uint64)void)",
        "Method(repayLoanAlgo(pay,uint64)void)",
        "Method(buyoutSplitASA(account,account,axfer,axfer,uint64)void)",
        "Method(buyoutSplitAlgo(account,account,axfer,axfer,uint64)void)",
        "Method(maxWithdrawableCollateralLST(uint64)uint64)",
        "Method(withdrawCollateral(uint64,uint64,uint64)void)",
        "Method(liquidateASA(account,axfer)void)",
        "Method(liquidateAlgo(account,pay)void)",
        "Method(getLoanStatus(account)(uint64,uint64,uint64,uint64,uint64,bool,bool))",
        "Method(gas()void)",
        "Method(calculateCollateralValueUSD(uint64,uint64,uint64)uint64)",
        "tmp%2#0"
      ]
    },
    "811": {
      "op": "match main_createApplication_route@3 main_initApplication_route@4 main_setRateParams_route@5 main_generateLSTToken_route@6 main_optInToLST_route@7 main_configureLSTToken_route@8 main_getCirculatingLST_route@9 main_getTotalDeposits_route@10 main_getAcceptedCollateralsCount_route@11 main_getOraclePrice_route@12 main_addNewCollateralType_route@13 main_depositASA_route@14 main_depositAlgo_route@15 main_withdrawDeposit_route@16 main_borrow_route@17 main_accrueLoanInterest_route@18 main_current_apr_bps_route@19 main_getLoanRecord_route@20 main_repayLoanASA_route@21 main_repayLoanAlgo_route@22 main_buyoutSplitASA_route@23 main_buyoutSplitAlgo_route@24 main_maxWithdrawableCollateralLST_route@25 main_withdrawCollateral_route@26 main_liquidateASA_route@27 main_liquidateAlgo_route@28 main_getLoanStatus_route@29 main_gas_route@30 main_calculateCollateralValueUSD_route@31",
      "stack_out": []
    },
    "871": {
      "block": "main_after_if_else@35",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "872": {
      "op": "return",
      "stack_out": []
    },
    "873": {
      "block": "main_calculateCollateralValueUSD_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%205#0"
      ],
      "stack_out": [
        "tmp%205#0"
      ]
    },
    "875": {
      "op": "!",
      "defined_out": [
        "tmp%206#0"
      ],
      "stack_out": [
        "tmp%206#0"
      ]
    },
    "876": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "877": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%207#0"
      ],
      "stack_out": [
        "tmp%207#0"
      ]
    },
    "879": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "880": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%40#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%40#0"
      ]
    },
    "883": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%40#0",
        "reinterpret_bytes[8]%41#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%40#0",
        "reinterpret_bytes[8]%41#0"
      ]
    },
    "886": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%40#0",
        "tmp%209#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%40#0",
        "tmp%209#0"
      ]
    },
    "887": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%40#0",
        "reinterpret_bytes[8]%42#0",
        "tmp%209#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%40#0",
        "tmp%209#0",
        "reinterpret_bytes[8]%42#0"
      ]
    },
    "890": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%40#0",
        "tmp%209#0",
        "tmp%210#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%40#0",
        "tmp%209#0",
        "tmp%210#0"
      ]
    },
    "891": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "894": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0"
      ]
    },
    "895": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0",
        "0x151f7c75"
      ]
    },
    "896": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%11#0"
      ]
    },
    "897": {
      "op": "concat",
      "defined_out": [
        "tmp%211#0"
      ],
      "stack_out": [
        "tmp%211#0"
      ]
    },
    "898": {
      "op": "log",
      "stack_out": []
    },
    "899": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "900": {
      "op": "return",
      "stack_out": []
    },
    "901": {
      "block": "main_gas_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%201#0"
      ],
      "stack_out": [
        "tmp%201#0"
      ]
    },
    "903": {
      "op": "!",
      "defined_out": [
        "tmp%202#0"
      ],
      "stack_out": [
        "tmp%202#0"
      ]
    },
    "904": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "905": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%203#0"
      ]
    },
    "907": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "908": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "909": {
      "op": "return",
      "stack_out": []
    },
    "910": {
      "block": "main_getLoanStatus_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%194#0"
      ]
    },
    "912": {
      "op": "!",
      "defined_out": [
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%195#0"
      ]
    },
    "913": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "914": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0"
      ]
    },
    "916": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "917": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%11#0"
      ]
    },
    "920": {
      "op": "btoi",
      "defined_out": [
        "tmp%198#0"
      ],
      "stack_out": [
        "tmp%198#0"
      ]
    },
    "921": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%199#0"
      ],
      "stack_out": [
        "tmp%199#0"
      ]
    },
    "923": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus",
      "op": "callsub getLoanStatus",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ]
    },
    "926": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%0#0"
      ]
    },
    "928": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0"
      ]
    },
    "929": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "elements_to_encode%1#0"
      ]
    },
    "931": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "932": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%2#0"
      ]
    },
    "934": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "935": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "elements_to_encode%3#0"
      ]
    },
    "937": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "938": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "elements_to_encode%4#0"
      ]
    },
    "940": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "941": {
      "op": "bytec 19 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00"
      ]
    },
    "943": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00",
        "0"
      ]
    },
    "944": {
      "op": "uncover 8",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "0x00",
        "0",
        "elements_to_encode%5#0"
      ]
    },
    "946": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%6#0",
        "encoded_bool%0#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0"
      ]
    },
    "947": {
      "op": "bytec 19 // 0x00",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00"
      ]
    },
    "949": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00",
        "0"
      ]
    },
    "950": {
      "op": "uncover 8",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "0x00",
        "0",
        "elements_to_encode%6#0"
      ]
    },
    "952": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "953": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%6#0"
      ]
    },
    "955": {
      "op": "uncover 6",
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "957": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%10#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "958": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%8#0"
      ]
    },
    "960": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%10#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "961": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%9#0"
      ]
    },
    "963": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "964": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%10#0"
      ]
    },
    "966": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "967": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_bool%0#0"
      ]
    },
    "969": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "970": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0"
      ]
    },
    "971": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "972": {
      "op": "getbit",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ]
    },
    "973": {
      "op": "pushint 321 // 321"
    },
    "976": {
      "op": "swap",
      "defined_out": [
        "321",
        "encoded_tuple_buffer%6#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "321",
        "is_true%0#0"
      ]
    },
    "977": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "978": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "0x151f7c75"
      ]
    },
    "979": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "980": {
      "op": "concat",
      "defined_out": [
        "tmp%200#0"
      ],
      "stack_out": [
        "tmp%200#0"
      ]
    },
    "981": {
      "op": "log",
      "stack_out": []
    },
    "982": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "983": {
      "op": "return",
      "stack_out": []
    },
    "984": {
      "block": "main_liquidateAlgo_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%187#0"
      ],
      "stack_out": [
        "tmp%187#0"
      ]
    },
    "986": {
      "op": "!",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "987": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "988": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%189#0"
      ]
    },
    "990": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "991": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "994": {
      "op": "btoi",
      "defined_out": [
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0"
      ]
    },
    "995": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "997": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%192#0",
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%192#0",
        "tmp%193#0"
      ]
    },
    "999": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%192#0",
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%192#0",
        "tmp%193#0",
        "1"
      ]
    },
    "1000": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%20#0",
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0",
        "gtxn_idx%20#0"
      ]
    },
    "1001": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%20#0",
        "gtxn_idx%20#0 (copy)",
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0",
        "gtxn_idx%20#0",
        "gtxn_idx%20#0 (copy)"
      ]
    },
    "1002": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%20#0",
        "gtxn_type%20#0",
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0"
      ]
    },
    "1004": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%20#0",
        "gtxn_type%20#0",
        "pay",
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0",
        "gtxn_idx%20#0",
        "gtxn_type%20#0",
        "pay"
      ]
    },
    "1005": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%20#0",
        "gtxn_type_matches%20#0",
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0",
        "gtxn_idx%20#0",
        "gtxn_type_matches%20#0"
      ]
    },
    "1006": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%192#0",
        "gtxn_idx%20#0"
      ]
    },
    "1007": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateAlgo",
      "op": "callsub liquidateAlgo",
      "stack_out": []
    },
    "1010": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1011": {
      "op": "return",
      "stack_out": []
    },
    "1012": {
      "block": "main_liquidateASA_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%180#0"
      ],
      "stack_out": [
        "tmp%180#0"
      ]
    },
    "1014": {
      "op": "!",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "1015": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1016": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "1018": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1019": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "1022": {
      "op": "btoi",
      "defined_out": [
        "tmp%184#0"
      ],
      "stack_out": [
        "tmp%184#0"
      ]
    },
    "1023": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0"
      ]
    },
    "1025": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%185#0",
        "tmp%186#0"
      ],
      "stack_out": [
        "tmp%185#0",
        "tmp%186#0"
      ]
    },
    "1027": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%185#0",
        "tmp%186#0"
      ],
      "stack_out": [
        "tmp%185#0",
        "tmp%186#0",
        "1"
      ]
    },
    "1028": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%19#0",
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0",
        "gtxn_idx%19#0"
      ]
    },
    "1029": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_idx%19#0 (copy)",
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0",
        "gtxn_idx%19#0",
        "gtxn_idx%19#0 (copy)"
      ]
    },
    "1030": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_type%19#0",
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0",
        "gtxn_idx%19#0",
        "gtxn_type%19#0"
      ]
    },
    "1032": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%19#0",
        "gtxn_type%19#0",
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0",
        "gtxn_idx%19#0",
        "gtxn_type%19#0",
        "axfer"
      ]
    },
    "1033": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%19#0",
        "gtxn_type_matches%19#0",
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0",
        "gtxn_idx%19#0",
        "gtxn_type_matches%19#0"
      ]
    },
    "1034": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%185#0",
        "gtxn_idx%19#0"
      ]
    },
    "1035": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateASA",
      "op": "callsub liquidateASA",
      "stack_out": []
    },
    "1038": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1039": {
      "op": "return",
      "stack_out": []
    },
    "1040": {
      "block": "main_withdrawCollateral_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "1042": {
      "op": "!",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "1043": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1044": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "1046": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1047": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%37#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%37#0"
      ]
    },
    "1050": {
      "op": "btoi",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "1051": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%38#0",
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0",
        "reinterpret_bytes[8]%38#0"
      ]
    },
    "1054": {
      "op": "btoi",
      "defined_out": [
        "tmp%177#0",
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%177#0",
        "tmp%178#0"
      ]
    },
    "1055": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%39#0",
        "tmp%177#0",
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%177#0",
        "tmp%178#0",
        "reinterpret_bytes[8]%39#0"
      ]
    },
    "1058": {
      "op": "btoi",
      "defined_out": [
        "tmp%177#0",
        "tmp%178#0",
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%177#0",
        "tmp%178#0",
        "tmp%179#0"
      ]
    },
    "1059": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawCollateral",
      "op": "callsub withdrawCollateral",
      "stack_out": []
    },
    "1062": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1063": {
      "op": "return",
      "stack_out": []
    },
    "1064": {
      "block": "main_maxWithdrawableCollateralLST_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "1066": {
      "op": "!",
      "defined_out": [
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0"
      ]
    },
    "1067": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1068": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "1070": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1071": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%36#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%36#0"
      ]
    },
    "1074": {
      "op": "btoi",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "1075": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLST",
      "op": "callsub maxWithdrawableCollateralLST",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "1078": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "1079": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "1080": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "1081": {
      "op": "concat",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "1082": {
      "op": "log",
      "stack_out": []
    },
    "1083": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1084": {
      "op": "return",
      "stack_out": []
    },
    "1085": {
      "block": "main_buyoutSplitAlgo_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "1087": {
      "op": "!",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "1088": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1089": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "1091": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1092": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "1095": {
      "op": "btoi",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "1096": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "1098": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%8#0",
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "1101": {
      "op": "btoi",
      "defined_out": [
        "tmp%161#0",
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%162#0"
      ]
    },
    "1102": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%161#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0"
      ]
    },
    "1104": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%161#0",
        "tmp%163#0",
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "tmp%164#0"
      ]
    },
    "1106": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%161#0",
        "tmp%163#0",
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "tmp%164#0",
        "2"
      ]
    },
    "1108": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%17#0",
        "tmp%161#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0"
      ]
    },
    "1109": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)",
        "tmp%161#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0",
        "gtxn_idx%17#0 (copy)"
      ]
    },
    "1110": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "tmp%161#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0"
      ]
    },
    "1112": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "tmp%161#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0",
        "gtxn_type%17#0",
        "axfer"
      ]
    },
    "1113": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0",
        "tmp%161#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0",
        "gtxn_type_matches%17#0"
      ]
    },
    "1114": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0"
      ]
    },
    "1115": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%17#0",
        "tmp%161#0",
        "tmp%163#0",
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0",
        "tmp%165#0"
      ]
    },
    "1117": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%17#0",
        "tmp%161#0",
        "tmp%163#0",
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0",
        "tmp%165#0",
        "1"
      ]
    },
    "1118": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%18#0",
        "tmp%161#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0",
        "gtxn_idx%18#0"
      ]
    },
    "1119": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)",
        "tmp%161#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0",
        "gtxn_idx%18#0",
        "gtxn_idx%18#0 (copy)"
      ]
    },
    "1120": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "tmp%161#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0",
        "gtxn_idx%18#0",
        "gtxn_type%18#0"
      ]
    },
    "1122": {
      "op": "intc_3 // axfer",
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0",
        "gtxn_idx%18#0",
        "gtxn_type%18#0",
        "axfer"
      ]
    },
    "1123": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0",
        "tmp%161#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0",
        "gtxn_idx%18#0",
        "gtxn_type_matches%18#0"
      ]
    },
    "1124": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0",
        "gtxn_idx%18#0"
      ]
    },
    "1125": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%18#0",
        "reinterpret_bytes[8]%35#0",
        "tmp%161#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0",
        "gtxn_idx%18#0",
        "reinterpret_bytes[8]%35#0"
      ]
    },
    "1128": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%17#0",
        "gtxn_idx%18#0",
        "tmp%161#0",
        "tmp%163#0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%163#0",
        "gtxn_idx%17#0",
        "gtxn_idx%18#0",
        "tmp%166#0"
      ]
    },
    "1129": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutSplitAlgo",
      "op": "callsub buyoutSplitAlgo",
      "stack_out": []
    },
    "1132": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1133": {
      "op": "return",
      "stack_out": []
    },
    "1134": {
      "block": "main_buyoutSplitASA_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "1136": {
      "op": "!",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "1137": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1138": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "1140": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1141": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "1144": {
      "op": "btoi",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "1145": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "1147": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%6#0",
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "1150": {
      "op": "btoi",
      "defined_out": [
        "tmp%150#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%151#0"
      ]
    },
    "1151": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%150#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0"
      ]
    },
    "1153": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%150#0",
        "tmp%152#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "tmp%153#0"
      ]
    },
    "1155": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%150#0",
        "tmp%152#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "tmp%153#0",
        "2"
      ]
    },
    "1157": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%15#0",
        "tmp%150#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0"
      ]
    },
    "1158": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)",
        "tmp%150#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0",
        "gtxn_idx%15#0 (copy)"
      ]
    },
    "1159": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "tmp%150#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0"
      ]
    },
    "1161": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "tmp%150#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0",
        "gtxn_type%15#0",
        "axfer"
      ]
    },
    "1162": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0",
        "tmp%150#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0",
        "gtxn_type_matches%15#0"
      ]
    },
    "1163": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0"
      ]
    },
    "1164": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%15#0",
        "tmp%150#0",
        "tmp%152#0",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0",
        "tmp%154#0"
      ]
    },
    "1166": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%15#0",
        "tmp%150#0",
        "tmp%152#0",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0",
        "tmp%154#0",
        "1"
      ]
    },
    "1167": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_idx%16#0",
        "tmp%150#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0",
        "gtxn_idx%16#0"
      ]
    },
    "1168": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)",
        "tmp%150#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0",
        "gtxn_idx%16#0",
        "gtxn_idx%16#0 (copy)"
      ]
    },
    "1169": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "tmp%150#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0"
      ]
    },
    "1171": {
      "op": "intc_3 // axfer",
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0",
        "gtxn_idx%16#0",
        "gtxn_type%16#0",
        "axfer"
      ]
    },
    "1172": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0",
        "tmp%150#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0",
        "gtxn_idx%16#0",
        "gtxn_type_matches%16#0"
      ]
    },
    "1173": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0",
        "gtxn_idx%16#0"
      ]
    },
    "1174": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_idx%16#0",
        "reinterpret_bytes[8]%34#0",
        "tmp%150#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0",
        "gtxn_idx%16#0",
        "reinterpret_bytes[8]%34#0"
      ]
    },
    "1177": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%15#0",
        "gtxn_idx%16#0",
        "tmp%150#0",
        "tmp%152#0",
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%152#0",
        "gtxn_idx%15#0",
        "gtxn_idx%16#0",
        "tmp%155#0"
      ]
    },
    "1178": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutSplitASA",
      "op": "callsub buyoutSplitASA",
      "stack_out": []
    },
    "1181": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1182": {
      "op": "return",
      "stack_out": []
    },
    "1183": {
      "block": "main_repayLoanAlgo_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "1185": {
      "op": "!",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "1186": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1187": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "1189": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1190": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "1192": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0",
        "1"
      ]
    },
    "1193": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0"
      ]
    },
    "1194": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_idx%14#0 (copy)"
      ]
    },
    "1195": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0"
      ]
    },
    "1197": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type%14#0",
        "pay"
      ]
    },
    "1198": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "gtxn_type_matches%14#0"
      ]
    },
    "1199": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%14#0"
      ]
    },
    "1200": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%33#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "reinterpret_bytes[8]%33#0"
      ]
    },
    "1203": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%14#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "gtxn_idx%14#0",
        "tmp%144#0"
      ]
    },
    "1204": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo",
      "op": "callsub repayLoanAlgo",
      "stack_out": []
    },
    "1207": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1208": {
      "op": "return",
      "stack_out": []
    },
    "1209": {
      "block": "main_repayLoanASA_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "1211": {
      "op": "!",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "1212": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1213": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "1215": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1216": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "1218": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0",
        "1"
      ]
    },
    "1219": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0"
      ]
    },
    "1220": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_idx%13#0 (copy)"
      ]
    },
    "1221": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ]
    },
    "1223": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%13#0",
        "gtxn_type%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type%13#0",
        "axfer"
      ]
    },
    "1224": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "gtxn_type_matches%13#0"
      ]
    },
    "1225": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%13#0"
      ]
    },
    "1226": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%13#0",
        "reinterpret_bytes[8]%32#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "reinterpret_bytes[8]%32#0"
      ]
    },
    "1229": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%13#0",
        "tmp%138#0"
      ],
      "stack_out": [
        "gtxn_idx%13#0",
        "tmp%138#0"
      ]
    },
    "1230": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanASA",
      "op": "callsub repayLoanASA",
      "stack_out": []
    },
    "1233": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1234": {
      "op": "return",
      "stack_out": []
    },
    "1235": {
      "block": "main_getLoanRecord_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "1237": {
      "op": "!",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "1238": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1239": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "1241": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1242": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "1245": {
      "op": "btoi",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "1246": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "1248": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "1251": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0",
        "0x151f7c75"
      ]
    },
    "1252": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%131#0"
      ]
    },
    "1253": {
      "op": "concat",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "1254": {
      "op": "log",
      "stack_out": []
    },
    "1255": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1256": {
      "op": "return",
      "stack_out": []
    },
    "1257": {
      "block": "main_current_apr_bps_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "1259": {
      "op": "!",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "1260": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1261": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "1263": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1264": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "1267": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "1268": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "1269": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "1270": {
      "op": "concat",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "1271": {
      "op": "log",
      "stack_out": []
    },
    "1272": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1273": {
      "op": "return",
      "stack_out": []
    },
    "1274": {
      "block": "main_accrueLoanInterest_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "1276": {
      "op": "!",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "1277": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1278": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "1280": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1281": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "1284": {
      "op": "btoi",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "1285": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "1287": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "1290": {
      "op": "btoi",
      "defined_out": [
        "tmp%117#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%117#0",
        "tmp%118#0"
      ]
    },
    "1291": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%117#0",
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%117#0",
        "tmp%119#0"
      ]
    },
    "1293": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest",
      "op": "callsub accrueLoanInterest",
      "stack_out": []
    },
    "1296": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1297": {
      "op": "return",
      "stack_out": []
    },
    "1298": {
      "block": "main_borrow_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "1300": {
      "op": "!",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "1301": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1302": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "1304": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1305": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "1307": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0",
        "2"
      ]
    },
    "1309": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1310": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%11#0 (copy)"
      ]
    },
    "1311": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ]
    },
    "1313": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%11#0",
        "gtxn_type%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type%11#0",
        "axfer"
      ]
    },
    "1314": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "gtxn_type_matches%11#0"
      ]
    },
    "1315": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%11#0"
      ]
    },
    "1316": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%28#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%28#0"
      ]
    },
    "1319": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%108#0"
      ]
    },
    "1320": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%29#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "reinterpret_bytes[8]%29#0"
      ]
    },
    "1323": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "tmp%109#0"
      ]
    },
    "1324": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%30#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%30#0"
      ]
    },
    "1327": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ]
    },
    "1328": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%31#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0",
        "reinterpret_bytes[8]%31#0"
      ]
    },
    "1331": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%31#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0",
        "reinterpret_bytes[8]%31#0",
        "tmp%111#0"
      ]
    },
    "1333": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%11#0",
        "reinterpret_bytes[8]%31#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0",
        "tmp%111#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0",
        "reinterpret_bytes[8]%31#0",
        "tmp%111#0",
        "1"
      ]
    },
    "1334": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "reinterpret_bytes[8]%31#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0",
        "reinterpret_bytes[8]%31#0",
        "gtxn_idx%12#0"
      ]
    },
    "1335": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)",
        "reinterpret_bytes[8]%31#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0",
        "reinterpret_bytes[8]%31#0",
        "gtxn_idx%12#0",
        "gtxn_idx%12#0 (copy)"
      ]
    },
    "1336": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "reinterpret_bytes[8]%31#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0",
        "reinterpret_bytes[8]%31#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0"
      ]
    },
    "1338": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay",
        "reinterpret_bytes[8]%31#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0",
        "reinterpret_bytes[8]%31#0",
        "gtxn_idx%12#0",
        "gtxn_type%12#0",
        "pay"
      ]
    },
    "1339": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%11#0",
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0",
        "reinterpret_bytes[8]%31#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0"
      ],
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0",
        "reinterpret_bytes[8]%31#0",
        "gtxn_idx%12#0",
        "gtxn_type_matches%12#0"
      ]
    },
    "1340": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%11#0",
        "tmp%108#0",
        "tmp%109#0",
        "tmp%110#0",
        "reinterpret_bytes[8]%31#0",
        "gtxn_idx%12#0"
      ]
    },
    "1341": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow",
      "op": "callsub borrow",
      "stack_out": []
    },
    "1344": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1345": {
      "op": "return",
      "stack_out": []
    },
    "1346": {
      "block": "main_withdrawDeposit_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "1348": {
      "op": "!",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "1349": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1350": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "1352": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1353": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "1355": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "2"
      ]
    },
    "1357": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1358": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_idx%9#0 (copy)"
      ]
    },
    "1359": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ]
    },
    "1361": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%9#0",
        "gtxn_type%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type%9#0",
        "axfer"
      ]
    },
    "1362": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "gtxn_type_matches%9#0"
      ]
    },
    "1363": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%9#0"
      ]
    },
    "1364": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%26#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%26#0"
      ]
    },
    "1367": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%100#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0"
      ]
    },
    "1368": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%9#0",
        "reinterpret_bytes[8]%27#0",
        "tmp%100#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "reinterpret_bytes[8]%27#0"
      ]
    },
    "1371": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0"
      ]
    },
    "1372": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0"
      ]
    },
    "1374": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "tmp%102#0",
        "1"
      ]
    },
    "1375": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "gtxn_idx%10#0"
      ]
    },
    "1376": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)",
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "gtxn_idx%10#0",
        "gtxn_idx%10#0 (copy)"
      ]
    },
    "1377": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "tmp%100#0",
        "tmp%101#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0"
      ]
    },
    "1379": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type%10#0",
        "pay",
        "tmp%100#0",
        "tmp%101#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "gtxn_idx%10#0",
        "gtxn_type%10#0",
        "pay"
      ]
    },
    "1380": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%10#0",
        "gtxn_idx%9#0",
        "gtxn_type_matches%10#0",
        "tmp%100#0",
        "tmp%101#0"
      ],
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "gtxn_idx%10#0",
        "gtxn_type_matches%10#0"
      ]
    },
    "1381": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%9#0",
        "tmp%100#0",
        "tmp%101#0",
        "gtxn_idx%10#0"
      ]
    },
    "1382": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit",
      "op": "callsub withdrawDeposit",
      "stack_out": []
    },
    "1385": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1386": {
      "op": "return",
      "stack_out": []
    },
    "1387": {
      "block": "main_depositAlgo_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "1389": {
      "op": "!",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "1390": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1391": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "1393": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1394": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "1396": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0",
        "2"
      ]
    },
    "1398": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1399": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%7#0 (copy)"
      ]
    },
    "1400": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0"
      ]
    },
    "1402": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type%7#0",
        "pay"
      ]
    },
    "1403": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "gtxn_type_matches%7#0"
      ]
    },
    "1404": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%7#0"
      ]
    },
    "1405": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "reinterpret_bytes[8]%25#0"
      ]
    },
    "1408": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%93#0"
      ]
    },
    "1409": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%7#0",
        "tmp%93#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%93#0",
        "tmp%94#0"
      ]
    },
    "1411": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%7#0",
        "tmp%93#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%93#0",
        "tmp%94#0",
        "1"
      ]
    },
    "1412": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%93#0",
        "gtxn_idx%8#0"
      ]
    },
    "1413": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%93#0",
        "gtxn_idx%8#0",
        "gtxn_idx%8#0 (copy)"
      ]
    },
    "1414": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%93#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0"
      ]
    },
    "1416": {
      "op": "intc_1 // pay",
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%93#0",
        "gtxn_idx%8#0",
        "gtxn_type%8#0",
        "pay"
      ]
    },
    "1417": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%7#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%93#0",
        "gtxn_idx%8#0",
        "gtxn_type_matches%8#0"
      ]
    },
    "1418": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%7#0",
        "tmp%93#0",
        "gtxn_idx%8#0"
      ]
    },
    "1419": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo",
      "op": "callsub depositAlgo",
      "stack_out": []
    },
    "1422": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1423": {
      "op": "return",
      "stack_out": []
    },
    "1424": {
      "block": "main_depositASA_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "1426": {
      "op": "!",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "1427": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1428": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "1430": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1431": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "1433": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0",
        "2"
      ]
    },
    "1435": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1436": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%5#0 (copy)"
      ]
    },
    "1437": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ]
    },
    "1439": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%5#0",
        "gtxn_type%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type%5#0",
        "axfer"
      ]
    },
    "1440": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "gtxn_type_matches%5#0"
      ]
    },
    "1441": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%5#0"
      ]
    },
    "1442": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "reinterpret_bytes[8]%24#0"
      ]
    },
    "1445": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%86#0"
      ]
    },
    "1446": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%5#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%86#0",
        "tmp%87#0"
      ]
    },
    "1448": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%5#0",
        "tmp%86#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%86#0",
        "tmp%87#0",
        "1"
      ]
    },
    "1449": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%86#0",
        "gtxn_idx%6#0"
      ]
    },
    "1450": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)",
        "tmp%86#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%86#0",
        "gtxn_idx%6#0",
        "gtxn_idx%6#0 (copy)"
      ]
    },
    "1451": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%86#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0"
      ]
    },
    "1453": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay",
        "tmp%86#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%86#0",
        "gtxn_idx%6#0",
        "gtxn_type%6#0",
        "pay"
      ]
    },
    "1454": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%5#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%86#0",
        "gtxn_idx%6#0",
        "gtxn_type_matches%6#0"
      ]
    },
    "1455": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%5#0",
        "tmp%86#0",
        "gtxn_idx%6#0"
      ]
    },
    "1456": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositASA",
      "op": "callsub depositASA",
      "stack_out": []
    },
    "1459": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1460": {
      "op": "return",
      "stack_out": []
    },
    "1461": {
      "block": "main_addNewCollateralType_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "1463": {
      "op": "!",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "1464": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1465": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "1467": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1468": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%22#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%22#0"
      ]
    },
    "1471": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0"
      ]
    },
    "1474": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0",
        "tmp%80#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0",
        "tmp%80#0"
      ]
    },
    "1476": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0",
        "tmp%80#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0",
        "tmp%80#0",
        "1"
      ]
    },
    "1477": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0",
        "gtxn_idx%4#0"
      ]
    },
    "1478": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)",
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0",
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "1479": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "1481": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay",
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0",
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "pay"
      ]
    },
    "1482": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0",
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0",
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "1483": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%22#0",
        "reinterpret_bytes[8]%23#0",
        "gtxn_idx%4#0"
      ]
    },
    "1484": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType",
      "op": "callsub addNewCollateralType",
      "stack_out": []
    },
    "1487": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1488": {
      "op": "return",
      "stack_out": []
    },
    "1489": {
      "block": "main_getOraclePrice_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "1491": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "1492": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1493": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "1495": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1496": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%21#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%21#0"
      ]
    },
    "1499": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "1502": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "1503": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "1504": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "1505": {
      "op": "concat",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "1506": {
      "op": "log",
      "stack_out": []
    },
    "1507": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1508": {
      "op": "return",
      "stack_out": []
    },
    "1509": {
      "block": "main_getAcceptedCollateralsCount_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1511": {
      "op": "!",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "1512": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1513": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1515": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1516": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "op": "callsub getAcceptedCollateralsCount",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "1519": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "1520": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "1521": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "1522": {
      "op": "concat",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1523": {
      "op": "log",
      "stack_out": []
    },
    "1524": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1525": {
      "op": "return",
      "stack_out": []
    },
    "1526": {
      "block": "main_getTotalDeposits_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1528": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1529": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1530": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1532": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1533": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits",
      "op": "callsub getTotalDeposits",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1536": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "1537": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "1538": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "1539": {
      "op": "concat",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1540": {
      "op": "log",
      "stack_out": []
    },
    "1541": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1542": {
      "op": "return",
      "stack_out": []
    },
    "1543": {
      "block": "main_getCirculatingLST_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1545": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1546": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1547": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1549": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1550": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST",
      "op": "callsub getCirculatingLST",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1553": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1554": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1555": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1556": {
      "op": "concat",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1557": {
      "op": "log",
      "stack_out": []
    },
    "1558": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1559": {
      "op": "return",
      "stack_out": []
    },
    "1560": {
      "block": "main_configureLSTToken_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1562": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1563": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1564": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "1566": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1567": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "1569": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "1"
      ]
    },
    "1570": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1571": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "1572": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "1574": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "1575": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "1576": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1577": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%20#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%20#0"
      ]
    },
    "1580": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%55#0"
      ]
    },
    "1581": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken",
      "op": "callsub configureLSTToken",
      "stack_out": []
    },
    "1584": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1585": {
      "op": "return",
      "stack_out": []
    },
    "1586": {
      "block": "main_optInToLST_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1588": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1589": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1590": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1592": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1593": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "1596": {
      "op": "btoi",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1597": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "tmp%49#0"
      ]
    },
    "1599": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "tmp%49#0",
        "1"
      ]
    },
    "1600": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "gtxn_idx%2#0"
      ]
    },
    "1601": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "1602": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "1604": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "1605": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "1606": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%48#0",
        "gtxn_idx%2#0"
      ]
    },
    "1607": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST",
      "op": "callsub optInToLST",
      "stack_out": []
    },
    "1610": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1611": {
      "op": "return",
      "stack_out": []
    },
    "1612": {
      "block": "main_generateLSTToken_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1614": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1615": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1616": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1618": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1619": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1621": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "1"
      ]
    },
    "1622": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1623": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "1624": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "1626": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "1627": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "1628": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1629": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken",
      "op": "callsub generateLSTToken",
      "stack_out": []
    },
    "1632": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1633": {
      "op": "return",
      "stack_out": []
    },
    "1634": {
      "block": "main_setRateParams_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1636": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1637": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1638": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1640": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1641": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "1644": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1645": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "1648": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "1649": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "1652": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "1653": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "1656": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "1657": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "1660": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1661": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%12#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "1664": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "1665": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%13#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "1668": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "1669": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%14#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "1672": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "1673": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[8]%15#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "1676": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "1677": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "1680": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "1681": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_bytes[8]%17#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "1684": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "1685": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "1688": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "1689": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setRateParams",
      "op": "callsub setRateParams",
      "stack_out": []
    },
    "1692": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1693": {
      "op": "return",
      "stack_out": []
    },
    "1694": {
      "block": "main_initApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1696": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1697": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1698": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1700": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1701": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1703": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1"
      ]
    },
    "1704": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1705": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "1706": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "1708": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "1709": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1710": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1711": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1714": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ]
    },
    "1715": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1718": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1719": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1722": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1723": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1726": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1727": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%5#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1730": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1731": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[1]%1#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "1734": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1735": {
      "op": "txnas Applications",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "1737": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%6#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1740": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "1741": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication",
      "op": "callsub initApplication",
      "stack_out": []
    },
    "1744": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1745": {
      "op": "return",
      "stack_out": []
    },
    "1746": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1748": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1749": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1750": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1752": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1753": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1754": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "1757": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1758": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1760": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1763": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1764": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "1767": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1768": {
      "op": "return",
      "stack_out": []
    },
    "1769": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.createApplication",
      "params": {
        "admin#0": "bytes",
        "baseTokenId#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1772": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\""
      ],
      "stack_out": [
        "\"admin_account\""
      ]
    },
    "1773": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ]
    },
    "1775": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1776": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseTokenId#0 (copy)"
      ]
    },
    "1778": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1779": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"base_token_id\""
      ]
    },
    "1780": {
      "op": "swap",
      "stack_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "1781": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1782": {
      "retsub": true,
      "op": "retsub"
    },
    "1783": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.initApplication",
      "params": {
        "mbrTxn#0": "uint64",
        "ltv_bps#0": "uint64",
        "liq_threshold_bps#0": "uint64",
        "origination_fee_bps#0": "uint64",
        "protocol_share_bps#0": "uint64",
        "borrow_gate_enabled#0": "uint64",
        "oracle_app_id#0": "uint64",
        "buyout_token_id#0": "uint64"
      },
      "block": "initApplication",
      "stack_in": [],
      "op": "proto 8 0"
    },
    "1786": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1788": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1789": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1790": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1791": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1792": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1793": {
      "op": "assert",
      "stack_out": []
    },
    "1794": {
      "op": "frame_dig -8",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1796": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1798": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "1799": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1800": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1801": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "1802": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1803": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "1806": {
      "op": "frame_dig -8",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "1808": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1810": {
      "op": "pushint 400000 // 400000",
      "defined_out": [
        "400000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "400000"
      ]
    },
    "1814": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1815": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "1818": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1819": {
      "block": "initApplication_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "1820": {
      "op": "bytec 20 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\""
      ],
      "stack_out": [
        "\"ltv_bps\""
      ]
    },
    "1822": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ]
    },
    "1824": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1825": {
      "op": "bytec 11 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\""
      ],
      "stack_out": [
        "\"liq_threshold_bps\""
      ]
    },
    "1827": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ]
    },
    "1829": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1830": {
      "op": "bytec 33 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\""
      ],
      "stack_out": [
        "\"origination_fee_bps\""
      ]
    },
    "1832": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ],
      "stack_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ]
    },
    "1834": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1835": {
      "op": "bytec 21 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\""
      ],
      "stack_out": [
        "\"accepted_collaterals_count\""
      ]
    },
    "1837": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ]
    },
    "1838": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1839": {
      "op": "bytec 23 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\""
      ],
      "stack_out": [
        "\"fee_pool\""
      ]
    },
    "1841": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"fee_pool\"",
        "0"
      ]
    },
    "1842": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1843": {
      "op": "bytec 7 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "1845": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"circulating_lst\"",
        "0"
      ]
    },
    "1846": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1847": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\""
      ],
      "stack_out": [
        "\"total_deposits\""
      ]
    },
    "1849": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_deposits\"",
        "0"
      ]
    },
    "1850": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1851": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\""
      ],
      "stack_out": [
        "\"active_loan_records\""
      ]
    },
    "1853": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"active_loan_records\"",
        "0"
      ]
    },
    "1854": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1855": {
      "op": "bytec 34 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\""
      ],
      "stack_out": [
        "\"protocol_share_bps\""
      ]
    },
    "1857": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ],
      "stack_out": [
        "\"protocol_share_bps\"",
        "protocol_share_bps#0 (copy)"
      ]
    },
    "1859": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1860": {
      "op": "bytec 35 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\""
      ],
      "stack_out": [
        "\"oracle_app\""
      ]
    },
    "1862": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ],
      "stack_out": [
        "\"oracle_app\"",
        "oracle_app_id#0 (copy)"
      ]
    },
    "1864": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1865": {
      "op": "bytec 36 // \"borrow_gate_enabled\"",
      "defined_out": [
        "\"borrow_gate_enabled\""
      ],
      "stack_out": [
        "\"borrow_gate_enabled\""
      ]
    },
    "1867": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"borrow_gate_enabled\"",
        "borrow_gate_enabled#0 (copy)"
      ],
      "stack_out": [
        "\"borrow_gate_enabled\"",
        "borrow_gate_enabled#0 (copy)"
      ]
    },
    "1869": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1870": {
      "op": "bytec 12 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\""
      ],
      "stack_out": [
        "\"lst_token_id\""
      ]
    },
    "1872": {
      "op": "pushbytes 0x0000000000000063",
      "defined_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ],
      "stack_out": [
        "\"lst_token_id\"",
        "0x0000000000000063"
      ]
    },
    "1882": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1883": {
      "op": "bytec 13 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "1885": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "\"base_bps\"",
        "50"
      ],
      "stack_out": [
        "\"base_bps\"",
        "50"
      ]
    },
    "1887": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1888": {
      "op": "bytec 24 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "1890": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "\"util_cap_bps\"",
        "8000"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "8000"
      ]
    },
    "1893": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1894": {
      "op": "bytec 6 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\""
      ],
      "stack_out": [
        "\"total_borrows\""
      ]
    },
    "1896": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_borrows\"",
        "0"
      ]
    },
    "1897": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1898": {
      "op": "bytec 25 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "1900": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rate_model_type\"",
        "0"
      ]
    },
    "1901": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1902": {
      "op": "bytec 26 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "1904": {
      "op": "pushint 5000 // 5000",
      "defined_out": [
        "\"kink_norm_bps\"",
        "5000"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "5000"
      ]
    },
    "1907": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1908": {
      "op": "bytec 27 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "1910": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "\"slope1_bps\"",
        "1000"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "1000"
      ]
    },
    "1911": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1912": {
      "op": "bytec 28 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "1914": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "\"slope2_bps\"",
        "2000"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "2000"
      ]
    },
    "1917": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1918": {
      "op": "bytec 14 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "1920": {
      "op": "pushint 6000 // 6000",
      "defined_out": [
        "\"max_apr_bps\"",
        "6000"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "6000"
      ]
    },
    "1923": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1924": {
      "op": "bytec 29 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "1926": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"ema_alpha_bps\"",
        "0"
      ]
    },
    "1927": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1928": {
      "op": "bytec 30 // \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\""
      ],
      "stack_out": [
        "\"max_apr_step_bps\""
      ]
    },
    "1930": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"max_apr_step_bps\"",
        "0"
      ]
    },
    "1931": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1932": {
      "op": "bytec 15 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\""
      ],
      "stack_out": [
        "\"prev_apr_bps\""
      ]
    },
    "1934": {
      "op": "pushint 50 // 50",
      "stack_out": [
        "\"prev_apr_bps\"",
        "50"
      ]
    },
    "1936": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1937": {
      "op": "bytec 31 // \"util_ema_bps\"",
      "defined_out": [
        "\"util_ema_bps\""
      ],
      "stack_out": [
        "\"util_ema_bps\""
      ]
    },
    "1939": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"util_ema_bps\"",
        "0"
      ]
    },
    "1940": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1941": {
      "op": "bytec 37 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "1943": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"power_gamma_q16\"",
        "0"
      ]
    },
    "1944": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1945": {
      "op": "bytec 38 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "1947": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"scarcity_K_bps\"",
        "0"
      ]
    },
    "1948": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1949": {
      "op": "bytec 39 // \"last_scaled_down_disbursement\"",
      "defined_out": [
        "\"last_scaled_down_disbursement\""
      ],
      "stack_out": [
        "\"last_scaled_down_disbursement\""
      ]
    },
    "1951": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_scaled_down_disbursement\"",
        "0"
      ]
    },
    "1952": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1953": {
      "op": "bytec 40 // \"last_max_borrow\"",
      "defined_out": [
        "\"last_max_borrow\""
      ],
      "stack_out": [
        "\"last_max_borrow\""
      ]
    },
    "1955": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_max_borrow\"",
        "0"
      ]
    },
    "1956": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1957": {
      "op": "bytec 41 // \"last_requested_loan\"",
      "defined_out": [
        "\"last_requested_loan\""
      ],
      "stack_out": [
        "\"last_requested_loan\""
      ]
    },
    "1959": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"last_requested_loan\"",
        "0"
      ]
    },
    "1960": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1961": {
      "op": "bytec 42 // \"debug_diff\"",
      "defined_out": [
        "\"debug_diff\""
      ],
      "stack_out": [
        "\"debug_diff\""
      ]
    },
    "1963": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"debug_diff\"",
        "0"
      ]
    },
    "1964": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1965": {
      "op": "bytec 43 // \"params_updated_at\"",
      "defined_out": [
        "\"params_updated_at\""
      ],
      "stack_out": [
        "\"params_updated_at\""
      ]
    },
    "1967": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"params_updated_at\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"params_updated_at\"",
        "new_state_value%0#0"
      ]
    },
    "1969": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1970": {
      "op": "bytec 32 // \"params_update_nonce\"",
      "defined_out": [
        "\"params_update_nonce\""
      ],
      "stack_out": [
        "\"params_update_nonce\""
      ]
    },
    "1972": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"params_update_nonce\"",
        "0"
      ]
    },
    "1973": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1974": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\""
      ],
      "stack_out": [
        "\"borrow_index_wad\""
      ]
    },
    "1976": {
      "op": "intc 6 // 1000000000000",
      "defined_out": [
        "\"borrow_index_wad\"",
        "1000000000000"
      ],
      "stack_out": [
        "\"borrow_index_wad\"",
        "1000000000000"
      ]
    },
    "1978": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1979": {
      "op": "bytec 22 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\""
      ],
      "stack_out": [
        "\"last_accrual_ts\""
      ]
    },
    "1981": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"last_accrual_ts\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"last_accrual_ts\"",
        "new_state_value%1#0"
      ]
    },
    "1983": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1984": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1985": {
      "op": "bytec 13 // \"base_bps\"",
      "stack_out": [
        "0",
        "\"base_bps\""
      ]
    },
    "1987": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1988": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1989": {
      "op": "bytec 9 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "1991": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "maybe_value%2#0"
      ]
    },
    "1992": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1993": {
      "op": "frame_dig -1",
      "defined_out": [
        "buyout_token_id#0 (copy)"
      ],
      "stack_out": [
        "buyout_token_id#0 (copy)"
      ]
    },
    "1995": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1996": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"buyout_token_id\""
      ]
    },
    "1998": {
      "op": "swap",
      "stack_out": [
        "\"buyout_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "1999": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2000": {
      "op": "pushbytes \"total_borrows_principal\"",
      "defined_out": [
        "\"total_borrows_principal\""
      ],
      "stack_out": [
        "\"total_borrows_principal\""
      ]
    },
    "2025": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_borrows_principal\"",
        "0"
      ]
    },
    "2026": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2027": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2028": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2029": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2030": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2031": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2032": {
      "op": "bz initApplication_after_if_else@7",
      "stack_out": []
    },
    "2035": {
      "op": "itxn_begin"
    },
    "2036": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2038": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2039": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2040": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2041": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0"
      ]
    },
    "2042": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2043": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "2044": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2046": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2048": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2050": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2051": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2053": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "2054": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2056": {
      "op": "itxn_submit"
    },
    "2057": {
      "block": "initApplication_after_if_else@7",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2058": {
      "block": "initApplication_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2059": {
      "op": "b initApplication_bool_merge@4"
    },
    "2062": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.setRateParams",
      "params": {
        "base_bps#0": "uint64",
        "util_cap_bps#0": "uint64",
        "kink_norm_bps#0": "uint64",
        "slope1_bps#0": "uint64",
        "slope2_bps#0": "uint64",
        "max_apr_bps#0": "uint64",
        "borrow_gate_enabled#0": "uint64",
        "ema_alpha_bps#0": "uint64",
        "max_apr_step_bps#0": "uint64",
        "rate_model_type#0": "uint64",
        "power_gamma_q16#0": "uint64",
        "scarcity_K_bps#0": "uint64"
      },
      "block": "setRateParams",
      "stack_in": [],
      "op": "proto 12 0"
    },
    "2065": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2067": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2068": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2069": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2070": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2071": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2072": {
      "error": "UNAUTHORIZED",
      "op": "assert // UNAUTHORIZED",
      "stack_out": []
    },
    "2073": {
      "op": "frame_dig -11",
      "defined_out": [
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "2075": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "2078": {
      "op": "frame_dig -11",
      "stack_out": [
        "util_cap_bps#0 (copy)"
      ]
    },
    "2080": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "util_cap_bps#0 (copy)",
        "10000"
      ]
    },
    "2082": {
      "op": "<=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2083": {
      "op": "bz setRateParams_bool_false@3",
      "stack_out": []
    },
    "2086": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2087": {
      "block": "setRateParams_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "BAD_UTIL_CAP",
      "op": "assert // BAD_UTIL_CAP",
      "defined_out": [],
      "stack_out": []
    },
    "2088": {
      "op": "frame_dig -10",
      "defined_out": [
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2090": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "2093": {
      "op": "frame_dig -10",
      "stack_out": [
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2095": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "kink_norm_bps#0 (copy)",
        "10000"
      ]
    },
    "2097": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2098": {
      "op": "bz setRateParams_bool_false@7",
      "stack_out": []
    },
    "2101": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2102": {
      "block": "setRateParams_bool_merge@8",
      "stack_in": [
        "and_result%1#0"
      ],
      "error": "BAD_KINK",
      "op": "assert // BAD_KINK",
      "defined_out": [],
      "stack_out": []
    },
    "2103": {
      "op": "frame_dig -7",
      "defined_out": [
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "2105": {
      "op": "bz setRateParams_after_if_else@14",
      "stack_out": []
    },
    "2108": {
      "op": "frame_dig -7",
      "stack_out": [
        "max_apr_bps#0 (copy)"
      ]
    },
    "2110": {
      "op": "frame_dig -12",
      "defined_out": [
        "base_bps#0 (copy)",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "max_apr_bps#0 (copy)",
        "base_bps#0 (copy)"
      ]
    },
    "2112": {
      "op": ">=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2113": {
      "error": "BAD_MAX_APR",
      "op": "assert // BAD_MAX_APR",
      "stack_out": []
    },
    "2114": {
      "block": "setRateParams_after_if_else@14",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "2116": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "ema_alpha_bps#0 (copy)",
        "10000"
      ]
    },
    "2118": {
      "op": "<=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2119": {
      "error": "BAD_EMA_ALPHA",
      "op": "assert // BAD_EMA_ALPHA",
      "stack_out": []
    },
    "2120": {
      "op": "frame_dig -3",
      "defined_out": [
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "2122": {
      "op": "bz setRateParams_bool_true@16",
      "stack_out": []
    },
    "2125": {
      "op": "frame_dig -3",
      "stack_out": [
        "rate_model_type#0 (copy)"
      ]
    },
    "2127": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "rate_model_type#0 (copy)",
        "255"
      ]
    },
    "2130": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "2131": {
      "op": "bz setRateParams_bool_false@17",
      "stack_out": []
    },
    "2134": {
      "block": "setRateParams_bool_true@16",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2135": {
      "block": "setRateParams_bool_merge@18",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "UNSUPPORTED_MODEL",
      "op": "assert // UNSUPPORTED_MODEL",
      "defined_out": [],
      "stack_out": []
    },
    "2136": {
      "op": "bytec 13 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\""
      ],
      "stack_out": [
        "\"base_bps\""
      ]
    },
    "2138": {
      "op": "frame_dig -12",
      "defined_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ],
      "stack_out": [
        "\"base_bps\"",
        "base_bps#0 (copy)"
      ]
    },
    "2140": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2141": {
      "op": "bytec 24 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\""
      ],
      "stack_out": [
        "\"util_cap_bps\""
      ]
    },
    "2143": {
      "op": "frame_dig -11",
      "defined_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ],
      "stack_out": [
        "\"util_cap_bps\"",
        "util_cap_bps#0 (copy)"
      ]
    },
    "2145": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2146": {
      "op": "bytec 26 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\""
      ],
      "stack_out": [
        "\"kink_norm_bps\""
      ]
    },
    "2148": {
      "op": "frame_dig -10",
      "defined_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "\"kink_norm_bps\"",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "2150": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2151": {
      "op": "bytec 27 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\""
      ],
      "stack_out": [
        "\"slope1_bps\""
      ]
    },
    "2153": {
      "op": "frame_dig -9",
      "defined_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope1_bps\"",
        "slope1_bps#0 (copy)"
      ]
    },
    "2155": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2156": {
      "op": "bytec 28 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\""
      ],
      "stack_out": [
        "\"slope2_bps\""
      ]
    },
    "2158": {
      "op": "frame_dig -8",
      "defined_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ],
      "stack_out": [
        "\"slope2_bps\"",
        "slope2_bps#0 (copy)"
      ]
    },
    "2160": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2161": {
      "op": "bytec 14 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\""
      ],
      "stack_out": [
        "\"max_apr_bps\""
      ]
    },
    "2163": {
      "op": "frame_dig -7",
      "defined_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_bps\"",
        "max_apr_bps#0 (copy)"
      ]
    },
    "2165": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2166": {
      "op": "bytec 36 // \"borrow_gate_enabled\"",
      "defined_out": [
        "\"borrow_gate_enabled\""
      ],
      "stack_out": [
        "\"borrow_gate_enabled\""
      ]
    },
    "2168": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"borrow_gate_enabled\"",
        "borrow_gate_enabled#0 (copy)"
      ],
      "stack_out": [
        "\"borrow_gate_enabled\"",
        "borrow_gate_enabled#0 (copy)"
      ]
    },
    "2170": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2171": {
      "op": "bytec 29 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\""
      ],
      "stack_out": [
        "\"ema_alpha_bps\""
      ]
    },
    "2173": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ema_alpha_bps\"",
        "ema_alpha_bps#0 (copy)"
      ]
    },
    "2175": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2176": {
      "op": "bytec 30 // \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\""
      ],
      "stack_out": [
        "\"max_apr_step_bps\""
      ]
    },
    "2178": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ],
      "stack_out": [
        "\"max_apr_step_bps\"",
        "max_apr_step_bps#0 (copy)"
      ]
    },
    "2180": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2181": {
      "op": "bytec 25 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\""
      ],
      "stack_out": [
        "\"rate_model_type\""
      ]
    },
    "2183": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ],
      "stack_out": [
        "\"rate_model_type\"",
        "rate_model_type#0 (copy)"
      ]
    },
    "2185": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2186": {
      "op": "bytec 37 // \"power_gamma_q16\"",
      "defined_out": [
        "\"power_gamma_q16\""
      ],
      "stack_out": [
        "\"power_gamma_q16\""
      ]
    },
    "2188": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ],
      "stack_out": [
        "\"power_gamma_q16\"",
        "power_gamma_q16#0 (copy)"
      ]
    },
    "2190": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2191": {
      "op": "bytec 38 // \"scarcity_K_bps\"",
      "defined_out": [
        "\"scarcity_K_bps\""
      ],
      "stack_out": [
        "\"scarcity_K_bps\""
      ]
    },
    "2193": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ],
      "stack_out": [
        "\"scarcity_K_bps\"",
        "scarcity_K_bps#0 (copy)"
      ]
    },
    "2195": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2196": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2197": {
      "op": "bytec 32 // \"params_update_nonce\"",
      "defined_out": [
        "\"params_update_nonce\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"params_update_nonce\""
      ]
    },
    "2199": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2200": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2201": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "2202": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2203": {
      "op": "bytec 32 // \"params_update_nonce\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"params_update_nonce\""
      ]
    },
    "2205": {
      "op": "swap",
      "stack_out": [
        "\"params_update_nonce\"",
        "new_state_value%0#0"
      ]
    },
    "2206": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2207": {
      "op": "bytec 43 // \"params_updated_at\"",
      "defined_out": [
        "\"params_updated_at\""
      ],
      "stack_out": [
        "\"params_updated_at\""
      ]
    },
    "2209": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"params_updated_at\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"params_updated_at\"",
        "new_state_value%1#0"
      ]
    },
    "2211": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2212": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2213": {
      "op": "bytec 14 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2215": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2216": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2217": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2220": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2221": {
      "op": "bytec 15 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "2223": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2224": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "2225": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "0"
      ]
    },
    "2226": {
      "op": "bytec 14 // \"max_apr_bps\"",
      "stack_out": [
        "maybe_value%3#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2228": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2229": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "2230": {
      "op": ">",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "2231": {
      "op": "bz setRateParams_after_if_else@21",
      "stack_out": []
    },
    "2234": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2235": {
      "op": "bytec 14 // \"max_apr_bps\"",
      "stack_out": [
        "0",
        "\"max_apr_bps\""
      ]
    },
    "2237": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2238": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "2239": {
      "op": "bytec 15 // \"prev_apr_bps\"",
      "stack_out": [
        "maybe_value%5#0",
        "\"prev_apr_bps\""
      ]
    },
    "2241": {
      "op": "swap",
      "stack_out": [
        "\"prev_apr_bps\"",
        "maybe_value%5#0"
      ]
    },
    "2242": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2243": {
      "block": "setRateParams_after_if_else@21",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "2244": {
      "block": "setRateParams_bool_false@17",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "2245": {
      "op": "b setRateParams_bool_merge@18"
    },
    "2248": {
      "block": "setRateParams_bool_false@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "and_result%1#0"
      ]
    },
    "2249": {
      "op": "b setRateParams_bool_merge@8"
    },
    "2252": {
      "block": "setRateParams_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2253": {
      "op": "b setRateParams_bool_merge@4"
    },
    "2256": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.generateLSTToken",
      "params": {
        "mbrTxn#0": "uint64"
      },
      "block": "generateLSTToken",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2259": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2261": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2262": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2263": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2264": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2265": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2266": {
      "op": "assert",
      "stack_out": []
    },
    "2267": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2269": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2271": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2272": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2273": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2274": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2275": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2276": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2279": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2281": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2283": {
      "op": "pushint 102000 // 102000",
      "defined_out": [
        "102000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "102000"
      ]
    },
    "2287": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2288": {
      "op": "bz generateLSTToken_bool_false@3",
      "stack_out": []
    },
    "2291": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2292": {
      "block": "generateLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2293": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2294": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2295": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2296": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2297": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2298": {
      "op": "itxn_begin"
    },
    "2299": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2301": {
      "op": "dig 1",
      "defined_out": [
        "baseToken#0",
        "baseToken#0 (copy)",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2303": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "baseToken#0",
        "check%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2305": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2306": {
      "op": "dig 2",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2308": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "baseToken#0",
        "check%1#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2310": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2311": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2313": {
      "op": "dig 4",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "2315": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "baseToken#0",
        "check%2#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "2317": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0"
      ]
    },
    "2318": {
      "op": "pushbytes \"c\"",
      "defined_out": [
        "\"c\"",
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "\"c\""
      ]
    },
    "2321": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "\"c\"",
        "value%2#0"
      ]
    },
    "2322": {
      "op": "concat",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2323": {
      "op": "uncover 5",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "baseToken#0"
      ]
    },
    "2325": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%3#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0",
        "check%3#0"
      ]
    },
    "2327": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0"
      ]
    },
    "2328": {
      "op": "pushbytes \"c\"",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "value%3#0",
        "\"c\""
      ]
    },
    "2331": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "\"c\"",
        "value%3#0"
      ]
    },
    "2332": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "2333": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "2335": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "2337": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2339": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "0"
      ]
    },
    "2340": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "2342": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "2344": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2346": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "2348": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "2350": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2352": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2353": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2355": {
      "op": "itxn_submit"
    },
    "2356": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "result.CreatedAssetID#0"
      ],
      "stack_out": [
        "result.CreatedAssetID#0"
      ]
    },
    "2358": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2359": {
      "op": "bytec 12 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2361": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2362": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2363": {
      "retsub": true,
      "op": "retsub"
    },
    "2364": {
      "block": "generateLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2365": {
      "op": "b generateLSTToken_bool_merge@4"
    },
    "2368": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.optInToLST",
      "params": {
        "lstAssetId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "optInToLST",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2371": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2373": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2374": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2375": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2376": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2377": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2378": {
      "op": "assert",
      "stack_out": []
    },
    "2379": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2381": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2383": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "2384": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2385": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2386": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "2387": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2388": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2391": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2393": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2395": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "2000"
      ]
    },
    "2398": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2399": {
      "op": "bz optInToLST_bool_false@3",
      "stack_out": []
    },
    "2402": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2403": {
      "block": "optInToLST_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2404": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAssetId#0 (copy)"
      ],
      "stack_out": [
        "lstAssetId#0 (copy)"
      ]
    },
    "2406": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2407": {
      "op": "bytec 12 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "2409": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "2410": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2411": {
      "op": "itxn_begin"
    },
    "2412": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2414": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2415": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2417": {
      "op": "frame_dig -2",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "lstAssetId#0 (copy)"
      ]
    },
    "2419": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2421": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "2423": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "2424": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2426": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2427": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2429": {
      "op": "itxn_submit"
    },
    "2430": {
      "retsub": true,
      "op": "retsub"
    },
    "2431": {
      "block": "optInToLST_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2432": {
      "op": "b optInToLST_bool_merge@4"
    },
    "2435": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.configureLSTToken",
      "params": {
        "axferTxn#0": "uint64",
        "circulating_lst#0": "uint64"
      },
      "block": "configureLSTToken",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2438": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2440": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2441": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2442": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2443": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2444": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2445": {
      "op": "assert",
      "stack_out": []
    },
    "2446": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2447": {
      "op": "bytec 12 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "2449": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2450": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2451": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2452": {
      "op": "frame_dig -2",
      "defined_out": [
        "axferTxn#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "axferTxn#0 (copy)"
      ]
    },
    "2454": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2456": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2457": {
      "error": "LST token not set",
      "op": "assert // LST token not set",
      "stack_out": []
    },
    "2458": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2460": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2462": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "2463": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2464": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2465": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "2466": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2467": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2470": {
      "op": "frame_dig -2",
      "stack_out": [
        "axferTxn#0 (copy)"
      ]
    },
    "2472": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2474": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2476": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2477": {
      "op": "bz configureLSTToken_bool_false@3",
      "stack_out": []
    },
    "2480": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2481": {
      "block": "configureLSTToken_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2482": {
      "op": "bytec 7 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\""
      ],
      "stack_out": [
        "\"circulating_lst\""
      ]
    },
    "2484": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ],
      "stack_out": [
        "\"circulating_lst\"",
        "circulating_lst#0 (copy)"
      ]
    },
    "2486": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2487": {
      "retsub": true,
      "op": "retsub"
    },
    "2488": {
      "block": "configureLSTToken_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2489": {
      "op": "b configureLSTToken_bool_merge@4"
    },
    "2492": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getCirculatingLST",
      "params": {},
      "block": "getCirculatingLST",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2493": {
      "op": "bytec 7 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "2495": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2496": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2497": {
      "retsub": true,
      "op": "retsub"
    },
    "2498": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getTotalDeposits",
      "params": {},
      "block": "getTotalDeposits",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2499": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "2501": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2502": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2503": {
      "retsub": true,
      "op": "retsub"
    },
    "2504": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getAcceptedCollateralsCount",
      "params": {},
      "block": "getAcceptedCollateralsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2505": {
      "op": "bytec 21 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "2507": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2508": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2509": {
      "retsub": true,
      "op": "retsub"
    },
    "2510": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "params": {
        "tokenId#0": "bytes"
      },
      "block": "getOraclePrice",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2513": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2514": {
      "op": "bytec 35 // \"oracle_app\"",
      "defined_out": [
        "\"oracle_app\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"oracle_app\""
      ]
    },
    "2516": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "maybe_exists%0#0"
      ]
    },
    "2517": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2518": {
      "op": "dup",
      "defined_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ]
    },
    "2519": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "address#0",
        "check%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "check%0#0"
      ]
    },
    "2521": {
      "op": "bury 1",
      "stack_out": [
        "oracle#0",
        "check%0#0"
      ]
    },
    "2523": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2524": {
      "op": "itxn_begin"
    },
    "2525": {
      "op": "pushbytes 0xac13e004 // method \"getTokenPrice(uint64)(uint64,uint64,uint64)\"",
      "defined_out": [
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "Method(getTokenPrice(uint64)(uint64,uint64,uint64))"
      ]
    },
    "2531": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2533": {
      "op": "frame_dig -1",
      "defined_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "tokenId#0 (copy)"
      ]
    },
    "2535": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "oracle#0"
      ]
    },
    "2537": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2539": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2541": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2543": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "2544": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2546": {
      "op": "itxn_submit"
    },
    "2547": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2549": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2550": {
      "op": "extract 0 4",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2553": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2554": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2555": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2556": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "12"
      ]
    },
    "2558": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2559": {
      "retsub": true,
      "op": "retsub"
    },
    "2560": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "updateCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2563": {
      "op": "bytec 8 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "2565": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2567": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2568": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2569": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "2570": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0"
      ]
    },
    "2571": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2572": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)",
        "24"
      ]
    },
    "2574": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "2575": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "2577": {
      "op": "+",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "2578": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "collateral#0 (copy)"
      ]
    },
    "2580": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0"
      ]
    },
    "2583": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "collateral#0 (copy)"
      ]
    },
    "2585": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2588": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0",
        "collateral#0"
      ]
    },
    "2590": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "newTotal#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "newTotal#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2593": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "newTotal#0"
      ]
    },
    "2595": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2596": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%3#0"
      ]
    },
    "2598": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2600": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2601": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0",
        "tmp%5#0"
      ]
    },
    "2603": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2604": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2605": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2606": {
      "op": "box_put",
      "stack_out": []
    },
    "2607": {
      "retsub": true,
      "op": "retsub"
    },
    "2608": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "params": {
        "collateralTokenId#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "reduceCollateralTotal",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2611": {
      "op": "bytec 8 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "\"accepted_collaterals\""
      ]
    },
    "2613": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2615": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2616": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2617": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "maybe_exists%0#0"
      ]
    },
    "2618": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateral#0"
      ]
    },
    "2619": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "2620": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "collateral#0",
        "collateral#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "collateral#0 (copy)",
        "24"
      ]
    },
    "2622": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "2623": {
      "op": "dup",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2624": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "2626": {
      "op": ">=",
      "defined_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2627": {
      "error": "INSUFFICIENT_COLLATERAL",
      "op": "assert // INSUFFICIENT_COLLATERAL",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "2628": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "tmp%2#0",
        "amount#0 (copy)"
      ]
    },
    "2630": {
      "op": "-",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0"
      ]
    },
    "2631": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "collateral#0 (copy)"
      ]
    },
    "2633": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0"
      ]
    },
    "2636": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "collateral#0 (copy)"
      ]
    },
    "2638": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateral#0",
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateral#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2641": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0",
        "collateral#0"
      ]
    },
    "2643": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "newTotal#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "newTotal#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "2646": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "newTotal#0"
      ]
    },
    "2648": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ]
    },
    "2649": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%6#0"
      ]
    },
    "2651": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2653": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%0#0",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2654": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0",
        "tmp%8#0"
      ]
    },
    "2656": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2657": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "2658": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2659": {
      "op": "box_put",
      "stack_out": []
    },
    "2660": {
      "retsub": true,
      "op": "retsub"
    },
    "2661": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.addNewCollateralType",
      "params": {
        "collateralTokenId#0": "bytes",
        "collateralBaseTokenId#0": "bytes",
        "mbrTxn#0": "uint64"
      },
      "block": "addNewCollateralType",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2664": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2665": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2666": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2667": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2668": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2669": {
      "op": "txn Sender",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "2671": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0"
      ]
    },
    "2672": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2673": {
      "op": "app_global_get_ex",
      "defined_out": [
        "baseToken#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2674": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "2675": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%1#0"
      ]
    },
    "2676": {
      "op": "assert",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2677": {
      "op": "frame_dig -3",
      "defined_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2679": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "2680": {
      "op": "dup"
    },
    "2681": {
      "op": "uncover 2",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0",
        "baseToken#0"
      ]
    },
    "2683": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2684": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2685": {
      "op": "bytec 8 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\""
      ]
    },
    "2687": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2689": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2690": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2691": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2692": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "2694": {
      "op": "!",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%5#0"
      ]
    },
    "2695": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2696": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "2698": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0"
      ]
    },
    "2700": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0"
      ]
    },
    "2701": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "0",
        "\"admin_account\""
      ]
    },
    "2702": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2703": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%6#0",
        "maybe_value%2#0"
      ]
    },
    "2704": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%7#0"
      ]
    },
    "2705": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2708": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "mbrTxn#0 (copy)"
      ]
    },
    "2710": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0"
      ]
    },
    "2712": {
      "op": "pushint 101000 // 101000",
      "defined_out": [
        "101000",
        "tmp%0#2",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%8#0",
        "101000"
      ]
    },
    "2716": {
      "op": "==",
      "defined_out": [
        "tmp%0#2",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%9#0"
      ]
    },
    "2717": {
      "op": "bz addNewCollateralType_bool_false@3",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2720": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "2721": {
      "block": "addNewCollateralType_bool_merge@4",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2722": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0"
      ]
    },
    "2723": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "0",
        "\"base_token_id\""
      ]
    },
    "2724": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2725": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0"
      ]
    },
    "2726": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "2728": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralBaseTokenId#0 (copy)",
        "collateralTokenId#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "collateralTokenId#0 (copy)",
        "collateralBaseTokenId#0 (copy)"
      ]
    },
    "2730": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%3#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2731": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0"
      ]
    },
    "2732": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2733": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "2743": {
      "op": "concat",
      "defined_out": [
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0"
      ]
    },
    "2744": {
      "op": "frame_dig 1",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "newAcceptedCollateral#0",
        "tmp%0#2"
      ]
    },
    "2746": {
      "op": "dup"
    },
    "2747": {
      "op": "uncover 2",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "newAcceptedCollateral#0"
      ]
    },
    "2749": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2750": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0"
      ]
    },
    "2751": {
      "op": "bytec 21 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "2753": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2754": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0"
      ]
    },
    "2755": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "maybe_value%4#0",
        "1"
      ]
    },
    "2756": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0"
      ]
    },
    "2757": {
      "op": "bytec 21 // \"accepted_collaterals_count\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "new_state_value%0#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "2759": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "\"accepted_collaterals_count\"",
        "new_state_value%0#0"
      ]
    },
    "2760": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2761": {
      "op": "itxn_begin"
    },
    "2762": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2764": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2765": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2766": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2768": {
      "op": "frame_dig 0",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%2#0"
      ]
    },
    "2770": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2772": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "2774": {
      "op": "itxn_field Sender",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2776": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "4"
      ]
    },
    "2777": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2779": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2",
        "1000"
      ]
    },
    "2780": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "tmp%0#2"
      ]
    },
    "2782": {
      "op": "itxn_submit"
    },
    "2783": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "2784": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "maybe_exists%0#0"
      ]
    },
    "2786": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2"
      ]
    },
    "2787": {
      "retsub": true,
      "op": "retsub"
    },
    "2788": {
      "block": "addNewCollateralType_bool_false@3",
      "stack_in": [
        "tmp%2#0",
        "tmp%0#2"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%0#2",
        "and_result%0#0"
      ]
    },
    "2789": {
      "op": "b addNewCollateralType_bool_merge@4"
    },
    "2792": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "params": {
        "amount#0": "uint64"
      },
      "block": "calculateLSTDue",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2795": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2796": {
      "op": "bytec 7 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "2798": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2799": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2800": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "10000"
      ]
    },
    "2802": {
      "op": "mulw",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0"
      ]
    },
    "2803": {
      "op": "intc_0 // 0",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0"
      ]
    },
    "2804": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "2806": {
      "op": "app_global_get_ex",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2807": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#0"
      ]
    },
    "2808": {
      "op": "divw",
      "defined_out": [
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0"
      ]
    },
    "2809": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0",
        "amount#0 (copy)"
      ]
    },
    "2811": {
      "op": "mulw",
      "defined_out": [
        "highBits2#0",
        "lowBits2#0"
      ],
      "stack_out": [
        "highBits2#0",
        "lowBits2#0"
      ]
    },
    "2812": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "highBits2#0",
        "lowBits2#0",
        "10000"
      ]
    },
    "2814": {
      "op": "divw",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2815": {
      "retsub": true,
      "op": "retsub"
    },
    "2816": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "depositASA",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2819": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2820": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2821": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2822": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2823": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2824": {
      "op": "frame_dig -3",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2826": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "2828": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2830": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "2831": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2834": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2836": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "2838": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseToken#0",
        "tmp%3#0",
        "baseToken#0"
      ]
    },
    "2840": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "2841": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2844": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "2846": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "2848": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "2850": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "2851": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2854": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "2855": {
      "block": "depositASA_bool_merge@5",
      "stack_in": [
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2856": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "2858": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "2860": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0",
        "1000"
      ]
    },
    "2861": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%8#0"
      ]
    },
    "2862": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2863": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "baseToken#0",
        "_interestSlice#0"
      ]
    },
    "2866": {
      "op": "pop",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2867": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "2868": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "2869": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2870": {
      "op": "bury 1",
      "stack_out": [
        "baseToken#0",
        "maybe_exists%1#0"
      ]
    },
    "2872": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2873": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "2874": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "2876": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2877": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%2#0"
      ]
    },
    "2878": {
      "op": "bnz depositASA_else_body@7",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2881": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2883": {
      "block": "depositASA_after_if_else@8",
      "stack_in": [
        "baseToken#0",
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "2884": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2886": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "2887": {
      "op": "bytec 12 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "2889": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2890": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "2891": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2892": {
      "op": "dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2",
        "lstDue#2 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2 (copy)"
      ]
    },
    "2894": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "2896": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "2898": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2900": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "4"
      ]
    },
    "2901": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2903": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "1000"
      ]
    },
    "2904": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2906": {
      "op": "itxn_submit"
    },
    "2907": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "0"
      ]
    },
    "2908": {
      "op": "bytec 7 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "0",
        "\"circulating_lst\""
      ]
    },
    "2910": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstDue#2",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2911": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "maybe_value%4#0"
      ]
    },
    "2912": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%0#0"
      ]
    },
    "2913": {
      "op": "bytec 7 // \"circulating_lst\"",
      "stack_out": [
        "baseToken#0",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "2915": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "2916": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2917": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "2918": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "2920": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2921": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0"
      ]
    },
    "2922": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%5#0",
        "amount#0 (copy)"
      ]
    },
    "2924": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%1#0"
      ]
    },
    "2925": {
      "op": "bytec 4 // \"total_deposits\"",
      "stack_out": [
        "baseToken#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "2927": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "2928": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2929": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%2#0"
      ]
    },
    "2932": {
      "op": "bytec 9 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "2934": {
      "op": "swap",
      "stack_out": [
        "baseToken#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "2935": {
      "op": "app_global_put",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "2936": {
      "retsub": true,
      "op": "retsub"
    },
    "2937": {
      "block": "depositASA_else_body@7",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "amount#0 (copy)"
      ]
    },
    "2939": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "op": "callsub calculateLSTDue",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "2942": {
      "op": "b depositASA_after_if_else@8"
    },
    "2945": {
      "block": "depositASA_bool_false@4",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "2946": {
      "op": "b depositASA_bool_merge@5"
    },
    "2949": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.depositAlgo",
      "params": {
        "depositTxn#0": "uint64",
        "amount#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "depositAlgo",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "2952": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2953": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "2954": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2955": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2957": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": []
    },
    "2958": {
      "op": "frame_dig -3",
      "defined_out": [
        "depositTxn#0 (copy)"
      ],
      "stack_out": [
        "depositTxn#0 (copy)"
      ]
    },
    "2960": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2962": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2964": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2965": {
      "op": "bz depositAlgo_bool_false@3",
      "stack_out": []
    },
    "2968": {
      "op": "frame_dig -3",
      "stack_out": [
        "depositTxn#0 (copy)"
      ]
    },
    "2970": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2972": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "amount#0 (copy)"
      ]
    },
    "2974": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2975": {
      "op": "bz depositAlgo_bool_false@3",
      "stack_out": []
    },
    "2978": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "2979": {
      "block": "depositAlgo_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "2980": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "2982": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2984": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "1000"
      ]
    },
    "2985": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2986": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "2987": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "_interestSlice#0"
      ]
    },
    "2990": {
      "op": "pop",
      "stack_out": []
    },
    "2991": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2992": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "2994": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2995": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2996": {
      "op": "bnz depositAlgo_else_body@6",
      "stack_out": []
    },
    "2999": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3001": {
      "block": "depositAlgo_after_if_else@7",
      "stack_in": [
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "3002": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3004": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3005": {
      "op": "bytec 12 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "3007": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3008": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "3009": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3010": {
      "op": "dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2",
        "lstDue#2 (copy)"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2 (copy)"
      ]
    },
    "3012": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3014": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3016": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3018": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "4"
      ]
    },
    "3019": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3021": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "1000"
      ]
    },
    "3022": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3024": {
      "op": "itxn_submit"
    },
    "3025": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstDue#2",
        "0"
      ]
    },
    "3026": {
      "op": "bytec 7 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3028": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lstDue#2",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstDue#2",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3029": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "maybe_value%3#0"
      ]
    },
    "3030": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "3031": {
      "op": "bytec 7 // \"circulating_lst\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "3033": {
      "op": "swap",
      "stack_out": [
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "3034": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3035": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "3036": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "3038": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3039": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "3040": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "3042": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "3043": {
      "op": "bytec 4 // \"total_deposits\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "3045": {
      "op": "swap",
      "stack_out": [
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "3046": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3047": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "3050": {
      "op": "bytec 9 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "3052": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "3053": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3054": {
      "retsub": true,
      "op": "retsub"
    },
    "3055": {
      "block": "depositAlgo_else_body@6",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "3057": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateLSTDue",
      "op": "callsub calculateLSTDue",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "3060": {
      "op": "b depositAlgo_after_if_else@7"
    },
    "3063": {
      "block": "depositAlgo_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "3064": {
      "op": "b depositAlgo_bool_merge@4"
    },
    "3067": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawDeposit",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64",
        "lstAppId#0": "uint64",
        "mbrTxn#0": "uint64"
      },
      "block": "withdrawDeposit",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "3070": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3071": {
      "op": "bytec 12 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lst_token_id\""
      ]
    },
    "3073": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3074": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "3075": {
      "op": "btoi",
      "defined_out": [
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3076": {
      "op": "frame_dig -4",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3078": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "lstAsset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#0"
      ]
    },
    "3080": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "lstAsset#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3082": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%2#0"
      ]
    },
    "3083": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3086": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3088": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "lstAsset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%3#0"
      ]
    },
    "3090": {
      "op": "frame_dig 0",
      "stack_out": [
        "lstAsset#0",
        "tmp%3#0",
        "lstAsset#0"
      ]
    },
    "3092": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%4#0"
      ]
    },
    "3093": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3096": {
      "op": "frame_dig -4",
      "stack_out": [
        "lstAsset#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3098": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "lstAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%5#0"
      ]
    },
    "3100": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "lstAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "3102": {
      "op": "==",
      "defined_out": [
        "lstAsset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%6#0"
      ]
    },
    "3103": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3106": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "lstAsset#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "3107": {
      "block": "withdrawDeposit_bool_merge@5",
      "stack_in": [
        "lstAsset#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3108": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3110": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%7#0"
      ]
    },
    "3112": {
      "op": "pushint 3000 // 3000",
      "defined_out": [
        "3000",
        "tmp%7#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%7#0",
        "3000"
      ]
    },
    "3115": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%8#0"
      ]
    },
    "3116": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3117": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "_interestSlice#0"
      ]
    },
    "3120": {
      "op": "pop",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3121": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3123": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "lstAppId#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)",
        "tmp%9#0"
      ]
    },
    "3125": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%10#0"
      ]
    },
    "3126": {
      "op": "bz withdrawDeposit_else_body@7",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3129": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0"
      ]
    },
    "3130": {
      "op": "bytec 7 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "lstAsset#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3132": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "maybe_exists%0#0"
      ]
    },
    "3133": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3134": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0"
      ]
    },
    "3135": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3137": {
      "op": "app_global_get_ex",
      "defined_out": [
        "circulatingExternalLST#0",
        "maybe_exists%1#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "maybe_exists%1#0"
      ]
    },
    "3138": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3139": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "3141": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3142": {
      "op": "uncover 2",
      "stack_out": [
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "3144": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3145": {
      "block": "withdrawDeposit_after_if_else@8",
      "stack_in": [
        "lstAsset#0",
        "asaDue#1"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0"
      ]
    },
    "3147": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "0"
      ]
    },
    "3148": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3149": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3150": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "maybe_value%1#0"
      ]
    },
    "3151": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "3152": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "3154": {
      "op": "pop",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0"
      ]
    },
    "3155": {
      "op": "dig 1",
      "defined_out": [
        "asaDue#1",
        "asaDue#1 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%13#0",
        "asaDue#1 (copy)"
      ]
    },
    "3157": {
      "op": ">=",
      "defined_out": [
        "asaDue#1",
        "tmp%15#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "tmp%15#0"
      ]
    },
    "3158": {
      "op": "assert",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3159": {
      "op": "itxn_begin"
    },
    "3160": {
      "op": "txn Sender",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3162": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "3163": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3164": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3165": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "3166": {
      "op": "btoi",
      "defined_out": [
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3167": {
      "op": "dig 2",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "asaDue#1 (copy)"
      ]
    },
    "3169": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "3171": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "3173": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3175": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "4"
      ]
    },
    "3176": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3178": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "1000"
      ]
    },
    "3179": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3181": {
      "op": "itxn_submit"
    },
    "3182": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "3183": {
      "op": "bytec 7 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"circulating_lst\""
      ]
    },
    "3185": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3186": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0"
      ]
    },
    "3187": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "asaDue#1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%3#0",
        "amount#0 (copy)"
      ]
    },
    "3189": {
      "op": "-",
      "defined_out": [
        "asaDue#1",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0"
      ]
    },
    "3190": {
      "op": "bytec 7 // \"circulating_lst\"",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "new_state_value%0#0",
        "\"circulating_lst\""
      ]
    },
    "3192": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "\"circulating_lst\"",
        "new_state_value%0#0"
      ]
    },
    "3193": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3194": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0"
      ]
    },
    "3195": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "0",
        "\"total_deposits\""
      ]
    },
    "3197": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#1",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3198": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstAsset#0",
        "asaDue#1",
        "maybe_value%4#0"
      ]
    },
    "3199": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "maybe_value%4#0",
        "asaDue#1"
      ]
    },
    "3200": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%1#0"
      ]
    },
    "3201": {
      "op": "bytec 4 // \"total_deposits\"",
      "stack_out": [
        "lstAsset#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "3203": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "3204": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3205": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%2#0"
      ]
    },
    "3208": {
      "op": "bytec 9 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "new_state_value%2#0",
        "\"last_apr_bps\""
      ]
    },
    "3210": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "\"last_apr_bps\"",
        "new_state_value%2#0"
      ]
    },
    "3211": {
      "op": "app_global_put",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3212": {
      "retsub": true,
      "op": "retsub"
    },
    "3213": {
      "block": "withdrawDeposit_else_body@7",
      "stack_in": [
        "lstAsset#0"
      ],
      "op": "itxn_begin"
    },
    "3214": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)"
      ],
      "stack_out": [
        "lstAsset#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "3216": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3218": {
      "op": "frame_dig -2",
      "defined_out": [
        "lstAppId#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3220": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3222": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "lstAsset#0",
        "appl"
      ]
    },
    "3224": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3226": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "lstAsset#0",
        "1000"
      ]
    },
    "3227": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0"
      ]
    },
    "3229": {
      "op": "itxn_submit"
    },
    "3230": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "3232": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3233": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "awst_tmp%0#0",
        "tmp%0#1"
      ]
    },
    "3236": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "awst_tmp%0#0"
      ]
    },
    "3237": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "3240": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%1#1",
        "0x151f7c75"
      ]
    },
    "3241": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1",
        "tmp%2#0"
      ]
    },
    "3242": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "lstAsset#0",
        "tmp%0#1"
      ]
    },
    "3243": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3244": {
      "op": "itxn_begin"
    },
    "3245": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "3247": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3249": {
      "op": "frame_dig -2",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "3251": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3253": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "3255": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3257": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "3258": {
      "op": "itxn_field Fee",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0"
      ]
    },
    "3260": {
      "op": "itxn_submit"
    },
    "3261": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "3263": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3264": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%4#1"
      ]
    },
    "3267": {
      "op": "swap",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "awst_tmp%1#0"
      ]
    },
    "3268": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1"
      ]
    },
    "3271": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%5#1",
        "0x151f7c75"
      ]
    },
    "3272": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1",
        "tmp%6#0"
      ]
    },
    "3273": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "tmp%4#1"
      ]
    },
    "3274": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "3275": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0 (copy)",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "amount#0 (copy)"
      ]
    },
    "3277": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "circulatingExternalLST#0",
        "hi#0",
        "lo#0"
      ]
    },
    "3278": {
      "op": "uncover 2",
      "stack_out": [
        "lstAsset#0",
        "hi#0",
        "lo#0",
        "circulatingExternalLST#0"
      ]
    },
    "3280": {
      "op": "divw",
      "defined_out": [
        "asaDue#1"
      ],
      "stack_out": [
        "lstAsset#0",
        "asaDue#1"
      ]
    },
    "3281": {
      "op": "b withdrawDeposit_after_if_else@8"
    },
    "3284": {
      "block": "withdrawDeposit_bool_false@4",
      "stack_in": [
        "lstAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "lstAsset#0",
        "and_result%0#0"
      ]
    },
    "3285": {
      "op": "b withdrawDeposit_bool_merge@5"
    },
    "3288": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.borrow",
      "params": {
        "assetTransferTxn#0": "uint64",
        "requestedLoanAmount#0": "uint64",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64",
        "collateralTokenId#0": "bytes",
        "mbrTxn#0": "uint64"
      },
      "block": "borrow",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "3291": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralToUse#1"
      ]
    },
    "3293": {
      "op": "dupn 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1"
      ]
    },
    "3295": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "\"loan_record\""
      ]
    },
    "3296": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "\"loan_record\"",
        "tmp%0#0"
      ]
    },
    "3298": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "tmp%1#0"
      ]
    },
    "3299": {
      "op": "box_len",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "maybe_value%0#0",
        "hasLoan#0"
      ]
    },
    "3300": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "maybe_value%0#0",
        "hasLoan#0",
        "hasLoan#0 (copy)"
      ]
    },
    "3301": {
      "op": "uncover 2",
      "defined_out": [
        "hasLoan#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "hasLoan#0",
        "maybe_value%0#0"
      ]
    },
    "3303": {
      "op": "pop",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3304": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "hasLoan#0",
        "_interestSlice#0"
      ]
    },
    "3307": {
      "op": "pop",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3308": {
      "op": "bz borrow_else_body@2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3311": {
      "op": "txn Sender",
      "defined_out": [
        "hasLoan#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%2#0"
      ]
    },
    "3313": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "hasLoan#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%3#0"
      ]
    },
    "3316": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "hasLoan#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%3#0",
        "40"
      ]
    },
    "3318": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "3319": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralToUse#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3321": {
      "block": "borrow_after_if_else@3",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "mbrTxn#0 (copy)"
      ]
    },
    "3323": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%0#1"
      ]
    },
    "3325": {
      "op": "pushint 4000 // 4000",
      "defined_out": [
        "4000",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%0#1",
        "4000"
      ]
    },
    "3328": {
      "op": "==",
      "defined_out": [
        "tmp%1#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%1#3"
      ]
    },
    "3329": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3330": {
      "op": "frame_dig -6",
      "defined_out": [
        "assetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3332": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%2#0"
      ]
    },
    "3334": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%2#0",
        "tmp%3#2"
      ]
    },
    "3336": {
      "op": "==",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%4#1"
      ]
    },
    "3337": {
      "op": "bz borrow_bool_false@21",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3340": {
      "op": "frame_dig -6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "3342": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%5#1"
      ]
    },
    "3344": {
      "op": "frame_dig -4",
      "defined_out": [
        "collateralAmount#0 (copy)",
        "tmp%5#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%5#1",
        "collateralAmount#0 (copy)"
      ]
    },
    "3346": {
      "op": "==",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%6#1"
      ]
    },
    "3347": {
      "op": "bz borrow_bool_false@21",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3350": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "3351": {
      "block": "borrow_bool_merge@22",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3352": {
      "op": "bytec 8 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\""
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "\"accepted_collaterals\""
      ]
    },
    "3354": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3356": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%0#2"
      ]
    },
    "3357": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#0",
        "maybe_exists%0#1"
      ]
    },
    "3358": {
      "op": "bury 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_exists%0#1"
      ]
    },
    "3360": {
      "error": "unsupported collateral",
      "op": "assert // unsupported collateral",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3361": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3363": {
      "op": "frame_dig 0",
      "defined_out": [
        "collateralToUse#1",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralToUse#1"
      ]
    },
    "3365": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateralToUse#1",
        "collateralTokenId#0 (copy)",
        "lstApp#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralToUse#1",
        "lstApp#0 (copy)"
      ]
    },
    "3367": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "collateralUSD#0"
      ]
    },
    "3370": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "collateralUSD#0",
        "0"
      ]
    },
    "3371": {
      "op": "bytec 20 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralToUse#1",
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "collateralUSD#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "3373": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "collateralUSD#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "collateralUSD#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3374": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "collateralUSD#0",
        "maybe_value%1#0"
      ]
    },
    "3375": {
      "op": "*",
      "defined_out": [
        "collateralToUse#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%4#0"
      ]
    },
    "3376": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralToUse#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%4#0",
        "10000"
      ]
    },
    "3378": {
      "op": "/",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3379": {
      "op": "bytec 40 // \"last_max_borrow\"",
      "defined_out": [
        "\"last_max_borrow\"",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "\"last_max_borrow\""
      ]
    },
    "3381": {
      "op": "dig 1",
      "defined_out": [
        "\"last_max_borrow\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maxBorrowUSD#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "\"last_max_borrow\"",
        "maxBorrowUSD#0 (copy)"
      ]
    },
    "3383": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0"
      ]
    },
    "3384": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0"
      ]
    },
    "3385": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3386": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3387": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "maybe_value%2#0"
      ]
    },
    "3388": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0"
      ]
    },
    "3391": {
      "op": "frame_dig -5",
      "defined_out": [
        "baseTokenOraclePrice#0",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "baseTokenOraclePrice#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3393": {
      "op": "mulw",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ]
    },
    "3394": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "rH#0",
        "rL#0",
        "1000000"
      ]
    },
    "3396": {
      "op": "divw",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3397": {
      "op": "bytec 41 // \"last_requested_loan\"",
      "defined_out": [
        "\"last_requested_loan\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"last_requested_loan\""
      ]
    },
    "3399": {
      "op": "dig 1",
      "defined_out": [
        "\"last_requested_loan\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "requestedLoanUSD#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"last_requested_loan\"",
        "requestedLoanUSD#0 (copy)"
      ]
    },
    "3401": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3402": {
      "op": "dup2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "maxBorrowUSD#0 (copy)",
        "requestedLoanUSD#0 (copy)"
      ]
    },
    "3403": {
      "op": "-",
      "defined_out": [
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "new_state_value%0#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "new_state_value%0#0"
      ]
    },
    "3404": {
      "op": "bytec 42 // \"debug_diff\"",
      "defined_out": [
        "\"debug_diff\"",
        "collateralToUse#1",
        "maxBorrowUSD#0",
        "new_state_value%0#0",
        "requestedLoanUSD#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "new_state_value%0#0",
        "\"debug_diff\""
      ]
    },
    "3406": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0",
        "\"debug_diff\"",
        "new_state_value%0#0"
      ]
    },
    "3407": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maxBorrowUSD#0",
        "requestedLoanUSD#0"
      ]
    },
    "3408": {
      "op": ">=",
      "defined_out": [
        "collateralToUse#1",
        "tmp%0#5"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%0#5"
      ]
    },
    "3409": {
      "error": "exceeds LTV limit",
      "op": "assert // exceeds LTV limit",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3410": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "0"
      ]
    },
    "3411": {
      "op": "bytec 33 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\"",
        "0",
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "0",
        "\"origination_fee_bps\""
      ]
    },
    "3413": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#0",
        "maybe_exists%0#1"
      ]
    },
    "3414": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#0"
      ]
    },
    "3415": {
      "op": "frame_dig -5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3417": {
      "op": "*",
      "defined_out": [
        "collateralToUse#1",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%0#1"
      ]
    },
    "3418": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%0#1",
        "10000"
      ]
    },
    "3420": {
      "op": "/",
      "defined_out": [
        "collateralToUse#1",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "fee#1"
      ]
    },
    "3421": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "fee#1",
        "fee#1"
      ]
    },
    "3422": {
      "op": "frame_bury 2",
      "defined_out": [
        "collateralToUse#1",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "fee#1"
      ]
    },
    "3424": {
      "op": "frame_dig -5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "3426": {
      "op": "dig 1",
      "defined_out": [
        "collateralToUse#1",
        "fee#1",
        "fee#1 (copy)",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "fee#1",
        "requestedLoanAmount#0 (copy)",
        "fee#1 (copy)"
      ]
    },
    "3428": {
      "op": "-",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "fee#1",
        "disbursement#3"
      ]
    },
    "3429": {
      "op": "dup",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "fee#1",
        "disbursement#3",
        "disbursement#3 (copy)"
      ]
    },
    "3430": {
      "op": "cover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "disbursement#3"
      ]
    },
    "3432": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "disbursement#3",
        "fee#1"
      ]
    },
    "3434": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "0"
      ]
    },
    "3435": {
      "op": "bytec 23 // \"fee_pool\"",
      "defined_out": [
        "\"fee_pool\"",
        "0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "0",
        "\"fee_pool\""
      ]
    },
    "3437": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3438": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "disbursement#3",
        "fee#1",
        "maybe_value%1#0"
      ]
    },
    "3439": {
      "op": "+",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "disbursement#3",
        "new_state_value%0#0"
      ]
    },
    "3440": {
      "op": "bytec 23 // \"fee_pool\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "disbursement#3",
        "new_state_value%0#0",
        "\"fee_pool\""
      ]
    },
    "3442": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "disbursement#3",
        "\"fee_pool\"",
        "new_state_value%0#0"
      ]
    },
    "3443": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "disbursement#3"
      ]
    },
    "3444": {
      "op": "bytec 39 // \"last_scaled_down_disbursement\"",
      "defined_out": [
        "\"last_scaled_down_disbursement\"",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "disbursement#3",
        "\"last_scaled_down_disbursement\""
      ]
    },
    "3446": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "\"last_scaled_down_disbursement\"",
        "disbursement#3"
      ]
    },
    "3447": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3448": {
      "op": "frame_dig 3",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "hasLoan#0"
      ]
    },
    "3450": {
      "op": "bz borrow_else_body@5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3453": {
      "op": "txn Sender",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3455": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "borrower#0 (copy)",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "borrower#0 (copy)"
      ]
    },
    "3456": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "fee#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0"
      ]
    },
    "3459": {
      "op": "dig 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "borrower#0 (copy)"
      ]
    },
    "3461": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "op": "callsub syncBorrowerSnapshot",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "fee#1",
        "hasLoan#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0"
      ]
    },
    "3464": {
      "op": "frame_dig 1",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#3"
      ]
    },
    "3466": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "disbursement#3 (copy)",
        "existingLoan#0",
        "fee#1",
        "hasLoan#0",
        "liveDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#3 (copy)",
        "disbursement#3 (copy)"
      ]
    },
    "3467": {
      "op": "cover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "existingLoan#0",
        "liveDebt#0",
        "disbursement#3 (copy)"
      ]
    },
    "3469": {
      "op": "+",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "fee#1",
        "hasLoan#0",
        "newDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "existingLoan#0",
        "newDebt#0"
      ]
    },
    "3470": {
      "op": "dig 1",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "existingLoan#0 (copy)",
        "fee#1",
        "hasLoan#0",
        "newDebt#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "existingLoan#0",
        "newDebt#0",
        "existingLoan#0 (copy)"
      ]
    },
    "3472": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "existingLoan#0",
        "newDebt#0",
        "tmp%0#2"
      ]
    },
    "3475": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "existingLoan#0"
      ]
    },
    "3477": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "existingLoan#0",
        "fee#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "existingLoan#0",
        "40"
      ]
    },
    "3479": {
      "op": "extract_uint64",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2",
        "tmp%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "tmp%2#1"
      ]
    },
    "3480": {
      "op": "frame_dig -4",
      "defined_out": [
        "borrower#0",
        "collateralAmount#0 (copy)",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2",
        "tmp%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "tmp%2#1",
        "collateralAmount#0 (copy)"
      ]
    },
    "3482": {
      "op": "+",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2",
        "to_encode%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "to_encode%0#0"
      ]
    },
    "3483": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ]
    },
    "3484": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3485": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3486": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_exists%0#1",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "3487": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1"
      ]
    },
    "3488": {
      "op": "uncover 4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "disbursement#3"
      ]
    },
    "3490": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0"
      ]
    },
    "3491": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "to_encode%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "to_encode%1#0"
      ]
    },
    "3493": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3494": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "3495": {
      "op": "bytec 19 // 0x00",
      "defined_out": [
        "0x00",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0",
        "0x00"
      ]
    },
    "3497": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%2#0",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3498": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "3499": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#1",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "newDebt#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3500": {
      "op": "uncover 4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "newDebt#0"
      ]
    },
    "3502": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%3#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1"
      ]
    },
    "3503": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "0"
      ]
    },
    "3504": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%3#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "3506": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3507": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "maybe_value%1#0"
      ]
    },
    "3508": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#1",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ]
    },
    "3509": {
      "op": "dig 6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#2",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "borrower#0 (copy)"
      ]
    },
    "3511": {
      "op": "uncover 6",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "borrower#0 (copy)",
        "tmp%0#2"
      ]
    },
    "3513": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3514": {
      "op": "uncover 5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "3516": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#1",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3517": {
      "op": "uncover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3519": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%8#0",
        "fee#1",
        "hasLoan#0",
        "maybe_value%0#1",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3520": {
      "op": "uncover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#1"
      ]
    },
    "3522": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%9#0",
        "fee#1",
        "hasLoan#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%3#1",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3523": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%3#1"
      ]
    },
    "3525": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%10#0",
        "fee#1",
        "hasLoan#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3526": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "3527": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%11#0",
        "fee#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3528": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0",
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%11#0",
        "fee#1",
        "hasLoan#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "3529": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "borrower#0"
      ]
    },
    "3531": {
      "op": "concat",
      "defined_out": [
        "collateralToUse#1",
        "disbursement#3",
        "encoded_tuple_buffer%11#0",
        "fee#1",
        "hasLoan#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "tmp%3#1"
      ]
    },
    "3532": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%3#1",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3533": {
      "op": "box_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3534": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3536": {
      "op": "frame_dig -4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3538": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3541": {
      "block": "borrow_after_if_else@6",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ],
      "op": "txn Sender"
    },
    "3543": {
      "op": "intc_0 // 0"
    },
    "3544": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3545": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "maybe_exists%0#1",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "3546": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%0#1"
      ]
    },
    "3547": {
      "op": "btoi",
      "defined_out": [
        "borrower#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "tmp%0#1"
      ]
    },
    "3548": {
      "op": "bnz borrow_else_body@10",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3551": {
      "op": "itxn_begin"
    },
    "3552": {
      "op": "frame_dig 1",
      "defined_out": [
        "borrower#0",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "disbursement#3"
      ]
    },
    "3554": {
      "op": "itxn_field Amount",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3556": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3558": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "1"
      ]
    },
    "3559": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3561": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "1000"
      ]
    },
    "3562": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3564": {
      "op": "itxn_submit"
    },
    "3565": {
      "block": "borrow_after_if_else@12",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "0"
      ]
    },
    "3566": {
      "op": "bytec 6 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "3568": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "3569": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%3#0"
      ]
    },
    "3570": {
      "op": "frame_dig 1",
      "defined_out": [
        "disbursement#3",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%3#0",
        "disbursement#3"
      ]
    },
    "3572": {
      "op": "+",
      "defined_out": [
        "disbursement#3",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "3573": {
      "op": "bytec 6 // \"total_borrows\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "3575": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "3576": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3577": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "disbursement#3",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "new_state_value%1#0"
      ]
    },
    "3580": {
      "op": "bytec 9 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "disbursement#3",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "3582": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "3583": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3584": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "0"
      ]
    },
    "3585": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3586": {
      "op": "app_global_get_ex",
      "defined_out": [
        "disbursement#3",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "3587": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%4#0"
      ]
    },
    "3588": {
      "op": "btoi",
      "defined_out": [
        "disbursement#3",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%8#0"
      ]
    },
    "3589": {
      "op": "frame_dig 2",
      "defined_out": [
        "disbursement#3",
        "fee#1",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%8#0",
        "fee#1"
      ]
    },
    "3591": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.payPlatformFees",
      "op": "callsub payPlatformFees",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3594": {
      "retsub": true,
      "op": "retsub"
    },
    "3595": {
      "block": "borrow_else_body@10",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0"
      ],
      "op": "itxn_begin"
    },
    "3596": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "0"
      ]
    },
    "3597": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3598": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "3599": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "maybe_value%1#1"
      ]
    },
    "3600": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "3601": {
      "op": "frame_dig 1",
      "defined_out": [
        "disbursement#3",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0",
        "disbursement#3"
      ]
    },
    "3603": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0",
        "inner_txn_params%1%%param_XferAsset_idx_0#0"
      ]
    },
    "3605": {
      "op": "itxn_field XferAsset",
      "defined_out": [
        "borrower#0",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrower#0"
      ]
    },
    "3607": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3609": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "4"
      ]
    },
    "3610": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3612": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "1000"
      ]
    },
    "3613": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3615": {
      "op": "itxn_submit"
    },
    "3616": {
      "op": "b borrow_after_if_else@12"
    },
    "3619": {
      "block": "borrow_else_body@5",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "borrowerAddress#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0"
      ]
    },
    "3621": {
      "op": "frame_dig -4",
      "defined_out": [
        "borrowerAddress#0",
        "collateralAmount#0 (copy)"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "3623": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ]
    },
    "3624": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "3625": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "3626": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrowerAddress#0",
        "maybe_exists%0#1",
        "maybe_value%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "3627": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1"
      ]
    },
    "3628": {
      "op": "frame_dig 1",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "disbursement#3"
      ]
    },
    "3630": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0"
      ]
    },
    "3631": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "to_encode%0#0"
      ]
    },
    "3633": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "3634": {
      "op": "dig 1",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)"
      ]
    },
    "3636": {
      "op": "bytec 19 // 0x00",
      "defined_out": [
        "0x00",
        "borrowerAddress#0",
        "disbursement#3",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%1#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%1#0 (copy)",
        "0x00"
      ]
    },
    "3638": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%2#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "3639": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "3640": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3641": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0"
      ]
    },
    "3642": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "3644": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_exists%1#0",
        "maybe_value%0#1",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "3645": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%1#0"
      ]
    },
    "3646": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "3647": {
      "op": "dig 5",
      "defined_out": [
        "borrowerAddress#0",
        "borrowerAddress#0 (copy)",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)"
      ]
    },
    "3649": {
      "op": "frame_dig -2",
      "defined_out": [
        "borrowerAddress#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3651": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%0#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "3652": {
      "op": "uncover 5",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "3654": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "3655": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "3657": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "maybe_value%0#1",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "3658": {
      "op": "uncover 3",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%0#1"
      ]
    },
    "3660": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%1#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "3661": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%1#0"
      ]
    },
    "3663": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "3664": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%4#0"
      ]
    },
    "3665": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3666": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "borrowerAddress#0",
        "disbursement#3",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "borrowerAddress#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "3667": {
      "op": "uncover 2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "borrowerAddress#0"
      ]
    },
    "3669": {
      "op": "concat",
      "defined_out": [
        "disbursement#3",
        "encoded_tuple_buffer%11#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "encoded_tuple_buffer%11#0",
        "tmp%0#2"
      ]
    },
    "3670": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "tmp%0#2",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "3671": {
      "op": "box_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3672": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "0"
      ]
    },
    "3673": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "disbursement#3"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "3675": {
      "op": "app_global_get_ex",
      "defined_out": [
        "disbursement#3",
        "maybe_exists%2#0",
        "maybe_value%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%2#1",
        "maybe_exists%2#0"
      ]
    },
    "3676": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%2#1"
      ]
    },
    "3677": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "disbursement#3",
        "maybe_value%2#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "maybe_value%2#1",
        "1"
      ]
    },
    "3678": {
      "op": "+",
      "defined_out": [
        "disbursement#3",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "new_state_value%0#0"
      ]
    },
    "3679": {
      "op": "bytec 5 // \"active_loan_records\"",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "3681": {
      "op": "swap",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "3682": {
      "op": "app_global_put",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3683": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "3685": {
      "op": "frame_dig -4",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "collateralTokenId#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "3687": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.updateCollateralTotal",
      "op": "callsub updateCollateralTotal",
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3690": {
      "op": "b borrow_after_if_else@6"
    },
    "3693": {
      "block": "borrow_bool_false@21",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "and_result%0#0"
      ]
    },
    "3694": {
      "op": "b borrow_bool_merge@22"
    },
    "3697": {
      "block": "borrow_else_body@2",
      "stack_in": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0",
        "collateralToUse#1"
      ]
    },
    "3699": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralToUse#1"
      ],
      "stack_out": [
        "collateralToUse#1",
        "disbursement#3",
        "fee#1",
        "hasLoan#0"
      ]
    },
    "3701": {
      "op": "b borrow_after_if_else@3"
    },
    "3704": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueLoanInterest",
      "params": {
        "debtor#0": "bytes",
        "templateReserveAddress#0": "bytes"
      },
      "block": "accrueLoanInterest",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3707": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "3708": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "3710": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3711": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3712": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3714": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": []
    },
    "3715": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "{accrueMarket}"
      ],
      "stack_out": [
        "{accrueMarket}"
      ]
    },
    "3718": {
      "op": "pop",
      "stack_out": []
    },
    "3719": {
      "op": "frame_dig -2",
      "stack_out": [
        "debtor#0 (copy)"
      ]
    },
    "3721": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "op": "callsub syncBorrowerSnapshot",
      "defined_out": [
        "{syncBorrowerSnapshot}"
      ],
      "stack_out": [
        "{syncBorrowerSnapshot}"
      ]
    },
    "3724": {
      "op": "pop",
      "stack_out": []
    },
    "3725": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "3728": {
      "op": "bytec 9 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"last_apr_bps\""
      ]
    },
    "3730": {
      "op": "swap",
      "stack_out": [
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ]
    },
    "3731": {
      "op": "app_global_put",
      "stack_out": []
    },
    "3732": {
      "retsub": true,
      "op": "retsub"
    },
    "3733": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "params": {},
      "block": "current_apr_bps",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "3736": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "U_raw#0"
      ]
    },
    "3738": {
      "op": "dupn 12",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0"
      ]
    },
    "3740": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "0"
      ]
    },
    "3741": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "3743": {
      "op": "app_global_get_ex",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "3744": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "maybe_exists%0#0",
        "D#0"
      ]
    },
    "3745": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "maybe_exists%0#0",
        "D#0",
        "D#0 (copy)"
      ]
    },
    "3746": {
      "op": "uncover 2",
      "defined_out": [
        "D#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "maybe_exists%0#0"
      ]
    },
    "3748": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0"
      ]
    },
    "3749": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "0"
      ]
    },
    "3750": {
      "op": "bytec 6 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "3752": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "B#0",
        "maybe_exists%1#0"
      ]
    },
    "3753": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "D#0",
        "maybe_exists%1#0",
        "B#0"
      ]
    },
    "3754": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%1#0"
      ]
    },
    "3756": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0"
      ]
    },
    "3757": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "0"
      ]
    },
    "3758": {
      "op": "bytec 24 // \"util_cap_bps\"",
      "defined_out": [
        "\"util_cap_bps\"",
        "0",
        "B#0",
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "0",
        "\"util_cap_bps\""
      ]
    },
    "3760": {
      "op": "app_global_get_ex",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "3761": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "D#0",
        "maybe_exists%2#0",
        "cap_bps#0"
      ]
    },
    "3762": {
      "op": "cover 2",
      "defined_out": [
        "B#0",
        "D#0",
        "cap_bps#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "maybe_exists%2#0"
      ]
    },
    "3764": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "3765": {
      "op": "bnz current_apr_bps_after_if_else@29",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3768": {
      "op": "intc_0 // 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "3769": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "D#0",
        "U_raw#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3771": {
      "block": "current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3772": {
      "op": "bytec 29 // \"ema_alpha_bps\"",
      "defined_out": [
        "\"ema_alpha_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"ema_alpha_bps\""
      ]
    },
    "3774": {
      "op": "app_global_get_ex",
      "defined_out": [
        "alpha#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0",
        "maybe_exists%0#0"
      ]
    },
    "3775": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%0#0",
        "alpha#0"
      ]
    },
    "3776": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%0#0",
        "alpha#0",
        "alpha#0 (copy)"
      ]
    },
    "3777": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0",
        "maybe_exists%0#0",
        "alpha#0"
      ]
    },
    "3779": {
      "op": "frame_bury 2",
      "defined_out": [
        "alpha#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0",
        "maybe_exists%0#0"
      ]
    },
    "3781": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "alpha#0"
      ]
    },
    "3782": {
      "op": "bnz current_apr_bps_else_body@2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3785": {
      "op": "frame_dig 0",
      "defined_out": [
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1"
      ]
    },
    "3787": {
      "op": "frame_bury 1",
      "defined_out": [
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3789": {
      "block": "current_apr_bps_after_if_else@3",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3790": {
      "op": "bytec 25 // \"rate_model_type\"",
      "defined_out": [
        "\"rate_model_type\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"rate_model_type\""
      ]
    },
    "3792": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "3793": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%2#0"
      ]
    },
    "3794": {
      "op": "bnz current_apr_bps_ternary_false@5",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3797": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3798": {
      "op": "bytec 13 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "3800": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%0#0"
      ]
    },
    "3801": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0"
      ]
    },
    "3802": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0"
      ]
    },
    "3803": {
      "op": "bytec 26 // \"kink_norm_bps\"",
      "defined_out": [
        "\"kink_norm_bps\"",
        "0",
        "base_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "0",
        "\"kink_norm_bps\""
      ]
    },
    "3805": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "3806": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "3807": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "3808": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0",
        "kink_norm_bps#0"
      ]
    },
    "3810": {
      "op": "cover 3",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%1#0"
      ]
    },
    "3812": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "3813": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "3814": {
      "op": "bytec 27 // \"slope1_bps\"",
      "defined_out": [
        "\"slope1_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope1_bps\""
      ]
    },
    "3816": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "3817": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ]
    },
    "3818": {
      "op": "frame_bury 10",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%2#0"
      ]
    },
    "3820": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "3821": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0"
      ]
    },
    "3822": {
      "op": "bytec 28 // \"slope2_bps\"",
      "defined_out": [
        "\"slope2_bps\"",
        "0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "0",
        "\"slope2_bps\""
      ]
    },
    "3824": {
      "op": "app_global_get_ex",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope2_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "3825": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope2_bps#0"
      ]
    },
    "3826": {
      "op": "frame_bury 11",
      "defined_out": [
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "maybe_exists%3#0"
      ]
    },
    "3828": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0"
      ]
    },
    "3829": {
      "op": "frame_dig 1",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_used#1"
      ]
    },
    "3831": {
      "op": ">=",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "kink_norm_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "tmp%0#1"
      ]
    },
    "3832": {
      "op": "bz current_apr_bps_else_body@21",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ]
    },
    "3835": {
      "op": "frame_dig 10",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "3837": {
      "op": "frame_dig 1",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "slope1_bps#0",
        "U_used#1"
      ]
    },
    "3839": {
      "op": "mulw",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "hi1#0",
        "kink_norm_bps#0",
        "lo1#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0"
      ]
    },
    "3840": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "hi1#0",
        "lo1#0",
        "kink_norm_bps#0"
      ]
    },
    "3842": {
      "op": "divw",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "tmp%1#0"
      ]
    },
    "3843": {
      "op": "+",
      "defined_out": [
        "U_used#1",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3844": {
      "op": "frame_bury 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3846": {
      "block": "current_apr_bps_after_if_else@22",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3847": {
      "op": "bytec 14 // \"max_apr_bps\"",
      "defined_out": [
        "\"max_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"max_apr_bps\""
      ]
    },
    "3849": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "3850": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "3851": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "maxCap#0",
        "maxCap#0 (copy)"
      ]
    },
    "3852": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0",
        "maxCap#0"
      ]
    },
    "3854": {
      "op": "frame_bury 8",
      "defined_out": [
        "maxCap#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "maybe_exists%4#0"
      ]
    },
    "3856": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "3857": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0",
        "apr#18"
      ]
    },
    "3859": {
      "op": "frame_bury 4",
      "defined_out": [
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maxCap#0"
      ]
    },
    "3861": {
      "op": "bz current_apr_bps_after_if_else@25",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3864": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#0",
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3866": {
      "op": "dup",
      "defined_out": [
        "apr#0",
        "apr#0 (copy)",
        "apr#18",
        "maxCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)"
      ]
    },
    "3867": {
      "op": "frame_dig 8",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "apr#0 (copy)",
        "maxCap#0"
      ]
    },
    "3869": {
      "op": ">",
      "defined_out": [
        "apr#0",
        "apr#18",
        "maxCap#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "tmp%5#1"
      ]
    },
    "3870": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#1",
        "apr#18"
      ]
    },
    "3871": {
      "op": "frame_bury 4",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%5#1"
      ]
    },
    "3873": {
      "op": "bz current_apr_bps_after_if_else@25",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3876": {
      "op": "frame_dig 8",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#18"
      ]
    },
    "3878": {
      "op": "frame_bury 4",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3880": {
      "block": "current_apr_bps_after_if_else@25",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3882": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3884": {
      "block": "current_apr_bps_ternary_merge@6",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3885": {
      "op": "bytec 30 // \"max_apr_step_bps\"",
      "defined_out": [
        "\"max_apr_step_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"max_apr_step_bps\""
      ]
    },
    "3887": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "maybe_exists%4#0"
      ]
    },
    "3888": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "stepMax#0"
      ]
    },
    "3889": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_exists%4#0",
        "stepMax#0",
        "stepMax#0 (copy)"
      ]
    },
    "3890": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "maybe_exists%4#0",
        "stepMax#0"
      ]
    },
    "3892": {
      "op": "frame_bury 12",
      "defined_out": [
        "maybe_exists%4#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "maybe_exists%4#0"
      ]
    },
    "3894": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0"
      ]
    },
    "3895": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0",
        "apr#18"
      ]
    },
    "3897": {
      "op": "frame_bury 4",
      "defined_out": [
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "stepMax#0"
      ]
    },
    "3899": {
      "op": "bz current_apr_bps_after_if_else@18",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3902": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3903": {
      "op": "bytec 15 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0",
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "3905": {
      "op": "app_global_get_ex",
      "defined_out": [
        "apr#18",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "3906": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%5#0"
      ]
    },
    "3907": {
      "op": "bnz current_apr_bps_ternary_false@9",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3910": {
      "op": "intc_0 // 0",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3911": {
      "op": "bytec 13 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0",
        "apr#18",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "3913": {
      "op": "app_global_get_ex",
      "defined_out": [
        "apr#18",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "3914": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "apr#18",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3915": {
      "op": "frame_bury 9",
      "defined_out": [
        "apr#18",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3917": {
      "block": "current_apr_bps_ternary_merge@10",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3919": {
      "op": "frame_dig 12",
      "defined_out": [
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0",
        "stepMax#0"
      ]
    },
    "3921": {
      "op": ">",
      "defined_out": [
        "prevApr#0",
        "stepMax#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%6#0"
      ]
    },
    "3922": {
      "op": "bz current_apr_bps_ternary_false@12",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3925": {
      "op": "frame_dig 9",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3927": {
      "op": "frame_dig 12",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0",
        "stepMax#0"
      ]
    },
    "3929": {
      "op": "-",
      "defined_out": [
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "lo#0"
      ]
    },
    "3930": {
      "op": "frame_bury 7",
      "defined_out": [
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3932": {
      "block": "current_apr_bps_ternary_merge@13",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3934": {
      "op": "frame_dig 12",
      "defined_out": [
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0",
        "stepMax#0"
      ]
    },
    "3936": {
      "op": "+",
      "defined_out": [
        "hi#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hi#0"
      ]
    },
    "3937": {
      "op": "frame_bury 6",
      "defined_out": [
        "hi#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3939": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#0",
        "hi#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3941": {
      "op": "frame_dig 7",
      "defined_out": [
        "apr#0",
        "hi#0",
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "lo#0"
      ]
    },
    "3943": {
      "op": "<",
      "defined_out": [
        "apr#0",
        "hi#0",
        "lo#0",
        "prevApr#0",
        "stepMax#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%7#0"
      ]
    },
    "3944": {
      "op": "bz current_apr_bps_after_if_else@15",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3947": {
      "op": "frame_dig 7",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3949": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0",
        "hi#0",
        "lo#0",
        "prevApr#0",
        "stepMax#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3951": {
      "block": "current_apr_bps_after_if_else@15",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3953": {
      "op": "frame_dig 6",
      "defined_out": [
        "apr#0",
        "hi#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "hi#0"
      ]
    },
    "3955": {
      "op": ">",
      "defined_out": [
        "apr#0",
        "hi#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%8#0"
      ]
    },
    "3956": {
      "op": "bz current_apr_bps_after_if_else@17",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3959": {
      "op": "frame_dig 6",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3961": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0",
        "hi#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3963": {
      "block": "current_apr_bps_after_if_else@17",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "apr#18"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#18"
      ]
    },
    "3965": {
      "op": "frame_bury 4",
      "defined_out": [
        "apr#18"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3967": {
      "block": "current_apr_bps_after_if_else@18",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3969": {
      "op": "bytec 15 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "\"prev_apr_bps\""
      ]
    },
    "3971": {
      "op": "dig 1",
      "defined_out": [
        "\"prev_apr_bps\"",
        "apr#0",
        "apr#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0",
        "\"prev_apr_bps\"",
        "apr#0 (copy)"
      ]
    },
    "3973": {
      "op": "app_global_put",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "3974": {
      "op": "frame_bury 0"
    },
    "3976": {
      "retsub": true,
      "op": "retsub"
    },
    "3977": {
      "block": "current_apr_bps_ternary_false@12",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "lo#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "lo#0"
      ]
    },
    "3978": {
      "op": "frame_bury 7",
      "defined_out": [
        "lo#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3980": {
      "op": "b current_apr_bps_ternary_merge@13"
    },
    "3983": {
      "block": "current_apr_bps_ternary_false@9",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "3984": {
      "op": "bytec 15 // \"prev_apr_bps\"",
      "defined_out": [
        "\"prev_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"prev_apr_bps\""
      ]
    },
    "3986": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "3987": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevApr#0"
      ]
    },
    "3988": {
      "op": "frame_bury 9",
      "defined_out": [
        "prevApr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "3990": {
      "op": "b current_apr_bps_ternary_merge@10"
    },
    "3993": {
      "block": "current_apr_bps_else_body@21",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "U_used#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "kink_norm_bps#0",
        "base_bps#0",
        "U_used#1"
      ]
    },
    "3995": {
      "op": "uncover 2",
      "defined_out": [
        "U_used#1",
        "kink_norm_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_used#1",
        "kink_norm_bps#0"
      ]
    },
    "3997": {
      "op": "dup",
      "defined_out": [
        "U_used#1",
        "kink_norm_bps#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "U_used#1",
        "kink_norm_bps#0 (copy)",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "3998": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "U_used#1",
        "kink_norm_bps#0 (copy)"
      ]
    },
    "4000": {
      "op": "-",
      "defined_out": [
        "U_used#1",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0"
      ]
    },
    "4001": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "U_used#1",
        "kink_norm_bps#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "kink_norm_bps#0",
        "over#0",
        "10000"
      ]
    },
    "4003": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "10000",
        "kink_norm_bps#0"
      ]
    },
    "4005": {
      "op": "-",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "over#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0"
      ]
    },
    "4006": {
      "op": "frame_dig 11",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "over#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "over#0",
        "denom#0",
        "slope2_bps#0"
      ]
    },
    "4008": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "slope2_bps#0",
        "over#0"
      ]
    },
    "4010": {
      "op": "mulw",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "4011": {
      "op": "uncover 3",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0"
      ]
    },
    "4013": {
      "op": "frame_dig 10",
      "defined_out": [
        "U_used#1",
        "base_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "base_bps#0",
        "slope1_bps#0"
      ]
    },
    "4015": {
      "op": "+",
      "defined_out": [
        "U_used#1",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "hi2#0",
        "lo2#0",
        "tmp%2#0"
      ]
    },
    "4016": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "denom#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0"
      ]
    },
    "4018": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "hi2#0",
        "lo2#0",
        "denom#0"
      ]
    },
    "4020": {
      "op": "divw",
      "defined_out": [
        "U_used#1",
        "slope1_bps#0",
        "slope2_bps#0",
        "tmp%2#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%2#0",
        "tmp%3#1"
      ]
    },
    "4021": {
      "op": "+",
      "defined_out": [
        "U_used#1",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4022": {
      "op": "frame_bury 3",
      "defined_out": [
        "U_used#1",
        "apr#0",
        "slope1_bps#0",
        "slope2_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4024": {
      "op": "b current_apr_bps_after_if_else@22"
    },
    "4027": {
      "block": "current_apr_bps_ternary_false@5",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4028": {
      "op": "bytec 13 // \"base_bps\"",
      "defined_out": [
        "\"base_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"base_bps\""
      ]
    },
    "4030": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4031": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "apr#0"
      ]
    },
    "4032": {
      "op": "frame_bury 3",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4034": {
      "op": "b current_apr_bps_ternary_merge@6"
    },
    "4037": {
      "block": "current_apr_bps_else_body@2",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0"
      ]
    },
    "4038": {
      "op": "bytec 31 // \"util_ema_bps\"",
      "defined_out": [
        "\"util_ema_bps\"",
        "0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "0",
        "\"util_ema_bps\""
      ]
    },
    "4040": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "maybe_exists%1#0"
      ]
    },
    "4041": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0"
      ]
    },
    "4042": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "10000"
      ]
    },
    "4044": {
      "op": "frame_dig 2",
      "defined_out": [
        "10000",
        "alpha#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "10000",
        "alpha#0"
      ]
    },
    "4046": {
      "op": "dup",
      "defined_out": [
        "10000",
        "alpha#0",
        "alpha#0 (copy)",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "10000",
        "alpha#0 (copy)",
        "alpha#0 (copy)"
      ]
    },
    "4047": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "alpha#0",
        "10000",
        "alpha#0 (copy)"
      ]
    },
    "4049": {
      "op": "-",
      "defined_out": [
        "alpha#0",
        "oneMinus#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "alpha#0",
        "oneMinus#0"
      ]
    },
    "4050": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "oneMinus#0",
        "alpha#0"
      ]
    },
    "4051": {
      "op": "frame_dig 0",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "oneMinus#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "oneMinus#0",
        "alpha#0",
        "U_raw#0"
      ]
    },
    "4053": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "hiA#0",
        "loA#0",
        "oneMinus#0",
        "prevU#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "oneMinus#0",
        "hiA#0",
        "loA#0"
      ]
    },
    "4054": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "prevU#0",
        "hiA#0",
        "loA#0",
        "oneMinus#0"
      ]
    },
    "4056": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiA#0",
        "loA#0",
        "oneMinus#0",
        "prevU#0"
      ]
    },
    "4058": {
      "op": "mulw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "hiA#0",
        "hiB#0",
        "loA#0",
        "loB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiA#0",
        "loA#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "4059": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "loA#0",
        "hiB#0",
        "loB#0",
        "hiA#0"
      ]
    },
    "4061": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiB#0",
        "loB#0",
        "hiA#0",
        "loA#0"
      ]
    },
    "4063": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiB#0",
        "loB#0",
        "hiA#0",
        "loA#0",
        "10000"
      ]
    },
    "4065": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "hiB#0",
        "loB#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiB#0",
        "loB#0",
        "tmp%1#0"
      ]
    },
    "4066": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%1#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "4068": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%1#0",
        "hiB#0",
        "loB#0",
        "10000"
      ]
    },
    "4070": {
      "op": "divw",
      "defined_out": [
        "U_raw#0",
        "alpha#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "4071": {
      "op": "+",
      "defined_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1"
      ]
    },
    "4072": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1",
        "U_used#1"
      ]
    },
    "4073": {
      "op": "frame_bury 1",
      "defined_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1"
      ]
    },
    "4075": {
      "op": "bytec 31 // \"util_ema_bps\"",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_used#1",
        "\"util_ema_bps\""
      ]
    },
    "4077": {
      "op": "swap",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "\"util_ema_bps\"",
        "U_used#1"
      ]
    },
    "4078": {
      "op": "app_global_put",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4079": {
      "op": "b current_apr_bps_after_if_else@3"
    },
    "4082": {
      "block": "current_apr_bps_after_if_else@29",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 13",
      "defined_out": [
        "D#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0"
      ]
    },
    "4084": {
      "op": "frame_dig 15",
      "defined_out": [
        "D#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "D#0",
        "cap_bps#0"
      ]
    },
    "4086": {
      "op": "mulw",
      "defined_out": [
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ]
    },
    "4087": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "D#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiCap#0",
        "loCap#0",
        "10000"
      ]
    },
    "4089": {
      "op": "divw",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "4090": {
      "op": "dup",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0"
      ]
    },
    "4091": {
      "op": "frame_bury 5",
      "defined_out": [
        "D#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0"
      ]
    },
    "4093": {
      "op": "bnz current_apr_bps_after_if_else@31",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4096": {
      "op": "intc_0 // 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4097": {
      "op": "frame_bury 0",
      "defined_out": [
        "D#0",
        "U_raw#0",
        "capBorrow#0",
        "cap_bps#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4099": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32"
    },
    "4102": {
      "block": "current_apr_bps_after_if_else@31",
      "stack_in": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ],
      "op": "frame_dig 14",
      "defined_out": [
        "B#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0"
      ]
    },
    "4104": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)"
      ]
    },
    "4105": {
      "op": "frame_dig 5",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0"
      ]
    },
    "4107": {
      "op": "dup",
      "defined_out": [
        "B#0",
        "B#0 (copy)",
        "capBorrow#0",
        "capBorrow#0 (copy)"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "4108": {
      "op": "cover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "B#0 (copy)",
        "capBorrow#0 (copy)"
      ]
    },
    "4110": {
      "op": "<=",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "tmp%2#2"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#2"
      ]
    },
    "4111": {
      "op": "dig 1",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "B#0",
        "capBorrow#0",
        "tmp%2#2",
        "capBorrow#0 (copy)"
      ]
    },
    "4113": {
      "op": "uncover 3",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "tmp%2#2",
        "capBorrow#0 (copy)",
        "B#0"
      ]
    },
    "4115": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "capBorrow#0 (copy)",
        "B#0",
        "tmp%2#2"
      ]
    },
    "4117": {
      "op": "select",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0"
      ]
    },
    "4118": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "B#0",
        "capBorrow#0",
        "cappedB#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "cappedB#0",
        "10000"
      ]
    },
    "4120": {
      "op": "mulw",
      "defined_out": [
        "B#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "capBorrow#0",
        "hiN#0",
        "loN#0"
      ]
    },
    "4121": {
      "op": "uncover 2",
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "hiN#0",
        "loN#0",
        "capBorrow#0"
      ]
    },
    "4123": {
      "op": "divw",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0",
        "U_raw#0"
      ]
    },
    "4124": {
      "op": "frame_bury 0",
      "defined_out": [
        "B#0",
        "U_raw#0",
        "capBorrow#0"
      ],
      "stack_out": [
        "U_raw#0",
        "U_used#1",
        "alpha#0",
        "apr#0",
        "apr#18",
        "capBorrow#0",
        "hi#0",
        "lo#0",
        "maxCap#0",
        "prevApr#0",
        "slope1_bps#0",
        "slope2_bps#0",
        "stepMax#0",
        "D#0",
        "B#0",
        "cap_bps#0"
      ]
    },
    "4126": {
      "op": "b current_apr_bps_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.util_norm_bps@32"
    },
    "4129": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "params": {
        "rec#0": "bytes"
      },
      "block": "currentDebtFromSnapshot",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "4132": {
      "op": "frame_dig -1",
      "defined_out": [
        "rec#0 (copy)"
      ],
      "stack_out": [
        "rec#0 (copy)"
      ]
    },
    "4134": {
      "op": "pushint 73 // 73",
      "defined_out": [
        "73",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "rec#0 (copy)",
        "73"
      ]
    },
    "4136": {
      "op": "extract_uint64",
      "defined_out": [
        "p#0"
      ],
      "stack_out": [
        "p#0"
      ]
    },
    "4137": {
      "op": "dup",
      "defined_out": [
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "p#0"
      ]
    },
    "4138": {
      "op": "bnz currentDebtFromSnapshot_after_if_else@2",
      "stack_out": [
        "p#0"
      ]
    },
    "4141": {
      "op": "intc_0 // 0",
      "stack_out": [
        "p#0",
        "0"
      ]
    },
    "4142": {
      "op": "frame_dig -1",
      "stack_out": [
        "p#0",
        "0",
        "rec#0 (copy)"
      ]
    },
    "4144": {
      "op": "uncover 2"
    },
    "4146": {
      "retsub": true,
      "op": "retsub"
    },
    "4147": {
      "block": "currentDebtFromSnapshot_after_if_else@2",
      "stack_in": [
        "p#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "p#0",
        "0"
      ]
    },
    "4148": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0"
      ],
      "stack_out": [
        "p#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4150": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "p#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4151": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "p#0",
        "maybe_value%0#0"
      ]
    },
    "4152": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "maybe_value%0#0",
        "p#0"
      ]
    },
    "4154": {
      "op": "mulw",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0"
      ]
    },
    "4155": {
      "op": "frame_dig -1",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "rec#0 (copy)"
      ]
    },
    "4157": {
      "op": "pushint 81 // 81",
      "defined_out": [
        "81",
        "hi#0",
        "lo#0",
        "p#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "rec#0 (copy)",
        "81"
      ]
    },
    "4159": {
      "op": "extract_uint64",
      "defined_out": [
        "hi#0",
        "lo#0",
        "p#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "p#0",
        "hi#0",
        "lo#0",
        "tmp%3#0"
      ]
    },
    "4160": {
      "op": "divw",
      "defined_out": [
        "p#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "p#0",
        "tmp%4#0"
      ]
    },
    "4161": {
      "op": "frame_dig -1",
      "stack_out": [
        "p#0",
        "tmp%4#0",
        "rec#0 (copy)"
      ]
    },
    "4163": {
      "op": "uncover 2"
    },
    "4165": {
      "retsub": true,
      "op": "retsub"
    },
    "4166": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.syncBorrowerSnapshot",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "syncBorrowerSnapshot",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4169": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4170": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "4172": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4173": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4174": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "maybe_exists%0#0"
      ]
    },
    "4175": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "rec#0"
      ]
    },
    "4176": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4179": {
      "op": "dup",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4180": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0"
      ]
    },
    "4183": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "rec#0 (copy)"
      ]
    },
    "4185": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "4188": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "0"
      ]
    },
    "4189": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "liveDebt#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4190": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liveDebt#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "rec#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4191": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "rec#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "4192": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "rec#0"
      ]
    },
    "4194": {
      "error": "Index access is out of bounds",
      "op": "extract 48 17 // on error: Index access is out of bounds",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ]
    },
    "4197": {
      "op": "dig 4",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "liveDebt#0 (copy)"
      ]
    },
    "4199": {
      "op": "itob",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "4200": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "4201": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4203": {
      "op": "app_global_get_ex",
      "defined_out": [
        "liveDebt#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4204": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0"
      ]
    },
    "4205": {
      "op": "itob",
      "defined_out": [
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4206": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%1#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "borrower#0 (copy)"
      ]
    },
    "4208": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "borrower#0 (copy)",
        "tmp%1#0"
      ]
    },
    "4210": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4211": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "tmp%2#0"
      ]
    },
    "4213": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4214": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "tmp%3#0"
      ]
    },
    "4216": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "4217": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0",
        "maybe_value%1#0"
      ]
    },
    "4219": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "liveDebt#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "4220": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "4222": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "liveDebt#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4223": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%1#0"
      ]
    },
    "4224": {
      "op": "concat",
      "defined_out": [
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "liveDebt#0",
        "newRec#0"
      ]
    },
    "4225": {
      "op": "uncover 2",
      "stack_out": [
        "liveDebt#0",
        "newRec#0",
        "tmp%0#0"
      ]
    },
    "4227": {
      "op": "swap",
      "stack_out": [
        "liveDebt#0",
        "tmp%0#0",
        "newRec#0"
      ]
    },
    "4228": {
      "op": "box_put",
      "stack_out": [
        "liveDebt#0"
      ]
    },
    "4229": {
      "retsub": true,
      "op": "retsub"
    },
    "4230": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "params": {},
      "block": "accrueMarket",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "4233": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "deltaT#0"
      ]
    },
    "4235": {
      "op": "dupn 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ]
    },
    "4237": {
      "op": "global LatestTimestamp"
    },
    "4239": {
      "op": "dup"
    },
    "4240": {
      "op": "intc_0 // 0"
    },
    "4241": {
      "op": "bytec 22 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "0",
        "\"last_accrual_ts\""
      ]
    },
    "4243": {
      "op": "app_global_get_ex",
      "defined_out": [
        "last#0",
        "maybe_exists%0#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0"
      ]
    },
    "4244": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "maybe_exists%0#0",
        "last#0"
      ]
    },
    "4245": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "maybe_exists%0#0",
        "last#0",
        "last#0 (copy)"
      ]
    },
    "4246": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0",
        "last#0"
      ]
    },
    "4248": {
      "op": "cover 3",
      "defined_out": [
        "last#0",
        "maybe_exists%0#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0",
        "maybe_exists%0#0"
      ]
    },
    "4250": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4251": {
      "op": "<=",
      "defined_out": [
        "last#0",
        "now#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp%0#0"
      ]
    },
    "4252": {
      "op": "bz accrueMarket_after_if_else@2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4255": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4256": {
      "op": "frame_bury 0"
    },
    "4258": {
      "retsub": true,
      "op": "retsub"
    },
    "4259": {
      "block": "accrueMarket_after_if_else@2",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0"
      ]
    },
    "4261": {
      "op": "frame_dig 5",
      "defined_out": [
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "now#0",
        "last#0"
      ]
    },
    "4263": {
      "op": "-",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4264": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0",
        "deltaT#0"
      ]
    },
    "4265": {
      "op": "frame_bury 0",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deltaT#0"
      ]
    },
    "4267": {
      "op": "bnz accrueMarket_after_if_else@9",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4270": {
      "op": "intc_0 // 0",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4271": {
      "op": "frame_bury 2",
      "defined_out": [
        "deltaT#0",
        "last#0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4273": {
      "block": "accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.sliceFactorWad@10",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4275": {
      "op": "bnz accrueMarket_after_if_else@4",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4278": {
      "op": "bytec 22 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"last_accrual_ts\""
      ]
    },
    "4280": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"last_accrual_ts\"",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"last_accrual_ts\"",
        "now#0"
      ]
    },
    "4282": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4283": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "now#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4284": {
      "op": "frame_bury 0"
    },
    "4286": {
      "retsub": true,
      "op": "retsub"
    },
    "4287": {
      "block": "accrueMarket_after_if_else@4",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4288": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4290": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "oldIndex#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "maybe_exists%1#0"
      ]
    },
    "4291": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0"
      ]
    },
    "4292": {
      "op": "dup",
      "defined_out": [
        "oldIndex#0",
        "oldIndex#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "oldIndex#0 (copy)"
      ]
    },
    "4293": {
      "op": "frame_dig 2",
      "defined_out": [
        "oldIndex#0",
        "oldIndex#0 (copy)",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "oldIndex#0 (copy)",
        "simpleWad#0"
      ]
    },
    "4295": {
      "op": "mulw",
      "defined_out": [
        "hiI#0",
        "loI#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "hiI#0",
        "loI#0"
      ]
    },
    "4296": {
      "op": "intc 6 // 1000000000000",
      "defined_out": [
        "1000000000000",
        "hiI#0",
        "loI#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "hiI#0",
        "loI#0",
        "1000000000000"
      ]
    },
    "4298": {
      "op": "divw",
      "defined_out": [
        "incrIndex#0",
        "oldIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "oldIndex#0",
        "incrIndex#0"
      ]
    },
    "4299": {
      "op": "+",
      "defined_out": [
        "newIndex#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "newIndex#0"
      ]
    },
    "4300": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "newIndex#0",
        "\"borrow_index_wad\""
      ]
    },
    "4302": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "\"borrow_index_wad\"",
        "newIndex#0"
      ]
    },
    "4303": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4304": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4305": {
      "op": "bytec 6 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4307": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0"
      ]
    },
    "4308": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_exists%2#0",
        "totalBefore#0"
      ]
    },
    "4309": {
      "op": "dup",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_exists%2#0",
        "totalBefore#0",
        "totalBefore#0 (copy)"
      ]
    },
    "4310": {
      "op": "cover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0",
        "totalBefore#0"
      ]
    },
    "4312": {
      "op": "frame_bury 3",
      "defined_out": [
        "maybe_exists%2#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "maybe_exists%2#0"
      ]
    },
    "4314": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4315": {
      "op": "intc_0 // 0",
      "defined_out": [
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "interest#0"
      ]
    },
    "4316": {
      "op": "frame_bury 1",
      "defined_out": [
        "interest#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4318": {
      "op": "bz accrueMarket_after_if_else@6",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4321": {
      "op": "frame_dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0"
      ]
    },
    "4323": {
      "op": "frame_dig 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "totalBefore#0",
        "simpleWad#0"
      ]
    },
    "4325": {
      "op": "mulw",
      "defined_out": [
        "hiB#0",
        "interest#0",
        "loB#0",
        "simpleWad#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "hiB#0",
        "loB#0"
      ]
    },
    "4326": {
      "op": "intc 6 // 1000000000000",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "hiB#0",
        "loB#0",
        "1000000000000"
      ]
    },
    "4328": {
      "op": "divw",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4329": {
      "op": "frame_bury 1",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4331": {
      "block": "accrueMarket_after_if_else@6",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4332": {
      "op": "bytec 34 // \"protocol_share_bps\"",
      "defined_out": [
        "\"protocol_share_bps\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"protocol_share_bps\""
      ]
    },
    "4334": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "protoBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0",
        "maybe_exists%3#0"
      ]
    },
    "4335": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0"
      ]
    },
    "4336": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "protoBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "protoBps#0",
        "10000"
      ]
    },
    "4338": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "10000",
        "protoBps#0"
      ]
    },
    "4339": {
      "op": "-",
      "defined_out": [
        "deposBps#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deposBps#0"
      ]
    },
    "4340": {
      "op": "frame_dig 1",
      "defined_out": [
        "deposBps#0",
        "interest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "deposBps#0",
        "interest#0"
      ]
    },
    "4342": {
      "op": "dup"
    },
    "4343": {
      "op": "uncover 2",
      "defined_out": [
        "deposBps#0",
        "interest#0",
        "interest#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "interest#0 (copy)",
        "deposBps#0"
      ]
    },
    "4345": {
      "op": "mulw",
      "defined_out": [
        "hiD#0",
        "interest#0",
        "loD#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "hiD#0",
        "loD#0"
      ]
    },
    "4346": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "hiD#0",
        "loD#0",
        "10000"
      ]
    },
    "4348": {
      "op": "divw",
      "defined_out": [
        "depositorInterest#0",
        "interest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0"
      ]
    },
    "4349": {
      "op": "dup2",
      "defined_out": [
        "depositorInterest#0",
        "depositorInterest#0 (copy)",
        "interest#0",
        "interest#0 (copy)"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "interest#0 (copy)",
        "depositorInterest#0 (copy)"
      ]
    },
    "4350": {
      "op": "-",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4351": {
      "op": "frame_dig 3",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ]
    },
    "4353": {
      "op": "dig 3",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "totalBefore#0",
        "interest#0 (copy)"
      ]
    },
    "4355": {
      "op": "+",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "new_state_value%0#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "new_state_value%0#0"
      ]
    },
    "4356": {
      "op": "bytec 6 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "depositorInterest#0",
        "interest#0",
        "new_state_value%0#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4358": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4359": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0"
      ]
    },
    "4360": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4361": {
      "op": "bytec 4 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "depositorInterest#0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "4363": {
      "op": "app_global_get_ex",
      "defined_out": [
        "depositorInterest#0",
        "interest#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4364": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "depositorInterest#0",
        "protocolInterest#0",
        "maybe_value%4#0"
      ]
    },
    "4365": {
      "op": "uncover 2",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%4#0",
        "depositorInterest#0"
      ]
    },
    "4367": {
      "op": "+",
      "defined_out": [
        "interest#0",
        "new_state_value%1#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%1#0"
      ]
    },
    "4368": {
      "op": "bytec 4 // \"total_deposits\"",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "new_state_value%1#0",
        "\"total_deposits\""
      ]
    },
    "4370": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "\"total_deposits\"",
        "new_state_value%1#0"
      ]
    },
    "4371": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0"
      ]
    },
    "4372": {
      "op": "intc_0 // 0",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "0"
      ]
    },
    "4373": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "interest#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4374": {
      "op": "app_global_get_ex",
      "defined_out": [
        "interest#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "protocolInterest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4375": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "maybe_value%5#0"
      ]
    },
    "4376": {
      "op": "btoi",
      "defined_out": [
        "interest#0",
        "protocolInterest#0",
        "tmp%3#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "protocolInterest#0",
        "tmp%3#0"
      ]
    },
    "4377": {
      "op": "swap",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "tmp%3#0",
        "protocolInterest#0"
      ]
    },
    "4378": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.payPlatformFees",
      "op": "callsub payPlatformFees",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4381": {
      "op": "bytec 22 // \"last_accrual_ts\"",
      "defined_out": [
        "\"last_accrual_ts\"",
        "interest#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"last_accrual_ts\""
      ]
    },
    "4383": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"last_accrual_ts\"",
        "interest#0",
        "now#0",
        "totalBefore#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0",
        "\"last_accrual_ts\"",
        "now#0"
      ]
    },
    "4385": {
      "op": "app_global_put",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "interest#0"
      ]
    },
    "4386": {
      "op": "frame_bury 0"
    },
    "4388": {
      "retsub": true,
      "op": "retsub"
    },
    "4389": {
      "block": "accrueMarket_after_if_else@9",
      "stack_in": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0"
      ]
    },
    "4390": {
      "op": "bytec 9 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "0",
        "\"last_apr_bps\""
      ]
    },
    "4392": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "4393": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1"
      ]
    },
    "4394": {
      "op": "frame_dig 0",
      "defined_out": [
        "deltaT#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "maybe_value%0#1",
        "deltaT#0"
      ]
    },
    "4396": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "h1#0",
        "l1#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h1#0",
        "l1#0"
      ]
    },
    "4397": {
      "op": "pushint 31536000 // 31536000",
      "defined_out": [
        "31536000",
        "deltaT#0",
        "h1#0",
        "l1#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h1#0",
        "l1#0",
        "31536000"
      ]
    },
    "4402": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "tmp2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp2#0"
      ]
    },
    "4403": {
      "op": "intc 6 // 1000000000000",
      "defined_out": [
        "1000000000000",
        "deltaT#0",
        "tmp2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "tmp2#0",
        "1000000000000"
      ]
    },
    "4405": {
      "op": "mulw",
      "defined_out": [
        "deltaT#0",
        "h2#0",
        "l2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h2#0",
        "l2#0"
      ]
    },
    "4406": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "deltaT#0",
        "h2#0",
        "l2#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "h2#0",
        "l2#0",
        "10000"
      ]
    },
    "4408": {
      "op": "divw",
      "defined_out": [
        "deltaT#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0",
        "simpleWad#0"
      ]
    },
    "4409": {
      "op": "frame_bury 2",
      "defined_out": [
        "deltaT#0",
        "simpleWad#0"
      ],
      "stack_out": [
        "deltaT#0",
        "interest#0",
        "simpleWad#0",
        "totalBefore#0",
        "now#0",
        "last#0"
      ]
    },
    "4411": {
      "op": "b accrueMarket_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.sliceFactorWad@10"
    },
    "4414": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "params": {
        "borrowerAddress#0": "bytes"
      },
      "block": "getLoanRecord",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "4417": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "4418": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "4420": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4421": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4422": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4423": {
      "retsub": true,
      "op": "retsub"
    },
    "4424": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "repaymentAmount#0": "uint64"
      },
      "block": "repayLoanASA",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4427": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4429": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4430": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4431": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4432": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0"
      ]
    },
    "4433": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4434": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4436": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "4438": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "4440": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "4441": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4444": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4446": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "4448": {
      "op": "frame_dig 1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%3#0",
        "baseToken#0"
      ]
    },
    "4450": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "4451": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4454": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "4456": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "4458": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseToken#0",
        "repaymentAmount#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%5#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4460": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "4461": {
      "op": "bz repayLoanASA_bool_false@4",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4464": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "4465": {
      "block": "repayLoanASA_bool_merge@5",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4466": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "_interestSlice#0"
      ]
    },
    "4469": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4470": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "4472": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "loanRecord#0"
      ]
    },
    "4475": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4476": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%8#0"
      ]
    },
    "4478": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4481": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4484": {
      "op": "swap",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4485": {
      "op": "frame_dig -1",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4487": {
      "op": "dig 1",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)",
        "liveDebt#0 (copy)"
      ]
    },
    "4489": {
      "op": "<=",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "tmp%9#0"
      ]
    },
    "4490": {
      "op": "assert",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4491": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4493": {
      "op": "-",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4494": {
      "op": "dup",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "remainingDebt#0"
      ]
    },
    "4495": {
      "op": "frame_bury 0",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4497": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "0"
      ]
    },
    "4498": {
      "op": "bytec 6 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4500": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4501": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0"
      ]
    },
    "4502": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4504": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0"
      ]
    },
    "4505": {
      "op": "bytec 6 // \"total_borrows\"",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4507": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4508": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4509": {
      "op": "bnz repayLoanASA_else_body@8",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4512": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"loan_record\""
      ]
    },
    "4513": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"loan_record\"",
        "tmp%11#0"
      ]
    },
    "4515": {
      "op": "concat",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "tmp%12#0"
      ]
    },
    "4516": {
      "op": "box_del",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "{box_del}"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "{box_del}"
      ]
    },
    "4517": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4518": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "0"
      ]
    },
    "4519": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4521": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4522": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%2#0"
      ]
    },
    "4523": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "4524": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "new_state_value%1#0"
      ]
    },
    "4525": {
      "op": "bytec 5 // \"active_loan_records\"",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "4527": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "4528": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ]
    },
    "4529": {
      "op": "itxn_begin"
    },
    "4530": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4532": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "4533": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4534": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "32"
      ]
    },
    "4536": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4537": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0"
      ]
    },
    "4538": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "40"
      ]
    },
    "4540": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "4541": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4543": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4545": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4547": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "4"
      ]
    },
    "4548": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4550": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "1000"
      ]
    },
    "4551": {
      "op": "itxn_field Fee",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4553": {
      "op": "itxn_submit"
    },
    "4554": {
      "retsub": true,
      "op": "retsub"
    },
    "4555": {
      "block": "repayLoanASA_else_body@8",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "rec#0",
        "tmp%15#0"
      ]
    },
    "4557": {
      "op": "swap",
      "defined_out": [
        "rec#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "rec#0"
      ]
    },
    "4558": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4559": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "rec#0",
        "tmp%16#0"
      ]
    },
    "4562": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "rec#0"
      ]
    },
    "4563": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "4566": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "0"
      ]
    },
    "4567": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4568": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4569": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0"
      ]
    },
    "4570": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%3#0",
        "repaymentAmount#0 (copy)",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4572": {
      "op": "itob",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "4573": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "4575": {
      "op": "itob",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4576": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "4577": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "4580": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4581": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "4582": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4583": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0"
      ]
    },
    "4585": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "4586": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "4587": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4589": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4590": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0"
      ]
    },
    "4591": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "4592": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%16#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%15#0"
      ]
    },
    "4594": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "4596": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%17#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4597": {
      "op": "uncover 5",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0",
        "tmp%17#0"
      ]
    },
    "4599": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4600": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4602": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "maybe_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4603": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%3#0"
      ]
    },
    "4605": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4606": {
      "op": "uncover 2",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%2#0"
      ]
    },
    "4608": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "remainingDebt#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4609": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%3#0"
      ]
    },
    "4610": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4611": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "4612": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "tmp%18#0"
      ]
    },
    "4614": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "encoded_tuple_buffer%11#0",
        "tmp%19#0"
      ]
    },
    "4615": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "tmp%19#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4616": {
      "op": "box_put",
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0"
      ]
    },
    "4617": {
      "retsub": true,
      "op": "retsub"
    },
    "4618": {
      "block": "repayLoanASA_bool_false@4",
      "stack_in": [
        "remainingDebt#0",
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "4619": {
      "op": "b repayLoanASA_bool_merge@5"
    },
    "4622": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.repayLoanAlgo",
      "params": {
        "paymentTxn#0": "uint64",
        "repaymentAmount#0": "uint64"
      },
      "block": "repayLoanAlgo",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4625": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4627": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0"
      ]
    },
    "4628": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4629": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4630": {
      "op": "bury 1",
      "stack_out": [
        "remainingDebt#0",
        "maybe_exists%0#0"
      ]
    },
    "4632": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4633": {
      "op": "frame_dig -2",
      "defined_out": [
        "paymentTxn#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4635": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%0#0"
      ]
    },
    "4637": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "4639": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%2#0"
      ]
    },
    "4640": {
      "op": "bz repayLoanAlgo_bool_false@3",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4643": {
      "op": "frame_dig -2",
      "stack_out": [
        "remainingDebt#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "4645": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%3#0"
      ]
    },
    "4647": {
      "op": "frame_dig -1",
      "defined_out": [
        "repaymentAmount#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%3#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4649": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%4#0"
      ]
    },
    "4650": {
      "op": "bz repayLoanAlgo_bool_false@3",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4653": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "and_result%0#0"
      ]
    },
    "4654": {
      "block": "repayLoanAlgo_bool_merge@4",
      "stack_in": [
        "remainingDebt#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4655": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "_interestSlice#0"
      ]
    },
    "4658": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4659": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%5#0"
      ]
    },
    "4661": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "loanRecord#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "loanRecord#0"
      ]
    },
    "4664": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4665": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%6#0"
      ]
    },
    "4667": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4670": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "liveDebt#0",
        "rec#0"
      ]
    },
    "4673": {
      "op": "swap",
      "defined_out": [
        "liveDebt#0",
        "rec#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4674": {
      "op": "frame_dig -1",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4676": {
      "op": "dig 1",
      "defined_out": [
        "liveDebt#0",
        "liveDebt#0 (copy)",
        "rec#0",
        "repaymentAmount#0 (copy)"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)",
        "liveDebt#0 (copy)"
      ]
    },
    "4678": {
      "op": "<=",
      "defined_out": [
        "liveDebt#0",
        "rec#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "tmp%7#0"
      ]
    },
    "4679": {
      "op": "assert",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0"
      ]
    },
    "4680": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "liveDebt#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4682": {
      "op": "-",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4683": {
      "op": "dup",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "remainingDebt#0"
      ]
    },
    "4684": {
      "op": "frame_bury 0",
      "defined_out": [
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4686": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "0"
      ]
    },
    "4687": {
      "op": "bytec 6 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "4689": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4690": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0"
      ]
    },
    "4691": {
      "op": "frame_dig -1",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "maybe_value%1#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4693": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0"
      ]
    },
    "4694": {
      "op": "bytec 6 // \"total_borrows\"",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "new_state_value%0#0",
        "\"total_borrows\""
      ]
    },
    "4696": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0",
        "\"total_borrows\"",
        "new_state_value%0#0"
      ]
    },
    "4697": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "remainingDebt#0"
      ]
    },
    "4698": {
      "op": "bnz repayLoanAlgo_else_body@7",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4701": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"loan_record\""
      ]
    },
    "4702": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "rec#0",
        "remainingDebt#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"loan_record\"",
        "tmp%9#0"
      ]
    },
    "4704": {
      "op": "concat",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "tmp%10#0"
      ]
    },
    "4705": {
      "op": "box_del",
      "defined_out": [
        "rec#0",
        "remainingDebt#0",
        "{box_del}"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "{box_del}"
      ]
    },
    "4706": {
      "op": "pop",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4707": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "0"
      ]
    },
    "4708": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "4710": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4711": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%2#0"
      ]
    },
    "4712": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "4713": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "new_state_value%1#0"
      ]
    },
    "4714": {
      "op": "bytec 5 // \"active_loan_records\"",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "new_state_value%1#0",
        "\"active_loan_records\""
      ]
    },
    "4716": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "\"active_loan_records\"",
        "new_state_value%1#0"
      ]
    },
    "4717": {
      "op": "app_global_put",
      "stack_out": [
        "remainingDebt#0",
        "rec#0"
      ]
    },
    "4718": {
      "op": "itxn_begin"
    },
    "4719": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4721": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0"
      ]
    },
    "4722": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4723": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "rec#0 (copy)",
        "32"
      ]
    },
    "4725": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rec#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4726": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0"
      ]
    },
    "4727": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "40"
      ]
    },
    "4729": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "4730": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "4732": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "remainingDebt#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "4734": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4736": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "4"
      ]
    },
    "4737": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4739": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "1000"
      ]
    },
    "4740": {
      "op": "itxn_field Fee",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4742": {
      "op": "itxn_submit"
    },
    "4743": {
      "retsub": true,
      "op": "retsub"
    },
    "4744": {
      "block": "repayLoanAlgo_else_body@7",
      "stack_in": [
        "remainingDebt#0",
        "rec#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "rec#0",
        "tmp%13#0"
      ]
    },
    "4746": {
      "op": "swap",
      "defined_out": [
        "rec#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "rec#0"
      ]
    },
    "4747": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4748": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "rec#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "rec#0",
        "tmp%14#0"
      ]
    },
    "4751": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "rec#0"
      ]
    },
    "4752": {
      "error": "Index access is out of bounds",
      "op": "extract 40 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "4755": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "0"
      ]
    },
    "4756": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "4757": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4758": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0"
      ]
    },
    "4759": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%3#0",
        "repaymentAmount#0 (copy)",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "repaymentAmount#0 (copy)"
      ]
    },
    "4761": {
      "op": "itob",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "4762": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "4764": {
      "op": "itob",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "4765": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "4766": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "4769": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "4770": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "4771": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4772": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "remainingDebt#0"
      ]
    },
    "4774": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "4775": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0"
      ]
    },
    "4776": {
      "op": "bytec 10 // \"borrow_index_wad\"",
      "defined_out": [
        "\"borrow_index_wad\"",
        "0",
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "0",
        "\"borrow_index_wad\""
      ]
    },
    "4778": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4779": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "maybe_value%4#0"
      ]
    },
    "4780": {
      "op": "itob",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "4781": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "tmp%14#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%13#0"
      ]
    },
    "4783": {
      "op": "uncover 6",
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "4785": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "tmp%15#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "tmp%15#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "4786": {
      "op": "uncover 5",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%6#0",
        "tmp%15#0"
      ]
    },
    "4788": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "4789": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "4791": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "maybe_value%3#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "maybe_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "4792": {
      "op": "uncover 3",
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%3#0"
      ]
    },
    "4794": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "4795": {
      "op": "uncover 2",
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%2#0"
      ]
    },
    "4797": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "remainingDebt#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "4798": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%3#0"
      ]
    },
    "4799": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4800": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\""
      ]
    },
    "4801": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "\"loan_record\"",
        "tmp%16#0"
      ]
    },
    "4803": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "remainingDebt#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "encoded_tuple_buffer%11#0",
        "tmp%17#0"
      ]
    },
    "4804": {
      "op": "swap",
      "stack_out": [
        "remainingDebt#0",
        "tmp%17#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "4805": {
      "op": "box_put",
      "stack_out": [
        "remainingDebt#0"
      ]
    },
    "4806": {
      "retsub": true,
      "op": "retsub"
    },
    "4807": {
      "block": "repayLoanAlgo_bool_false@3",
      "stack_in": [
        "remainingDebt#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "remainingDebt#0",
        "and_result%0#0"
      ]
    },
    "4808": {
      "op": "b repayLoanAlgo_bool_merge@4"
    },
    "4811": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.payPlatformFees",
      "params": {
        "assetId#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "payPlatformFees",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "4814": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "4816": {
      "op": "bz payPlatformFees_after_if_else@7",
      "stack_out": []
    },
    "4819": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetId#0 (copy)"
      ],
      "stack_out": [
        "assetId#0 (copy)"
      ]
    },
    "4821": {
      "op": "bnz payPlatformFees_else_body@4",
      "stack_out": []
    },
    "4824": {
      "op": "itxn_begin"
    },
    "4825": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4826": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"admin_account\""
      ]
    },
    "4827": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4828": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4829": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%0#0",
        "amount#0 (copy)"
      ]
    },
    "4831": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "4833": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "4835": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "4836": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4838": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "4839": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4841": {
      "op": "itxn_submit"
    },
    "4842": {
      "block": "payPlatformFees_after_if_else@7",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "4843": {
      "block": "payPlatformFees_else_body@4",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "4844": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4845": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"admin_account\""
      ]
    },
    "4846": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "4847": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4848": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "4850": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4852": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetId#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "assetId#0 (copy)"
      ]
    },
    "4854": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "4856": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "4858": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "4859": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4861": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "4862": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4864": {
      "op": "itxn_submit"
    },
    "4865": {
      "retsub": true,
      "op": "retsub"
    },
    "4866": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutSplitASA",
      "params": {
        "buyer#0": "bytes",
        "debtor#0": "bytes",
        "premiumAxferTxn#0": "uint64",
        "repayAxferTxn#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "buyoutSplitASA",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "4869": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "baseAssetId#0"
      ]
    },
    "4871": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "baseAssetId#0",
        "\"loan_record\""
      ]
    },
    "4872": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "4874": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0"
      ]
    },
    "4875": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4877": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4878": {
      "op": "bury 1",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "4880": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4881": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "tmp%0#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "tmp%0#0",
        "{accrueMarket}"
      ]
    },
    "4884": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4885": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "maybe_exists%1#0"
      ]
    },
    "4886": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "rec#0"
      ]
    },
    "4887": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4888": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "maybe_exists%1#0"
      ]
    },
    "4890": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "rec#0"
      ]
    },
    "4891": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4892": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)",
        "40"
      ]
    },
    "4894": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0"
      ]
    },
    "4895": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "4896": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0"
      ]
    },
    "4898": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "4899": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "4902": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "4903": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "4905": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0"
      ]
    },
    "4907": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#1"
      ]
    },
    "4910": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "4911": {
      "op": "dup",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "4912": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "4914": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)"
      ]
    },
    "4915": {
      "error": "NO_DEBT",
      "op": "assert // NO_DEBT",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "4916": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "debtBase#0",
        "collateralTokenId#0"
      ]
    },
    "4917": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "4919": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "lstAppId#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "lstAppId#0 (copy)"
      ]
    },
    "4921": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralUSD#0"
      ]
    },
    "4924": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtBase#0"
      ]
    },
    "4925": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "4928": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)"
      ]
    },
    "4929": {
      "op": "assert",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "4930": {
      "op": "dig 1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0 (copy)"
      ]
    },
    "4932": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0 (copy)",
        "10000"
      ]
    },
    "4934": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0"
      ]
    },
    "4935": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hCR#0",
        "lCR#0",
        "debtUSDv#0"
      ]
    },
    "4937": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0"
      ]
    },
    "4938": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "0"
      ]
    },
    "4939": {
      "op": "bytec 11 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4941": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "4942": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "maybe_value%2#0"
      ]
    },
    "4943": {
      "op": "dig 1",
      "defined_out": [
        "CR_bps#0",
        "CR_bps#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "maybe_value%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "maybe_value%2#0",
        "CR_bps#0 (copy)"
      ]
    },
    "4945": {
      "op": "<",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "tmp%5#0"
      ]
    },
    "4946": {
      "error": "loan is not eligible for buyout",
      "op": "assert // loan is not eligible for buyout",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0"
      ]
    },
    "4947": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "10000"
      ]
    },
    "4949": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hR#0",
        "lR#0"
      ]
    },
    "4950": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hR#0",
        "lR#0",
        "0"
      ]
    },
    "4951": {
      "op": "bytec 11 // \"liq_threshold_bps\"",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hR#0",
        "lR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "4953": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hR#0",
        "lR#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "4954": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hR#0",
        "lR#0",
        "maybe_value%3#0"
      ]
    },
    "4955": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "ratio_bps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ratio_bps#0"
      ]
    },
    "4956": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ratio_bps#0",
        "10000"
      ]
    },
    "4958": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "premiumRateBps#0"
      ]
    },
    "4959": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "hBP#0",
        "lBP#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "hBP#0",
        "lBP#0"
      ]
    },
    "4960": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "hBP#0",
        "lBP#0",
        "10000"
      ]
    },
    "4962": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0"
      ]
    },
    "4963": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "4964": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "4966": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "4967": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "maybe_value%4#0"
      ]
    },
    "4968": {
      "op": "btoi",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "buyoutTokenId#0"
      ]
    },
    "4969": {
      "op": "swap",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0"
      ]
    },
    "4970": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "4971": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "4973": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "4974": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "maybe_value%5#0"
      ]
    },
    "4975": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0"
      ]
    },
    "4978": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0"
      ]
    },
    "4979": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0",
        "1000000"
      ]
    },
    "4981": {
      "op": "mulw",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "hPT#0",
        "lPT#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0"
      ]
    },
    "4982": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "hPT#0",
        "lPT#0",
        "buyoutTokenPrice#0"
      ]
    },
    "4984": {
      "op": "divw",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "4985": {
      "op": "frame_dig -3",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumAxferTxn#0 (copy)",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "4987": {
      "op": "gtxns Sender",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%6#0"
      ]
    },
    "4989": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%6#0",
        "buyer#0 (copy)"
      ]
    },
    "4991": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%7#0"
      ]
    },
    "4992": {
      "op": "bz buyoutSplitASA_bool_false@5",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "4995": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "4997": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%8#0"
      ]
    },
    "4999": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "5001": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%10#0"
      ]
    },
    "5002": {
      "op": "bz buyoutSplitASA_bool_false@5",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5005": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5007": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%11#0"
      ]
    },
    "5009": {
      "op": "frame_dig 6",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%11#0",
        "buyoutTokenId#0"
      ]
    },
    "5011": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%12#0"
      ]
    },
    "5012": {
      "op": "bz buyoutSplitASA_bool_false@5",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5015": {
      "op": "frame_dig -3",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5017": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%13#0"
      ]
    },
    "5019": {
      "op": "frame_dig 7",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%13#0",
        "premiumTokens#0"
      ]
    },
    "5021": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%14#0"
      ]
    },
    "5022": {
      "op": "bz buyoutSplitASA_bool_false@5",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5025": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "and_result%0#0"
      ]
    },
    "5026": {
      "block": "buyoutSplitASA_bool_merge@6",
      "stack_in": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5027": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "0"
      ]
    },
    "5028": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "5029": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "5030": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%6#0"
      ]
    },
    "5031": {
      "op": "btoi",
      "defined_out": [
        "baseAssetId#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "baseAssetId#0"
      ]
    },
    "5032": {
      "op": "frame_bury 0",
      "defined_out": [
        "baseAssetId#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5034": {
      "op": "frame_dig -2",
      "defined_out": [
        "baseAssetId#0",
        "repayAxferTxn#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5036": {
      "op": "gtxns Sender",
      "defined_out": [
        "baseAssetId#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%15#0"
      ]
    },
    "5038": {
      "op": "frame_dig -5",
      "defined_out": [
        "baseAssetId#0",
        "buyer#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%15#0",
        "buyer#0 (copy)"
      ]
    },
    "5040": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%16#0"
      ]
    },
    "5041": {
      "op": "bz buyoutSplitASA_bool_false@11",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5044": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5046": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseAssetId#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%17#0"
      ]
    },
    "5048": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseAssetId#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "5050": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%19#0"
      ]
    },
    "5051": {
      "op": "bz buyoutSplitASA_bool_false@11",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5054": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5056": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseAssetId#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%20#0"
      ]
    },
    "5058": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%20#0",
        "baseAssetId#0"
      ]
    },
    "5060": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%21#0"
      ]
    },
    "5061": {
      "op": "bz buyoutSplitASA_bool_false@11",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5064": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "repayAxferTxn#0 (copy)"
      ]
    },
    "5066": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseAssetId#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%22#0"
      ]
    },
    "5068": {
      "op": "frame_dig 5",
      "defined_out": [
        "baseAssetId#0",
        "debtBase#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%22#0",
        "debtBase#0"
      ]
    },
    "5070": {
      "op": "==",
      "defined_out": [
        "baseAssetId#0",
        "debtBase#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0"
      ]
    },
    "5071": {
      "op": "bz buyoutSplitASA_bool_false@11",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5074": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "baseAssetId#0",
        "debtBase#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "and_result%1#0"
      ]
    },
    "5075": {
      "block": "buyoutSplitASA_bool_merge@12",
      "stack_in": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5076": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%0#0"
      ]
    },
    "5078": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "{box_del}"
      ]
    },
    "5079": {
      "op": "pop",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5080": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "0"
      ]
    },
    "5081": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "5083": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "5084": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%7#0"
      ]
    },
    "5085": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%7#0",
        "1"
      ]
    },
    "5086": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "new_state_value%0#0"
      ]
    },
    "5087": {
      "op": "bytec 5 // \"active_loan_records\"",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "5089": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "5090": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5091": {
      "op": "itxn_begin"
    },
    "5092": {
      "op": "frame_dig 2",
      "defined_out": [
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "rec#0"
      ]
    },
    "5094": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "rec#0",
        "32"
      ]
    },
    "5096": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5097": {
      "op": "frame_dig 3",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "5099": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "5100": {
      "op": "cover 2",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5102": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5104": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0"
      ]
    },
    "5106": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "buyer#0 (copy)"
      ]
    },
    "5108": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0"
      ]
    },
    "5110": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "5111": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0"
      ]
    },
    "5113": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "1000"
      ]
    },
    "5114": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0"
      ]
    },
    "5116": {
      "op": "itxn_submit"
    },
    "5117": {
      "op": "bytec 8 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "\"accepted_collaterals\""
      ]
    },
    "5119": {
      "op": "frame_dig 4",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5121": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "tmp%25#0"
      ]
    },
    "5122": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%25#0",
        "tmp%25#0 (copy)"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "tmp%25#0",
        "tmp%25#0 (copy)"
      ]
    },
    "5123": {
      "op": "box_get",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%8#0",
        "rec#0",
        "tmp%0#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "tmp%25#0",
        "acVal#0",
        "maybe_exists%8#0"
      ]
    },
    "5124": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "tmp%25#0",
        "acVal#0"
      ]
    },
    "5125": {
      "op": "dup",
      "defined_out": [
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "tmp%25#0",
        "acVal#0",
        "acVal#0 (copy)"
      ]
    },
    "5126": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "tmp%25#0",
        "acVal#0",
        "acVal#0 (copy)",
        "24"
      ]
    },
    "5128": {
      "op": "extract_uint64",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%25#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "tmp%25#0",
        "acVal#0",
        "tmp%27#0"
      ]
    },
    "5129": {
      "op": "uncover 3",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "acVal#0",
        "tmp%27#0",
        "collateralAmount#0"
      ]
    },
    "5131": {
      "op": "-",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%25#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "acVal#0",
        "updatedTotal#0"
      ]
    },
    "5132": {
      "op": "dig 1",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "acVal#0",
        "updatedTotal#0",
        "acVal#0 (copy)"
      ]
    },
    "5134": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%25#0",
        "tmp%28#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%28#0"
      ]
    },
    "5137": {
      "op": "dig 2",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%28#0",
        "acVal#0 (copy)"
      ]
    },
    "5139": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "5142": {
      "op": "uncover 2",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "acVal#0",
        "tmp%28#0",
        "tmp%29#0",
        "updatedTotal#0"
      ]
    },
    "5144": {
      "op": "itob",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "acVal#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0"
      ]
    },
    "5145": {
      "op": "uncover 3",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "acVal#0"
      ]
    },
    "5147": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "tmp%30#0"
      ]
    },
    "5150": {
      "op": "uncover 3",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "tmp%29#0",
        "val_as_bytes%0#0",
        "tmp%30#0",
        "tmp%28#0"
      ]
    },
    "5152": {
      "op": "uncover 3",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "val_as_bytes%0#0",
        "tmp%30#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "5154": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%4#0",
        "rec#0",
        "tmp%0#0",
        "tmp%25#0",
        "tmp%30#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "val_as_bytes%0#0",
        "tmp%30#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "5155": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0",
        "tmp%30#0"
      ]
    },
    "5156": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%5#0",
        "rec#0",
        "tmp%0#0",
        "tmp%25#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "5157": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "5158": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%6#0",
        "rec#0",
        "tmp%0#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%25#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "5159": {
      "op": "box_put",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5160": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "0"
      ]
    },
    "5161": {
      "op": "bytec 6 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "5163": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "5164": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%9#0"
      ]
    },
    "5165": {
      "op": "frame_dig 5",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "maybe_value%9#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%9#0",
        "debtBase#0"
      ]
    },
    "5167": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "new_state_value%1#0"
      ]
    },
    "5168": {
      "op": "bytec 6 // \"total_borrows\"",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "new_state_value%1#0",
        "\"total_borrows\""
      ]
    },
    "5170": {
      "op": "swap",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "\"total_borrows\"",
        "new_state_value%1#0"
      ]
    },
    "5171": {
      "op": "app_global_put",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5172": {
      "op": "frame_dig 7",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "premiumTokens#0"
      ]
    },
    "5174": {
      "op": "frame_dig 6",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "premiumTokens#0",
        "buyoutTokenId#0"
      ]
    },
    "5176": {
      "op": "frame_dig -4",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtor#0 (copy)",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "debtor#0 (copy)"
      ]
    },
    "5178": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.splitPremium",
      "op": "callsub splitPremium",
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5181": {
      "retsub": true,
      "op": "retsub"
    },
    "5182": {
      "block": "buyoutSplitASA_bool_false@11",
      "stack_in": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "and_result%1#0"
      ]
    },
    "5183": {
      "op": "b buyoutSplitASA_bool_merge@12"
    },
    "5186": {
      "block": "buyoutSplitASA_bool_false@5",
      "stack_in": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseAssetId#0",
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "and_result%0#0"
      ]
    },
    "5187": {
      "op": "b buyoutSplitASA_bool_merge@6"
    },
    "5190": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.buyoutSplitAlgo",
      "params": {
        "buyer#0": "bytes",
        "debtor#0": "bytes",
        "premiumAxferTxn#0": "uint64",
        "repayPayTxn#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "buyoutSplitAlgo",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "5193": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "5194": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "5196": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5197": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5199": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5200": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5202": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5203": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "tmp%0#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "{accrueMarket}"
      ]
    },
    "5206": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5207": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "maybe_exists%1#0"
      ]
    },
    "5208": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "rec#0"
      ]
    },
    "5209": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5210": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "maybe_exists%1#0"
      ]
    },
    "5212": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "rec#0"
      ]
    },
    "5213": {
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5214": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "rec#0",
        "rec#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "rec#0 (copy)",
        "40"
      ]
    },
    "5216": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0"
      ]
    },
    "5217": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5218": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0"
      ]
    },
    "5220": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5221": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5224": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "rec#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5225": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5227": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0"
      ]
    },
    "5229": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "rec#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#1"
      ]
    },
    "5232": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5233": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5234": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5236": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0 (copy)"
      ]
    },
    "5237": {
      "error": "NO_DEBT",
      "op": "assert // NO_DEBT",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0"
      ]
    },
    "5238": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralAmount#0",
        "debtBase#0",
        "collateralTokenId#0"
      ]
    },
    "5239": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "5241": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "lstAppId#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5243": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtBase#0",
        "collateralUSD#0"
      ]
    },
    "5246": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtBase#0"
      ]
    },
    "5247": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "5250": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "debtUSDv#0 (copy)"
      ]
    },
    "5251": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0"
      ]
    },
    "5252": {
      "op": "dig 1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0 (copy)"
      ]
    },
    "5254": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "collateralUSD#0 (copy)",
        "debtBase#0",
        "debtUSDv#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "collateralUSD#0 (copy)",
        "10000"
      ]
    },
    "5256": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "debtUSDv#0",
        "hCR#0",
        "lCR#0"
      ]
    },
    "5257": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hCR#0",
        "lCR#0",
        "debtUSDv#0"
      ]
    },
    "5259": {
      "op": "divw",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0"
      ]
    },
    "5260": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "0"
      ]
    },
    "5261": {
      "op": "bytec 11 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5263": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5264": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "maybe_value%2#0"
      ]
    },
    "5265": {
      "op": "dig 1",
      "defined_out": [
        "CR_bps#0",
        "CR_bps#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "maybe_value%2#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "maybe_value%2#0",
        "CR_bps#0 (copy)"
      ]
    },
    "5267": {
      "op": "<",
      "defined_out": [
        "CR_bps#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "rec#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "tmp%5#0"
      ]
    },
    "5268": {
      "error": "loan is not eligible for buyout",
      "op": "assert // loan is not eligible for buyout",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0"
      ]
    },
    "5269": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "CR_bps#0",
        "10000"
      ]
    },
    "5271": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hR#0",
        "lR#0"
      ]
    },
    "5272": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hR#0",
        "lR#0",
        "0"
      ]
    },
    "5273": {
      "op": "bytec 11 // \"liq_threshold_bps\"",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hR#0",
        "lR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "5275": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "hR#0",
        "lR#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hR#0",
        "lR#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "5276": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "hR#0",
        "lR#0",
        "maybe_value%3#0"
      ]
    },
    "5277": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "ratio_bps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ratio_bps#0"
      ]
    },
    "5278": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "ratio_bps#0",
        "10000"
      ]
    },
    "5280": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtBase#0",
        "premiumRateBps#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "collateralUSD#0",
        "premiumRateBps#0"
      ]
    },
    "5281": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "hBP#0",
        "lBP#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "hBP#0",
        "lBP#0"
      ]
    },
    "5282": {
      "op": "intc 4 // 10000",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "hBP#0",
        "lBP#0",
        "10000"
      ]
    },
    "5284": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0"
      ]
    },
    "5285": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "5286": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "defined_out": [
        "\"buyout_token_id\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "5288": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "5289": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "maybe_value%4#0"
      ]
    },
    "5290": {
      "op": "btoi",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "buyoutTokenId#0"
      ]
    },
    "5291": {
      "op": "swap",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0"
      ]
    },
    "5292": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "0"
      ]
    },
    "5293": {
      "op": "bytec 18 // \"buyout_token_id\"",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "0",
        "\"buyout_token_id\""
      ]
    },
    "5295": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "5296": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "maybe_value%5#0"
      ]
    },
    "5297": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumUSD#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5300": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0"
      ]
    },
    "5301": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumUSD#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "premiumUSD#0",
        "1000000"
      ]
    },
    "5303": {
      "op": "mulw",
      "defined_out": [
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "hPT#0",
        "lPT#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "buyoutTokenPrice#0",
        "hPT#0",
        "lPT#0"
      ]
    },
    "5304": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "hPT#0",
        "lPT#0",
        "buyoutTokenPrice#0"
      ]
    },
    "5306": {
      "op": "divw",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5307": {
      "op": "frame_dig -3",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumAxferTxn#0 (copy)",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5309": {
      "op": "gtxns Sender",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%6#0"
      ]
    },
    "5311": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%6#0",
        "buyer#0 (copy)"
      ]
    },
    "5313": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%7#0"
      ]
    },
    "5314": {
      "op": "bz buyoutSplitAlgo_bool_false@5",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5317": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5319": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%8#0"
      ]
    },
    "5321": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "5323": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%10#0"
      ]
    },
    "5324": {
      "op": "bz buyoutSplitAlgo_bool_false@5",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5327": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5329": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%11#0"
      ]
    },
    "5331": {
      "op": "frame_dig 5",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%11#0",
        "buyoutTokenId#0"
      ]
    },
    "5333": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%12#0"
      ]
    },
    "5334": {
      "op": "bz buyoutSplitAlgo_bool_false@5",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5337": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "premiumAxferTxn#0 (copy)"
      ]
    },
    "5339": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%13#0"
      ]
    },
    "5341": {
      "op": "frame_dig 6",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%13#0",
        "premiumTokens#0"
      ]
    },
    "5343": {
      "op": "==",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%14#0"
      ]
    },
    "5344": {
      "op": "bz buyoutSplitAlgo_bool_false@5",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5347": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "and_result%0#0"
      ]
    },
    "5348": {
      "block": "buyoutSplitAlgo_bool_merge@6",
      "stack_in": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5349": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "0"
      ]
    },
    "5350": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "5351": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "5352": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_exists%6#0"
      ]
    },
    "5354": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5355": {
      "op": "frame_dig -2",
      "defined_out": [
        "repayPayTxn#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "repayPayTxn#0 (copy)"
      ]
    },
    "5357": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%15#0"
      ]
    },
    "5359": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%15#0",
        "buyer#0 (copy)"
      ]
    },
    "5361": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%16#0"
      ]
    },
    "5362": {
      "op": "bz buyoutSplitAlgo_bool_false@10",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5365": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "repayPayTxn#0 (copy)"
      ]
    },
    "5367": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%17#0"
      ]
    },
    "5369": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "5371": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%19#0"
      ]
    },
    "5372": {
      "op": "bz buyoutSplitAlgo_bool_false@10",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5375": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "repayPayTxn#0 (copy)"
      ]
    },
    "5377": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%20#0"
      ]
    },
    "5379": {
      "op": "frame_dig 4",
      "defined_out": [
        "debtBase#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%20#0",
        "debtBase#0"
      ]
    },
    "5381": {
      "op": "==",
      "defined_out": [
        "debtBase#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%21#0"
      ]
    },
    "5382": {
      "op": "bz buyoutSplitAlgo_bool_false@10",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5385": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "debtBase#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "and_result%1#0"
      ]
    },
    "5386": {
      "block": "buyoutSplitAlgo_bool_merge@11",
      "stack_in": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "and_result%1#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5387": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%0#0"
      ]
    },
    "5389": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "{box_del}"
      ]
    },
    "5390": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5391": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "0"
      ]
    },
    "5392": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "5394": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "5395": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%7#0"
      ]
    },
    "5396": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%7#0",
        "1"
      ]
    },
    "5397": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "new_state_value%0#0"
      ]
    },
    "5398": {
      "op": "bytec 5 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "5400": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "5401": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5402": {
      "op": "itxn_begin"
    },
    "5403": {
      "op": "frame_dig 1",
      "defined_out": [
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "rec#0"
      ]
    },
    "5405": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "rec#0",
        "32"
      ]
    },
    "5407": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5408": {
      "op": "frame_dig 2",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "5410": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "5411": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "5413": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "5415": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0"
      ]
    },
    "5417": {
      "op": "frame_dig -5",
      "defined_out": [
        "buyer#0 (copy)",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "buyer#0 (copy)"
      ]
    },
    "5419": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0"
      ]
    },
    "5421": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "5422": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0"
      ]
    },
    "5424": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "1000"
      ]
    },
    "5425": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0"
      ]
    },
    "5427": {
      "op": "itxn_submit"
    },
    "5428": {
      "op": "bytec 8 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "\"accepted_collaterals\""
      ]
    },
    "5430": {
      "op": "frame_dig 3",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5432": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "tmp%23#0"
      ]
    },
    "5433": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ]
    },
    "5434": {
      "op": "box_get",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%8#0",
        "rec#0",
        "tmp%0#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "tmp%23#0",
        "acVal#0",
        "maybe_exists%8#0"
      ]
    },
    "5435": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "tmp%23#0",
        "acVal#0"
      ]
    },
    "5436": {
      "op": "dup",
      "defined_out": [
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "tmp%23#0",
        "acVal#0",
        "acVal#0 (copy)"
      ]
    },
    "5437": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "acVal#0",
        "acVal#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "tmp%23#0",
        "acVal#0",
        "acVal#0 (copy)",
        "24"
      ]
    },
    "5439": {
      "op": "extract_uint64",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "collateralAmount#0",
        "tmp%23#0",
        "acVal#0",
        "tmp%25#0"
      ]
    },
    "5440": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "acVal#0",
        "tmp%25#0",
        "collateralAmount#0"
      ]
    },
    "5442": {
      "op": "-",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%23#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "acVal#0",
        "updatedTotal#0"
      ]
    },
    "5443": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "acVal#0",
        "updatedTotal#0",
        "acVal#0 (copy)"
      ]
    },
    "5445": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%23#0",
        "tmp%26#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%26#0"
      ]
    },
    "5448": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%26#0",
        "acVal#0 (copy)"
      ]
    },
    "5450": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%27#0",
        "updatedTotal#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "acVal#0",
        "updatedTotal#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "5453": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "acVal#0",
        "tmp%26#0",
        "tmp%27#0",
        "updatedTotal#0"
      ]
    },
    "5455": {
      "op": "itob",
      "defined_out": [
        "acVal#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "acVal#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0"
      ]
    },
    "5456": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "acVal#0"
      ]
    },
    "5458": {
      "error": "Index access is out of bounds",
      "op": "extract 16 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "tmp%26#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "tmp%28#0"
      ]
    },
    "5461": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "tmp%27#0",
        "val_as_bytes%0#0",
        "tmp%28#0",
        "tmp%26#0"
      ]
    },
    "5463": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "val_as_bytes%0#0",
        "tmp%28#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "5465": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%4#0",
        "rec#0",
        "tmp%0#0",
        "tmp%23#0",
        "tmp%28#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "val_as_bytes%0#0",
        "tmp%28#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "5466": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%4#0",
        "tmp%28#0"
      ]
    },
    "5467": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%5#0",
        "rec#0",
        "tmp%0#0",
        "tmp%23#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "val_as_bytes%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "5468": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "5469": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "encoded_tuple_buffer%6#0",
        "rec#0",
        "tmp%0#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "tmp%23#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "5470": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5471": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "0"
      ]
    },
    "5472": {
      "op": "bytec 6 // \"total_borrows\"",
      "defined_out": [
        "\"total_borrows\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "0",
        "\"total_borrows\""
      ]
    },
    "5474": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "5475": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%9#0"
      ]
    },
    "5476": {
      "op": "frame_dig 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "maybe_value%9#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "maybe_value%9#0",
        "debtBase#0"
      ]
    },
    "5478": {
      "op": "-",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "new_state_value%1#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "new_state_value%1#0"
      ]
    },
    "5479": {
      "op": "bytec 6 // \"total_borrows\"",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "new_state_value%1#0",
        "\"total_borrows\""
      ]
    },
    "5481": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "\"total_borrows\"",
        "new_state_value%1#0"
      ]
    },
    "5482": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5483": {
      "op": "frame_dig 6",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "premiumTokens#0"
      ]
    },
    "5485": {
      "op": "frame_dig 5",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "premiumTokens#0",
        "buyoutTokenId#0"
      ]
    },
    "5487": {
      "op": "frame_dig -4",
      "defined_out": [
        "buyoutTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "debtor#0 (copy)",
        "premiumTokens#0",
        "rec#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "premiumTokens#0",
        "buyoutTokenId#0",
        "debtor#0 (copy)"
      ]
    },
    "5489": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.splitPremium",
      "op": "callsub splitPremium",
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ]
    },
    "5492": {
      "retsub": true,
      "op": "retsub"
    },
    "5493": {
      "block": "buyoutSplitAlgo_bool_false@10",
      "stack_in": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "and_result%1#0"
      ]
    },
    "5494": {
      "op": "b buyoutSplitAlgo_bool_merge@11"
    },
    "5497": {
      "block": "buyoutSplitAlgo_bool_false@5",
      "stack_in": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "rec#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtBase#0",
        "buyoutTokenId#0",
        "premiumTokens#0",
        "and_result%0#0"
      ]
    },
    "5498": {
      "op": "b buyoutSplitAlgo_bool_merge@6"
    },
    "5501": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.splitPremium",
      "params": {
        "premiumTokens#0": "uint64",
        "buyoutTokenId#0": "uint64",
        "debtor#0": "bytes"
      },
      "block": "splitPremium",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "5504": {
      "op": "frame_dig -3",
      "defined_out": [
        "premiumTokens#0 (copy)"
      ],
      "stack_out": [
        "premiumTokens#0 (copy)"
      ]
    },
    "5506": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "premiumTokens#0 (copy)"
      ],
      "stack_out": [
        "premiumTokens#0 (copy)",
        "2"
      ]
    },
    "5508": {
      "op": "/",
      "defined_out": [
        "halfPremium#0"
      ],
      "stack_out": [
        "halfPremium#0"
      ]
    },
    "5509": {
      "op": "itxn_begin"
    },
    "5510": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "halfPremium#0"
      ],
      "stack_out": [
        "halfPremium#0",
        "0"
      ]
    },
    "5511": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "halfPremium#0"
      ],
      "stack_out": [
        "halfPremium#0",
        "0",
        "\"admin_account\""
      ]
    },
    "5512": {
      "op": "app_global_get_ex",
      "defined_out": [
        "halfPremium#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "halfPremium#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5513": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "halfPremium#0",
        "maybe_value%0#0"
      ]
    },
    "5514": {
      "op": "dig 1",
      "defined_out": [
        "halfPremium#0",
        "halfPremium#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "halfPremium#0",
        "maybe_value%0#0",
        "halfPremium#0 (copy)"
      ]
    },
    "5516": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "halfPremium#0",
        "maybe_value%0#0"
      ]
    },
    "5518": {
      "op": "frame_dig -2",
      "defined_out": [
        "buyoutTokenId#0 (copy)",
        "halfPremium#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "halfPremium#0",
        "maybe_value%0#0",
        "buyoutTokenId#0 (copy)"
      ]
    },
    "5520": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "halfPremium#0",
        "maybe_value%0#0"
      ]
    },
    "5522": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "halfPremium#0"
      ]
    },
    "5524": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "halfPremium#0"
      ],
      "stack_out": [
        "halfPremium#0",
        "4"
      ]
    },
    "5525": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "halfPremium#0"
      ]
    },
    "5527": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "halfPremium#0"
      ],
      "stack_out": [
        "halfPremium#0",
        "1000"
      ]
    },
    "5528": {
      "op": "itxn_field Fee",
      "stack_out": [
        "halfPremium#0"
      ]
    },
    "5530": {
      "op": "itxn_submit"
    },
    "5531": {
      "op": "itxn_begin"
    },
    "5532": {
      "op": "frame_dig -3",
      "stack_out": [
        "halfPremium#0",
        "premiumTokens#0 (copy)"
      ]
    },
    "5534": {
      "op": "swap",
      "stack_out": [
        "premiumTokens#0 (copy)",
        "halfPremium#0"
      ]
    },
    "5535": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%1%%param_AssetAmount_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_AssetAmount_idx_0#0"
      ]
    },
    "5536": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "5538": {
      "op": "frame_dig -2",
      "stack_out": [
        "buyoutTokenId#0 (copy)"
      ]
    },
    "5540": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "5542": {
      "op": "frame_dig -1",
      "defined_out": [
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "debtor#0 (copy)"
      ]
    },
    "5544": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "5546": {
      "op": "intc_3 // 4",
      "stack_out": [
        "4"
      ]
    },
    "5547": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5549": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "5550": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5552": {
      "op": "itxn_submit"
    },
    "5553": {
      "retsub": true,
      "op": "retsub"
    },
    "5554": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "params": {
        "debtBaseUnits#0": "uint64"
      },
      "block": "debtUSD",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "5557": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5558": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "5559": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5560": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "5561": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenPrice#0"
      ],
      "stack_out": [
        "baseTokenPrice#0"
      ]
    },
    "5564": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenPrice#0",
        "debtBaseUnits#0 (copy)"
      ],
      "stack_out": [
        "baseTokenPrice#0",
        "debtBaseUnits#0 (copy)"
      ]
    },
    "5566": {
      "op": "mulw",
      "defined_out": [
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "h#0",
        "l#0"
      ]
    },
    "5567": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "h#0",
        "l#0"
      ],
      "stack_out": [
        "h#0",
        "l#0",
        "1000000"
      ]
    },
    "5569": {
      "op": "divw",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5570": {
      "retsub": true,
      "op": "retsub"
    },
    "5571": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLST",
      "params": {
        "lstAppId#0": "uint64"
      },
      "block": "maxWithdrawableCollateralLST",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "5574": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0"
      ]
    },
    "5575": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ]
    },
    "5577": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5578": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\""
      ]
    },
    "5579": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\"",
        "tmp%0#0"
      ]
    },
    "5581": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%1#0"
      ]
    },
    "5582": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5583": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "maybe_exists%0#0"
      ]
    },
    "5585": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5586": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "{accrueMarket}"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "{accrueMarket}"
      ]
    },
    "5589": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5590": {
      "op": "bytec_2 // \"loan_record\"",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\""
      ]
    },
    "5591": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "\"loan_record\"",
        "tmp%2#0"
      ]
    },
    "5593": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "tmp%3#0"
      ]
    },
    "5594": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "maybe_exists%1#0"
      ]
    },
    "5595": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0"
      ]
    },
    "5596": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5599": {
      "op": "swap",
      "defined_out": [
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5600": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "rec#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5601": {
      "op": "cover 2",
      "defined_out": [
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5603": {
      "op": "bnz maxWithdrawableCollateralLST_after_if_else@2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5606": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "debtBase#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "40"
      ]
    },
    "5608": {
      "op": "extract_uint64",
      "defined_out": [
        "debtBase#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "tmp%6#0"
      ]
    },
    "5609": {
      "op": "frame_bury 0"
    },
    "5611": {
      "retsub": true,
      "op": "retsub"
    },
    "5612": {
      "block": "maxWithdrawableCollateralLST_after_if_else@2",
      "stack_in": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0"
      ],
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5613": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5616": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5617": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0",
        "collateralTokenId#0"
      ]
    },
    "5619": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0"
      ]
    },
    "5621": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#0",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "rec#0",
        "40"
      ]
    },
    "5623": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "tmp%9#0"
      ]
    },
    "5624": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#0",
        "lstAppId#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "collateralTokenId#0",
        "tmp%9#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5626": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5629": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "currCollatUSD#0"
      ]
    },
    "5630": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5632": {
      "op": "frame_dig 3",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtBase#0"
      ]
    },
    "5634": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0"
      ]
    },
    "5637": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0",
        "10000"
      ]
    },
    "5639": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0"
      ]
    },
    "5640": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0"
      ]
    },
    "5641": {
      "op": "bytec 20 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "5643": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5644": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%2#0"
      ]
    },
    "5645": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5646": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5647": {
      "op": "frame_bury 2",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5649": {
      "op": "<=",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "tmp%10#0"
      ]
    },
    "5650": {
      "op": "bz maxWithdrawableCollateralLST_after_if_else@4",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0"
      ]
    },
    "5653": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "0"
      ]
    },
    "5654": {
      "op": "frame_bury 0"
    },
    "5656": {
      "retsub": true,
      "op": "retsub"
    },
    "5657": {
      "block": "maxWithdrawableCollateralLST_after_if_else@4",
      "stack_in": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5659": {
      "op": "frame_dig 2",
      "defined_out": [
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5661": {
      "op": "-",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5662": {
      "op": "itxn_begin"
    },
    "5663": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "5665": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5667": {
      "op": "frame_dig -1",
      "defined_out": [
        "currCollatUSD#0",
        "lstAppId#0 (copy)",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5669": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5671": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "appl"
      ]
    },
    "5673": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5675": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "1000"
      ]
    },
    "5676": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5678": {
      "op": "itxn_submit"
    },
    "5679": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0"
      ]
    },
    "5681": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5682": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "tmp%11#0"
      ]
    },
    "5685": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%11#0",
        "awst_tmp%0#0"
      ]
    },
    "5686": {
      "op": "extract 0 4",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "5689": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%11#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "5690": {
      "op": "==",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "5691": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%11#0"
      ]
    },
    "5692": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5693": {
      "op": "itxn_begin"
    },
    "5694": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "5696": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5698": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5700": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5702": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "appl"
      ]
    },
    "5704": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5706": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "1000"
      ]
    },
    "5707": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "5709": {
      "op": "itxn_submit"
    },
    "5710": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0"
      ]
    },
    "5712": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "5713": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "tmp%15#0"
      ]
    },
    "5716": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%15#0",
        "awst_tmp%1#0"
      ]
    },
    "5717": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "5720": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%15#0",
        "tmp%16#0",
        "0x151f7c75"
      ]
    },
    "5721": {
      "op": "==",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "5722": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%15#0"
      ]
    },
    "5723": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0"
      ]
    },
    "5724": {
      "op": "bytec 8 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\""
      ]
    },
    "5726": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0"
      ]
    },
    "5728": {
      "op": "concat",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%0#1",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%0#1"
      ]
    },
    "5729": {
      "op": "box_get",
      "defined_out": [
        "ac#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "maybe_exists%0#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0",
        "maybe_exists%0#0"
      ]
    },
    "5730": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0"
      ]
    },
    "5731": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%20#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%20#0"
      ]
    },
    "5734": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0"
      ]
    },
    "5737": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0"
      ]
    },
    "5739": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0",
        "1000000"
      ]
    },
    "5741": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "hU#0",
        "lU#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "hU#0",
        "lU#0"
      ]
    },
    "5742": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "hU#0",
        "lU#0",
        "basePrice#0"
      ]
    },
    "5744": {
      "op": "divw",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableUnderlying#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "removableUnderlying#0"
      ]
    },
    "5745": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "totalDeposits#0",
        "removableUnderlying#0",
        "circulatingLST#0"
      ]
    },
    "5747": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "hL#0",
        "lL#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "totalDeposits#0",
        "hL#0",
        "lL#0"
      ]
    },
    "5748": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "hL#0",
        "lL#0",
        "totalDeposits#0"
      ]
    },
    "5750": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "removableLST#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "debtBase#0",
        "removableLST#0"
      ]
    },
    "5751": {
      "op": "frame_bury 0"
    },
    "5753": {
      "retsub": true,
      "op": "retsub"
    },
    "5754": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.withdrawCollateral",
      "params": {
        "amountLST#0": "uint64",
        "collateralTokenId#0": "uint64",
        "lstAppId#0": "uint64"
      },
      "block": "withdrawCollateral",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "5757": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1"
      ]
    },
    "5758": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ]
    },
    "5760": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5761": {
      "op": "frame_dig -3",
      "defined_out": [
        "amountLST#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "amountLST#0 (copy)"
      ]
    },
    "5763": {
      "error": "ZERO_AMOUNT",
      "op": "assert // ZERO_AMOUNT",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5764": {
      "op": "txn Sender"
    },
    "5766": {
      "op": "bytec_2 // \"loan_record\""
    },
    "5767": {
      "op": "txn Sender",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "\"loan_record\"",
        "borrower#0"
      ]
    },
    "5769": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0"
      ]
    },
    "5770": {
      "op": "dupn 2",
      "defined_out": [
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "5772": {
      "op": "box_len",
      "defined_out": [
        "borrower#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5773": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "5775": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "5776": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "borrower#0",
        "tmp%1#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "{accrueMarket}"
      ]
    },
    "5779": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "5780": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "5781": {
      "op": "box_get",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "loan#0",
        "maybe_exists%1#0"
      ]
    },
    "5782": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_exists%1#0",
        "loan#0"
      ]
    },
    "5783": {
      "op": "cover 2",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%1#0",
        "maybe_exists%1#0"
      ]
    },
    "5785": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%1#0"
      ]
    },
    "5786": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "5787": {
      "op": "box_len",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "5788": {
      "op": "bury 1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "5790": {
      "error": "NO_LOAN",
      "op": "assert // NO_LOAN",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%1#0"
      ]
    },
    "5791": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%1#0",
        "{accrueMarket}"
      ]
    },
    "5794": {
      "op": "pop",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "tmp%1#0"
      ]
    },
    "5795": {
      "op": "box_get",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%1#0",
        "rec#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "rec#0",
        "maybe_exists%1#0"
      ]
    },
    "5796": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "rec#0"
      ]
    },
    "5797": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "borrower#0",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5800": {
      "op": "swap",
      "defined_out": [
        "borrower#0",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5801": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "rec#0",
        "debtBase#0",
        "debtBase#0"
      ]
    },
    "5802": {
      "op": "cover 2",
      "defined_out": [
        "borrower#0",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "rec#0",
        "debtBase#0"
      ]
    },
    "5804": {
      "op": "bnz withdrawCollateral_after_if_else@4",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "rec#0"
      ]
    },
    "5807": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "borrower#0",
        "debtBase#0",
        "loan#0",
        "rec#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "rec#0",
        "40"
      ]
    },
    "5809": {
      "op": "extract_uint64",
      "defined_out": [
        "borrower#0",
        "debtBase#0",
        "loan#0",
        "maxSafe#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "5810": {
      "block": "withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "maxSafe#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "amountLST#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "maxSafe#0",
        "amountLST#0 (copy)"
      ]
    },
    "5812": {
      "op": ">=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "tmp%3#0"
      ]
    },
    "5813": {
      "error": "EXCEEDS_LIMITS",
      "op": "assert // EXCEEDS_LIMITS",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0"
      ]
    },
    "5814": {
      "op": "frame_dig 5",
      "defined_out": [
        "loan#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0"
      ]
    },
    "5816": {
      "op": "dup",
      "defined_out": [
        "loan#0",
        "loan#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "loan#0 (copy)"
      ]
    },
    "5817": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "loan#0",
        "loan#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "loan#0 (copy)",
        "40"
      ]
    },
    "5819": {
      "op": "extract_uint64",
      "defined_out": [
        "loan#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "tmp%5#0"
      ]
    },
    "5820": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "tmp%5#0",
        "amountLST#0 (copy)"
      ]
    },
    "5822": {
      "op": "dig 1",
      "defined_out": [
        "amountLST#0 (copy)",
        "loan#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "tmp%5#0",
        "amountLST#0 (copy)",
        "tmp%5#0 (copy)"
      ]
    },
    "5824": {
      "op": "<",
      "defined_out": [
        "loan#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "5825": {
      "error": "INSUFFICIENT_COLLATERAL",
      "op": "assert // INSUFFICIENT_COLLATERAL",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "tmp%5#0"
      ]
    },
    "5826": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "tmp%5#0",
        "amountLST#0 (copy)"
      ]
    },
    "5828": {
      "op": "-",
      "defined_out": [
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5829": {
      "op": "itxn_begin"
    },
    "5830": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "amountLST#0 (copy)"
      ]
    },
    "5832": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5834": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5836": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0"
      ]
    },
    "5838": {
      "op": "frame_dig 3",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "borrower#0"
      ]
    },
    "5840": {
      "op": "dup",
      "defined_out": [
        "borrower#0",
        "borrower#0 (copy)",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "remainLST#0",
        "borrower#0 (copy)",
        "borrower#0 (copy)"
      ]
    },
    "5841": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "borrower#0 (copy)"
      ]
    },
    "5843": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5845": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "4"
      ]
    },
    "5846": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5848": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "borrower#0",
        "loan#0",
        "remainLST#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "1000"
      ]
    },
    "5849": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0"
      ]
    },
    "5851": {
      "op": "itxn_submit"
    },
    "5852": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "5854": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "remainLST#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "remainLST#0",
        "val_as_bytes%0#0"
      ]
    },
    "5855": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "remainLST#0"
      ]
    },
    "5856": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "5857": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "borrower#0",
        "loan#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0"
      ]
    },
    "5858": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "borrower#0",
        "loan#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "5859": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "5860": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0"
      ]
    },
    "5861": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "amountLST#0 (copy)"
      ]
    },
    "5863": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "5864": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%2#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "val_as_bytes%2#0",
        "to_encode%0#0"
      ]
    },
    "5866": {
      "op": "itob",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "5867": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "5868": {
      "op": "pushbytes 0x03",
      "defined_out": [
        "0x03",
        "borrower#0",
        "loan#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%2#0",
        "0x03"
      ]
    },
    "5871": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%2#0",
        "loan#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "val_as_bytes%3#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "5872": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "5873": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%3#0",
        "loan#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "5874": {
      "op": "dig 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "encoded_tuple_buffer%3#0",
        "loan#0 (copy)"
      ]
    },
    "5876": {
      "error": "Index access is out of bounds",
      "op": "extract 73 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%3#0",
        "loan#0",
        "maybe_value%2#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%9#0"
      ]
    },
    "5879": {
      "op": "dig 6",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%9#0",
        "loan#0 (copy)"
      ]
    },
    "5881": {
      "error": "Index access is out of bounds",
      "op": "extract 81 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%3#0",
        "loan#0",
        "maybe_value%2#0",
        "tmp%10#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "borrower#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "5884": {
      "op": "uncover 6",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%9#0",
        "tmp%10#0",
        "borrower#0"
      ]
    },
    "5886": {
      "op": "uncover 6",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%9#0",
        "tmp%10#0",
        "borrower#0",
        "val_as_bytes%0#0"
      ]
    },
    "5888": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%6#0",
        "loan#0",
        "maybe_value%2#0",
        "tmp%10#0",
        "tmp%9#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "val_as_bytes%1#0",
        "maybe_value%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%9#0",
        "tmp%10#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "5889": {
      "op": "uncover 5",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "maybe_value%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%9#0",
        "tmp%10#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%1#0"
      ]
    },
    "5891": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%3#0",
        "encoded_tuple_buffer%7#0",
        "loan#0",
        "maybe_value%2#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "maybe_value%2#0",
        "encoded_tuple_buffer%3#0",
        "tmp%9#0",
        "tmp%10#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "5892": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "maybe_value%2#0",
        "tmp%9#0",
        "tmp%10#0",
        "encoded_tuple_buffer%7#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "5894": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%8#0",
        "loan#0",
        "maybe_value%2#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "maybe_value%2#0",
        "tmp%9#0",
        "tmp%10#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "5895": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "tmp%9#0",
        "tmp%10#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%2#0"
      ]
    },
    "5897": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%9#0",
        "loan#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "tmp%9#0",
        "tmp%10#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "5898": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "tmp%10#0",
        "encoded_tuple_buffer%9#0",
        "tmp%9#0"
      ]
    },
    "5900": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "encoded_tuple_buffer%10#0",
        "loan#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "tmp%10#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "5901": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "encoded_tuple_buffer%10#0",
        "tmp%10#0"
      ]
    },
    "5902": {
      "op": "concat",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "newRec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "newRec#0"
      ]
    },
    "5903": {
      "op": "frame_dig 4",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "newRec#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "newRec#0",
        "tmp%1#0"
      ]
    },
    "5905": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0",
        "tmp%1#0",
        "newRec#0"
      ]
    },
    "5906": {
      "op": "box_put",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "loan#0"
      ]
    },
    "5907": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "tmp%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "tmp%12#0"
      ]
    },
    "5910": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "tmp%12#0",
        "amountLST#0 (copy)"
      ]
    },
    "5912": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0"
      ]
    },
    "5915": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "borrower#0",
        "loan#0",
        "new_state_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "new_state_value%0#0"
      ]
    },
    "5918": {
      "op": "bytec 9 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "borrower#0",
        "loan#0",
        "new_state_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "new_state_value%0#0",
        "\"last_apr_bps\""
      ]
    },
    "5920": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "\"last_apr_bps\"",
        "new_state_value%0#0"
      ]
    },
    "5921": {
      "op": "app_global_put",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0"
      ]
    },
    "5922": {
      "retsub": true,
      "op": "retsub"
    },
    "5923": {
      "block": "withdrawCollateral_after_if_else@4",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "rec#0"
      ],
      "op": "dup",
      "defined_out": [
        "rec#0",
        "rec#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "rec#0",
        "rec#0 (copy)"
      ]
    },
    "5924": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "5927": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "rec#0",
        "collateralTokenId#1",
        "collateralTokenId#1 (copy)"
      ]
    },
    "5928": {
      "op": "cover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0",
        "collateralTokenId#1"
      ]
    },
    "5930": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0"
      ]
    },
    "5932": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "collateralTokenId#1",
        "rec#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "collateralTokenId#1",
        "rec#0",
        "40"
      ]
    },
    "5934": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralTokenId#1",
        "tmp%7#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "collateralTokenId#1",
        "tmp%7#1"
      ]
    },
    "5935": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralTokenId#1",
        "lstAppId#0 (copy)",
        "tmp%7#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "collateralTokenId#1",
        "tmp%7#1",
        "lstAppId#0 (copy)"
      ]
    },
    "5937": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "op": "callsub calculateCollateralValueUSD",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5940": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0",
        "currCollatUSD#0"
      ]
    },
    "5941": {
      "op": "frame_bury 1",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5943": {
      "op": "frame_dig 6",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtBase#0"
      ]
    },
    "5945": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.debtUSD",
      "op": "callsub debtUSD",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0"
      ]
    },
    "5948": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "debtUSDv#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0",
        "debtUSDv#0",
        "10000"
      ]
    },
    "5950": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0"
      ]
    },
    "5951": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0"
      ]
    },
    "5952": {
      "op": "bytec 20 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "5954": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "hReq#0",
        "lReq#0",
        "maybe_exists%2#0",
        "maybe_value%2#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%2#1",
        "maybe_exists%2#0"
      ]
    },
    "5955": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0",
        "hReq#0",
        "lReq#0",
        "maybe_value%2#1"
      ]
    },
    "5956": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5957": {
      "op": "dup",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5958": {
      "op": "frame_bury 2",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5960": {
      "op": "<=",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "requiredCollateralUSD#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "tmp%8#1"
      ]
    },
    "5961": {
      "op": "bz withdrawCollateral_after_if_else@6",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0"
      ]
    },
    "5964": {
      "op": "intc_0 // 0",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "debtBase#0",
        "maxSafe#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "5965": {
      "op": "b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7"
    },
    "5968": {
      "block": "withdrawCollateral_after_if_else@6",
      "stack_in": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "currCollatUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0"
      ]
    },
    "5970": {
      "op": "frame_dig 2",
      "defined_out": [
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "currCollatUSD#0",
        "requiredCollateralUSD#0"
      ]
    },
    "5972": {
      "op": "-",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5973": {
      "op": "itxn_begin"
    },
    "5974": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "5976": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5978": {
      "op": "frame_dig -1",
      "defined_out": [
        "currCollatUSD#0",
        "lstAppId#0 (copy)",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "lstAppId#0 (copy)"
      ]
    },
    "5980": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5982": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "appl"
      ]
    },
    "5984": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5986": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "1000"
      ]
    },
    "5987": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0"
      ]
    },
    "5989": {
      "op": "itxn_submit"
    },
    "5990": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0"
      ]
    },
    "5992": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5993": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "5996": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%9#0",
        "awst_tmp%0#0"
      ]
    },
    "5997": {
      "op": "extract 0 4",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "6000": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%9#0",
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "6001": {
      "op": "==",
      "defined_out": [
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%11#1",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%9#0",
        "tmp%11#1"
      ]
    },
    "6002": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "tmp%9#0"
      ]
    },
    "6003": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6004": {
      "op": "itxn_begin"
    },
    "6005": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "6007": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6009": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "lstAppId#0 (copy)"
      ]
    },
    "6011": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6013": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "appl"
      ]
    },
    "6015": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6017": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "1000"
      ]
    },
    "6018": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0"
      ]
    },
    "6020": {
      "op": "itxn_submit"
    },
    "6021": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0"
      ]
    },
    "6023": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6024": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "awst_tmp%1#0",
        "tmp%13#0"
      ]
    },
    "6027": {
      "op": "swap",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%13#0",
        "awst_tmp%1#0"
      ]
    },
    "6028": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "6031": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%13#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "6032": {
      "op": "==",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "6033": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "tmp%13#0"
      ]
    },
    "6034": {
      "op": "btoi",
      "defined_out": [
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0"
      ]
    },
    "6035": {
      "op": "bytec 8 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\""
      ]
    },
    "6037": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"accepted_collaterals\"",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#1"
      ]
    },
    "6039": {
      "op": "concat",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%0#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%0#0"
      ]
    },
    "6040": {
      "op": "box_get",
      "defined_out": [
        "ac#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "maybe_exists%0#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0",
        "maybe_exists%0#0"
      ]
    },
    "6041": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "ac#0"
      ]
    },
    "6042": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "tmp%18#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "tmp%18#0"
      ]
    },
    "6045": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "removableUSD#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0"
      ]
    },
    "6048": {
      "op": "uncover 3",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0"
      ]
    },
    "6050": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUSD#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "removableUSD#0",
        "1000000"
      ]
    },
    "6052": {
      "op": "mulw",
      "defined_out": [
        "basePrice#0",
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "hU#0",
        "lU#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "basePrice#0",
        "hU#0",
        "lU#0"
      ]
    },
    "6053": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "hU#0",
        "lU#0",
        "basePrice#0"
      ]
    },
    "6055": {
      "op": "divw",
      "defined_out": [
        "circulatingLST#0",
        "collateralTokenId#1",
        "currCollatUSD#0",
        "removableUnderlying#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "circulatingLST#0",
        "totalDeposits#0",
        "removableUnderlying#0"
      ]
    },
    "6056": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "totalDeposits#0",
        "removableUnderlying#0",
        "circulatingLST#0"
      ]
    },
    "6058": {
      "op": "mulw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "hL#0",
        "lL#0",
        "requiredCollateralUSD#0",
        "totalDeposits#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "totalDeposits#0",
        "hL#0",
        "lL#0"
      ]
    },
    "6059": {
      "op": "uncover 2",
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "hL#0",
        "lL#0",
        "totalDeposits#0"
      ]
    },
    "6061": {
      "op": "divw",
      "defined_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "maxSafe#0",
        "requiredCollateralUSD#0"
      ],
      "stack_out": [
        "collateralTokenId#1",
        "currCollatUSD#0",
        "requiredCollateralUSD#0",
        "borrower#0",
        "tmp%1#0",
        "loan#0",
        "debtBase#0",
        "maxSafe#0"
      ]
    },
    "6062": {
      "op": "b withdrawCollateral_after_inlined_smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.maxWithdrawableCollateralLSTLocal@7"
    },
    "6065": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateASA",
      "params": {
        "debtor#0": "bytes",
        "axferTxn#0": "uint64"
      },
      "block": "liquidateASA",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "6068": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "6069": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "6071": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6072": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "6074": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6075": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6077": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "6078": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "_interestSlice#0"
      ]
    },
    "6081": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "6082": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "6083": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "record#0"
      ]
    },
    "6084": {
      "op": "dup",
      "defined_out": [
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "6085": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "6087": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "6088": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "6089": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "6091": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "record#0"
      ]
    },
    "6094": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "6095": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "record#0"
      ]
    },
    "6097": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "6099": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0 (copy)"
      ]
    },
    "6100": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "6102": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "6104": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6107": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0"
      ]
    },
    "6108": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6110": {
      "op": "bytec 8 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "6112": {
      "op": "dig 1",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "6114": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#1"
      ]
    },
    "6115": {
      "op": "box_get",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "6116": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%0#0"
      ]
    },
    "6118": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6119": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "oraclePrice#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "oraclePrice#0"
      ]
    },
    "6122": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0"
      ]
    },
    "6123": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "1"
      ]
    },
    "6124": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralUSD#0"
      ]
    },
    "6125": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0"
      ]
    },
    "6126": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "CR#0"
      ]
    },
    "6127": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "CR#0",
        "0"
      ]
    },
    "6128": {
      "op": "bytec 11 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "CR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "6130": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "CR#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6131": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "CR#0",
        "maybe_value%2#0"
      ]
    },
    "6132": {
      "op": "<=",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%3#0"
      ]
    },
    "6133": {
      "error": "loan is not liquidatable",
      "op": "assert // loan is not liquidatable",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6134": {
      "op": "frame_dig -1",
      "defined_out": [
        "axferTxn#0 (copy)",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "axferTxn#0 (copy)"
      ]
    },
    "6136": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%4#0"
      ]
    },
    "6138": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "6140": {
      "op": "==",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%6#0"
      ]
    },
    "6141": {
      "op": "bz liquidateASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6144": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "axferTxn#0 (copy)"
      ]
    },
    "6146": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0"
      ]
    },
    "6148": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "0"
      ]
    },
    "6149": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "6150": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "record#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "6151": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "maybe_value%3#0"
      ]
    },
    "6152": {
      "op": "btoi",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "6153": {
      "op": "==",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%9#0"
      ]
    },
    "6154": {
      "op": "bz liquidateASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6157": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "axferTxn#0 (copy)"
      ]
    },
    "6159": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%10#0"
      ]
    },
    "6161": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%10#0",
        "debtAmount#0"
      ]
    },
    "6163": {
      "op": "==",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%11#0"
      ]
    },
    "6164": {
      "op": "bz liquidateASA_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6167": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "and_result%0#0"
      ]
    },
    "6168": {
      "block": "liquidateASA_bool_merge@5",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6169": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%0#0"
      ]
    },
    "6171": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "{box_del}"
      ]
    },
    "6172": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6173": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "0"
      ]
    },
    "6174": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "6176": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "6177": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "maybe_value%4#0"
      ]
    },
    "6178": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "maybe_value%4#0",
        "1"
      ]
    },
    "6179": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "new_state_value%0#0"
      ]
    },
    "6180": {
      "op": "bytec 5 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "6182": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "6183": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6184": {
      "op": "itxn_begin"
    },
    "6185": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6187": {
      "op": "frame_dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0"
      ]
    },
    "6189": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "32"
      ]
    },
    "6191": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6192": {
      "op": "frame_dig 1",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "6194": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "6195": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "6197": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6199": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6201": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "6203": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "6204": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "6206": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "1000"
      ]
    },
    "6207": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "6209": {
      "op": "itxn_submit"
    },
    "6210": {
      "op": "frame_dig 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6212": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "6213": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6216": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0"
      ]
    },
    "6219": {
      "op": "bytec 9 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "6221": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "6222": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6223": {
      "retsub": true,
      "op": "retsub"
    },
    "6224": {
      "block": "liquidateASA_bool_false@4",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "and_result%0#0"
      ]
    },
    "6225": {
      "op": "b liquidateASA_bool_merge@5"
    },
    "6228": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.liquidateAlgo",
      "params": {
        "debtor#0": "bytes",
        "paymentTxn#0": "uint64"
      },
      "block": "liquidateAlgo",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "6231": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "6232": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "debtor#0 (copy)"
      ]
    },
    "6234": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6235": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "6237": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6238": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6240": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "6241": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "_interestSlice#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "_interestSlice#0"
      ]
    },
    "6244": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "6245": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "6246": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "record#0"
      ]
    },
    "6247": {
      "op": "dup",
      "defined_out": [
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "6248": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "record#0",
        "record#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "6250": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "6251": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "record#0",
        "collateralAmount#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "6252": {
      "op": "uncover 2",
      "defined_out": [
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "6254": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "record#0"
      ]
    },
    "6257": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "6258": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "record#0"
      ]
    },
    "6260": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "6262": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0 (copy)"
      ]
    },
    "6263": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0"
      ]
    },
    "6265": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "record#0"
      ]
    },
    "6267": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6270": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0"
      ]
    },
    "6271": {
      "op": "cover 3",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6273": {
      "op": "bytec 8 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\""
      ]
    },
    "6275": {
      "op": "dig 1",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0 (copy)",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "6277": {
      "op": "concat",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "tmp%0#1"
      ]
    },
    "6278": {
      "op": "box_get",
      "defined_out": [
        "acceptedCollateral#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "acceptedCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "6279": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "maybe_exists%0#0"
      ]
    },
    "6281": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6282": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "oraclePrice#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralAmount#0",
        "oraclePrice#0"
      ]
    },
    "6285": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0"
      ]
    },
    "6286": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "h#0",
        "l#0",
        "1"
      ]
    },
    "6287": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "collateralUSD#0"
      ]
    },
    "6288": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralUSD#0",
        "debtAmount#0"
      ]
    },
    "6289": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "CR#0"
      ]
    },
    "6290": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "CR#0",
        "0"
      ]
    },
    "6291": {
      "op": "bytec 11 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "CR#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "6293": {
      "op": "app_global_get_ex",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "CR#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "6294": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "CR#0",
        "maybe_value%2#0"
      ]
    },
    "6295": {
      "op": "<=",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%3#0"
      ]
    },
    "6296": {
      "error": "loan is not liquidatable",
      "op": "assert // loan is not liquidatable",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6297": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "paymentTxn#0 (copy)",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "6299": {
      "op": "gtxns Receiver",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%4#0"
      ]
    },
    "6301": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "6303": {
      "op": "==",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%6#0"
      ]
    },
    "6304": {
      "op": "bz liquidateAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6307": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "paymentTxn#0 (copy)"
      ]
    },
    "6309": {
      "op": "gtxns Amount",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0"
      ]
    },
    "6311": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%7#0",
        "debtAmount#0"
      ]
    },
    "6313": {
      "op": "==",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%8#0"
      ]
    },
    "6314": {
      "op": "bz liquidateAlgo_bool_false@3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6317": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "collateralAmount#0",
        "collateralTokenId#0",
        "debtAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "and_result%0#0"
      ]
    },
    "6318": {
      "block": "liquidateAlgo_bool_merge@4",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6319": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "tmp%0#0"
      ]
    },
    "6321": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "{box_del}"
      ]
    },
    "6322": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6323": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "0"
      ]
    },
    "6324": {
      "op": "bytec 5 // \"active_loan_records\"",
      "defined_out": [
        "\"active_loan_records\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "0",
        "\"active_loan_records\""
      ]
    },
    "6326": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "6327": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "maybe_value%3#0"
      ]
    },
    "6328": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "6329": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "new_state_value%0#0"
      ]
    },
    "6330": {
      "op": "bytec 5 // \"active_loan_records\"",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "new_state_value%0#0",
        "\"active_loan_records\""
      ]
    },
    "6332": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "\"active_loan_records\"",
        "new_state_value%0#0"
      ]
    },
    "6333": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6334": {
      "op": "itxn_begin"
    },
    "6335": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6337": {
      "op": "frame_dig 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0"
      ]
    },
    "6339": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "record#0",
        "32"
      ]
    },
    "6341": {
      "op": "extract_uint64",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6342": {
      "op": "frame_dig 1",
      "defined_out": [
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0"
      ]
    },
    "6344": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)",
        "collateralAmount#0 (copy)"
      ]
    },
    "6345": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "6347": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "6349": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "6351": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "6353": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "4"
      ]
    },
    "6354": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "6356": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "collateralAmount#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "1000"
      ]
    },
    "6357": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "6359": {
      "op": "itxn_submit"
    },
    "6360": {
      "op": "frame_dig 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6362": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "collateralTokenId#0",
        "collateralAmount#0"
      ]
    },
    "6363": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.reduceCollateralTotal",
      "op": "callsub reduceCollateralTotal",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6366": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.current_apr_bps",
      "op": "callsub current_apr_bps",
      "defined_out": [
        "collateralAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0"
      ]
    },
    "6369": {
      "op": "bytec 9 // \"last_apr_bps\"",
      "defined_out": [
        "\"last_apr_bps\"",
        "collateralAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0",
        "record#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "new_state_value%1#0",
        "\"last_apr_bps\""
      ]
    },
    "6371": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "\"last_apr_bps\"",
        "new_state_value%1#0"
      ]
    },
    "6372": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ]
    },
    "6373": {
      "retsub": true,
      "op": "retsub"
    },
    "6374": {
      "block": "liquidateAlgo_bool_false@3",
      "stack_in": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "collateralAmount#0",
        "record#0",
        "debtAmount#0",
        "collateralTokenId#0",
        "and_result%0#0"
      ]
    },
    "6375": {
      "op": "b liquidateAlgo_bool_merge@4"
    },
    "6378": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getLoanStatus",
      "params": {
        "borrower#0": "bytes"
      },
      "block": "getLoanStatus",
      "stack_in": [],
      "op": "proto 1 7"
    },
    "6381": {
      "op": "bytec_2 // \"loan_record\"",
      "defined_out": [
        "\"loan_record\""
      ],
      "stack_out": [
        "\"loan_record\""
      ]
    },
    "6382": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ],
      "stack_out": [
        "\"loan_record\"",
        "borrower#0 (copy)"
      ]
    },
    "6384": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6385": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "6386": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6387": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "6389": {
      "error": "Loan record does not exist",
      "op": "assert // Loan record does not exist",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6390": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "record#0"
      ],
      "stack_out": [
        "record#0",
        "maybe_exists%1#0"
      ]
    },
    "6391": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "record#0"
      ]
    },
    "6392": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.accrueMarket",
      "op": "callsub accrueMarket",
      "defined_out": [
        "record#0",
        "{accrueMarket}"
      ],
      "stack_out": [
        "record#0",
        "{accrueMarket}"
      ]
    },
    "6395": {
      "op": "pop",
      "stack_out": [
        "record#0"
      ]
    },
    "6396": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.currentDebtFromSnapshot",
      "op": "callsub currentDebtFromSnapshot",
      "defined_out": [
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "debt#0",
        "record#0"
      ]
    },
    "6399": {
      "op": "dup",
      "defined_out": [
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ]
    },
    "6400": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "debt#0",
        "record#0",
        "record#0 (copy)"
      ],
      "stack_out": [
        "debt#0",
        "record#0",
        "record#0 (copy)",
        "40"
      ]
    },
    "6402": {
      "op": "extract_uint64",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "debt#0",
        "record#0",
        "collateralAmount#0"
      ]
    },
    "6403": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "collateralAmount#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "0"
      ]
    },
    "6404": {
      "op": "bytec 11 // \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "0",
        "collateralAmount#0",
        "debt#0",
        "record#0"
      ],
      "stack_out": [
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "0",
        "\"liq_threshold_bps\""
      ]
    },
    "6406": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "maybe_exists%2#0",
        "record#0"
      ],
      "stack_out": [
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "liqBps#0",
        "maybe_exists%2#0"
      ]
    },
    "6407": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "debt#0",
        "record#0",
        "collateralAmount#0",
        "liqBps#0"
      ]
    },
    "6408": {
      "op": "uncover 2",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "record#0"
      ]
    },
    "6410": {
      "error": "Index access is out of bounds",
      "op": "extract 32 8 // on error: Index access is out of bounds",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "tmp%3#0"
      ]
    },
    "6413": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "liqBps#0",
        "oraclePrice#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "oraclePrice#0"
      ]
    },
    "6416": {
      "op": "dig 2",
      "defined_out": [
        "collateralAmount#0",
        "collateralAmount#0 (copy)",
        "debt#0",
        "liqBps#0",
        "oraclePrice#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "oraclePrice#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "6418": {
      "op": "mulw",
      "defined_out": [
        "collateralAmount#0",
        "debt#0",
        "hi#0",
        "liqBps#0",
        "lo#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "hi#0",
        "lo#0"
      ]
    },
    "6419": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "collateralAmount#0",
        "debt#0",
        "hi#0",
        "liqBps#0",
        "lo#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "hi#0",
        "lo#0",
        "1"
      ]
    },
    "6420": {
      "op": "divw",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0"
      ]
    },
    "6421": {
      "op": "dup",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)"
      ]
    },
    "6422": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "collateralValueUSD#0 (copy)",
        "10000"
      ]
    },
    "6424": {
      "op": "*",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%4#0"
      ]
    },
    "6425": {
      "op": "dig 4",
      "defined_out": [
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "debt#0 (copy)",
        "liqBps#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "tmp%4#0",
        "debt#0 (copy)"
      ]
    },
    "6427": {
      "op": "/",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0"
      ]
    },
    "6428": {
      "op": "dup",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)"
      ]
    },
    "6429": {
      "op": "dig 3",
      "defined_out": [
        "CR#0",
        "CR#0 (copy)",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "liqBps#0",
        "liqBps#0 (copy)"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "6431": {
      "op": "<",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0"
      ]
    },
    "6432": {
      "op": "dig 1",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)"
      ]
    },
    "6434": {
      "op": "dig 4",
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "CR#0 (copy)",
        "liqBps#0 (copy)"
      ]
    },
    "6436": {
      "op": ">",
      "defined_out": [
        "CR#0",
        "collateralAmount#0",
        "collateralValueUSD#0",
        "debt#0",
        "eligibleForBuyout#0",
        "eligibleForLiquidation#0",
        "liqBps#0"
      ],
      "stack_out": [
        "debt#0",
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "6437": {
      "op": "uncover 6",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "collateralValueUSD#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0"
      ]
    },
    "6439": {
      "op": "uncover 4",
      "stack_out": [
        "collateralAmount#0",
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0"
      ]
    },
    "6441": {
      "op": "uncover 6",
      "stack_out": [
        "liqBps#0",
        "CR#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0"
      ]
    },
    "6443": {
      "op": "uncover 5",
      "stack_out": [
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0"
      ]
    },
    "6445": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0"
      ]
    },
    "6447": {
      "op": "uncover 6",
      "stack_out": [
        "eligibleForBuyout#0",
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0"
      ]
    },
    "6449": {
      "op": "uncover 6",
      "stack_out": [
        "debt#0",
        "collateralValueUSD#0",
        "collateralAmount#0",
        "CR#0",
        "liqBps#0",
        "eligibleForLiquidation#0",
        "eligibleForBuyout#0"
      ]
    },
    "6451": {
      "retsub": true,
      "op": "retsub"
    },
    "6452": {
      "subroutine": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.calculateCollateralValueUSD",
      "params": {
        "collateralTokenId#0": "bytes",
        "collateralAmount#0": "uint64",
        "lstApp#0": "uint64"
      },
      "block": "calculateCollateralValueUSD",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "6455": {
      "op": "itxn_begin"
    },
    "6456": {
      "op": "bytec 16 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)"
      ],
      "stack_out": [
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "6458": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "6460": {
      "op": "frame_dig -1",
      "defined_out": [
        "lstApp#0 (copy)"
      ],
      "stack_out": [
        "lstApp#0 (copy)"
      ]
    },
    "6462": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "6464": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "6466": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "6468": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "6469": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "6471": {
      "op": "itxn_submit"
    },
    "6472": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "6474": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6475": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "6478": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "6479": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "6482": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "6483": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "6484": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6485": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0"
      ]
    },
    "6486": {
      "op": "itxn_begin"
    },
    "6487": {
      "op": "bytec 17 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "6489": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "circulatingExternalLST#0"
      ]
    },
    "6491": {
      "op": "frame_dig -1",
      "stack_out": [
        "circulatingExternalLST#0",
        "lstApp#0 (copy)"
      ]
    },
    "6493": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "circulatingExternalLST#0"
      ]
    },
    "6495": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "6497": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "circulatingExternalLST#0"
      ]
    },
    "6499": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "circulatingExternalLST#0",
        "1000"
      ]
    },
    "6500": {
      "op": "itxn_field Fee",
      "stack_out": [
        "circulatingExternalLST#0"
      ]
    },
    "6502": {
      "op": "itxn_submit"
    },
    "6503": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "6505": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6506": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "6509": {
      "op": "swap",
      "stack_out": [
        "circulatingExternalLST#0",
        "tmp%4#0",
        "awst_tmp%1#0"
      ]
    },
    "6510": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "6513": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "circulatingExternalLST#0",
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "6514": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "6515": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "circulatingExternalLST#0",
        "tmp%4#0"
      ]
    },
    "6516": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "6517": {
      "op": "frame_dig -2",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateralAmount#0 (copy)",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "collateralAmount#0 (copy)"
      ]
    },
    "6519": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0"
      ],
      "stack_out": [
        "circulatingExternalLST#0",
        "hC#0",
        "lC#0"
      ]
    },
    "6520": {
      "op": "uncover 2",
      "stack_out": [
        "hC#0",
        "lC#0",
        "circulatingExternalLST#0"
      ]
    },
    "6522": {
      "op": "divw",
      "defined_out": [
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0"
      ]
    },
    "6523": {
      "op": "bytec 8 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "\"accepted_collaterals\""
      ]
    },
    "6525": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "\"accepted_collaterals\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "6527": {
      "op": "concat",
      "stack_out": [
        "underlyingCollateral#0",
        "tmp%0#0"
      ]
    },
    "6528": {
      "op": "box_get",
      "defined_out": [
        "lstCollateral#0",
        "maybe_exists%0#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "lstCollateral#0",
        "maybe_exists%0#0"
      ]
    },
    "6529": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "underlyingCollateral#0",
        "lstCollateral#0"
      ]
    },
    "6530": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "baseTokenId#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "baseTokenId#0"
      ]
    },
    "6533": {
      "callsub": "smart_contracts/orbital_lending/OrbitalLending.algo.ts::OrbitalLending.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "baseTokenPrice#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "underlyingCollateral#0",
        "baseTokenPrice#0"
      ]
    },
    "6536": {
      "op": "mulw",
      "defined_out": [
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "hU#0",
        "lU#0"
      ]
    },
    "6537": {
      "op": "intc 5 // 1000000",
      "defined_out": [
        "1000000",
        "hU#0",
        "lU#0"
      ],
      "stack_out": [
        "hU#0",
        "lU#0",
        "1000000"
      ]
    },
    "6539": {
      "op": "divw",
      "defined_out": [
        "collateralUSD#0"
      ],
      "stack_out": [
        "collateralUSD#0"
      ]
    },
    "6540": {
      "retsub": true,
      "op": "retsub"
    }
  }
}